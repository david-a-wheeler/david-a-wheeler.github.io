<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
	<META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset=windows-1252">
	<TITLE>Fully Countering Trusting Trust through Diverse Double-Compiling</TITLE>
	<META NAME="GENERATOR" CONTENT="OpenOffice.org 3.2  (Win32)">
	<META NAME="AUTHOR" CONTENT="David A. Wheeler">
	<META NAME="CREATED" CONTENT="20070402;9480700">
	<META NAME="CHANGEDBY" CONTENT="David A. Wheeler">
	<META NAME="CHANGED" CONTENT="20091207;11433300">
	<META NAME="CLASSIFICATION" CONTENT="Computer security, computer science, software engineering, software assurance">
	<META NAME="DESCRIPTION" CONTENT="Describes how to counter the &quot;Trusting Trust&quot; attack, as described by Ken Thompson, using a technique called Diverse Double-Compiling (DDC).
">
	<META NAME="KEYWORDS" CONTENT="trusting trust, diverse double-compiling, DDC, Reflections, Thompson, compilers, compiler, subversion, subverted, security, software assurance, malicious, corrupted, Multics, Karger, Schell, GCC, tcc, diversity, diverse, countermeasure, alternative, counter, Trojan horse">
	<META NAME="Author" CONTENT="David A. Wheeler">
	<STYLE TYPE="text/css">
	<!--
		P { margin-top: 0.17in; margin-bottom: 0in; background: transparent; line-height: 200%; text-align: justify; widows: 2; orphans: 2; page-break-before: auto; page-break-after: auto }
		P.western { font-size: 11pt }
		H1 { margin-top: 0in; margin-bottom: 0.67in; background: transparent; text-align: center; page-break-before: always }
		H1.western { font-family: "Arial", sans-serif; font-size: 16pt }
		H1.cjk { font-family: "MS Mincho"; font-size: 16pt }
		H1.ctl { font-family: "Tahoma"; font-size: 16pt }
		H2 { margin-bottom: 0.08in; page-break-before: auto }
		H2.western { font-family: "Arial", sans-serif; font-size: 14pt; font-style: normal }
		H2.cjk { font-family: "MS Mincho"; font-size: 14pt; font-style: italic }
		H2.ctl { font-size: 14pt; font-style: italic }
		H3 { margin-bottom: 0.08in; page-break-before: auto }
		H3.western { font-family: "Arial", sans-serif }
		H3.cjk { font-family: "MS Mincho" }
		H4 { margin-top: 0.17in; margin-bottom: 0in; background: transparent; line-height: 200%; text-align: justify; widows: 2; orphans: 2; page-break-before: auto }
		H4.western { font-family: "Times New Roman", serif; font-size: 14pt; font-style: italic }
		H4.cjk { font-family: "Arial Unicode MS"; font-size: 10pt; font-style: italic }
		H4.ctl { font-family: "Tahoma"; font-size: 10pt; font-style: italic }
		P.numbering-1-western { margin-top: 0in; font-size: 11pt }
		P.numbering-1-cjk { margin-top: 0in }
		P.numbering-1-ctl { margin-top: 0in }
		P.list-1-western { margin-top: 0in; font-size: 11pt }
		P.list-1-cjk { margin-top: 0in }
		P.list-1-ctl { margin-top: 0in }
		TD P { margin-bottom: 0in; page-break-before: auto }
		TD P.western { font-size: 11pt }
		TH P { margin-bottom: 0in; background: #c0c0c0; page-break-before: auto }
		TH P.western { font-size: 11pt }
		P.frame-contents-western { font-size: 11pt }
		P.sdfootnote { text-indent: 0.2in; margin-top: 0in; background: transparent; font-size: 10pt; line-height: 100%; text-align: left; widows: 0; orphans: 0; page-break-after: auto }
		BLOCKQUOTE { margin-left: 0.5in; margin-right: 0.5in; margin-bottom: 0.17in; page-break-before: auto }
		BLOCKQUOTE.western { font-size: 11pt }
		PRE { page-break-before: auto }
		PRE.western { font-size: 9pt }
		H1.preliminary-heading-western { font-family: "Arial", sans-serif; font-size: 16pt; page-break-before: always; page-break-after: auto }
		H1.preliminary-heading-cjk { font-family: "MS Mincho"; font-size: 16pt; page-break-before: always; page-break-after: auto }
		H1.preliminary-heading-ctl { font-family: "Tahoma"; font-size: 16pt; page-break-before: always; page-break-after: auto }
		P.text-body-single-spaced-western { font-size: 11pt; line-height: 100% }
		P.text-body-single-spaced-cjk { line-height: 100% }
		P.text-body-single-spaced-ctl { line-height: 100% }
		H1.heading-1-title-page-western { font-family: "Times New Roman", serif; font-size: 12pt; page-break-before: always; page-break-after: auto }
		H1.heading-1-title-page-cjk { font-family: "MS Mincho"; font-size: 16pt; page-break-before: always; page-break-after: auto }
		H1.heading-1-title-page-ctl { font-family: "Tahoma"; font-size: 16pt; page-break-before: always; page-break-after: auto }
		H1.heading-1-not-in-toc-western { font-family: "Arial", sans-serif; font-size: 16pt }
		H1.heading-1-not-in-toc-cjk { font-family: "MS Mincho"; font-size: 16pt }
		H1.heading-1-not-in-toc-ctl { font-family: "Tahoma"; font-size: 16pt }
		P.abbreviation-western { margin-top: 0in; margin-bottom: 0.17in; font-size: 11pt; line-height: 100% }
		P.abbreviation-cjk { margin-top: 0in; margin-bottom: 0.17in; line-height: 100% }
		P.abbreviation-ctl { margin-top: 0in; margin-bottom: 0.17in; line-height: 100% }
		H1.code-western { margin-bottom: 0in; font-family: "Courier New", monospace; font-size: 7pt; text-align: left; page-break-before: auto; page-break-after: auto }
		H1.code-cjk { margin-bottom: 0in; font-family: "MS Mincho"; font-size: 16pt; text-align: left; page-break-before: auto; page-break-after: auto }
		H1.code-ctl { margin-bottom: 0in; font-family: "Tahoma"; font-size: 16pt; text-align: left; page-break-before: auto; page-break-after: auto }
		PRE.preformatted-text-indent-western { margin-left: 0.2in; font-size: 9pt }
		PRE.preformatted-text-indent-cjk { margin-left: 0.2in }
		PRE.preformatted-text-indent-ctl { margin-left: 0.2in }
		A:link { background: transparent; text-decoration: none }
		A:visited { so-language: en-US; text-decoration: none }
		A.sdfootnoteanc { font-size: 57% }
	-->
	</STYLE>
</head>
<body lang="en-US" DIR="LTR">
<H1 CLASS="heading-1-title-page-western" STYLE="margin-left: 0.51in; margin-right: 0.59in; margin-bottom: 0in; font-weight: normal; page-break-before: auto; page-break-after: auto">
Fully Countering Trusting Trust through Diverse Double-Compiling</H1>
<P ALIGN=LEFT STYLE="margin-right: 0.59in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<BR>
</p>
<P ALIGN=JUSTIFY STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
A dissertation submitted in partial fulfillment of the requirements
for the degree of Doctor of Philosophy at George Mason University</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<BR>
</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<BR>
</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<BR>
</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<BR>
</p>
<P ALIGN=CENTER STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
By</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<BR>
</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<BR>
</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<BR>
</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<BR>
</p>
<P ALIGN=CENTER STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
David A. Wheeler</p>
<P ALIGN=CENTER STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
Master of Science</p>
<P ALIGN=CENTER STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
George Mason University, 1994</p>
<P ALIGN=CENTER STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
Bachelor of Science</p>
<P ALIGN=CENTER STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
George Mason University, 1988</p>
<P ALIGN=CENTER STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<BR>
</p>
<P ALIGN=CENTER STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<BR>
</p>
<P ALIGN=CENTER STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<BR>
</p>
<P ALIGN=CENTER STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<BR>
</p>
<P ALIGN=CENTER STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
Co-Directors: Dr. Daniel A. Menasc&eacute; and Dr. Ravi Sandhu,
Professors</p>
<P ALIGN=CENTER STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
The Volgenau School of Information Technology &amp; Engineering</p>
<P ALIGN=CENTER STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<BR>
</p>
<P ALIGN=CENTER STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<BR>
</p>
<P ALIGN=CENTER STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<BR>
</p>
<P ALIGN=CENTER STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<BR>
</p>
<P ALIGN=CENTER STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
Fall Semester 2009</p>
<P ALIGN=CENTER STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
George Mason University</p>
<P ALIGN=CENTER STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
Fairfax, VA</p>
<P ALIGN=CENTER STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<BR>
</p>
<P ALIGN=CENTER STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<BR>
</p>
<DIV ID="Section1" DIR="LTR" STYLE="background: transparent">
	<P ALIGN=CENTER STYLE="margin-top: 0.05in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
</p>
</DIV>
<H1 CLASS="preliminary-heading-western"><BR><BR>
</H1>
<P STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<BR>
</p>
<P STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<BR>
</p>
<P STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<BR>
</p>
<P STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<BR>
</p>
<P STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<BR>
</p>
<P STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<BR>
</p>
<P STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<BR>
</p>
<P ALIGN=CENTER STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<FONT SIZE=2 STYLE="font-size: 11pt">Copyright <FONT FACE="Times New Roman, serif">&copy;</FONT>
2009 <A HREF="http://www.dwheeler.com/">David A. Wheeler</A></FONT></p>
<P ALIGN=CENTER STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<BR>
</p>
<P ALIGN=CENTER STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<FONT SIZE=2 STYLE="font-size: 11pt">You may use and redistribute
this work under the</FONT></p>
<P ALIGN=CENTER STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<A HREF="http://creativecommons.org/licenses/by-sa/3.0/us/"><FONT SIZE=2 STYLE="font-size: 11pt">Creative
Commons Attribution-Share Alike (CC-BY-SA) 3.0 United States License</FONT></A><FONT SIZE=2 STYLE="font-size: 11pt">.</FONT></p>
<P ALIGN=CENTER STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<FONT SIZE=2 STYLE="font-size: 11pt">You are free to Share (to copy,
distribute, display, and perform the work)</FONT></p>
<P ALIGN=CENTER STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<FONT SIZE=2 STYLE="font-size: 11pt">and to Remix (to make derivative
works), under the following conditions:</FONT></p>
<P ALIGN=CENTER STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<FONT SIZE=2 STYLE="font-size: 11pt">(1) Attribution.  You must
attribute the work in the manner specified by the author or licensor</FONT></p>
<OL>
	<P ALIGN=CENTER STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<FONT SIZE=2 STYLE="font-size: 11pt">(but not in any way that
	suggests that they endorse you or your use of the work).</FONT></p>
</OL>
<P ALIGN=CENTER STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<FONT SIZE=2 STYLE="font-size: 11pt">(2) Share Alike.  If you alter,
transform, or build upon this work, you may distribute the</FONT></p>
<OL>
	<OL START=2>
		<P ALIGN=CENTER STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
		<FONT SIZE=2 STYLE="font-size: 11pt">resulting work only under the
		same, similar or a compatible license.</FONT></p>
	</OL>
</OL>
<P ALIGN=CENTER STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<BR>
</p>
<P ALIGN=CENTER STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<FONT SIZE=2 STYLE="font-size: 11pt">Alternatively, permission is
also granted to copy, distribute and/or modify this document</FONT></p>
<P ALIGN=CENTER STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<FONT SIZE=2 STYLE="font-size: 11pt">under the terms of the </FONT><A HREF="../%20http://www.gnu.org/licenses/fdl.html"><FONT SIZE=2 STYLE="font-size: 11pt">GNU
Free Documentation License, Version 1.2</FONT></A></p>
<P ALIGN=CENTER STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<FONT SIZE=2 STYLE="font-size: 11pt">or any later version published
by the </FONT><A HREF="http://www.fsf.org/"><FONT SIZE=2 STYLE="font-size: 11pt">Free
Software Foundation</FONT></A><FONT SIZE=2 STYLE="font-size: 11pt">.</FONT></p>
<P ALIGN=CENTER STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<BR>
</p>
<P ALIGN=CENTER STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<FONT SIZE=2 STYLE="font-size: 11pt">As a third alternative,
permission is also granted to copy, distribute and/or modify this
document under the terms of the GNU General Public License (GPL)
version 2</FONT></p>
<P ALIGN=CENTER STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<FONT SIZE=2 STYLE="font-size: 11pt">or any later version published
by the </FONT><A HREF="http://www.fsf.org/"><FONT SIZE=2 STYLE="font-size: 11pt">Free
Software Foundation</FONT></A><FONT SIZE=2 STYLE="font-size: 11pt">.</FONT></p>
<P ALIGN=CENTER STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<BR>
</p>
<P ALIGN=CENTER STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<BR>
</p>
<P ALIGN=CENTER STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<FONT SIZE=2 STYLE="font-size: 11pt">All trademarks, service marks,
logos, and company names<BR>mentioned in this work are the property
of their respective owners.</FONT></p>
<H1 CLASS="preliminary-heading-western">Dedication</H1>
<P STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
This is dedicated to my wife and children, who sacrificed many days
so I could perform this work, to my extended family, and to the
memory of my former mentors Dennis W. Fife and Donald Macleay, who
always believed in me.</p>
<P STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<BR>
</p>
<P STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
Soli Deo gloria&mdash;Glory to God alone.</p>
<H1 CLASS="preliminary-heading-western">Acknowledgments</H1>
<P STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
I would like to thank my PhD committee members and former members Dr.
Daniel A. Menasc&eacute;, Dr. Ravi Sandhu, Dr. Paul Ammann, Dr. Jeff
Offutt, Dr. Yutao Zhong, and Dr. David Rine, for their helpful
comments.</p>
<P STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<BR>
</p>
<P STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
The Institute for Defense Analyses (IDA) provided a great deal of
help.  Dr. Roger Mason and the Honorable Priscilla Guthrie, former
directors of IDA&rsquo;s Information Technology and Systems Division
(ITSD), partly supported this work through IDA&rsquo;s Central
Research Program.  Dr. Margaret E. Myers, current IDA ITSD director,
approved its final release.  I am very grateful to my IDA co-workers
(alphabetically by last name) Dr. Brian Cohen, Aaron Hatcher, Dr.
Dale Lichtblau, Dr. Reg Meeson, Dr. Clyde Moseberry, Dr. Clyde Roby,
Dr. Ed Schneider, Dr. Marty Stytz, and Dr. Andy Trice, who had many
helpful comments on this dissertation and/or the previous ACSAC
paper.  Reg Meeson in particular spent many hours carefully reviewing
the proofs and related materials, and Clyde Roby carefully reviewed
the whole dissertation; I thank them both.  Aaron Hatcher was
immensely helpful in working to scale the Diverse Double-Compiling
(DDC) technique up to a real-world application using GCC.  In
particular, Aaron helped implement many applications of DDC that we
thought should have worked with GCC, but didn&rsquo;t, and then
helped to determine <I>why</I> they didn&rsquo;t work.  These &ldquo;Edison
successes&rdquo; (which successfully found out what did <I>not</I>
work) were important in helping to lead to a working application of
DDC to GCC.</p>
<P STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<BR>
</p>
<P STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
Many others also helped create this work.  The work of Dr. Paul A.
Karger, Dr. Roger R. Schell, and Ken Thompson made the world aware of
a problem that needed solving; without knowing there was a problem,
there would have been no work to solve it.  Henry Spencer posted the
first version of this idea that eventually led to this dissertation
(though this dissertation expands on it far beyond the few sentences
that he wrote).  Henry Spencer, Eric S. Raymond, and the anonymous
ACSAC reviewers provided helpful comments on the ACSAC paper.  I
received many helpful comments and other information after
publication of the ACSAC paper, including comments from
(alphabetically by last name) Bill Alexander, Dr. Steven M. Bellovin,
Terry Bollinger, Ulf Dittmer, Jakub Jelinek, Dr. Paul A. Karger, Ben
Laurie, Mike Lisanke, Thomas Lord, Bruce Schneier, Brian Snow, Ken
Thompson, Dr. Larry Wagoner, and James Walden.  Tawnia Wheeler
proofread both the ACSAC paper and this document; thank you!  My
thanks to the many developers of the OpenDocument specification and
the OpenOffice.org implementation, who made developing this document
a joy.</p>
<H1 CLASS="preliminary-heading-western">Table of Contents</H1>
<P ALIGN=RIGHT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	Page</p>
<DIV ID="Table of Contents1" DIR="LTR" STYLE="background: transparent">
	<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#0.List of Tables|outline">List of Tables	viii</A></p>
	<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#0.List of Figures|outline">List of Figures	ix</A></p>
	<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#0.List of Abbreviations and Symbols|outline">List of
	Abbreviations and Symbols	x</A></p>
	<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#0.Abstract|outline">Abstract	xiv</A></p>
	<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#1.Introduction|outline">1 Introduction	1</A></p>
	<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#2.Background and related work|outline">2 Background and
	related work	4</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#2.1.Initial revelation: Karger, Schell, and Thompson|outline">2.1
	Initial revelation: Karger, Schell, and Thompson	4</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#2.2.Other work on corrupted compilers|outline">2.2 Other
	work on corrupted compilers	6</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#2.3.Compiler bootstrap test|outline">2.3 Compiler
	bootstrap test	9</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#2.4.Analyzing software|outline">2.4 Analyzing software	10</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#2.4.1.Static analysis|outline">2.4.1 Static analysis	11</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#2.4.2.Dynamic analysis|outline">2.4.2 Dynamic analysis	14</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#2.5.Diversity for security|outline">2.5 Diversity for
	security	16</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#2.6.Subversion of software is a real problem|outline">2.6
	Subversion of software is a real problem	17</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#2.7.Previous DDC paper|outline">2.7 Previous DDC paper	21</A></p>
	<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#3.Description of threat|outline">3 Description of
	threat	23</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#3.1.Attacker motivation|outline">3.1 Attacker
	motivation	23</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#3.2.Triggers, payloads, and non-discovery|outline">3.2
	Triggers, payloads, and non-discovery	27</A></p>
	<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#4.Informal description of Diverse Double-Compiling (DDC)|outline">4
	Informal description of Diverse Double-Compiling (DDC)	30</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#4.1.Terminology and notation|outline">4.1 Terminology and
	notation	30</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#4.2.Informal description of DDC|outline">4.2 Informal
	description of DDC	32</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#4.3.Informal assumptions|outline">4.3 Informal
	assumptions	35</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#4.4.DDC does not require that different compilers produce identical executables|outline">4.4
	DDC does not require that different compilers produce identical
	executables	37</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#4.5.Special case: Self-parenting compiler|outline">4.5
	Special case: Self-parenting compiler	38</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#4.6.Why not always use the trusted compiler_|outline">4.6
	Why not always use the trusted compiler?	40</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#4.7.Why is DDC different from N-version programming_|outline">4.7
	Why is DDC different from N-version programming?	41</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#4.8.DDC works with randomly-corrupting compilers|outline">4.8
	DDC works with randomly-corrupting compilers	43</A></p>
	<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.Formal proof|outline">5 Formal proof	44</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.1.Graphical model for formal proof |outline">5.1
	Graphical model for formal proof 	45</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.1.1.Types|outline">5.1.1 Types	46</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.1.2.DDC components|outline">5.1.2 DDC components	47</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.1.3.Claimed origin|outline">5.1.3 Claimed origin	48</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.2.Formal notation: First-Order Logic (FOL)|outline">5.2
	Formal notation: First-Order Logic (FOL)	49</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.3.Proof step rationales (derivation rules or rules of inference)|outline">5.3
	Proof step rationales (derivation rules or rules of inference)	51</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.4.Tools and rationale for confidence in the proofs|outline">5.4
	Tools and rationale for confidence in the proofs	54</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.4.1.Early DDC proof efforts|outline">5.4.1 Early DDC
	proof efforts	54</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.4.2.Prover9, mace4, and ivy|outline">5.4.2 Prover9,
	mace4, and ivy	54</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.4.3.Tool limitations|outline">5.4.3 Tool limitations	56</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.4.4.Proofs&rsquo; conclusions follow from their assumptions|outline">5.4.4
	Proofs&rsquo; conclusions follow from their assumptions	57</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.4.5.Proofs&rsquo; assumptions and goals adequately model the world|outline">5.4.5
	Proofs&rsquo; assumptions and goals adequately model the world	57</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.5.Proof conventions|outline">5.5 Proof conventions	59</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.6.Proof #1: Goal source_corresponds_to_executable|outline">5.6
	Proof #1: Goal source_corresponds_to_executable	60</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.6.1.Predicate &ldquo;=&rdquo; given two executables|outline">5.6.1
	Predicate &ldquo;=&rdquo; given two executables	60</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.6.2.Predicate exactly_correspond|outline">5.6.2
	Predicate exactly_correspond	62</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.6.3.Predicate accurately_translates|outline">5.6.3
	Predicate accurately_translates	63</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.6.4.Assumption cT_compiles_sP|outline">5.6.4 Assumption
	cT_compiles_sP	63</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.59in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.6.4.1.Implications for the language|outline">5.6.4.1
	Implications for the language	64</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.59in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.6.4.2.Implications for the trusted compiler and its environment|outline">5.6.4.2
	Implications for the trusted compiler and its environment	66</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.6.5.Function compile|outline">5.6.5 Function compile	69</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.6.6.Assumption sP_compiles_sA|outline">5.6.6 Assumption
	sP_compiles_sA	71</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.6.7.Definition definition_stage1|outline">5.6.7
	Definition definition_stage1	72</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.6.8.Definition define_exactly_correspond|outline">5.6.8
	Definition define_exactly_correspond	72</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.6.9.Definition definition_stage2|outline">5.6.9
	Definition definition_stage2	73</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.6.10.Goal source_corresponds_to_executable|outline">5.6.10
	Goal source_corresponds_to_executable	73</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.6.11.Prover9 proof of source_corresponds_to_executable|outline">5.6.11
	Prover9 proof of source_corresponds_to_executable	74</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.6.12.Discussion of proof #1|outline">5.6.12 Discussion
	of proof #1	75</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.7.Proof #2: Goal always_equal|outline">5.7 Proof #2:
	Goal always_equal	76</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.7.1.Reused definitions define_exactly_correspond, definition_stage1, and definition_stage2|outline">5.7.1
	Reused definitions define_exactly_correspond, definition_stage1, and
	definition_stage2	77</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.7.2.Assumption cT_compiles_sP|outline">5.7.2 Assumption
	cT_compiles_sP	78</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.7.3.Predicate deterministic_and_portable|outline">5.7.3
	Predicate deterministic_and_portable	78</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.7.4.Function run|outline">5.7.4 Function run	79</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.7.5.Function converttext|outline">5.7.5 Function
	converttext	80</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.7.6.Function extract|outline">5.7.6 Function extract	81</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.7.7.Function retarget|outline">5.7.7 Function
	retarget	81</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.7.8.Assumption sP_portable_and_deterministic|outline">5.7.8
	Assumption sP_portable_and_deterministic	81</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.7.9.Definition define_portable_and_deterministic|outline">5.7.9
	Definition define_portable_and_deterministic	83</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.7.10.Assumption cP_corresponds_to_sP|outline">5.7.10
	Assumption cP_corresponds_to_sP	84</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.7.11.Definition define_compile|outline">5.7.11
	Definition define_compile	85</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.7.12.Definition definition_cA|outline">5.7.12 Definition
	definition_cA	86</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.7.13.Goal always_equal|outline">5.7.13 Goal
	always_equal	86</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.7.14.Prover9 proof of always_equal|outline">5.7.14
	Prover9 proof of always_equal	86</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.7.15.Discussion of proof #2|outline">5.7.15 Discussion
	of proof #2	88</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.8.Proof #3: Goal cP_corresponds_to_sP|outline">5.8 Proof
	#3: Goal cP_corresponds_to_sP	89</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.8.1.Definition definition_cP|outline">5.8.1 Definition
	definition_cP	90</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.8.2.Assumption cGP_compiles_sP|outline">5.8.2 Assumption
	cGP_compiles_sP	90</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.8.3.Goal cP_corresponds_to_sP|outline">5.8.3 Goal
	cP_corresponds_to_sP	90</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.8.4.Prover9 proof of cP_corresponds_to_sP|outline">5.8.4
	Prover9 proof of cP_corresponds_to_sP	90</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.8.5.Discussion of proof #3|outline">5.8.5 Discussion of
	proof #3	91</A></p>
	<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#6.Methods to increase diversity|outline">6 Methods to
	increase diversity	92</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#6.1.Diversity in compiler implementation|outline">6.1
	Diversity in compiler implementation	93</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#6.2.Diversity in time|outline">6.2 Diversity in time	93</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#6.3.Diversity in environment|outline">6.3 Diversity in
	environment	95</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#6.4.Diversity in source code input|outline">6.4 Diversity
	in source code input	95</A></p>
	<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#7.Demonstrations of DDC|outline">7 Demonstrations of
	DDC	98</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#7.1.tcc|outline">7.1 tcc	98</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#7.1.1.Test configuration|outline">7.1.1 Test
	configuration	99</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#7.1.2.Diverse double-compiling tcc|outline">7.1.2 Diverse
	double-compiling tcc	100</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#7.1.3.Defect in sign-extending cast 8-bit values|outline">7.1.3
	Defect in sign-extending cast 8-bit values	102</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#7.1.4.Long double constant problem|outline">7.1.4 Long
	double constant problem	105</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#7.1.5.Final results with tcc demonstration|outline">7.1.5
	Final results with tcc demonstration	106</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#7.2.Goerigk Lisp compilers|outline">7.2 Goerigk Lisp
	compilers	106</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#7.3.GCC|outline">7.3 GCC	109</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#7.3.1.Setup for GCC|outline">7.3.1 Setup for GCC	109</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#7.3.2.Challenges|outline">7.3.2 Challenges	113</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.59in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#7.3.2.1.Master result directory|outline">7.3.2.1 Master
	result directory	113</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.59in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#7.3.2.2.Obsolete format for tail|outline">7.3.2.2 Obsolete
	format for tail	114</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.59in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#7.3.2.3.Libiberty library|outline">7.3.2.3 Libiberty
	library	115</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.39in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#7.3.3.GCC Results|outline">7.3.3 GCC Results	117</A></p>
	<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#8.Practical challenges|outline">8 Practical challenges	118</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#8.1.Limitations|outline">8.1 Limitations	118</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#8.2.Non-determinism|outline">8.2 Non-determinism	119</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#8.3.Difficulty in finding alternative compilers|outline">8.3
	Difficulty in finding alternative compilers	120</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#8.4.Countering &ldquo;pop-up&rdquo; attacks|outline">8.4
	Countering &ldquo;pop-up&rdquo; attacks	121</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#8.5.Multiple sub-components|outline">8.5 Multiple
	sub-components	121</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#8.6.Timestamps and inexact comparison|outline">8.6
	Timestamps and inexact comparison	122</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#8.7.Interpreters and recompilation dependency loops|outline">8.7
	Interpreters and recompilation dependency loops	124</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#8.8.Untrusted environments and broadening DDC application|outline">8.8
	Untrusted environments and broadening DDC application	125</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#8.9.Trusted build agents|outline">8.9 Trusted build
	agents	126</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#8.10.Application problems with current distributions|outline">8.10
	Application problems with current distributions	127</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#8.11.Finding errors and maliciously misleading code|outline">8.11
	Finding errors and maliciously misleading code	129</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#8.12.Hardware|outline">8.12 Hardware	130</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#8.13.Complex libraries and frameworks|outline">8.13
	Complex libraries and frameworks	135</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#8.14.How can an attacker counter DDC_|outline">8.14 How
	can an attacker counter DDC?	136</A></p>
	<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#9.Conclusions and ramifications|outline">9 Conclusions and
	ramifications	140</A></p>
	<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#1.Lisp results|outline">Appendix A: Lisp results	144</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#1.1.Source code for correct compiler|outline">A.1 Source
	code for correct compiler	144</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#1.2.Compiled code for correct compiler|outline">A.2
	Compiled code for correct compiler	145</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#1.3.Compilation of factorial function|outline">A.3
	Compilation of factorial function	146</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#1.4.Compilation of login function|outline">A.4 Compilation
	of login function	146</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#1.5.DDC application|outline">A.5 DDC application	147</A></p>
	<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#2.Detailed GCC results|outline">Appendix B: Detailed GCC
	results	153</A></p>
	<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#3.Model results|outline">Appendix C: Model results	156</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#9.1.Proof #1 model|outline">9.1 Proof #1 model	157</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#9.2.Proof #2 model|outline">9.2 Proof #2 model	159</A></p>
	<P ALIGN=LEFT STYLE="margin-left: 0.2in; margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#9.3.Proof #3 model|outline">9.3 Proof #3 model	162</A></p>
	<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#4.Guidelines for Compiler Suppliers|outline">Appendix D:
	Guidelines for Compiler Suppliers	165</A></p>
	<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#5.Key definitions|outline">Appendix E: Key definitions	170</A></p>
	<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<A HREF="#9.Bibliography|outline">Bibliography	172</A></p>
</DIV>
<P STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<BR>
</p>
<H1 CLASS="western" STYLE="page-break-before: always"><A NAME="0.List of Tables|outline"></A>
List of Tables</H1>
<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
Table	Page</p>
<DIV ID="Index of Tables1" DIR="LTR">
	<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	Table 1: FOL notation	50</p>
	<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	Table 2: Proof #1 (source_corresponds_to_executable) in prover9
	format	74</p>
	<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	Table 3: Proof #2 (always_equal) in prover9 format	87</p>
	<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	Table 4: Proof #3 (cP_corresponds_to_sP) in prover9 format	91</p>
	<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	Table 5: Statistics for GCC C compiler, both compiler-under-test and
	DDC result	154</p>
</DIV>
<P STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<BR>
</p>
<H1 CLASS="western" STYLE="page-break-before: always; page-break-after: auto"><A NAME="0.List of Figures|outline"></A>
List of Figures</H1>
<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
Figure	Page</p>
<DIV ID="Illustration Index1" DIR="LTR">
	<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	Figure 1: Illustration of graphical notation	31</p>
	<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	Figure 2: Informal graphical representation of DDC	33</p>
	<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	Figure 3: Informal graphical representation of DDC for
	self-regeneration case	39</p>
	<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	Figure 4: Graphical representation of DDC formal model	45</p>
	<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	Figure 5: Diverse double-compiling with self-regeneration check,
	using tcc	101</p>
	<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	Figure 6: DDC applied to GCC	113</p>
</DIV>
<P STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<BR>
</p>
<H1 CLASS="western" STYLE="page-break-before: always; page-break-after: auto"><A NAME="0.List of Abbreviations and Symbols|outline"></A>
List of Abbreviations and Symbols</H1>
<TABLE WIDTH=100% BORDER=0 CELLPADDING=0 CELLSPACING=0>
	<COL WIDTH=46*>
	<COL WIDTH=210*>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">-A</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">not A.  Equivalent to <FONT FACE="Times New Roman, serif">
			<IMG SRC="wheeler-trusting-trust-ddc_html_14708c70.gif" NAME="Object3" ALIGN=ABSMIDDLE WIDTH=29 HEIGHT=18></FONT></p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">A &amp; B</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">A and B (logical and).  Equivalent
			to 
			<IMG SRC="wheeler-trusting-trust-ddc_html_m1fac73e5.gif" NAME="Object2" ALIGN=ABSMIDDLE WIDTH=43 HEIGHT=18></p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">A | B</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">A or B (logical or).  Equivalent
			to 
			<IMG SRC="wheeler-trusting-trust-ddc_html_m2d10c7e2.gif" NAME="Object4" ALIGN=ABSMIDDLE WIDTH=43 HEIGHT=18></p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">A -&gt; B</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">A implies B.  Equivalent to 
			<IMG SRC="wheeler-trusting-trust-ddc_html_39c62bfa.gif" NAME="Object74" ALIGN=ABSMIDDLE WIDTH=47 HEIGHT=18>
			and 
			<IMG SRC="wheeler-trusting-trust-ddc_html_m6459d4e9.gif" NAME="Object75" ALIGN=ABSMIDDLE WIDTH=65 HEIGHT=18></p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">ACL2</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">A Computational Logic for
			Applicative Common Lisp</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">ACSAC</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Annual Computer Security
			Applications Conference</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">aka</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">also known as</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">all X A</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">for all X, A.  Equivalent to 
			<IMG SRC="wheeler-trusting-trust-ddc_html_40f67fd6.gif" NAME="Object5" ALIGN=ABSMIDDLE WIDTH=53 HEIGHT=18></p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">ANSI</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">American National Standards
			Institute</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">API</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Application Programmer Interface</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">ASCII</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">American Standard Code for
			Information Interchange</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">BIOS</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Basic input/output system</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">BSD</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Berkeley Software Distribution</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">cA or c<SUB>A</SUB></p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Compiler c<SUB>A</SUB>, the
			compiler-under-test executable (see <I>s</I><SUB>A</SUB>)</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">cGP or c<SUB>GP</SUB></p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Compiler c<SUB>GP</SUB>, the
			putative grandparent of c<SUB>A</SUB> and putative parent of c<SUB>P</SUB></p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">CNSS</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Committee on National Security
			Systems</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">cP or c<SUB>P</SUB></p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Compiler P, the putative parent of
			c<SUB>A</SUB></p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">CP/M</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Control Program for Microcomputers</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">CPU</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Central Processing Unit</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">cT or c<SUB>T</SUB></p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Compiler c<SUB>T</SUB>, a
			&ldquo;trusted&rdquo; compiler (see section 4.3)</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">DDC</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Diverse Double-Compiling</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">DoD</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Department of Defense (U.S.)</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">DOS</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Disk Operating System</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">DRAM</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Dynamic Random Access Memory</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">e1</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Environment that produces stage1</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">e2</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Environment that produces stage2</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">eA</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Environment that putatively
			produced c<SUB>A</SUB></p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">eArun</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Environment that c<SUB>A</SUB> and
			stage2 are intended to run in</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">EBCDIC</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Extended Binary Coded Decimal
			Interchange Code</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">ECC</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Error Correcting Code(s)</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">eP</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Environment that putatively
			produced c<SUB>P</SUB></p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">FOL</p>
		</TD>
		<TD WIDTH=82%>
			<p>First-Order Logic (with equality), aka
			first-order predicate logic</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">FS</p>
		</TD>
		<TD WIDTH=82%>
			<p>Free Software</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">FLOSS</p>
		</TD>
		<TD WIDTH=82%>
			<p>Free-Libre/Open Source Software</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">FOSS</p>
		</TD>
		<TD WIDTH=82%>
			<p>Free/Open Source Software</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">FSF</p>
		</TD>
		<TD WIDTH=82%>
			<p>Free Software Foundation</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">GAO</p>
		</TD>
		<TD WIDTH=82%>
			<p>General Accounting Office (U.S.)</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">GCC</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">GNU Compiler Collection (formerly
			the GNU C compiler)</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">GNU</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">GNU&rsquo;s not Unix</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">GPL</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">General Public License</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">HOL</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Higher Order Logic</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">IC</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Integrated Circuit</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">IDA</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Institute for Defense Analyses</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">iff</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">if and only if</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">I/O</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">input/output</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">IP</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Intellectual Property</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">ISO</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">International Organization for
			Standardization (sic)</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">ITSD</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Information Technology and Systems
			Division</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">MDA</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Missile Defense Agency (U.S.);
			formerly named SDIO</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">MS-DOS</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Microsoft Disk Operating System
			(MS-DOS)</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">NEL</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Newline (#x85), used in OS/360</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">NIST</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">National Institute of Science and
			Technology (U.S.)</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">OpenBSD</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Open Berkeley Software
			Distribution</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">OS/360</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">IBM System/390 operating-system</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">OSI</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Open Source Initiative</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">OSS</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Open Source Software</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">OSS/FS</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Open Source Software/Free Software</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">PITAC</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">President&rsquo;s Information
			Technology Advisory Committee</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">ProDOS</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Professional Disk Operating System</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">PVS</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Prototype Verification System</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">QED</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Quod erat demonstrandum (&ldquo;which
			was to be demonstrated&rdquo;)</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">RepRap</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Replicating Rapid-prototyper</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">S-expression</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Symbolic expression</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">sA or <I>s</I><SUB>A</SUB></p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">putative source code of c<SUB>A</SUB></p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">SAMATE</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Software Assurance Metrics And
			Tool Evaluation (NIST project)</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">SDIO</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Strategic Defense Initiative
			Organization (U.S.); later renamed to the Missile Defense Agency
			(MDA)</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">SHA</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Secure Hash Algorithm</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">sic</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">spelling is correct</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">sP or <I>s</I><SUB>P</SUB></p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">putative source code of c<SUB>P</SUB></p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">SQL</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Structured Query Language</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">STEM</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Scanning Transmission Electron
			Microscope</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">tcc or TinyCC</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Tiny C Compiler</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">UCS</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Universal Character Set</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">URL</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Uniform Resource Locator</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">U.S.</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">United States</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">UTF-8</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">8-bit UCS/Unicode Transformation
			Format</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">UTF-16</p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">16-bit UCS/Unicode Transformation
			Format</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">VHDL</p>
		</TD>
		<TD WIDTH=82%>
			<p>VHSIC hardware description language</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western">VHSIC</p>
		</TD>
		<TD WIDTH=82%>
			<p>Very High Speed Integrated Circuit</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western"><IMG SRC="wheeler-trusting-trust-ddc_html_633331a0.gif" NAME="Object72" ALIGN=ABSMIDDLE WIDTH=58 HEIGHT=18></p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Arbitrary FOL formula</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=18%>
			<P CLASS="abbreviation-western"><IMG SRC="wheeler-trusting-trust-ddc_html_78d80682.gif" NAME="Object73" ALIGN=ABSMIDDLE WIDTH=22 HEIGHT=20></p>
		</TD>
		<TD WIDTH=82%>
			<P CLASS="abbreviation-western">Arbitrary FOL term number x</p>
		</TD>
	</TR>
</TABLE>
<p>See appendix E for key definitions.</p>
<H1 CLASS="western" STYLE="page-break-before: always"><A NAME="0.Abstract|outline"></A>
Abstract</H1>
<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
Fully Countering Trusting Trust through Diverse Double-Compiling</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<BR>
</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
David A. Wheeler, PhD</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<BR>
</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
George Mason University, 2009</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<BR>
</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
Dissertation Directors: Dr. Daniel A. Menasc&eacute; and Dr. Ravi Sandhu</p>
<p><BR>
</p>
<p>An Air Force evaluation of Multics, and Ken
Thompson&rsquo;s Turing award lecture (&ldquo;Reflections on Trusting
Trust&rdquo;), showed that compilers can be subverted to insert
malicious Trojan horses into critical software, including themselves.
 If this &ldquo;trusting trust&rdquo; attack goes undetected, even
complete analysis of a system&rsquo;s source code will not find the
malicious code that is running.  Previously-known countermeasures
have been grossly inadequate.  If this attack cannot be countered,
attackers can quietly subvert entire classes of computer systems,
gaining complete control over financial, infrastructure, military,
and/or business systems worldwide.  This dissertation&rsquo;s thesis
is that the trusting trust attack can be detected and effectively
countered using the &ldquo;Diverse Double-Compiling&rdquo; (DDC)
technique, as demonstrated by (1) a formal proof that DDC can
determine if source code and generated executable code correspond,
(2) a demonstration of DDC with four compilers (a small C compiler, a
small Lisp compiler, a small maliciously corrupted Lisp compiler, and
a large industrial-strength C compiler, GCC), and (3) a description
of approaches for applying DDC in various real-world scenarios.  In
the DDC technique, source code is compiled twice: the source code of
the compiler&rsquo;s parent is compiled using a trusted compiler, and
then the putative compiler source code is compiled using the result
of the first compilation.  If the DDC result is bit-for-bit identical
with the original compiler-under-test&rsquo;s executable, and certain
other assumptions hold, then the compiler-under-test&rsquo;s
executable corresponds with its putative source code.</p>
<H1 CLASS="western" STYLE="page-break-before: always; page-break-after: auto"><A NAME="1.Introduction|outline"></A>
1 Introduction</H1>
<p>Many software security evaluations examine source
code, under the assumption that a program&rsquo;s source code
accurately represents the executable actually run by the computer<A CLASS="sdfootnoteanc" NAME="sdfootnote1anc" HREF="#sdfootnote1sym"><SUP>1</SUP></A>.
 Na&iuml;ve developers presume that this can be assured simply by
recompiling the source code to see if the same executable is
produced.  Unfortunately, the &ldquo;trusting trust&rdquo; attack can
falsify this presumption.</p>
<p>For purposes of this dissertation, an executable
that does not correspond to its putative source code is <I>corrupted</I><A CLASS="sdfootnoteanc" NAME="sdfootnote2anc" HREF="#sdfootnote2sym"><SUP>2</SUP></A>.
 If a corrupted executable was intentionally created, we can call it
a <I>maliciously corrupted</I> executable.  The <I>trusting trust
attack</I> occurs when an attacker attempts to disseminate a compiler
executable that produces corrupted executables, at least one of those
produced corrupted executables is a corrupted compiler, and the
attacker attempts to make this situation self-perpetuating.  The
attacker may use this attack to insert other Trojan horse(s)
(software that appears to the user to perform a desirable function
but facilitates unauthorized access into the user&rsquo;s computer
system).</p>
<p>Information about the trusting trust attack was
first published in [Karger1974]; it became widely known through
[Thompson1984].  Unfortunately, there has been no practical way to
fully detect or counter the trusting trust attack, because repeated
in-depth review of industrial compilers&rsquo; executable code is
impractical.</p>
<p>For source code evaluations to be strongly
credible, there must be a way to justify that the source code being
examined accurately represents what is being executed&mdash;yet the
trusting trust attack subverts that very claim.  Internet Security
System&rsquo;s David Maynor argues that the risk of attacks on
compilation processes is increasing [Maynor2004]  [Maynor2005]. 
Karger and Schell noted that the trusting trust attack was still a
problem in 2000 [Karger2000], and some technologists doubt that
computer-based systems can ever be secure because of the existence of
this attack [Gauis2000].  Anderson et al. argue that the general risk
of subversion is increasing [Anderson2004].</p>
<p>Recently, in several mailing lists and blogs, a
technique to detect such attacks has been briefly described, which
uses a second (diverse) &ldquo;trusted&rdquo; compiler (as will be
defined in section 4.3) and two compilation stages.  This
dissertation terms the technique &ldquo;diverse double-compiling&rdquo;
(DDC).  In the DDC technique, the source code of the compiler&rsquo;s
parent is compiled using a trusted compiler, and then the putative
compiler source code is compiled using the result of the first
compilation (chapter 4 further explains this).  If the DDC result is
bit-for-bit identical with the original compiler-under-test&rsquo;s
executable, and certain other assumptions hold, then the
compiler-under-test&rsquo;s executable corresponds with its putative
source code (chapter 5 justifies this claim).  Before this work
began, there had been no examination of DDC in detail which
identified its assumptions, proved its correctness or effectiveness,
or discussed practical issues in applying it.  There had also not
been any public demonstration of DDC.</p>
<p>This dissertation&rsquo;s thesis is that the
trusting trust attack can be detected and effectively countered using
the &ldquo;Diverse Double-Compiling&rdquo; (DDC) technique, as
demonstrated by (1) a formal proof that DDC can determine if source
code and generated executable code correspond, (2) a demonstration of
DDC with four compilers (a small C compiler, a small Lisp compiler, a
small maliciously corrupted Lisp compiler, and a large
industrial-strength C compiler, GCC), and (3) a description of
approaches for applying DDC in various real-world scenarios.</p>
<p>This dissertation provides background and a
description of the threat, followed by an informal description of
DDC.  This is followed by a formal proof of DDC, information on how
diversity (a key requirement of DDC) can be increased, demonstrations
of DDC, and information on how to overcome practical challenges in
applying DDC.  The dissertation closes with conclusions and
ramifications.  Appendices have some additional detail.  Further
details, including materials sufficient to reproduce the experiments,
are available at:</p>
<p><A HREF="http://www.dwheeler.com/trusting-trust/">	http://www.dwheeler.com/trusting-trust/</A></p>
<p>This dissertation follows the guidelines of
[Bailey1996] to enhance readability.  In addition, this dissertation
uses logical (British) quoting conventions; quotes do not enclose
punctuation unless they are part of the quote [Ritter2002]. 
Including extraneous characters in a quotation can be grossly
misleading, especially in computer-related material [Raymond2003,
chapter 5].</p>
<H1 CLASS="western"><A NAME="2.Background and related work|outline"></A>
2 Background and related work</H1>
<p>This chapter provides background and related work.
 It begins with a discussion of the initial revelation of the
trusting trust attack by Karger, Schell, and Thompson, including a
brief description of &ldquo;obvious&rdquo; yet inadequate solutions. 
The next sections discuss work on corrupted or subverted compilers,
the compiler bootstrap test, general work on analyzing software, and
general approaches for using diversity to improve security.  This is
followed by evidence that software subversion is a real problem, not
just a theoretical concern.  This chapter concludes by discussing the
DDC paper published by the Annual Computer Security Applications
Conference (ACSAC) [Wheeler2005] and the improvements to DDC that
have been made since that time.</p>
<H2 CLASS="western"><A NAME="2.1.Initial revelation: Karger, Schell, and Thompson|outline"></A>
2.1 Initial revelation: Karger, Schell, and Thompson</H2>
<p>Karger and Schell provided the first public
description of the problem that compiler executables can insert
malicious code into themselves.  They noted in their examination of
Multics vulnerabilities that a &ldquo;penetrator could insert a trap
door into the... compiler... [and] since the PL/I compiler is itself
written in PL/I, the trap door can maintain itself, even when the
compiler is recompiled.  Compiler trap doors are significantly more
complex than the other trap doors... However, they are quite
practical to implement&rdquo; [Karger1974].</p>
<p>Ken Thompson widely publicized this problem in his
1984 Turing Award presentation (&ldquo;Reflections on Trusting
Trust&rdquo;), clearly explaining it and demonstrating that this was
both a practical and dangerous attack.  He described how to modify
the Unix C compiler to inject a Trojan horse, in this case to modify
the operating system login program to surreptitiously give him root
access.  He also added code so that the compiler would inject a
Trojan Horse when compiling itself, so the compiler became a
&ldquo;self-reproducing program that inserts both Trojan horses into
the compiler&rdquo;.  Once this is done, the attacks could be removed
from the source code.  At that point no source code examination&mdash;even
of the compiler&mdash;would reveal the existence of the Trojan
horses, yet the attacks could persist through recompilations and
cross-compilations of the compiler.  He then stated that &ldquo;No
amount of source-level verification or scrutiny will protect you from
using untrusted code... I could have picked on any program-handling
program such as an assembler, a loader, or even hardware microcode. 
As the level of program gets lower, these defects will be harder and
harder to detect&rdquo; [Thompson1984].  Thompson&rsquo;s
demonstration also subverted the disassembler, hiding the attack from
disassembly.  Thompson implemented this attack in the C compiler and
(as a demonstration) successfully subverted another Bell Labs group,
the attack was never detected.</p>
<p>Thompson later gave more details about his
demonstration, including assurances that  the maliciously corrupted
compiler was never released outside Bell Labs [Thornburg2000].</p>
<p>Obviously, this attack invalidates security
evaluations based on source code review, and recompilation of source
code using a potentially-corrupted compiler does not eliminate the
risk.  Some simple approaches appear to solve the problem at first
glance, yet fail to do so or have significant weaknesses:</p>
<UL>
	<LI><P CLASS="list-1-western">Compiler executables could be manually
	compared with their source code.  This is impractical given
	compilers&rsquo; large sizes, complexity, and rate of change.</p>
	<LI><P CLASS="list-1-western">Such comparison could be automated,
	but optimizing compilers make such comparisons extremely difficult,
	compiler changes make keeping such tools up-to-date difficult, and
	the tool&rsquo;s complexity would be similar to a compiler&rsquo;s.</p>
	<LI><P CLASS="list-1-western">A second compiler could compile the
	source code, and then the executables could be compared
	automatically to argue semantic equivalence.  There is some work in
	determining the semantic equivalence of two different executables
	[Sabin2004], but this is very difficult to do in practice.</p>
	<LI><P CLASS="list-1-western">Receivers could require that they only
	receive source code and then recompile everything themselves.  This
	fails if the receiver&rsquo;s compiler is already maliciously
	corrupted; thus, it simply moves the attack location.  An attacker
	could also insert the attack into the compiler&rsquo;s source; if
	the receiver accepts it (due to lack of diligence or conspiracy),
	the attacker could remove the evidence in a later version of the
	compiler (as further discussed in section 8.4).</p>
	<LI><P CLASS="list-1-western">Programs can be written in interpreted
	languages.  But eventually an interpreter must be implemented by
	machine code, so this simply moves the attack location.</p>
</UL>
<H2 CLASS="western"><A NAME="2.2.Other work on corrupted compilers|outline"></A>
2.2 Other work on corrupted compilers</H2>
<p>Some previous papers outline approaches for
countering corrupted compilers, though their approaches have
significant weaknesses.  Draper [Draper1984] recommends screening out
maliciously corrupted compilers by writing a &ldquo;paraphrase&rdquo;
compiler (possibly with a few dummy statements) or a different
compiler executable, compiling once to remove the Trojan horse, and
then compiling a second time to produce a Trojan horse-free compiler.
 This idea is expanded upon by McDermott [McDermott1988], who notes
that the alternative compiler could be a reduced-function compiler or
one with large amounts of code unrelated to compilation.  Lee&rsquo;s
&ldquo;approach #2&rdquo; describes most of the basic process of
diverse double-compiling, but implies that the results might not be
bit-for-bit identical [Lee2000].  Luzar makes a similar point as Lee,
describing how to rebuild a system from scratch using a different
trusted compiler but not noting that the final result should be
bit-for-bit identical if other factors are carefully controlled
[Luzar2003].</p>
<p>None of these papers note that it is possible to
produce a result that is bit-for-bit identical to the original
compiler executable.  This is a significant advantage of diverse
double-compiling (DDC), because determining if two different
executables are &ldquo;functionally equivalent&rdquo; is extremely
difficult<A CLASS="sdfootnoteanc" NAME="sdfootnote3anc" HREF="#sdfootnote3sym"><SUP>3</SUP></A>,
while determining if two executables are bit-for-bit identical is
extremely easy.  These previous approaches require each defender to
recompile their compiler themselves before using it; in contrast, DDC
can be used as an after-the-fact vetting process by multiple third
parties, without requiring a significant change in compiler delivery
or installation processes, and without requiring that all compiler
users receive the compiler source code.  All of these previous
approaches simply move the potential vulnerability somewhere else
(e.g., to the process using the &ldquo;paraphrase&rdquo; compiler). 
In contrast, an attacker who wishes to avoid detection by DDC must
corrupt <I>both</I> the original compiler <SPAN STYLE="font-style: normal">and
</SPAN><I>every</I><SPAN STYLE="font-style: normal"> application of
DDC to that executable, so each application of DDC can further build
confidence that a specific executable corresponds with its putative
source code.  </SPAN>Also, none of these papers demonstrate their
technique.</p>
<p>Magdsick discusses using different versions of a
compiler, and different compiler platforms such as central processing
unit (CPU) and operating system, to check executables.  However,
Magdsick presumes that the compiler itself will be the same base
compiler (though possibly a different version).  He does note the
value of recompiling &ldquo;everything&rdquo; to check it
[Magdsick2003].  Anderson notes that cross-compilation does not help
if the attack is in the compiler [Anderson2003].  Mohring argues for
the use of recompilation by GCC to check other components, presuming
that the GCC executables themselves in some environments would be
pristine [Mohring2004].  He makes no notice that all GCC executables
used might be maliciously corrupted, or of the importance of
diversity in compiler implementation.  In his approach different
compiler versions may be used, so outputs would be &ldquo;similar&rdquo;
but not identical; this leaves the difficult problem of comparing
executables for &ldquo;exact equivalence&rdquo; unresolved.</p>
<p>A great deal of effort has been spent to develop
proofs of correctness for compilers, either of the compiler itself
and/or its generated results [Dave2003] [Stringer-Calvert1998]
[Bellovin1982].  This is quite difficult even for simple languages,
though there has been progress.  [Leinenbach2005] discusses progress
in verifying a subset C compiler using Isabelle/Higher Order Logic
(HOL).  &ldquo;Compcert&rdquo; is a compiler that generates PowerPC
assembly code from Clight (a large subset of the C programming
language); this compiler is primarily written using the specification
language of the Coq proof assistant, and its correctness (that the
generated assembly code is semantically equivalent to its source
program) has been entirely proved within the Coq proof assistant
[Leroy2006] [Blazy2006] [Leroy2008]  [Leroy2009].  [Goerigk1997]
requires formal specifications and correspondence proofs, along with
double-checking of resulting transformations with the formal
specifications.  It does briefly note that &ldquo;if an independent
(whatever that is) implementation of the specification will generate
an equal bootstrapping result, this fact might perhaps increase
confidence.  Note however, that, in particular in the area of
security... We want to guarantee the correctness of the generated
code, e.g., preventing criminal attacks&rdquo; [Goerigk1997, 17]. 
However, it does not explain what independence would mean, nor what
kind of confidence this equality would provide.  [Goerigk1999]
specifically focuses on countering Trojan horses in compilers,
through formal verification techniques, but again this requires
having formal specifications and performing formal correspondence
proofs.  Goerigk recommends &ldquo;a posteriori code inspection based
on syntactic code comparison&rdquo; to counter the trusting trust
attack, but such inspection is very labor-intensive on
industrial-scale compilers that implement significant optimizations. 
DDC can be dramatically strengthened by having formal specifications
and proofs of compilers (which can then be used as the trusted
compiler), but DDC does not require them.  Indeed, DDC and formal
proofs of compilers can be used in a complementary way: A
formally-proved compiler may omit many useful optimizations (as they
can be difficult or time-consuming to prove), but it can still be
used as the DDC &ldquo;trusted compiler&rdquo; to gain confidence in
another (production-ready) compiler.</p>
<p>Spinellis argues that &ldquo;Thompson showed us
that one cannot trust an application&rsquo;s security policy by
examining its source code... The recent Xbox attack demonstrated that
one cannot trust a platform&rsquo;s security policy if the
applications running on it cannot be trusted&rdquo; [Spinellis2003]. 
It is worth noting that the literature for change detection (such as
[Kim1994] and [Forrest1994]) and intrusion detection do not easily
address this problem, because a compiler is <I>expected</I> to accept
source code and generate object code.</p>
<p>Faigon&rsquo;s &ldquo;Constrained Random Testing&rdquo;
process detects compiler defects by creating many random test
programs, compiling them with a compiler-under-test and a reference
compiler, and detecting if running them produces different results
[Faigon].  Faigon&rsquo;s approach may be useful for finding some
compiler errors, but it is extremely unlikely to find maliciously
corrupted compilers.</p>
<H2 CLASS="western"><A NAME="__RefHeading__32296994"></A><A NAME="2.3.Compiler bootstrap test|outline"></A>
2.3 Compiler bootstrap test</H2>
<p>A common test for errors used by many compilers
(including GCC) is the so-called &ldquo;compiler bootstrap test&rdquo;.
 Goerigk formally describes this test, crediting Niklaus Wirth&rsquo;s
1986 book <I>Compilerbau</I> as proposing this test for detecting
errors in compilers [Goerigk1999].  In this test, if c(s,b) is the
result of compiling source s using compiler executable b, and <SPAN STYLE="text-decoration: overline">m</SPAN>
is some other compiler (the &ldquo;bootstrap&rdquo; compiler), then<A CLASS="sdfootnoteanc" NAME="sdfootnote4anc" HREF="#sdfootnote4sym"><SUP>4</SUP></A>:</p>
<BLOCKQUOTE CLASS="western"><I>If m0 and s are both correct and
deterministic, </I><I><SPAN STYLE="text-decoration: overline">m</SPAN></I><I>
is correct, m0=c(s,</I><I><SPAN STYLE="text-decoration: overline">m</SPAN></I><I>),
m1=c(s,m0), m2=c(s,m1), all compilations terminate, and if the
underlying hardware works correctly, then m1=m2.</I></BLOCKQUOTE>
<p>The compiler bootstrap test goes through steps to
determine if m1=m2; if not, there is a compiler error of some kind. 
This test finds many unintentional errors, which is why it is
popular.  But [Goerigk1999] points out that this test is insufficient
to make strong claims, in particular, m1 may equal m2 even if <SPAN STYLE="text-decoration: overline">m</SPAN>,
m0, or s are <I>not</I> correct.  For example, it is trivial to
create compiler source code that passes this test, yet is incorrect,
since this test only tests features used in the compiler itself. 
More importantly (for purposes of this dissertation), if <SPAN STYLE="text-decoration: overline">m</SPAN>
is a maliciously corrupted compiler, a compilation process can pass
this test yet produce a maliciously corrupted compiler m2.  Note that
the compiler bootstrap test does <I>not</I> consider the possibility
of using two different bootstrap compilers (<SPAN STYLE="text-decoration: overline">m</SPAN><FONT FACE="Times New Roman, serif">
and </FONT><FONT FACE="Times New Roman, serif"><SPAN STYLE="text-decoration: overline">m</SPAN></FONT><FONT FACE="Times New Roman, serif">&prime;</FONT>)
and later comparing their different compiler results (m2<FONT FACE="Times New Roman, serif">
and m2&prime;)</FONT> to see if they produce the same (bit-for-bit)
result.  Therefore, the DDC technique is <I>not</I> the same as the
compiler bootstrap test.  However, DDC <I>does</I> have many of the
same preconditions as the compiler bootstrap test.  Since the
compiler bootstrap test is popular, many DDC preconditions are
already met by typical industrial compilers, making DDC easier to
apply to typical industrial compilers.</p>
<H2 CLASS="western"><A NAME="__RefHeading__33364470"></A><A NAME="2.4.Analyzing software|outline"></A>
2.4 Analyzing software</H2>
<p>All programs can be analyzed to find
intentionally-inserted or unintentional security issues (aka
vulnerabilities).  These techniques can be broadly divided into
static analysis (which examines a static representation of the
program, such as source code or executable, without executing it) and
dynamic analysis (which examines what the program does while it is
executing).  Formal methods, which are techniques that use
mathematics to prove programs or program models are correct, can be
considered a specific kind of static analysis technique.</p>
<p>Since compilers are programs, these general
analysis techniques (both static and dynamic) that are not specific
to compilers can be used on compilers as well.</p>
<H3 CLASS="western"><A NAME="2.4.1.Static analysis|outline"></A>2.4.1 Static
analysis</H3>
<P CLASS="western" STYLE="font-style: normal"><FONT FACE="Times New Roman, serif">Static
analysis techniques examine programs (their source code, executable,
or both) without executing them.  Both programs and humans can
perform static analysis.</FONT></p>
<p><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">There
are many static analysis programs (aka tools) available; many are
focused on identifying security vulnerabilities in software.  The
National Institute of Science and Technology (NIST) Software
Assurance Metrics And Tool Evaluation (SAMATE) project
(</SPAN></FONT><A HREF="http://samate.nist.gov/"><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">http://samate.nist.gov)</SPAN></FONT></A><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">
is &ldquo;developing methods to enable software tool evaluations,
measuring the effectiveness of tools and techniques, and identifying
gaps in tools and methods&rdquo;.  SAMATE has collected a long list
of static analysis programs for finding security vulnerabilities by
examining source code or executable code.  There are also a number of
published reports comparing various static analysis tools, such as
[Zitser2004], [Forristal2005], [Kratkiewicz2005], and [Michaud2006]. 
A draft functional specification for source code analysis tools has
been developed [Kass2006], proposing a set of defects that such tools
would be required to find and the code complexity that they must be
able to handle while detecting them.</SPAN></FONT></p>
<p><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">Although
[Kass2006] briefly notes that source code analysis tools might happen
to find malicious trap doors, many documents on static analysis focus
on finding </SPAN></FONT><FONT FACE="Times New Roman, serif"><I>unintentional</I></FONT><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">
errors, not </SPAN></FONT><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">maliciously-implanted
vulnerabilities.  [Kass2006] specifies a specific set of
security-relevant errors that have been made many times in real
programs, and limits the required depth of the analysis (to make
analysis time and reporting manageable).  [Chou2006] also notes that
in practice, static analyzers give up on error classes that are too
hard to diagnose.  For unintentional vulnerabilities, this is
sensible; unintentional errors that have commonly occurred in the
past are likely to recur (so searching for them can be very helpful).
 Unfortunately, these approaches are less helpful against an
adversary who is </SPAN></FONT><FONT FACE="Times New Roman, serif"><I>intentionally
</I></FONT><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">inserting
malicious code into a program.  An adversary could intentionally
insert one of these common errors, perhaps because they have high
deniability, but ensure that it is so complex that a tool is unlikely
to find it.  Alternatively, an adversary could insert code that is an
attack but not in the list of patterns the tools search for.  Indeed,
an adversary can repeatedly use static analysis tools until he or she
has verified that the malicious code will </SPAN></FONT><FONT FACE="Times New Roman, serif"><I>not</I></FONT><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">
be detected later by those tools.</SPAN></FONT></p>
<P CLASS="western" STYLE="font-style: normal"><FONT FACE="Times New Roman, serif">Static
analysis tools also exist for analyzing executable files, instead of
source code files.  Indeed, [Balakrishnan2005] argues that program
analysis should begin with executables instead of source code,
because only the executables are actually run and source code
analysis can be misled.  To address this, there are efforts to
compute better higher-level constructs from executable code, but in
the general case this is still a difficult research area
[Linger2006].</FONT></p>
<P CLASS="western" STYLE="font-style: normal"><FONT FACE="Times New Roman, serif">[Wysopal]
presents a number of heuristics that can be used to statically detect
some application backdoors in executable files.  This includes
identifying static variables that &ldquo;look like&rdquo; usernames,
passwords, or cryptographic keys, searching for network application
programmer interface (API) calls in applications where they are
unexpected, searching for standard date/time API calls (which may
lead to a time bomb), and so on.  Unfortunately, many malicious
programs will not be detected by such heuristics, and as noted above,
attackers can develop malicious software in ways that specifically
avoid detection by the heuristics of such tools.</FONT></p>
<P CLASS="western" STYLE="font-style: normal"><FONT FACE="Times New Roman, serif">Many
static analysis tools for executables use the same approach as many
static analysis tools for source code: they search for specific
programs or program fragments known to be problematic.  The most
obvious case are virus-checkers; though it is possible to examine
behavior, and some anti-virus programs are increasingly doing so,
historically &ldquo;anti-virus&rdquo; programs have a set of patterns
of known viruses, which is constantly updated and used to search
various executables (e.g., in a file or boot record) to see if these
patterns are present [Singh2002] [Lapell2006].  However, as noted in
Fred Cohen&rsquo;s initial work on computer viruses [Cohen1985],
viruses can mutate as they propagate, and it is not possible to
create a pattern listing all-and-only malicious programs. 
[Christodorescu2003] attempts to partially counter this; this paper
regards malicious code detection as an obfuscation-deobfuscation game
between malicious code writers and researchers, and presents an
architecture for detecting known malicious patterns in executables
that are hidden by common obfuscation techniques.  Even this more
robust architecture does not work against different malicious
patterns, nor against different obfuscation techniques.</FONT></p>
<P CLASS="western" STYLE="font-style: normal"><FONT FACE="Times New Roman, serif">Of
course, even if tools cannot find malicious code, detailed human
review can be used at the source or executable level if the software
is critical enough to warrant it.  For example, the Open Berkeley
Software Distribution (OpenBSD) operating system source code is
regularly and purposefully examined by a team of people with the
explicit intention of finding and fixing security holes, and as a
result has an excellent security record [Payne2002].  The Strategic
Defense Initiative Organization (SDIO), now named the Missile Defense
Agency (MDA), even developed a set of process requirements to counter
malicious and unintentional vulnerabilities, emphasizing multi-person
knowledge and review along with configuration management and other
safeguards [SDIO1993].</FONT></p>
<P CLASS="western" STYLE="font-style: normal"><FONT FACE="Times New Roman, serif">Unfortunately,
the trusting trust attack can render human reviews moot if there is
no technique to counter the attack.  The trusting trust attack
immediately renders examination of the source code inadequate,
because the executable code need not correspond to the source code. 
Thompson&rsquo;s attack subverted the symbolic debugger, so in that
case, even human review of the executable could fail to detect the
attack.  Thus, human reviews are less convincing unless the trusting
trust attack is itself countered.</FONT></p>
<p><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">Human
review also presumes that other humans examining source code or
executables will be able to detect malicious code.  In large code
bases, this can be a challenge simply due to their size and
complexity.  In addition, it is possible for an adversary to create
source code that </SPAN></FONT><FONT FACE="Times New Roman, serif"><I>appears</I></FONT><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">
to work correctly, yet actually performs a malevolent action </SPAN></FONT><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">instead.
 This dissertation uses the term </SPAN></FONT><FONT FACE="Times New Roman, serif"><I>maliciously
misleading code </I></FONT><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">for
any source code that is intentionally designed to look benign, yet
creates a vulnerability (including an attack).  The topic of
maliciously misleading code is further discussed in section </SPAN></FONT><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">8.11</SPAN></FONT><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">.</SPAN></FONT></p>
<H3 CLASS="western"><A NAME="2.4.2.Dynamic analysis|outline"></A>2.4.2 Dynamic
analysis</H3>
<P CLASS="western" STYLE="font-style: normal"><FONT FACE="Times New Roman, serif">It
is also possible to use dynamic techniques in an attempt to detect
and/or counter vulnerabilities by examining the activities of a
system, and then halting or examining the system when those
activities are suspicious.  A trivial example is execution testing,
where a small set of inputs are provided and the inputs are checked
to see if they are correct.   However, dynamic analysis is completely
inadequate for countering the trusting trust attack.</FONT></p>
<P CLASS="western" STYLE="font-style: normal"><FONT FACE="Times New Roman, serif">Traditional
execution testing is unlikely to counter the trusting trust attack. 
Such attacks will only &ldquo;trigger&rdquo; on very specific inputs,
as discussed in section 3.2, so even if the executable is examined in
detail, it is extremely unlikely that traditional execution testing
will detect this problem.</FONT></p>
<P CLASS="western" STYLE="font-style: normal"><FONT FACE="Times New Roman, serif">Detecting
at run-time arbitrary corrupted code in a compiler or the executable
code it generates is very difficult.  The fundamental behavior of a
corrupted compiler &ndash; that it accepts source code and generates
an executable &ndash; is no different from a uncorrupted one. 
Similarly, any malicious code a compiler inserts into other programs
can often be made to behave normally in most cases.  For example, a
login program with a trap door (a hidden username and/or password)
has the same general behavior: It decides if a user may log in and
what privileges to apply.  Indeed, it may act completely correctly as
long as the hidden username and/or password are not used.</FONT></p>
<P CLASS="western" STYLE="font-style: normal"><FONT FACE="Times New Roman, serif">In
theory, continuous comparison of an executable&rsquo;s behavior at
run-time to its source code could detect differences between the
executable and source code.  Unfortunately, this would need to be
done all the time, draining performance.  Even worse, tools to do
this comparison, given modern compilers producing highly optimized
code, would be far more complex than a compiler, and would themselves
be vulnerable to attack.</FONT></p>
<P CLASS="western" STYLE="font-style: normal"><FONT FACE="Times New Roman, serif">Given
an extremely broad definition of &ldquo;system&rdquo;, the use of
software configuration management tools and change detection tools
like Tripwire [Kim1994] could be considered dynamic techniques for
countering malicious software.  Both enable detection of changes in
the behavior of a larger system.  Certainly a configuration
management system could be used to record changes made to compiler
source, and then used to enable reviewers to examine just the
differences.  But again, such review presupposes that any
vulnerability in an executable could be revealed by analyzing its
source code, a presupposition the trusting trust attack subverts.</FONT></p>
<p><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">A
broader problem is that once code is running, </SPAN></FONT><FONT FACE="Times New Roman, serif"><I>some</I></FONT><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">
programs must be trusted, and at least some of that code will almost
certainly have been generated by a compiler.  Any program that
attempts to monitor execution might itself be subverted, just as
Thompson </SPAN></FONT><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">subverted
the symbolic debugger, unless there is a technique to prevent it.  In
any case, it would be better to detect and counter malicious code
</SPAN></FONT><FONT FACE="Times New Roman, serif"><I>before</I></FONT><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">
it executed, instead of trying to detect malicious code&rsquo;s
execution while or after it occurs.</SPAN></FONT></p>
<H2 CLASS="western"><A NAME="2.5.Diversity for security|outline"></A>2.5 Diversity
for security</H2>
<p>There are a number of papers and articles about
employing diversity to aid computer security, though they generally
do not discuss or examine how to use diversity to counter Trojan
horses inside compilers themselves or the compilation environment.</p>
<p>Geer et al. strongly argue that a monoculture (an
absence of diversity) in computing platforms is a serious security
problem [Geer2003] [Bridis2003], but do not discuss employing
compiler diversity to counter this particular attack.</p>
<p>Forrest et al argue that run-time diversity in
general is beneficial for computer security.  In particular, their
paper discusses techniques to vary final executables by &ldquo;randomized&rdquo;
transformations affecting compilation, loading, and/or execution. 
Their goal was to automatically change the executable (as seen at
run-time) in some random ways sufficient to make it more difficult to
attack.  The paper provides a set of examples, including
adding/deleting nonfunctional code, reordering code, and varying
memory layout.  They demonstrated the concept through a compiler that
randomized the amount of memory allocated on a stack frame, and
showed that the approach foiled a simple buffer overflow attack
[Forrest1997].  Again, they do not attempt to counter corrupted
compilers.</p>
<p>John Knight and Nancy Leveson performed an
experiment with &ldquo;N-version programming&rdquo; and showed that,
in their experiment, &ldquo;the assumption of independence of errors
that is fundamental to some analyses of N-version programming does
not hold&rdquo; [Knight1986] [Knight1990].  As will be explained in
section 4.7, this result does not invalidate DDC.</p>
<H2 CLASS="western"><A NAME="__RefHeading__37236461"></A><A NAME="2.6.Subversion of software is a real problem|outline"></A>
2.6 Subversion of software is a real problem</H2>
<p>Subversion of software is not just a theoretical
possibility; it is a current problem.  One book on computer crime
lists various kinds of software subversion as attack methods (e.g.,
trap doors, Trojan horses, viruses, worms, salamis, and logic bombs)
[Icove1995, 57-58].  CERT<A CLASS="sdfootnoteanc" NAME="sdfootnote5anc" HREF="#sdfootnote5sym"><SUP>5</SUP></A>
has published a set of case studies of &ldquo;persons who used
programming techniques to commit malicious acts against their
organizations&rdquo; [Cappelli2008].  Examples of specific software
subversion or subversion attempts include:</p>
<UL>
	<LI><P CLASS="list-1-western">Michael Lauffenburger inserted a logic
	bomb into a program at defense contractor General Dynamics, his
	employer.  The bomb would have deleted vital rocket project data in
	1991, including much that was unrecoverable, but another employee
	stumbled onto it before it was triggered [AP1991] [Hoffman1991].</p>
	<LI><P CLASS="list-1-western" STYLE="font-style: normal"><FONT FACE="Times New Roman, serif">Timothy
	Lloyd planted a 6-line logic bomb into the systems of Omega
	Engineering, his employer, that went off on July 31, 1996.  This
	erased all of the company&rsquo;s contracts and proprietary software
	used by their manufacturing tools, resulting in an estimated $12
	million in damages, 80 people permanently losing their jobs, and the
	loss of their competitive edge in the electronics market space. 
	Plant manager Jim Ferguson stated flatly, &ldquo;We will never
	recover&rdquo;.  On February 26, 2002, a judge sentenced Lloyd to 41
	months in prison, three years of probation, and ordered him to pay
	more than $2 million in damages to Omega [Ulsh2000] [Gardian].</FONT></p>
	<LI><P CLASS="list-1-western" STYLE="font-style: normal"><FONT FACE="Times New Roman, serif">Roger
	Duronio worked at UBS PaineWebber&rsquo;s offices in Weehawken,
	N.J., and was with the company for two years as a system
	administrator.  Apparently dissatisfied with his pay, he installed a
	logic bomb to detonate on March 4, 2002, and resigned from the
	company.  When the logic bomb went off, it caused over 1,000 of
	their 1,500 networked computers to begin deleting files.  This cost
	UBS PaineWebber more than $3 million to assess and repair the
	damage, plus an undetermined amount from lost business.  Duronio was
	sentenced to 97 months in federal prison (the maximum per the U.S.
	sentencing guidelines), and ordered to make $3.1 million in
	restitution [DoJ2006] [Gaudin2006b].  The attack was only a few
	lines of C code, which examined the time to see if it was the
	detonation time, and then (if so) executed a shell command to erase
	everything [Gaudin2006a].</FONT></p>
	<LI><P CLASS="list-1-western"><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">An
	unnamed developer inside Borland inserted a back door into the
	Borland/Inprise Interbase Structured Query Language (SQL) database
	server around 1994.  This was a &ldquo;superuser&rdquo; account
	(&ldquo;politically&rdquo;) with a known password (&ldquo;correct&rdquo;),
	which could not be &ldquo;changed using normal operational </SPAN></FONT><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">commands,
	nor [deleted] from existing vulnerable servers&rdquo;.  Versions
	released to the public from 1994 through 2001 included this back
	door.  Originally Interbase was a proprietary program sold by
	Borland/Inprise.  However, it was released as open source software</SPAN></FONT><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal"><A CLASS="sdfootnoteanc" NAME="sdfootnote6anc" HREF="#sdfootnote6sym"><SUP>6</SUP></A></SPAN></FONT><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">
	in July 2000, and less than six months later the open source
	</SPAN></FONT><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">software
	developers discovered the vulnerability [Havrilla2001a]
	[Havrilla2001b].  The Firebird project, an alternate open source
	software package based on the same Interbase </SPAN></FONT><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">code,
	was also affected.  Jim Starkey, who launched InterBase but </SPAN></FONT><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">left
	in 1991 before the back door was added to the software in 1994,
	stated that he believed that this back door was not malicious, but
	simply added to enable one part of the database software to
	communicate with another part </SPAN></FONT><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">[Shankland2001].
	 However, this code had the hallmarks of many malicious back doors:
	It added a special account that was (1) undocumented, (2) cannot be
	changed, and (3) gave complete control to the requester.</SPAN></FONT></p>
	<LI><P CLASS="list-1-western"><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">An
	unknown attacker attempted to insert a malicious back door in the
	Linux kernel in 2003.  The two new lines were crafted to </SPAN></FONT><FONT FACE="Times New Roman, serif"><I>appear</I></FONT><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">
	legitimate, by using an &ldquo;=&rdquo; where a &ldquo;==&rdquo;
	would be expected.  The configuration management tools immediately
	identified a discrepancy, and examination of the changes by the
	Linux developers quickly determined that it was an attempted attack
	[Miller2003] [Andrews2003].</SPAN></FONT></p>
</UL>
<P CLASS="western" STYLE="page-break-before: auto; page-break-after: avoid">
More recently, in 2009 the Win32.Induc virus was discovered in the
wild.  This virus attacks Delphi compiler installations, modifying
the compiler itself.  Once the compiler is infected, all programs
compiled by that compiler will be infected [Mills2009] [Feng2009]. 
Thus, countering subverted compilers is no longer an academic
exercise; attacks on compilers have already occurred.</p>
<p>Many have noted insertion of malicious code into
software as an important risk:</p>
<UL>
	<LI VALUE=1><P CLASS="list-1-western">Many have noted subversion of
	software as an issue in electronic voting machines [Saltman1988]
	[Kohno2004] [Feldman2006] [Barr2007].</p>
	<LI><P CLASS="list-1-western" STYLE="font-style: normal"><FONT FACE="Times New Roman, serif">The
	U.S. Department of Defense (DoD) established a &ldquo;software
	assurance initiative&rdquo; in 2003 to examine software assurance
	issues in defense software, including how to counter intentionally
	inserted malicious code [Komaroff2005].  In 2004, the U.S. General
	Accounting Office (GAO) criticized the DoD, claiming that the DoD
	&ldquo;policies do not fully address the risk of using foreign
	suppliers to develop weapon system software... policies [fail to
	focus] on insider threats, such as the insertion of malicious code
	by software developers...&rdquo; [GAO2004].  The U.S. Committee on
	National Security Systems (CNSS) defines Software Assurance (SwA) as
	&ldquo;the level of confidence that software is free from
	vulnerabilities, either intentionally designed into the software or
	accidentally inserted at anytime during its lifecycle, and that the
	software functions in the intended manner&rdquo; [CNSS2006].  Note
	that intentionally-created vulnerabilities inserting during software
	development are specifically included in this definition.</FONT></p>
	<LI><P CLASS="list-1-western" STYLE="font-style: normal"><FONT FACE="Times New Roman, serif">The
	President&rsquo;s Information Technology Advisory Committee (PITAC)
	found that &ldquo;Vulnerabilities in software that are introduced by
	mistake or poor practices are a serious problem today.  In the
	future, the Nation may face an even more challenging problem as
	adversaries &ndash; both foreign and domestic &ndash; become
	increasingly sophisticated in their ability to insert malicious code
	into critical software&rdquo; [PITAC2005, 9].  The U.S. National
	Strategy to Secure Cyberspace reported that a &ldquo;spectrum of
	malicious actors can and do conduct attacks against our critical
	information infrastructures.  Of primary concern is the threat of
	organized cyber attacks capable of causing debilitating disruption
	to our Nation&rsquo;s critical infrastructures, economy, or national
	security.... [and could subvert] our infrastructure with back doors
	and other means of access.&rdquo; [PCIB2003,6]</FONT></p>
	<LI><P CLASS="list-1-western" STYLE="font-style: normal"><FONT FACE="Times New Roman, serif">In
	2003, China's State Council announced a plan requiring all
	government ministries to buy only locally produced software when
	upgrading, and to increase use of open source software, in part due
	to concerns over &ldquo;data spyholes installed by foreign powers&rdquo;
	in software they procured for government use [CNETAsia2003].</FONT></p>
</UL>
<P CLASS="western" STYLE="font-style: normal"><FONT FACE="Times New Roman, serif">In
short, as software becomes more pervasive, subversion of it becomes
ever more tempting to powerful individuals and institutions. 
Attackers can even buy legitimate software companies, or build them
up, to widely disseminate quality products at a low price... but with
&ldquo;a ticking time bomb inside&rdquo; [Schwartau1994, 304-305].</FONT></p>
<P CLASS="western" STYLE="font-style: normal"><FONT FACE="Times New Roman, serif">Not
all articles about subversion specifically note the trusting trust
attack as an issue, but as noted earlier, for source code evaluations
to be strongly credible, there must be a way to justify that the
source code being examined accurately represents what is being
executed&mdash;yet the trusting trust attack subverts that very
claim.  Internet Security System&rsquo;s David Maynor argues that the
risk of attacks on compilation processes is increasing [Maynor2004] 
[Maynor2005]; Karger and Schell noted that the trusting trust attack
was still a problem in 2000 [Karger2000], and some technologists
doubt that computer-based systems can ever be secure because of the
existence of this attack [Gauis2000].  Anderson et al. argue that the
general risk of subversion is increasing [Anderson2004].  Williams
argues that the risk from malicious developers should be taken
seriously, and describes a variety of techniques that malicious
programmers can use to insert and hide attacks in an enterprise Java
application [Williams2009].</FONT></p>
<H2 CLASS="western"><A NAME="2.7.Previous DDC paper|outline"></A>2.7 Previous
DDC paper</H2>
<P CLASS="western" STYLE="font-style: normal"><FONT FACE="Times New Roman, serif">Initial
results from DDC research were published by the Annual Computer
Security Applications Conference (ACSAC) in [Wheeler2005].  This
paper was well-received, for example, Bruce Schneier wrote a glowing
review and summary of the paper [Schneier2006], and the Spring 2006
class &ldquo;Secure Software Engineering Seminar&rdquo; of Dr. James
Walden (Northern Kentucky University) included it in its required
reading list.</FONT></p>
<P CLASS="western" STYLE="font-style: normal"><FONT FACE="Times New Roman, serif">This
dissertation includes the results of [Wheeler2005] and refines it
further:</FONT></p>
<UL>
	<LI><P CLASS="list-1-western">The definition of DDC is generalized
	to cover the case where the compiler is not self-regenerating. 
	Instead, a compiler-under-test may have been generated using a
	different &ldquo;parent&rdquo; compiler.  Self-regeneration (where
	the putative source code of the parent and compiler-under-test are
	the same) is now a special case.</p>
	<LI><P CLASS="list-1-western">A formal proof of DDC is provided,
	including a formalization of DDC assumptions.  The earlier paper
	includes only an informal justification.  The proof covers cases
	where the environments are different, including the effect of
	different text representation systems.</p>
	<LI><P CLASS="list-1-western">A demonstration of DDC with a known
	maliciously corrupted compiler is shown.  As expected, DDC detects
	this case.</p>
	<LI><P CLASS="list-1-western">A demonstration of DDC with an
	industrial-strength compiler (GCC) is shown.</p>
	<LI><P CLASS="list-1-western">The discussion on the application of
	DDC is extended to cover additional challenges, including its
	potential application to hardware.</p>
</UL>
<H1 CLASS="western"><A NAME="3.Description of threat|outline"></A>3 Description
of threat</H1>
<p>Thompson describes how to perform the trusting
trust attack, but there are some important characteristics of the
attack that are not immediately obvious from his presentation.  This
chapter examines the threat in more detail and introduces terminology
to describe the threat.  This terminology will be used later to
explain how the threat is countered.  For a more detailed model of
this threat, see [Goerigk2000] and [Goerigk2002] which provide a
formal model of the trusting trust attack.</p>
<p>The following sections describe what might
motivate an attacker to actually perform such an attack, and the
mechanisms an attacker uses that make this attack work (triggers,
payloads, and non-discovery).</p>
<H2 CLASS="western"><A NAME="__RefHeading__36351251"></A><A NAME="3.1.Attacker motivation|outline"></A>
3.1 Attacker motivation</H2>
<p>Understanding any potential threat involves
determining the benefits to an attacker of an attack, and comparing
them to the attacker&rsquo;s risks, costs, and difficulties. 
Although this trusting trust attack may seem exotic, its large
benefits may outweigh its costs to some attackers.</p>
<p>The potential benefits are immense to a malicious
attacker.  A successful attacker can completely control all systems
that are compiled by that executable and that executable&rsquo;s
descendants, e.g., they can have a known login (e.g., a &ldquo;backdoor
password&rdquo;) to gain unlimited privileges on entire classes of
systems.  Since detailed source code reviews will not find the
attack, even defenders who have highly valuable resources and check
all source code are vulnerable to this attack.</p>
<p>For a widely-used compiler, or one used to compile
a widely-used program or operating system, this attack could result
in global control.  Control over banking systems, financial markets,
militaries, or governments could be gained with a single attack.  An
attacker could possibly acquire enormous funds (by manipulating the
entire financial system), acquire or change extremely sensitive
information, or disable a nation&rsquo;s critical infrastructure on
command.</p>
<p>An attacker can perform the attack against
multiple compilers as well.  Once control is gained over all systems
that use one compiler, trust relationships and network
interconnections could be exploited to ease attacks against other
compiler executables.  This would be especially true of a patient and
careful attacker; once a compiler is subverted, it is likely to stay
subverted for a long time, giving an attacker time to use it to
launch further attacks.</p>
<p>An attacker (either an individual or an
organization) who subverted a few of the most widely used compilers
of the most widely-used operating systems could effectively control,
directly or indirectly, almost every computer in existence.</p>
<p>The attack requires knowledge about compilers,
effort to create the attack, and access (gained somehow) to the
compiler executable, but all are achievable.  Compiler construction
techniques are standard Computer Science course material.  The attack
requires the insertion of relatively small amounts of code, so the
attack can be developed by a single knowledgeable person.  Access
rights to change the relevant compiler executables are usually harder
to acquire, but there are clearly some who have such privileges
already, and a determined attacker may be able to acquire such
privileges through a variety of means (including network attack,
social engineering, physical attack, bribery, and betrayal).</p>
<p>The amount of power this attack offers is great,
so it is easy to imagine a single person deciding to perform this
attack for their own ends.  Individuals entrusted with compiler
development might succumb to the temptation if they believed they
could not be caught.  Today there are many virus writers, showing
that many people are willing to write malicious code even without
gaining the control this attack can provide.</p>
<p>It <SPAN STYLE="font-style: normal">is true that
there are </SPAN><I>other</I><SPAN STYLE="font-style: normal">
devastating attacks that an attacker could perform in the current
environment.  Many users routinely download and install massive
executables, including large patches and updates, that could include
malicious code, and few users routinely examine executable machine
code or byte code.  Few users examine source code even when they </SPAN><I>can</I><SPAN STYLE="font-style: normal">
receive it, and in many cases users are not legally allowed to
examine the source code.  As a result, here are some other
potentially-devastating attacks that could be performed besides the
trusting trust attack:</SPAN></p>
<UL>
	<LI><P CLASS="list-1-western" STYLE="font-style: normal">An attacker
	can find unintentional vulnerabilities in existing executables, and
	then write code to exploit them.</p>
	<LI><P CLASS="list-1-western" STYLE="font-style: normal">An attacker
	could modify or replace a widely-used/important executable during or
	after its compilation, but before its release by its supplier.  For
	example, an attacker might be able to do this by bribing or
	extorting a key person in the supplying organization, by becoming a
	key person, or by subverting the supplier&rsquo;s infrastructure.</p>
	<LI><P CLASS="list-1-western" STYLE="font-style: normal">Even when
	users only accept source code and compile the source code
	themselves, an attacker could insert an intentional attack in the
	source code of a widely-used/important program in the hope that no
	one will find it later.</p>
	<LI><P CLASS="list-1-western" STYLE="font-style: normal">An attacker
	with a long-range plan could develop a useful program specifically
	so that they can embed or eventually embed an attack (using the two
	attacks previously noted).  In such cases the attacker might become
	a trusted (but not trustworthy) supplier.</p>
</UL>
<p><SPAN STYLE="font-style: normal">However, there is
a </SPAN><I>fundamental difference</I><SPAN STYLE="font-style: normal">
with the attacks listed above and the trusting trust attack: there
are </SPAN><I>known detection techniques</I><SPAN STYLE="font-style: normal">
for these attacks:</SPAN></p>
<UL>
	<LI><P CLASS="list-1-western" STYLE="font-style: normal">Static and
	dynamic analysis can detect many unintentional vulnerabilities,
	because they tend to be caused by common implementation mistakes. 
	In addition, software designs can reduce the damage from such
	mistakes, and some implementation languages can completely eliminate
	certain kinds of mistakes.  Many documents discuss how to develop
	secure software for those trying to do so, including [Wheeler2003s]
	and [NDIA2008].</p>
	<LI><P CLASS="list-1-western"><SPAN STYLE="font-style: normal">If an
	attacker swaps the expected executable with a malicious executable,
	without using a trusting trust attack, the attack can be discovered
	by recompiling the </SPAN><SPAN STYLE="font-style: normal">source
	code to see if it produces the same results (presuming a
	deterministic compiler is used).  Even if it is not discovered,
	recompilation of the next version of the executable will often
	eliminate the attack if it is not a &ldquo;trusting trust&rdquo;
	attack.</SPAN></p>
	<LI><P CLASS="list-1-western"><SPAN STYLE="font-style: normal">If an
	attacker inserts an intentional attack or vulnerability in the
	source code, this can be revealed by examining the source code (see
	section </SPAN><SPAN STYLE="font-style: normal">8.11</SPAN><SPAN STYLE="font-style: normal">
	for a discussion on attacks which are intentionally difficult to
	find in source code).</SPAN></p>
	<LI><P CLASS="list-1-western"><SPAN STYLE="font-style: normal">If
	the user does not fully trust the supplier to perform such tests,
	then these tests could be performed by the user (if the user has the
	necessary information), or by a third party who is trusted by the
	user and supplier (if the supplier is unwilling to give necessary
	information to the user, but are willing to give it to such a third
	party).  If the supplier is unwilling to provide the necessary
	information to either the user or a third party, the user </SPAN><SPAN STYLE="font-style: normal">could
	reasonably conclude that using such suppliers is a higher risk than
	using suppliers who </SPAN><I>are</I><SPAN STYLE="font-style: normal">
	willing to provide this information, and then take steps based on
	that conclusion.</SPAN></p>
</UL>
<p><SPAN STYLE="font-style: normal">In contrast,
there has been </SPAN><I>no</I><SPAN STYLE="font-style: normal">
known effective detection technique for the trusting trust attack. 
Thus, even if all of these well-known detection techniques were used,
users would </SPAN><I>still</I><SPAN STYLE="font-style: normal"> be
vulnerable to the trusting trust attack.  What is more, the
subversion can persist indefinitely; the longer it remains
undetected, the more difficult it will be to reliably identify the
perpetrator even if it </SPAN><I>is</I><SPAN STYLE="font-style: normal">
detected.</SPAN></p>
<p>Given such extraordinarily large benefits to an
attacker, and the lack of an effective detection mechanism, a highly
resourced organization (such as a government) might decide to
undertake it.  Such an organization could supply hundreds of experts,
working together full-time to deploy attacks over a period of
decades.  Defending against this scale of attack is far beyond the
defensive abilities of most companies and non-profit organizations
who develop and maintain popular compilers.</p>
<p>In short, this is an attack that can yield
complete control over a vast number of systems, even those systems
whose defenders perform independent source code analysis (e.g., those
who have especially high-value assets), so it is worth defending
against.</p>
<H2 CLASS="western"><A NAME="__RefHeading__32211702"></A><A NAME="3.2.Triggers, payloads, and non-discovery|outline"></A>
3.2 Triggers, payloads, and non-discovery</H2>
<p>The trusting trust attack depends on three things:
triggers, payloads, and non-discovery.  For purposes of this
dissertation, a &ldquo;trigger&rdquo; is a condition determined by an
attacker in which a malicious event is to occur (e.g., when malicious
code is to be inserted into a program).  A &ldquo;payload&rdquo; is
the code that actually performs the malicious event (e.g., the
inserted malicious code and the code that causes its insertion).  The
attack also depends on non-discovery by its victims, that is, it
depends on victims not detecting the attack (before, during, or after
it has been triggered)<A CLASS="sdfootnoteanc" NAME="sdfootnote7anc" HREF="#sdfootnote7sym"><SUP>7</SUP></A>.</p>
<p>For this attack to be valuable, there must be at
least two triggers that can occur during compilation: at least one to
cause a malicious attack directly of value to the attacker (e.g.,
detecting compilation of a &ldquo;login&rdquo; program so that a
Trojan horse can be inserted into it), and one to propagate attacks
into future versions of the compiler executable.</p>
<p>If a trigger is activated when the attacker does
not intend the trigger to be activated, the probability of detection
increases.  However, if a trigger is not activated when the attacker
intends it to be activated, then that particular attack will be
disabled.  If all the attacks by the compiler against itself are
disabled, then the attack will no longer propagate; once the compiler
is recompiled, the attacks will disappear.  Similarly, if a payload
requires a situation that (through the process of change) disappears,
then the payload will no longer be effective (and its failure may
reveal the attack).</p>
<p>In this dissertation, &ldquo;fragility&rdquo; is
the susceptibility of the trusting trust attack to failure, i.e.,
that a trigger will activate when the attacker did not wish it to
(risking a revelation of the attack), fail to trigger when the
attacker would wish it to, or that the payload will fail to work as
intended by the attacker.  Fragility is unfortunately less helpful to
the defender than it might first appear.  An attacker can counter
fragility by simply incorporating many narrowly-defined triggers and
payloads.  Even if a change causes one trigger to fail, another
trigger may still fire.  By using multiple triggers and payloads, an
attacker can attack multiple points in the compiler and attack
different subsystems as final targets (e.g., the login system, the
networking interface, and so on).  Thus, even if some attacks fail
over time, there may be enough vulnerabilities in the resulting
system to allow attackers to re-enter and re-insert new triggers and
payloads into a malicious compiler.  Even if a compiler misbehaves
from malfunctioning malware, the results could appear to be a
mysterious compiler defect; if programmers &ldquo;code around&rdquo;
the problem, the attack will stay undetected.</p>
<p>Since attackers do not want their malicious code
to be discovered, they may limit the number of triggers/payloads they
insert and the number of attacked compilers.  In particular,
attackers may tend to attack only &ldquo;important&rdquo; compilers
(e.g., compilers that are widely-used or used for high-asset
projects), since each compiler they attack (initially or to add new
triggers and payloads) increases the risk of discovery.  However,
since these attacks can allow an attacker to deeply penetrate systems
generated with the compiler, maliciously corrupted compilers make it
easier for an attacker to re-enter a previously penetrated
development environment to refresh an executable with new triggers
and payloads.  Thus, once a compiler has been subverted, it may be
difficult to undo the damage without a process for ensuring that
there are no attacks left.</p>
<p>The text above might give the impression that only
the compiler itself, as usually interpreted, can influence results
(or how they are run), yet this is obviously not true.  Assemblers
and loaders are excellent places to place a trigger (the popular GCC
C compiler actually generates assembly language as text and then
invokes an assembler).  An attacker could place the trigger mechanism
in the compiler&rsquo;s supporting infrastructure such as the
operating system kernel, libraries, or privileged programs.</p>
<H1 CLASS="western"><A NAME="__RefHeading__33161301"></A><A NAME="4.Informal description of Diverse Double-Compiling (DDC)|outline"></A>
4 Informal description of Diverse Double-Compiling (DDC)</H1>
<p>The idea of diverse double-compiling (DDC) was
first created and posted by Henry Spencer in 1998 [Spencer1998] in a
very short posting.  It was inspired by McKeeman et al&rsquo;s
exercise for detecting compiler defects [McKeeman1970] [Spencer2005].
 Since this time, this idea has been posted in several places,
typically with very short descriptions [Mohring2004] [Libra2004]
[Buck2004].  This chapter describes the graphical notation for
describing DDC that is used in this dissertation.  This is followed
by a brief informal description of DDC, an informal discussion of its
assumptions, a clarification that <SPAN STYLE="font-style: normal">DDC
does </SPAN><I>not</I><SPAN STYLE="font-style: normal"> require that
arbitrary </SPAN><I>different</I><SPAN STYLE="font-style: normal">
compilers produce the same executable output given the same input,
</SPAN>and a discussion of a common special case: Self-parenting
compilers.  This chapter closes by answering some questions,
including: Why not <I>always</I><SPAN STYLE="font-style: normal"> use
the trusted compiler, and why is this different from N-version
programming?</SPAN></p>
<H2 CLASS="western"><A NAME="4.1.Terminology and notation|outline"></A>
4.1 Terminology and notation</H2>
<p>This dissertation focuses on compilers.  For
purposes of this dissertation, compilers execute in some environment,
receiving as input <I>source code</I><SPAN STYLE="font-style: normal">
as well as other input from the environment, and producing a result
termed an </SPAN><I>executable</I><SPAN STYLE="font-style: normal">. 
A compiler is, itself, an executable.</SPAN></p>
<p><SPAN ID="Frame8" DIR="LTR" STYLE="float: left; width: 3.7in; height: 2.54in; border: none; padding: 0in; background: #ffffff">
	<DIV ID="Frame9" DIR="LTR" STYLE="position: absolute; top: 0.03in; left: 0.05in; width: 3.6in; height: 2.24in; border: 1px solid #000000; padding: 0.06in; background: #ffffff"><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.67in; left: 2.83in; width: 61px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_8088fe3.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: -11742.58in; left: -11742.58in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_2defd244.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: -11742.58in; left: -11742.58in; width: 30px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_5c829df1.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: -11742.58in; left: -11742.58in; width: 18px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m74bcd0cb.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: -11742.58in; left: -11742.58in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m4c4cc980.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.84in; left: 1.76in; width: 23px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m101f0448.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.69in; left: 1.06in; width: 172px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_1aba8ab.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.12in; left: 1.15in; width: 129px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_428ef49.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.73in; left: 0.15in; width: 70px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_59cce2c6.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1in; left: 0.79in; width: 93px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_6fd86852.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.31in; left: 1.86in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_mc30ba2a.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1in; left: 2in; width: 80px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_17d0dd6b.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.1in; left: 1.88in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_790ba8b4.gif"></SPAN>
		<P CLASS="frame-contents-western"><BR>
		</p>
	</DIV>
	<P ALIGN=CENTER STYLE="margin-top: 0.08in; margin-bottom: 0.08in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<FONT SIZE=3><I>Figure 1: Illustration of graphical notation</I></FONT></p>
</SPAN><BR CLEAR=LEFT>Figure 1 illustrates the notation used in this
dissertation.  A shaded box shows a compilation step, which executes
a compiler (input from the top), processing source code (input from
the left), and uses other input (input from the right), all to
produce an executable (output exiting down).  To distinguish the
different steps, each compilation step will be given a unique name
(shown here as &ldquo;n&rdquo;).  Source code that is purported to be
the source code for the executable Y is notated as <I>s</I><SUB>Y</SUB>.
 The result of a compilation step using compiler X, source code <I>s</I><SUB>Y</SUB>,
other input I (e.g., run-time libraries, random number results, and
thread schedule), and environment E is an executable, notated here as
compile(<I>s</I><SUB>Y</SUB>,&nbsp;c<SUB>X</SUB>,&nbsp;I,&nbsp;E). 
Where the environment can be determined from context (e.g., it is all
the same) that parameter is omitted; where that is true and any other
input (if relevant) can be inferred, both are omitted yielding the
notation compile(<I>s</I><SUB>Y</SUB>,&nbsp;c<SUB>X</SUB>).  In some
cases, this will be further abbreviated as c(<I>s</I><SUB>Y</SUB>,&nbsp;c<SUB>X</SUB>).</p>
<p>The widely-used &ldquo;T&nbsp;diagram&rdquo; (aka
&ldquo;Bratman&rdquo;) notation is not used in this dissertation. 
T&nbsp;diagrams were originally created by Bratman [Bratman1961], and
later greatly extended and formalized by Earley and Sturgis
[Earley1970].  T&nbsp;diagrams can be very helpful when discussing
certain kinds of bootstrapping approaches.  However, they are not a
universally perfect notation, and this dissertation intentionally
uses a different notation  because the weaknesses of T&nbsp;diagrams
make DDC unnecessarily difficult to describe:</p>
<UL>
	<LI><P CLASS="list-1-western">T&nbsp;diagrams combining multiple
	compilation steps can be very confusing [Mogensen2007, 219].  This
	is a serious problem when representing DDC, since DDC is
	fundamentally about multiple compilation steps.</p>
	<LI><P CLASS="list-1-western">T&nbsp;diagrams quickly grow in width
	when multiple steps are involved; since paper is usually taller than
	it is wide, this can make complex situations more difficult to
	represent on the printed page.  Again, applying DDC involves
	multiple steps.</p>
	<LI><P CLASS="list-1-western">T&nbsp;diagrams do not handle multiple
	sub-components well (e.g., a library embedded in a compiler).  The
	notation can be &ldquo;fudged&rdquo; to do this (see [Early1970,
	609]) but the resulting graphic is excessively complex.  Again,
	compilation of real compilers using DDC often involves handling
	multiple sub-components, making this weakness more important.</p>
	<LI><P CLASS="list-1-western">T&nbsp;diagrams create unnecessary
	clutter when applied to DDC.  In a T&nbsp;diagram, every compiler
	source code and compiler executable, as well as their executions,
	are represented by a T.  This creates unnecessary visual clutter,
	making it difficult to see what is executed and what is not.</p>
</UL>
<p>Niklaus Wirth abandoned T&nbsp;diagrams in his
1996 book on compilers, without even mentioning them [Wirth1996], so
clearly T&nbsp;diagrams are not absolutely required when discussing
compiler bootstrapping.  The notation of this dissertation uses a
single, simple box for each execution of a compiler, instead of a
trio of T&nbsp;shaped figures.  As DDC application becomes complex,
this simplification matters.</p>
<H2 CLASS="western"><A NAME="4.2.Informal description of DDC|outline"></A>
4.2 Informal description of DDC</H2>
<p>In brief, to perform DDC, source code must be
compiled twice.  First, use a separate &ldquo;trusted&rdquo; compiler
to compile the source code of the &ldquo;parent&rdquo; of the
compiler-under-test.  Then, run that resulting executable to compile
the purported source code of the compiler-under-test.  Then, check if
the final result is <I>exactly</I> identical to the original compiler
executable (e.g., bit-for-bit equality) using some trusted means.  If
it is, then the purported source code and executable of the
compiler-under-test correspond, given some assumptions to be
discussed later.</p>
<p><SPAN ID="Frame12" DIR="LTR" STYLE="float: left; width: 5.82in; height: 3.03in; border: none; padding: 0in; background: #ffffff">
	<DIV ID="Frame13" DIR="LTR" STYLE="position: absolute; top: 0.03in; left: 0.05in; width: 5.69in; height: 2.61in; border: 1px solid #000000; padding: 0.06in; background: #ffffff"><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.84in; left: 0.94in; width: 56px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_1a4bf5b2.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.07in; left: 0.43in; width: 50px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m2c24f84.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.88in; left: 0.13in; width: 29px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_1b00229.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.66in; left: 0.94in; width: 56px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m5cc421af.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.89in; left: 0.43in; width: 50px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m2f0eca4.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.28in; left: 1.23in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_18be024f.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.33in; left: 1.28in; width: 58px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m560ba793.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.73in; left: 0.13in; width: 29px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_5b8825a9.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 2.1in; left: 1.23in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_18be024f.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.46in; left: 1.23in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_18be024f.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.34in; left: 1.35in; width: 143px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m7ee120eb.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.08in; left: 0.53in; width: 125px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m78164de7.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.08in; left: 2.78in; width: 259px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m59d1952b.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.84in; left: 3.84in; width: 56px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_753fc5d5.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.07in; left: 3.33in; width: 50px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m2f0eca4.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.88in; left: 3.03in; width: 29px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_1b00229.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.66in; left: 3.84in; width: 56px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m2edc9840.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.89in; left: 3.33in; width: 50px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m2f0eca4.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.28in; left: 4.13in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_18be024f.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.33in; left: 4.22in; width: 29px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_75129c9b.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.73in; left: 3.03in; width: 29px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_5b8825a9.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 2.1in; left: 4.13in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_18be024f.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 2.2in; left: 4.23in; width: 46px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_1e5f3ecf.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.46in; left: 4.13in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_18be024f.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.3in; left: 4.13in; width: 38px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_781f2305.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 2.36in; left: 2.03in; width: 154px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m5c2be613.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 2.06in; left: 2.33in; width: 58px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_75bf7c16.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 2.21in; left: 1.18in; width: 71px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m25f42f94.gif"></SPAN>
		<P CLASS="frame-contents-western"><BR>
		</p>
	</DIV>
	<P ALIGN=CENTER STYLE="margin-top: 0.08in; margin-bottom: 0.08in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<FONT SIZE=3><I>Figure 2: Informal graphical representation of DDC</I></FONT></p>
</SPAN><BR CLEAR=LEFT>Figure 2 presents an informal, simplified
graphical representation of DDC, along with the  claimed origin of
the compiler-under-test (this claimed original process can be
re-executed as a check for self-regeneration).  The dashed line
labeled &ldquo;compare&rdquo; is a comparison for exact equality. 
This figure uses the following symbols:</p>
<UL>
	<LI VALUE=1><P CLASS="list-1-western">c<SUB>A</SUB>: Executable of
	the compiler-under-test, which may be corrupt (maliciously corrupted
	compilers are by definition corrupt).</p>
	<LI><P CLASS="list-1-western"><I>s</I><SUB>A</SUB>: Purported source
	code of compiler c<SUB>A</SUB>.  Our goal is determine if c<SUB>A</SUB>
	and <I>s</I><SUB>A</SUB> correspond.</p>
	<LI><P CLASS="list-1-western">c<SUB>P</SUB>: Executable of the
	compiler that is purported to have generated c<SUB>A</SUB> (it is
	the purported &ldquo;parent&rdquo; of c<SUB>A</SUB>).</p>
	<LI><P CLASS="list-1-western"><I>s</I><SUB>P</SUB>: Purported source
	code of parent c<SUB>P</SUB>.  Often a variant/older version of <I>s</I><SUB>A</SUB>.</p>
	<LI><P CLASS="list-1-western">c<SUB>T</SUB>: Executable of a
	&ldquo;trusted&rdquo; compiler, which must be able to compile <I>s</I><SUB>P</SUB>..
	 The exact meaning of &ldquo;trusted&rdquo; will be explained later.</p>
	<LI><P CLASS="list-1-western">1, 2, o1, o2: Stage identifiers.  Each
	stage executes a compiler.</p>
	<LI><P CLASS="list-1-western">stage1, stage2: The outputs of the DDC
	stages.  Stage1 is a function of c<SUB>T</SUB> and <I>s</I><SUB>P</SUB>,
	and can be represented as c(<I>s</I><SUB>P</SUB>, c<SUB>T</SUB>)
	where &ldquo;c&rdquo; means &ldquo;compile&rdquo;.  Similarly,
	stage2 can be represented as c(<I>s</I><SUB>A</SUB>, stage1) or
	c(<I>s</I><SUB>A</SUB>, c(<I>s</I><SUB>P</SUB>, c<SUB>T</SUB>)).</p>
</UL>
<p>The right-hand-side shows the process that
purportedly generated the compiler-under-test executable c<SUB>A</SUB>
in the first place.  The right-hand-side shows the DDC process.  The
process graphs are very similar, so it should not be surprising that
the results should be identical.  This dissertation formally proves
this (given certain conditions) and demonstrates that this actually
occurs with real-world compilers.</p>
<p>Before performing DDC itself, it is wise to
perform a regeneration check, which checks to see if we can
regenerate c<SUB>A</SUB> using exactly the same process that was
supposedly used to create it originally<A CLASS="sdfootnoteanc" NAME="sdfootnote8anc" HREF="#sdfootnote8sym"><SUP>8</SUP></A>.
 Since c<SUB>A</SUB> was supposed to have been created this way in
the first place, regeneration should produce the same result.  In
practice, the author has found that this is often not the case.  For
example, many organizations&rsquo; configuration control systems do
not record all the information necessary to accurately regenerate a
compiled executable, and the ability to perform regeneration is
necessary for the DDC process.  In such cases, regeneration acts like
the control of an experiment; it detects when we do not have proper
control over all the relevant inputs or environment.  Corrupted
compilers can also pass the regeneration test, so by itself the
regeneration test is not sufficient to reliably detect corrupted
compilers.</p>
<p>We then perform DDC by compiling twice.  These two
compilation steps are the origin of this technique&rsquo;s name: we
compile twice, the first time using a different (diverse) trusted
compiler.  All compilation stages (stage 1 and stage 2, as well as
the regeneration test) could be performed on the same or on different
environments.  Libraries can be handled in DDC by considering them as
part of the compiler (if they are executed in that stage) or part of
the source code (if they are used as input data but not executed in
that stage).</p>
<p>Note that the DDC technique uses a separate
trusted compiler as a check on the compiler-under-test.  The trusting
trust attack assumes that all later generations of the compiler will
be descendants of a corrupted compiler; using a completely different
second compiler can invalidate this assumption.  The trusted compiler
and its environment may be malicious, as long as that does not impact
their result during DDC, and they may be very slow.</p>
<p>The formalized DDC model, along with formalized
assumptions and its proof, are presented in chapter 5.</p>
<H2 CLASS="western"><A NAME="__RefHeading__35596484"></A><A NAME="4.3.Informal assumptions|outline"></A>
4.3 Informal assumptions</H2>
<p>All approaches have assumptions.  These will be
formally and completely stated later, but a brief statement of some
key assumptions should help in understanding the approach:</p>
<UL>
	<LI><P CLASS="list-1-western">DDC must be performed only by trusted
	programs and processes, including a trusted compiler c<SUB>T</SUB>,
	trusted environment(s) to run DDC, a trusted comparer, and trusted
	processes and tools to acquire the compiler-under-test c<SUB>A</SUB>
	and the source code <I>s</I><SUB>P</SUB> and <SPAN LANG="zxx"><I><SPAN STYLE="background: transparent">s</SPAN></I></SPAN><SUB><SPAN LANG="zxx"><SPAN STYLE="background: transparent">A</SPAN></SPAN></SUB>.</p>
	<P CLASS="list-1-western">In this dissertation, something is
	&ldquo;trusted&rdquo; if we have <I>justified confidence</I> that it
	does not have triggers and payloads that would affect the results of
	DDC.  A trusted program or process may have triggers and payloads,
	as long as they do not affect the result.  A trusted program or
	process may have defects, though as shown later, any defects that
	affect its result in DDC are likely to be detected.  Methods to
	increase the level of confidence are discussed in chapter 6.</p>
	<LI><P CLASS="list-1-western">Compiler c<SUB>T</SUB> must have the
	same semantics for the same constructs as required by <I>s</I><SUB>P</SUB>.
	 For example, a Java<SUP>(TM)</SUP> compiler cannot be used directly
	as c<SUB>T</SUB> if <I>s</I><SUB><SPAN STYLE="font-style: normal">P</SPAN></SUB>
	is written in the C language.  If <I>s</I><SUB><SPAN STYLE="font-style: normal">P</SPAN></SUB>
	uses any nonstandard language extensions, or depends on a construct
	not defined by a published language specification, then c<SUB>T</SUB>
	must implement them in the way required by <I>s</I><SUB><SPAN STYLE="font-style: normal">P</SPAN></SUB>.
	 Any defect in c<SUB>T</SUB> can also cause problems if it affects
	compiling <I>s</I><SUB>P</SUB> (otherwise it is irrelevant for DDC).</p>
	<LI><P CLASS="list-1-western">The compiler defined by <I>s</I><SUB><SPAN STYLE="font-style: normal">P</SPAN></SUB>
	should be <SPAN LANG="en-US">deterministic</SPAN> given its inputs. 
	That is, once compiled, and then executed multiple times given the
	same inputs, it should produce exactly the same outputs each time. 
	If the compiler described by <I>s</I><SUB>P</SUB> is
	non-deterministic, in some cases it could be handled by running the
	process multiple times, but it is often easier to control enough
	inputs to make the compiler deterministic.  Note that the
	regeneration process is helpful in detecting undesired
	non-determinism.</p>
</UL>
<p><SPAN STYLE="font-style: normal">DDC does not
determine if the source code is free of malicious code; DDC</SPAN>
can only show if source code corresponds to a given executable.  If
the goal is to show that the compiler c<SUB>A</SUB> is not malicious,
then the source code (<I>s</I><SUB>A</SUB> and <I>s</I><SUB>P</SUB>)
must also be reviewed to determine that the source code is not
malicious.  This is still an important change&mdash;it is typically
far easier to review source code than to review executables.  In some
cases <I>s</I><SUB>A</SUB> and <I>s</I><SUB>P</SUB> are extremely
similar; in such cases they can be simultaneously reviewed by
reviewing one and then reviewing their differences.  There is also an
important special case&mdash;when <I>s</I><SUB><SPAN STYLE="font-style: normal">P</SPAN></SUB><SPAN STYLE="font-style: normal">=</SPAN><I>s</I><SUB><SPAN STYLE="font-style: normal">A</SPAN></SUB><SPAN STYLE="font-style: normal">&mdash;that
is described in section </SPAN><SPAN STYLE="font-style: normal">4.5</SPAN><SPAN STYLE="font-style: normal">.</SPAN></p>
<p><SPAN STYLE="font-style: normal">But first, we
must clarify that DDC does </SPAN><I>not</I><SPAN STYLE="font-style: normal">
require something that is unlikely.</SPAN></p>
<H2 CLASS="western" STYLE="font-style: normal"><A NAME="4.4.DDC does not require that different compilers produce identical executables|outline"></A>
4.4 DDC does not require that different compilers produce identical
executables</H2>
<p><SPAN STYLE="font-style: normal">DDC does </SPAN><I>not</I><SPAN STYLE="font-style: normal">
require that arbitrary </SPAN><I>different</I><SPAN STYLE="font-style: normal">
compilers produce the same executable output, even given the same
input.  Indeed, this would be extremely unlikely for source code the
size of typical compilers.  Compiler executables c</SPAN><SUB><SPAN STYLE="font-style: normal">A</SPAN></SUB><SPAN STYLE="font-style: normal">,
c</SPAN><SUB><SPAN STYLE="font-style: normal">P</SPAN></SUB><SPAN STYLE="font-style: normal">,
and c</SPAN><SUB><SPAN STYLE="font-style: normal">T</SPAN></SUB><SPAN STYLE="font-style: normal">
might even run on or generate code for different CPU architectures,
making identical results extremely unlikely.</SPAN></p>
<P CLASS="western" STYLE="widows: 0; orphans: 0; page-break-before: auto; page-break-after: avoid">
Instead, DDC runs a different executable; under certain conditions,
this must produce the &ldquo;same&rdquo; result.  This is perhaps
best explained by example.  Imagine two properly-working C compilers,
both of which are given this source code to print the result of
calculating 2+2:</p>
<PRE CLASS="western" STYLE="page-break-before: auto; page-break-after: avoid">	#include &lt;stdio.h&gt;<BR>	main() {<BR>		printf(&quot;%d\n&quot;, 2+2);<BR>	}</PRE><p>
<SPAN STYLE="font-style: normal">The executables produced by the two
compilers are almost certainly different, but </SPAN><I>running</I><SPAN STYLE="font-style: normal">
these two programs on their respective environments must produce the
same result for this line (once converted into the same text encoding
format).  Obviously, this depends on them implementing the same
language (for the purposes of the given Source).</SPAN></p>
<p><SPAN STYLE="font-style: normal">The conditions
where this occurs are defined more formally in chapter </SPAN><SPAN STYLE="font-style: normal">5</SPAN><SPAN STYLE="font-style: normal">.
 In particular, see section </SPAN><SPAN STYLE="font-style: normal">5.7.9</SPAN><SPAN STYLE="font-style: normal">,
where this is examined in more detail.</SPAN></p>
<H2 CLASS="western"><A NAME="__RefHeading__42335819"></A><A NAME="4.5.Special case: Self-parenting compiler|outline"></A>
4.5 Special case: Self-parenting compiler</H2>
<p>An important special case is when <I>s</I><SUB><SPAN STYLE="font-style: normal">P</SPAN></SUB><SPAN STYLE="font-style: normal">=</SPAN><I>s</I><SUB><SPAN STYLE="font-style: normal">A</SPAN></SUB><SPAN STYLE="font-style: normal">,
that is, </SPAN>when the putative source code of the parent compiler
is the same as the putative source code of the compiler-under-test. 
<SPAN STYLE="font-style: normal">There are often good reasons for
releasing executables generated this way.  For example, a compiler
typically includes many optimization operations; each new version of
a compiler may add new or improved optimization operations.  By
releasing a self-parented compiler (a compiler generated by setting
</SPAN><I>s</I><SUB><SPAN STYLE="font-style: normal">P</SPAN></SUB><SPAN STYLE="font-style: normal">=</SPAN><I>s</I><SUB><SPAN STYLE="font-style: normal">A</SPAN></SUB><SPAN STYLE="font-style: normal">
and compiling twice</SPAN><SPAN STYLE="font-style: normal">), the
supplier would release a compiler executable that uses the latest
versions of those optimizations, giving the compiler itself maximum
performance.  Many existing compilers (including as GCC) use the
compiler bootstrap test (essentially the self-regeneration check) to
test themselves, so a compiler&rsquo;s build and test process may
already include an automated way to create a self-parenting compiler.
 Figure </SPAN><SPAN STYLE="font-style: normal">3</SPAN><SPAN STYLE="font-style: normal">
shows how figure </SPAN><SPAN STYLE="font-style: normal">2</SPAN><SPAN STYLE="font-style: normal">
simplifies in this case.</SPAN></p>
<P CLASS="western" STYLE="font-style: normal">Because this is a
common case, the older paper [Wheeler2005] only considered this case.
 In contrast, this dissertation considers the more general case,
subsuming self-parenting as a special case.</p>
<p><SPAN ID="Frame5" DIR="LTR" STYLE="float: left; width: 5.82in; height: 3.03in; border: none; padding: 0in; background: #ffffff">
	<DIV ID="Frame7" DIR="LTR" STYLE="position: absolute; top: 0.03in; left: 0.05in; width: 5.69in; height: 2.61in; border: 1px solid #000000; padding: 0.06in; background: #ffffff"><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.84in; left: 0.94in; width: 56px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_1a4bf5b2.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.07in; left: 0.43in; width: 50px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m2f0eca4.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.88in; left: 0.13in; width: 29px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_5b8825a9.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.66in; left: 0.94in; width: 56px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m5cc421af.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.14in; left: 0.38in; width: 54px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_1e30bced.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.28in; left: 1.23in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_18be024f.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.33in; left: 1.28in; width: 55px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_4ad236b5.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 2.1in; left: 1.23in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_18be024f.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.46in; left: 1.23in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_18be024f.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.34in; left: 1.43in; width: 125px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_58b84e84.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.08in; left: 0.53in; width: 125px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m78164de7.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.08in; left: 2.79in; width: 259px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m59d1952b.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.84in; left: 3.84in; width: 56px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_753fc5d5.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.07in; left: 3.33in; width: 50px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m2f0eca4.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.88in; left: 3.03in; width: 29px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_5b8825a9.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.28in; left: 4.12in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_7d2fc6e2.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 2.2in; left: 4.23in; width: 46px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_1e5f3ecf.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.46in; left: 4.13in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_18be024f.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.3in; left: 4.13in; width: 38px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_781f2305.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 2.36in; left: 2.03in; width: 154px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m5c2be613.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 2.06in; left: 2.33in; width: 58px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_75bf7c16.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 2.21in; left: 1.31in; width: 56px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_59ced6cb.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.63in; left: 3.83in; width: 56px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m2edc9840.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.15in; left: 3.27in; width: 54px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_3ba1593.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 2.07in; left: 4.13in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_3f9a46b5.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.33in; left: 4.17in; width: 39px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m74b9d191.gif"></SPAN>
		<P CLASS="frame-contents-western"><BR>
		</p>
	</DIV>
	<P ALIGN=CENTER STYLE="margin-top: 0.08in; margin-bottom: 0.08in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<FONT SIZE=3><I>Figure 3: Informal graphical representation of DDC
	for self-regeneration case</I></FONT></p>
</SPAN>Having a self-parenting compiler can simplify the application
of DDC.  As discussed in more detail below, DDC only shows that
source code and executable correspond, so review of compiler source
code is still required if the goal is to show that there is no
malicious code in an executable.  In the general case, both <I>s</I><SUB>A
</SUB>and <I>s</I><SUB>P</SUB> must be reviewed.  Since <I>s</I><SUB>A</SUB>=<I>s</I><SUB>P</SUB>
in a self-parented compiler, reviewing both <I>s</I><SUB>A</SUB> and
<I>s</I><SUB>P</SUB> can be done by reviewing just <I>s</I><SUB>A</SUB>,
simplifying the use of DDC.  Also, when a compiler is its own parent,
a simplified regeneration check may be used to detect many problems
without performing the complete regeneration test.  This test, which
can be termed &ldquo;self-regeneration&rdquo;, simply uses c<SUB>A</SUB>
to compile its putative source code <I>s</I><SUB>A</SUB>; the
regeneration is successful if the generated executable is the same as
the original c<SUB>A</SUB>.
</p>
<p>It is still useful to be able to handle the
general case.  Compiler c<SUB>P</SUB> need not be a radically
different compiler; it might simply be an older version of c<SUB>A</SUB>,
differ only in its use of different compilation flags, or differ only
in that it embeds a different version of a library executable. 
Nevertheless, if c<SUB>P</SUB> and c<SUB>A</SUB> are different, the
general form of DDC must be used.  Also, it is possible to have a
&ldquo;loop&rdquo; of compilers that mutually depend on each other
for self-regeneration (e.g., a Java compiler written in C and a C
compiler written in Java might be generated using each other).  In
this case, the more general form of DDC is needed to break the loop.</p>
<H2 CLASS="western"><A NAME="4.6.Why not always use the trusted compiler_|outline"></A>
4.6 Why not always use the trusted compiler?</H2>
<p>DDC uses a second &ldquo;trusted&rdquo; compiler
c<SUB>T</SUB>, which is trusted in the sense that we have a justified
confidence that c<SUB>T</SUB> does not have triggers or payloads that
affect recompiling <I>s</I><SUB>P</SUB> and <I>s</I><SUB>A</SUB> (see
section 4.3).  We can now answer an obvious question: Why not <I>always</I>
use the trusted compiler c<SUB>T</SUB>?</p>
<p>First, there are many reasons compiler c<SUB>T</SUB>
might not be suitable for general use.  For example, compiler c<SUB>T</SUB>
may be slow, produce slow code, generate code for a different CPU
architecture than desired, be costly, or have undesirable software
license restrictions.  It may lack many useful functions necessary
for general-purpose use (in DDC, trusted compiler c<SUB>T</SUB> only
needs to be able to compile <I>s</I><SUB>P</SUB>).  It is possible
that the only purpose of the trusted compiler is to operate as a
trusted checker for the more widely-used compiler, in fact, there are
good reasons to do so.  It is much easier to verify (and possibly
formally prove) a simple compiler that has limited functionality and
few optimizations; such compilers might not be suitable for general
production use, but would be ideal as trusted compilers used to check
production compilers.  The trusted compiler could even be a &ldquo;secret&rdquo;
compiler that is never publicly released (as source, executable, or a
service); an attacker would find it extremely difficult to avoid
detection by DDC if such a trusted compiler were used.</p>
<p>Second, using a different trusted compiler c<SUB>T</SUB>
greatly increases the confidence that the compiler executable c<SUB>A</SUB>
corresponds with source code <I>s</I><SUB>A</SUB>.  When a second
compiler c<SUB>T</SUB> is used as part of DDC, an attacker must
subvert <I>multiple</I><SPAN STYLE="font-style: normal"> executables
and executable-generation processes to perform the &ldquo;trusting
trust&rdquo; attack without detection.  It is true that the trusted</SPAN>
compiler c<SUB>T</SUB> could be used as a &ldquo;trusted bootstrap&rdquo;
compiler that would always be used to generate each new version of
c<SUB>A</SUB>.  This could be done even if c<SUB>T</SUB> is not
suitable for general use.  However, if we always generate updated
versions of c<SUB>A</SUB> this way, and never use DDC, we have merely
moved the trusting trust attack to a different location: We must now
perfectly protect c<SUB>T</SUB> and the bootstrap process used to
create each new version of c<SUB>A</SUB>.  Should the protection of
c<SUB>T</SUB> ever fail, an attacker might change c<SUB>T</SUB> into
a maliciously corrupted compiler c<SUB>T</SUB><FONT FACE="Times New Roman, serif">&acute;,</FONT>
resulting in the potential corruption of future versions of c<SUB>A</SUB>.
 By using DDC with a different trusted compiler c<SUB>T</SUB>, c<SUB>T</SUB>
is used as a separate check, requiring an attacker to subvert <I>two</I>
different compilers and compiler-generation processes to avoid
detection.  Indeed, DDC could be performed multiple times using
different compilers as c<SUB>T</SUB> and/or different environments,
requiring an attacker to subvert <I>all</I> of the DDC processes to
avoid detection.  Using DDC with a different compiler c<SUB>T</SUB>
greatly increases the confidence that c<SUB>A</SUB> exactly
corresponds with <I>s</I><SUB>A</SUB>; using DDC multiple times can
increase that confidence still further.</p>
<H2 CLASS="western"><A NAME="__RefHeading__38682321"></A><A NAME="4.7.Why is DDC different from N-version programming_|outline"></A>
4.7 Why is DDC different from N-version programming?</H2>
<p>N-version programming &ldquo;has been proposed as
a method of incorporating fault tolerance into software.  Multiple
versions of a program (i.e., &lsquo;N&rsquo;) are prepared and
executed in parallel.  Their outputs are collected and examined by a
voter, and, if they are not identical, it is assumed that the
majority is correct.  This method [assumes] that programs that have
been developed independently will fail independently&rdquo;
[Knight1986].</p>
<p>John Knight and Nancy Leveson performed an
experiment with N-version programming and showed that, in their
experiment, &ldquo;the assumption of independence of errors that is
fundamental to some analyses of N-version programming does not hold&rdquo;
[Knight1986] [Knight1990].  Instead, they found that if one program
has a failure when processing a particular input, there was an
increased likelihood of failure (compared to random failure) for
another program with the same input, given that both programs were
written to the same specification.  This is an important result.  It
is not hard to see why this might be true; for example, if certain
areas of the specification are unusually complex, two different
programmers might both fail to meet it.  However, this result does
not invalidate DDC, because the circumstances in DDC are very
different from this and similar experiments.</p>
<p>In the Knight and Leveson work, N different
programs were developed by different developers attempting to
implement the <I>same</I> specification.  In contrast, the purpose of
applying DDC is to detect when two different compiler executables
have been developed to implement <I>different</I><SPAN STYLE="font-style: normal">
specifications, that is, when one program is written to attempt to
</SPAN><SPAN STYLE="font-style: normal">compile source code
accurately, while another program is written to produce corrupted
results in certain cases.  However:</SPAN></p>
<UL>
	<LI><P CLASS="list-1-western"><SPAN STYLE="font-style: normal">These
	changes are </SPAN><I>extremely</I><SPAN STYLE="font-style: normal">
	</SPAN><I>unlikely</I><SPAN STYLE="font-style: normal"> to happen
	</SPAN><I>unintentionally</I><SPAN STYLE="font-style: normal"> (and
	in the same way) in both the trusted compiler and the original
	process used to create the compiler-under-test.  Creating a
	corrupting compiler that is self-perpetuating and selectively
	corrupts other programs requires clever programming [Thompson1984]
	and significantly changes the compiler executable (for an example,
	see the differences shown in section </SPAN><SPAN STYLE="font-style: normal">A.5</SPAN><SPAN STYLE="font-style: normal">).</SPAN></p>
	<LI><P CLASS="list-1-western"><SPAN STYLE="font-style: normal">These
	changes are </SPAN><I>extremely</I><SPAN STYLE="font-style: normal">
	</SPAN><I>unlikely</I><SPAN STYLE="font-style: normal"> to happen
	</SPAN><I>intentionally</I><SPAN STYLE="font-style: normal"> in the
	trusted compiler and DDC process in general.  This is by definition
	of the term &ldquo;trusted&rdquo;&mdash;we have justified confidence
	that the DDC process (including the trusted compiler) is unlikely to
	have triggers or payloads that affect DDC results.</SPAN></p>
	<LI><P CLASS="list-1-western"><SPAN STYLE="font-style: normal">Since
	the kind of differences that motivate DDC are extremely unlikely to
	occur unintentionally </SPAN><I>or</I><SPAN STYLE="font-style: normal">
	intentionally, the entire scenario is extremely unlikely.</SPAN></p>
</UL>
<p><SPAN STYLE="font-style: normal">Also, in the
Knight and Leveson experiment, the issue was to determine if the
different programs would produce identical results across all
permitted inputs to the different programs.  Their experiment
simulated use of the N programs using one million test inputs,
corresponding to about twenty years of operational use &ldquo;if the
program is executed once per second and unusual events occur every
ten minutes&rdquo;.  In contrast, in DDC, there is only </SPAN><I>one</I><SPAN STYLE="font-style: normal">
relevant input: the source code </SPAN><SPAN STYLE="font-style: normal">pair
</SPAN><I>s</I><SUB><SPAN STYLE="font-style: normal">P</SPAN></SUB><SPAN STYLE="font-style: normal">
and </SPAN><I>s</I><SUB><SPAN STYLE="font-style: normal">A</SPAN></SUB><SPAN STYLE="font-style: normal">.
 Granted, these inputs will have a complex internal structure, but
these are the </SPAN><I>only</I><SPAN STYLE="font-style: normal">
inputs that matter, as compared to the wide range of possible inputs
a compiler might accept.  Thus, in DDC </SPAN><SPAN STYLE="font-style: normal">we
do </SPAN><I>not</I><SPAN STYLE="font-style: normal"> have the
situation where there is a wide variety of potential test inputs; we
have only one pair of inputs, and they are the only ones that matter.</SPAN></p>
<p><SPAN STYLE="font-style: normal">There is a
special case where the Knight and Leveson results </SPAN><I>do</I><SPAN STYLE="font-style: normal">
directly apply to DDC.  This is when the original compiler and
trusted compiler </SPAN><I>both</I><SPAN STYLE="font-style: normal">
fail to correctly compile the source code (</SPAN><I>s</I><SUB><SPAN STYLE="font-style: normal">P</SPAN></SUB><SPAN STYLE="font-style: normal">
and </SPAN><I>s</I><SUB><SPAN STYLE="font-style: normal">A</SPAN></SUB><SPAN STYLE="font-style: normal">),
</SPAN><I>and</I><SPAN STYLE="font-style: normal"> this failure
happens to produce the same results.  DDC will not detect that both
compilers are performing incorrectly in the same way.  The Knight and
Leveson paper shows that such program failures are not completely
statistically independent, and thus this kind of failure is somewhat
more likely than an independence model would predict.  However, there
are several reasons to believe that this special case is rare for
mature compilers.  First, mature compilers typically pass a large
test suite, reducing the risk of such defects.  Second, compilers are
usually part of their own test suite, reducing the likelihood that a
compiler will fail to correctly compile itself.  Third, section </SPAN><SPAN STYLE="font-style: normal">7.1.3</SPAN><SPAN STYLE="font-style: normal">
demonstrates that even when a compiler fails to correctly compile
itself, DDC may still detect it.  But all of this is beside the
point.  Since the purpose of applying DDC is to detect intentional
self-perpetuating attacks, and not to prove total correctness, this
special case does not invalidate the use of DDC to detect and counter
the &ldquo;trusting trust&rdquo; attack.</SPAN></p>
<P CLASS="western" STYLE="font-style: normal">Thus, the Knight and
Leveson results do not invalidate DDC for the purpose of detecting
and countering the &ldquo;trusting trust&rdquo; attack.</p>
<H2 CLASS="western"><A NAME="4.8.DDC works with randomly-corrupting compilers|outline"></A>
4.8 DDC works with randomly-corrupting compilers</H2>
<p>DDC works even if an ancestor of c<SUB>A</SUB>
randomly corrupts its results.  If the compiler-under-test was not
corrupted, DDC will correctly report this; otherwise, DDC will expose
the corruption.</p>
<H1 CLASS="western"><A NAME="__RefHeading__34426845"></A><A NAME="5.Formal proof|outline"></A>
5 Formal proof</H1>
<p>This chapter presents a formal proof of DDC.  The
first section presents a more complete graphical model of both the
DDC process and how the compiler-under-test is claimed to have been
created.  This is followed by a description of the formal notation
used (first-order logic (FOL) with equality), the rationales used in
proof steps (aka the derivation rules or rules of inference), the
tools used, and various proof conventions.  After this, the three key
proofs are presented.  Each proof presents a set of predicates,
functions, and assumptions about DDC in the formal notation, and
shows how they lead to the concluding proof goal.  The three proofs
are:</p>
<UL>
	<LI><P CLASS="list-1-western">Proof #1, goal
	source_corresponds_to_executable: This is the key proof for DDC.  It
	shows that given certain assumptions, if stage2 (the result of the
	DDC process) and c<SUB>A</SUB> (the original compiler-under-test)
	are equal, then the executable c<SUB>A</SUB> and the source code <I>s</I><SUB>A</SUB>
	exactly correspond.</p>
	<LI><P CLASS="list-1-western">Proof #2, goal always_equal: This
	proves that, under &ldquo;normal conditions&rdquo; (such as when
	compiler executables <SPAN STYLE="font-style: normal">have</SPAN>
	not been rigged and thus <I>do</I> correspond to their respective
	source code), c<SUB>A</SUB> and stage2 are in fact always equal. 
	Thus, the first proof is actually useful, because its assumptions
	will often hold.  This also implies that if <SPAN STYLE="font-style: normal">c</SPAN><SUB><SPAN STYLE="font-style: normal">A</SPAN></SUB>
	and stage2 are <I>not</I> equal, then at least one of its
	assumptions is <I>not</I> true.</p>
	<LI><P CLASS="list-1-western">Proof #3, goal cP_corresponds_to_sP:
	The previous &ldquo;always_equal&rdquo; proof does not require that
	a &ldquo;grandparent&rdquo; compiler exist, but having one is a
	common circumstance.  This third proof shows that if there <I>is</I>
	a grandparent compiler, one of the assumptions of proof #2 can be
	proved given other assumptions that may be easier to verify
	(potentially making DDC even easier to apply in this common case).</p>
</UL>
<H2 CLASS="western"><A NAME="5.1.Graphical model for formal proof |outline"></A>
5.1 Graphical model for formal proof </H2>
<p>Figure 4 graphically represents the DDC stages and
how the compiler-under-test c<SUB>A</SUB> was putatively created. 
This is a more rigorous version of figure 2; the formal model
includes more detail to accurately model potentially-different
compilation environments and the effects these environments have on
the compilation processes.</p>
<p><SPAN ID="Frame10" DIR="LTR" STYLE="float: left; width: 5.81in; height: 3.03in; border: none; padding: 0in; background: #ffffff">
	<DIV ID="Frame11" DIR="LTR" STYLE="position: absolute; top: 0.03in; left: 0.05in; width: 5.69in; height: 2.61in; border: 1px solid #000000; padding: 0.06in; background: #ffffff"><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.84in; left: 0.94in; width: 56px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_1a4bf5b2.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: -11742.58in; left: -11742.58in; width: 50px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m2f0eca4.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.78in; left: 0.04in; width: 59px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_7a73bfa1.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.66in; left: 0.94in; width: 56px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m5cc421af.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: -11742.58in; left: -11742.58in; width: 50px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m2f0eca4.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.38in; left: 1.23in; width: 58px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m560ba793.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.63in; left: 0.13in; width: 57px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m5dd91528.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 2.2in; left: 1.33in; width: 106px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_bb7ec32.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: -11742.58in; left: -11742.58in; width: 48px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_7306c3a6.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.9in; left: 2.03in; width: 64px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_9998f7.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.8in; left: 2.03in; width: 73px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m480f8df1.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.34in; left: 1.33in; width: 149px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_732dd0e3.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.08in; left: 0.53in; width: 125px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m78164de7.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.08in; left: 3.35in; width: 148px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_5c8c4d36.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.84in; left: 3.84in; width: 56px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_753fc5d5.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: -11742.58in; left: -11742.58in; width: 50px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m2f0eca4.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.88in; left: 3.03in; width: 29px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_1b00229.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.66in; left: 3.84in; width: 56px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m2edc9840.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: -11742.58in; left: -11742.58in; width: 50px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m2f0eca4.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.33in; left: 4.03in; width: 58px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m15a3ea33.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.73in; left: 3.03in; width: 29px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_5b8825a9.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 2.2in; left: 4.23in; width: 106px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m6e3e0428.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: -11742.58in; left: -11742.58in; width: 48px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_7306c3a6.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.9in; left: 4.93in; width: 63px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m4ba807b.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: -11742.58in; left: -11742.58in; width: 48px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_7306c3a6.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.77in; left: 4.93in; width: 63px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m1e0f7d6f.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.3in; left: 4.13in; width: 38px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_781f2305.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 2.06in; left: 2.73in; width: 58px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_75bf7c16.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: -11742.58in; left: -11742.58in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m2b8765e4.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: -11742.58in; left: -11742.58in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m2b8765e4.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: -11742.58in; left: -11742.58in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m548e9d01.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: -11742.58in; left: -11742.58in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m2b8765e4.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: -11742.58in; left: -11742.58in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m2b8765e4.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: -11742.58in; left: -11742.58in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m548e9d01.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: -11742.58in; left: -11742.58in; width: 154px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m4d610d57.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: -11742.58in; left: -11742.58in; width: 48px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_7306c3a6.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.04in; left: 0.37in; width: 55px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m7a32412.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.89in; left: 0.37in; width: 55px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m7a32412.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.04in; left: 3.27in; width: 55px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m7a32412.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.89in; left: 3.27in; width: 55px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m7a32412.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.4in; left: 4.13in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m4269e58a.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.4in; left: 1.23in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m20ede7c4.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.28in; left: 1.23in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_45933518.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 2.1in; left: 1.23in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_276efcb5.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.28in; left: 4.13in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_45933518.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 2.1in; left: 4.14in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_276efcb5.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.04in; left: 4.43in; width: 48px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_11f9ef19.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.9in; left: 4.43in; width: 48px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_11f9ef19.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.91in; left: 1.53in; width: 52px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_me43be5c.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.03in; left: 1.53in; width: 48px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m40f1508f.gif"></SPAN>
		<P CLASS="frame-contents-western"><IMG SRC="wheeler-trusting-trust-ddc_html_378c7322.gif" ALIGN=LEFT><BR>
		</p>
	</DIV>
	<P ALIGN=CENTER STYLE="margin-top: 0.08in; margin-bottom: 0.08in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<FONT SIZE=3><I>Figure 4: Graphical representation of DDC formal
	model</I></FONT></p>
</SPAN>This dissertation argues that if the DDC process produces a
&ldquo;stage2&rdquo; that is identical to the c<SUB>A</SUB>, and
certain other assumptions are true, then the executable stage2
corresponds to the source code <I>s</I><SUB>A</SUB>.  The similarity
of the DDC process and claimed origin figures suggest that this might
be reasonable, but the challenge is to formalize exactly what those
assumptions are, and then prove that this is true from those
assumptions.
</p>
<H3 CLASS="western"><A NAME="__RefHeading__41356039"></A><A NAME="5.1.1.Types|outline"></A>
5.1.1 Types</H3>
<p>Although types (sorts) are not directly used in
the proof, it is easier to explain the graph and proofs by assigning
types to the various constants used.  There are four basic types:</p>
<UL>
	<LI><P CLASS="list-1-western"><I>Data:</I><SPAN STYLE="font-style: normal">
	For our purposes, data is information that is used as source code
	(input) and/or is the resulting executable (output) of a
	compilation.  Some of the data </SPAN><SPAN STYLE="font-style: normal">could
	be both source and executable (e.g., a library object file could be
	executed </SPAN><SPAN STYLE="font-style: normal">during compilation
	and also copied into the final executable).  Thus, as implied by its
	definition, data can be either (or both):</SPAN></p>
	<UL>
		<LI><P CLASS="list-1-western"><I>Executable:</I><SPAN STYLE="font-style: normal">
		 Data that can be executed by a computing environment.  Compilers
		produce executables, and compilers themselves are executables.</SPAN></p>
		<LI><P CLASS="list-1-western"><I>Source</I><SPAN STYLE="font-style: normal">:
		 Data that can be compiled by a compiler to produce an executable. 
		Any source (aka source code) is written in some language.</SPAN></p>
	</UL>
	<LI><P CLASS="list-1-western"><I>Environment:</I><SPAN STYLE="font-style: normal">
	A platform that can run executables.  This would include the
	computer hardware (including the central processing unit) and any
	software that supports or could </SPAN><SPAN STYLE="font-style: normal">influence
	the compiler&rsquo;s result (e.g., the operating system).  It could
	include a byte code interpreter or machine simulator.</SPAN></p>
	<LI><P CLASS="list-1-western"><I>Language</I>: The language, used by
	some source, that defines the meaning of the source.</p>
	<LI><P CLASS="list-1-western"><I>Effects:</I><SPAN STYLE="font-style: normal">
	All information or execution timing arising from the environment
	that can affect the results of a compilation, but is not part of the
	input source code.  This is used to model random number generators,
	thread execution ordering, differences between platforms allowed by
	the language, and so on.  Note that this is not </SPAN><SPAN STYLE="font-style: normal">simply
	data in the usual sense, since other issues such as thread execution
	ordering are included as effects.</SPAN></p>
</UL>
<H3 CLASS="western"><A NAME="5.1.2.DDC components|outline"></A>5.1.2 DDC
components</H3>
<p>The DDC process, as shown in figure 4, includes
the following components, with the following types and meanings:</p>
<UL>
	<LI VALUE=1><P CLASS="list-1-western">c<SUB>T</SUB>: Executable. 
	The trusted compiler.  It is trusted in the sense that it is trusted
	to not have triggers or payloads that will activate when compiling
	source <I>s</I><SUB>P</SUB>.</p>
	<LI><P CLASS="list-1-western"><I>s</I><SUB>P</SUB>: Source.  The
	(putative) source code of the &ldquo;parent&rdquo; compiler.</p>
	<LI><P CLASS="list-1-western"><I>s</I><SUB>A</SUB>: Source.  The
	(putative) source code of the compiler-under-test (c<SUB>A</SUB>).</p>
	<LI><P CLASS="list-1-western">e1: Environment.  The environment that
	executes compilation step 1, which uses c<SUB>T</SUB> to compile <I>s</I><SUB>P</SUB>
	and produce stage1.</p>
	<LI><P CLASS="list-1-western">e2: Environment: The environment that
	executes compilation step 2, which uses stage1 to compile <I>s</I><SUB>A</SUB>
	and produce stage2.</p>
	<LI><P CLASS="list-1-western">eArun: Environment: The environment
	that stage2 is intended to run on.</p>
	<LI><P CLASS="list-1-western">lsP, lsA: Language.  The languages
	used by source <I>s</I><SUB>P</SUB>. and <I>s</I><SUB>A</SUB>,
	respectively.</p>
	<LI><P CLASS="list-1-western">e1effects: Effects.  The effects sent
	from environment e1 to compilation step 1.</p>
	<LI><P CLASS="list-1-western">e2effects: Effects.  The effects sent
	from environment e2 to compilation step 2.</p>
	<LI><P CLASS="list-1-western">stage1: Executable.  The result of DDC
	compilation step 1.  This will be defined, using the functional
	notation below, as compile(<I>s</I><SUB>P</SUB>, c<SUB>T</SUB>,
	e1effects, e1, e2).</p>
	<LI><P CLASS="list-1-western">stage2: Executable.  The result of DDC
	compilation step 2.  This will be defined as  compile(<I>s</I><SUB>A</SUB>,
	stage1, e2effects, e2, eArun).</p>
</UL>
<P CLASS="list-1-western">Note that <I>s</I><SUB><SPAN STYLE="font-style: normal">A</SPAN></SUB><SPAN STYLE="font-style: normal">
may be equal to </SPAN><I>s</I><SUB><SPAN STYLE="font-style: normal">P</SPAN></SUB><SPAN STYLE="font-style: normal">,
e1 may be equal to e2 or eArun, e2 may be equal to eArun, and lsA may
be equal to lsP.  These identities are permitted but not required by
DDC.  All processes (including the compilations and their underlying
environments, the </SPAN><SPAN STYLE="font-style: normal">process for
acquiring c</SPAN><SUB><SPAN STYLE="font-style: normal">A</SPAN></SUB><SPAN STYLE="font-style: normal">,
and </SPAN><SPAN STYLE="font-style: normal">the process for comparing
c</SPAN><SUB><SPAN STYLE="font-style: normal">A</SPAN></SUB><SPAN STYLE="font-style: normal">
and stage2) must be trusted (i.e., they must not have triggers or
payloads that affect their operation during DDC).</SPAN></p>
<H3 CLASS="western"><A NAME="5.1.3.Claimed origin|outline"></A>5.1.3 Claimed
origin</H3>
<p>The compiler-under-test c<SUB>A</SUB> was
putatively developed by a similar process.  This &ldquo;claimed
origin&rdquo; process can also be modeled, with the following
components not already described in the DDC process:</p>
<UL>
	<LI VALUE=1><P CLASS="list-1-western">c<SUB>GP</SUB>: Executable. 
	The grandparent compiler, if there is one.</p>
	<LI><P CLASS="list-1-western">eP: Environment.  The environment that
	executes compilation step o1, which uses c<SUB>GP</SUB> to compile
	source <I>s</I><SUB>P</SUB> and produce executable c<SUB>P</SUB>.</p>
	<LI><P CLASS="list-1-western">eA: Environment: The environment that
	executes compilation step o2, which uses c<SUB>P</SUB>  to compile
	<I>s</I><SUB>A</SUB> and produce c<SUB>A</SUB>.</p>
	<LI><P CLASS="list-1-western">ePeffects: Effects.  The effects sent
	from e<SUB>P</SUB> to compilation step o1.</p>
	<LI><P CLASS="list-1-western">eAeffects: Effects.  The effects sent
	from e<SUB>A</SUB> to compilation step o2.</p>
	<LI><P CLASS="list-1-western">c<SUB>P</SUB>: Executable.  Putative
	parent compiler.</p>
	<LI><P CLASS="list-1-western">c<SUB>A</SUB>: Executable.  The
	compiler-under-test, which putatively was developed by the process
	above.</p>
</UL>
<p>Note that compiler-under-test c<SUB>A</SUB> may,
in fact, be different than if it were really generated through this
process. <SPAN STYLE="font-style: normal"> But if c</SPAN><SUB><SPAN STYLE="font-style: normal">A</SPAN></SUB><SPAN STYLE="font-style: normal">
</SPAN><I>was</I><SPAN STYLE="font-style: normal"> generated through
this process, we can prove that certain outcomes will result, given
certain assumptions, as described below.</SPAN></p>
<H2 CLASS="western"><A NAME="__RefHeading__41321302"></A><A NAME="5.2.Formal notation: First-Order Logic (FOL)|outline"></A>
5.2 Formal notation: First-Order Logic (FOL)</H2>
<P CLASS="western" STYLE="widows: 3; page-break-before: auto">The
formal logic used in this dissertation is classical first-order logic
(FOL) with equality, aka first-order predicate logic.  FOL was
selected because it is a widely understood and accepted formal logic
system<A CLASS="sdfootnoteanc" NAME="sdfootnote9anc" HREF="#sdfootnote9sym"><SUP>9</SUP></A>.
 This dissertation uses the FOL notation and conventions defined in
[Huth2004, 93-139].  In FOL, every expression is a <I>term</I><SPAN STYLE="font-style: normal">
or a </SPAN><I>formula</I><SPAN STYLE="font-style: normal">.</SPAN></p>
<p>A <I>term</I><SPAN STYLE="font-style: normal">
(which denotes an object) is defined as: a variable, a constant, or a
function application of form </SPAN><SPAN STYLE="font-style: normal">
<IMG SRC="wheeler-trusting-trust-ddc_html_1bc6c8dc.gif" NAME="Object55" ALIGN=ABSMIDDLE WIDTH=104 HEIGHT=20></SPAN><SPAN STYLE="font-style: normal">
where each of the zero or more comma-separated </SPAN><SPAN STYLE="font-style: normal">parameters
is a term.  In this dissertation, variables begin with an uppercase
letter, while constants begin with a lowercase letter (this is the
same convention used by Prolog).</SPAN></p>
<p><SPAN STYLE="font-style: normal">A </SPAN><I>formula</I><SPAN STYLE="font-style: normal">
(which denotes a truth value) is defined as: </SPAN><SPAN STYLE="font-style: normal">
<IMG SRC="wheeler-trusting-trust-ddc_html_4bbe38d9.gif" NAME="Object44" ALIGN=ABSMIDDLE WIDTH=22 HEIGHT=18></SPAN><SPAN STYLE="font-style: normal">,
</SPAN><SPAN STYLE="font-style: normal">
<IMG SRC="wheeler-trusting-trust-ddc_html_6786aa9c.gif" NAME="Object45" ALIGN=ABSMIDDLE WIDTH=37 HEIGHT=18></SPAN><SPAN STYLE="font-style: normal">,
</SPAN><SPAN STYLE="font-style: normal">
<IMG SRC="wheeler-trusting-trust-ddc_html_4e30f7ad.gif" NAME="Object46" ALIGN=ABSMIDDLE WIDTH=37 HEIGHT=18></SPAN><SPAN STYLE="font-style: normal">,
</SPAN><SPAN STYLE="font-style: normal">
<IMG SRC="wheeler-trusting-trust-ddc_html_m73eba5cc.gif" NAME="Object47" ALIGN=ABSMIDDLE WIDTH=41 HEIGHT=18></SPAN><SPAN STYLE="font-style: normal">,
</SPAN><SPAN STYLE="font-style: normal">
<IMG SRC="wheeler-trusting-trust-ddc_html_m2a5c3e44.gif" NAME="Object48" ALIGN=ABSMIDDLE WIDTH=39 HEIGHT=18></SPAN><SPAN STYLE="font-style: normal">&#8288;,
 </SPAN><SPAN STYLE="font-style: normal">
<IMG SRC="wheeler-trusting-trust-ddc_html_6f9b519c.gif" NAME="Object49" ALIGN=ABSMIDDLE WIDTH=42 HEIGHT=20></SPAN><SPAN STYLE="font-style: normal">&#8288;,
</SPAN><SPAN STYLE="font-style: normal">
<IMG SRC="wheeler-trusting-trust-ddc_html_m7df06018.gif" NAME="Object50" ALIGN=ABSMIDDLE WIDTH=42 HEIGHT=20></SPAN><SPAN STYLE="font-style: normal">&#8288;,
or a predicate of form </SPAN><SPAN STYLE="font-style: normal">
<IMG SRC="wheeler-trusting-trust-ddc_html_m6c3cbfe1.gif" NAME="Object56" ALIGN=ABSMIDDLE WIDTH=103 HEIGHT=20></SPAN><SPAN STYLE="font-style: normal">
where each of the one or more comma-separated parameters is a term. 
This definition requires that </SPAN><SPAN STYLE="font-style: normal">
<IMG SRC="wheeler-trusting-trust-ddc_html_4072c6c2.gif" NAME="Object52" ALIGN=ABSMIDDLE WIDTH=11 HEIGHT=18></SPAN><SPAN STYLE="font-style: normal">
and </SPAN><SPAN STYLE="font-style: normal">
<IMG SRC="wheeler-trusting-trust-ddc_html_m5f31e6e0.gif" NAME="Object53" ALIGN=ABSMIDDLE WIDTH=13 HEIGHT=18></SPAN><SPAN STYLE="font-style: normal">
are formulas, </SPAN><SPAN STYLE="font-style: normal">
<IMG SRC="wheeler-trusting-trust-ddc_html_m66be899f.gif" NAME="Object51" ALIGN=ABSMIDDLE WIDTH=10 HEIGHT=18></SPAN><SPAN STYLE="font-style: normal">
is an unbound variable, and anything beginning with </SPAN><SPAN STYLE="font-style: normal">
<IMG SRC="wheeler-trusting-trust-ddc_html_1a44bfe9.gif" NAME="Object54" ALIGN=ABSMIDDLE WIDTH=9 HEIGHT=18></SPAN><SPAN STYLE="font-style: normal">
is a term.</SPAN></p>
<p><SPAN STYLE="font-style: normal">In some sense, a
formula is a boolean expression that represents true or false, while
a term represents any non-boolean type.  Functions and predicates
have the same syntax if they have any parameters.  Table </SPAN><SPAN STYLE="font-style: normal">1</SPAN><SPAN STYLE="font-style: normal">
shows the </SPAN>traditional FOL notation for FOL expressions (terms
and formulas), an equivalent American Standard Code for Information
Interchange (ASCII) representation, and a summary of its meaning<SPAN STYLE="font-style: normal"><A CLASS="sdfootnoteanc" NAME="sdfootnote10anc" HREF="#sdfootnote10sym"><SUP>10</SUP></A></SPAN>:</p>
<P ALIGN=CENTER STYLE="margin-top: 0.08in; line-height: 100%; widows: 0; orphans: 0; page-break-after: avoid">
<FONT SIZE=3><I>Table 1: FOL notation</I></FONT></p>
<TABLE WIDTH=100% BORDER=1 BORDERCOLOR="#000000" CELLPADDING=4 CELLSPACING=0 STYLE="page-break-inside: avoid">
	<COL WIDTH=38*>
	<COL WIDTH=53*>
	<COL WIDTH=165*>
	<TR VALIGN=TOP>
		<TH WIDTH=15% BGCOLOR="#c0c0c0">
			<p>Traditional Notation</p>
		</TH>
		<TH WIDTH=21% BGCOLOR="#c0c0c0">
			<p>ASCII Representation</p>
		</TH>
		<TH WIDTH=64% BGCOLOR="#c0c0c0">
			<p>Meaning</p>
			<p><BR>
			</p>
		</TH>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=15%>
			<P CLASS="western" ALIGN=CENTER><IMG SRC="wheeler-trusting-trust-ddc_html_4bbe38d9.gif" NAME="Object1" ALIGN=ABSMIDDLE WIDTH=22 HEIGHT=18></p>
		</TD>
		<TD WIDTH=21%>
			<P CLASS="western" ALIGN=CENTER>- PHI</p>
		</TD>
		<TD WIDTH=64%>
			<P CLASS="western" ALIGN=LEFT><I>not </I><I>
			<IMG SRC="wheeler-trusting-trust-ddc_html_4072c6c2.gif" NAME="Object78" ALIGN=ABSMIDDLE WIDTH=11 HEIGHT=18></I>,
			aka negation.  If <I>
			<IMG SRC="wheeler-trusting-trust-ddc_html_4072c6c2.gif" NAME="Object85" ALIGN=ABSMIDDLE WIDTH=11 HEIGHT=18></I><FONT FACE="Times New Roman, serif">
			</FONT>is true, 
			<IMG SRC="wheeler-trusting-trust-ddc_html_4bbe38d9.gif" NAME="Object25" ALIGN=ABSMIDDLE WIDTH=22 HEIGHT=18>
			is false; if <I>
			<IMG SRC="wheeler-trusting-trust-ddc_html_4072c6c2.gif" NAME="Object77" ALIGN=ABSMIDDLE WIDTH=11 HEIGHT=18></I>
			is false, 
			<IMG SRC="wheeler-trusting-trust-ddc_html_4bbe38d9.gif" NAME="Object57" ALIGN=ABSMIDDLE WIDTH=22 HEIGHT=18>
			is true.  
			<IMG SRC="wheeler-trusting-trust-ddc_html_2e4598d8.gif" NAME="Object27" ALIGN=ABSMIDDLE WIDTH=32 HEIGHT=18>
			is equivalent to <I>
			<IMG SRC="wheeler-trusting-trust-ddc_html_4072c6c2.gif" NAME="Object76" ALIGN=ABSMIDDLE WIDTH=11 HEIGHT=18></I><I>.</I></p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=15%>
			<P CLASS="western" ALIGN=CENTER><IMG SRC="wheeler-trusting-trust-ddc_html_6786aa9c.gif" NAME="Object6" ALIGN=ABSMIDDLE WIDTH=37 HEIGHT=18></p>
		</TD>
		<TD WIDTH=21%>
			<P CLASS="western" ALIGN=CENTER>PHI &amp; PSI</p>
		</TD>
		<TD WIDTH=64%>
			<P CLASS="western" ALIGN=LEFT><FONT FACE="Times New Roman, serif"><I>&Phi;</I></FONT><I>
			and </I><FONT FACE="Times New Roman, serif"><I>&Psi;</I></FONT>,
			aka conjunction, aka &ldquo;logical and&rdquo;.  Both <FONT FACE="Times New Roman, serif"><I>&Phi;</I></FONT>
			and <FONT FACE="Times New Roman, serif"><I>&Psi;</I></FONT><FONT FACE="Times New Roman, serif">
			</FONT>must be true for the expression to be true.</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=15%>
			<P CLASS="western" ALIGN=CENTER><IMG SRC="wheeler-trusting-trust-ddc_html_4e30f7ad.gif" NAME="Object7" ALIGN=ABSMIDDLE WIDTH=37 HEIGHT=18></p>
		</TD>
		<TD WIDTH=21%>
			<P CLASS="western" ALIGN=CENTER>PHI | PSI</p>
		</TD>
		<TD WIDTH=64%>
			<P CLASS="western" ALIGN=LEFT><FONT FACE="Times New Roman, serif"><I>&Phi;</I></FONT><I>
			or </I><FONT FACE="Times New Roman, serif"><I>&Psi;</I></FONT>,
			aka disjunction, aka &ldquo;logical inclusive or&rdquo;.  <FONT FACE="Times New Roman, serif"><I>&Phi;</I></FONT><FONT FACE="Times New Roman, serif">,
			</FONT><FONT FACE="Times New Roman, serif"><I>&Psi;</I></FONT><FONT FACE="Times New Roman, serif">,</FONT>
			or both must be true for the expression to be true.</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=15%>
			<P CLASS="western" ALIGN=CENTER><IMG SRC="wheeler-trusting-trust-ddc_html_m73eba5cc.gif" NAME="Object9" ALIGN=ABSMIDDLE WIDTH=41 HEIGHT=18></p>
		</TD>
		<TD WIDTH=21%>
			<P CLASS="western" ALIGN=CENTER>PHI -&gt; PSI</p>
		</TD>
		<TD WIDTH=64%>
			<P CLASS="western" ALIGN=LEFT><FONT FACE="Times New Roman, serif"><I>&Phi;</I></FONT><I>
			implies </I><FONT FACE="Times New Roman, serif"><I>&Psi;</I></FONT>,
			aka implication, entailment, or &ldquo;if <FONT FACE="Times New Roman, serif"><I>&Phi;</I></FONT><FONT FACE="Times New Roman, serif">,
			then</FONT> <FONT FACE="Times New Roman, serif"><I>&Psi;</I></FONT>&rdquo;.
			 Equivalent to  
			<IMG SRC="wheeler-trusting-trust-ddc_html_4ebdd76f.gif" NAME="Object19" ALIGN=ABSMIDDLE WIDTH=59 HEIGHT=18>.</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=15%>
			<P CLASS="western" ALIGN=CENTER><IMG SRC="wheeler-trusting-trust-ddc_html_m2a5c3e44.gif" NAME="Object8" ALIGN=ABSMIDDLE WIDTH=39 HEIGHT=18></p>
		</TD>
		<TD WIDTH=21%>
			<P CLASS="western" ALIGN=CENTER>all Chi PHI</p>
		</TD>
		<TD WIDTH=64%>
			<P CLASS="western" ALIGN=LEFT><I>For-all</I>, aka universal
			quantification.  For all values of variable 
			<IMG SRC="wheeler-trusting-trust-ddc_html_m52fb9d92.gif" NAME="Object22" ALIGN=ABSMIDDLE WIDTH=28 HEIGHT=18>
			is true.  In this dissertation, this is optional; all unbound
			variables are universally quantified.</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=15%>
			<P CLASS="western" ALIGN=CENTER><IMG SRC="wheeler-trusting-trust-ddc_html_6f9b519c.gif" NAME="Object10" ALIGN=ABSMIDDLE WIDTH=42 HEIGHT=20></p>
		</TD>
		<TD WIDTH=21%>
			<P CLASS="western" ALIGN=CENTER>tau_1 = tau_2</p>
		</TD>
		<TD WIDTH=64%>
			<P CLASS="western" ALIGN=LEFT><FONT FACE="Times New Roman, serif"><I>&tau;</I></FONT><SUB><FONT FACE="Times New Roman, serif"><I>1</I></FONT></SUB><I>
			equals </I><FONT FACE="Times New Roman, serif"><I>&tau;</I></FONT><SUB><FONT FACE="Times New Roman, serif"><I>2</I></FONT></SUB>.
			 If true, <FONT FACE="Times New Roman, serif">&tau;</FONT><SUB><FONT FACE="Times New Roman, serif">2</FONT></SUB>
			can substitute for <FONT FACE="Times New Roman, serif">&tau;</FONT><SUB><FONT FACE="Times New Roman, serif">1</FONT></SUB><FONT FACE="Times New Roman, serif">.</FONT></p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=15%>
			<P CLASS="western" ALIGN=CENTER><IMG SRC="wheeler-trusting-trust-ddc_html_m7df06018.gif" NAME="Object11" ALIGN=ABSMIDDLE WIDTH=42 HEIGHT=20></p>
		</TD>
		<TD WIDTH=21%>
			<P CLASS="western" ALIGN=CENTER>tau_1 != tau_2</p>
		</TD>
		<TD WIDTH=64%>
			<P CLASS="western" ALIGN=LEFT><FONT FACE="Times New Roman, serif"><I>&tau;</I></FONT><SUB><FONT FACE="Times New Roman, serif"><I>1</I></FONT></SUB><I>
			is not equal to </I><FONT FACE="Times New Roman, serif"><I>&tau;</I></FONT><SUB><FONT FACE="Times New Roman, serif"><I>2</I></FONT></SUB>.
			 Equivalent to 
			<IMG SRC="wheeler-trusting-trust-ddc_html_3089daf3.gif" NAME="Object18" ALIGN=ABSMIDDLE WIDTH=59 HEIGHT=18>.</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=15%>
			<P CLASS="western" ALIGN=CENTER><IMG SRC="wheeler-trusting-trust-ddc_html_7d090b06.gif" NAME="Object13" ALIGN=ABSMIDDLE WIDTH=65 HEIGHT=41></p>
		</TD>
		<TD WIDTH=21%>
			<P CLASS="western" ALIGN=CENTER>x(tau_1, tau_2, ..., tau_n)</p>
		</TD>
		<TD WIDTH=64%>
			<P CLASS="western" ALIGN=LEFT><I>Function or predicate x</I> with
			terms 
			<IMG SRC="wheeler-trusting-trust-ddc_html_e3859b6.gif" NAME="Object26" ALIGN=ABSMIDDLE WIDTH=79 HEIGHT=20>.
			 A predicate is like a function that returns a boolean.</p>
		</TD>
	</TR>
</TABLE>
<p>Parentheses are used to indicate precedence.  FOL
also has a &ldquo;there exists&rdquo; notation (using 
<IMG SRC="wheeler-trusting-trust-ddc_html_m89dec75.gif" NAME="Object12" ALIGN=ABSMIDDLE WIDTH=11 HEIGHT=18>)
which is not directly used in this dissertation.  A formula is either
true or false (this is the principle of the excluded middle); thus, 
<IMG SRC="wheeler-trusting-trust-ddc_html_47170087.gif" NAME="Object79" ALIGN=ABSMIDDLE WIDTH=46 HEIGHT=18>
is true for any formula 
<IMG SRC="wheeler-trusting-trust-ddc_html_4072c6c2.gif" NAME="Object80" ALIGN=ABSMIDDLE WIDTH=11 HEIGHT=18>.
 In this dissertation, a top-level FOL formula is terminated by a
terminating period (&ldquo;.&rdquo;).</p>
<P CLASS="western" STYLE="page-break-before: auto; page-break-after: avoid">
For example, the following FOL formula could represent &ldquo;all men
are mortal&rdquo;:</p>
<PRE CLASS="western">	man(X) -&gt; mortal(X).</PRE><p>
This formula can be read as &ldquo;for all values of X, if X is a
man, then X is mortal&rdquo;.  Note that &ldquo;X&rdquo; is a
variable, not a constant, because it begins with a capital letter. 
Also note that since X is not bound, an implied &ldquo;all X ...&rdquo;
surrounds the entire formula.</p>
<P CLASS="western" STYLE="page-break-before: auto; page-break-after: avoid">
In addition, the following formula could be used to represent
&ldquo;Socrates is a man&rdquo;:</p>
<PRE CLASS="western">	man(socrates).</PRE><P CLASS="western" STYLE="page-break-before: auto; page-break-after: avoid">
From these two formulas, it can be determined that &ldquo;Socrates is
mortal&rdquo;:</p>
<PRE CLASS="western">	mortal(socrates).</PRE><p>
FOL is a widely-used general notation, and not designed for proofs
about specific fields (such as compilation).  Thus, as with most uses
of FOL, additional &ldquo;non-logical&rdquo; symbols must be added
before particular problems can be analyzed.  In this dissertation,
these additions are the various constant terms in the graphical model
described in 5.1 (above), as well as various predicates and functions
that will be defined below.  The proofs below will introduce these
predicates and functions, as well as various assumptions, and then
show that certain important conclusions (termed &ldquo;goals&rdquo;)
can be formally proved from them.  Some assumptions define a term,
predicate, or function; these assumptions are also called
&ldquo;definitions&rdquo; in this dissertation.</p>
<p>All formal models, including the one in this
dissertation, must include lowest-level items (such as predicates,
functions, and constants) that are not defined in the formal model
itself.  Therefore, it is unreasonable to protest that these
lowest-level items are not defined in this model, since that is
necessarily true.  The key is that the lowest-level items should
accurately model the real world, thus forming a rational basis for
proving something about the real world.</p>
<H2 CLASS="western" STYLE="font-style: normal"><A NAME="__RefHeading__34163183"></A><A NAME="5.3.Proof step rationales (derivation rules or rules of inference)|outline"></A>
5.3 Proof step rationales (derivation rules or rules of inference)</H2>
<P CLASS="western" STYLE="page-break-before: auto; page-break-after: avoid">
Every step in each formal proof must have a rationale (aka a
derivation rule or rule of inference).  In this dissertation, only
the following rationales are permitted in the formal proofs (for
clarity, the terminating &ldquo;.&rdquo; in top-level formulas is
omitted in this list):</p>
<UL>
	<LI VALUE=1><P CLASS="list-1-western" STYLE="page-break-before: auto; page-break-after: avoid">
	<I><B>Assumption</B></I>: Given assumption.  All definitions are
	assumptions.</p>
	<LI><P CLASS="list-1-western"><I><B>Goal</B></I>: The given goal to
	be proved.</p>
	<LI><P CLASS="list-1-western"><I><B>Clausify</B></I>: Transform a
	previous step (formula) into a normalized clausal form.  In
	particular, all expressions of the form 
	<IMG SRC="wheeler-trusting-trust-ddc_html_m73eba5cc.gif" NAME="Object38" ALIGN=ABSMIDDLE WIDTH=41 HEIGHT=18>
	are transformed into 
	<IMG SRC="wheeler-trusting-trust-ddc_html_4ebdd76f.gif" NAME="Object39" ALIGN=ABSMIDDLE WIDTH=59 HEIGHT=18>.
	 For example, using the example in section 5.2, &ldquo;man(X) &nbsp;&gt;
	mortal(X)&rdquo; can be transformed into &ldquo;&nbsp;man(X) |
	mortal(X)&rdquo;.  See [McCune2008] and [Duffy1991] for a detailed
	description.</p>
	<LI><P CLASS="list-1-western"><I><B>Copy...flip</B></I>: Copy a
	previous result but reverse the order of an equality statement. 
	Thus, given 
	<IMG SRC="wheeler-trusting-trust-ddc_html_f71bbaf.gif" NAME="Object20" ALIGN=ABSMIDDLE WIDTH=37 HEIGHT=18>,
	this rationale can produce 
	<IMG SRC="wheeler-trusting-trust-ddc_html_m43e8c081.gif" NAME="Object21" ALIGN=ABSMIDDLE WIDTH=38 HEIGHT=18>.</p>
	<LI><P CLASS="list-1-western"><I><B>Deny</B></I>: Negate a previous
	step; this processes the goal statement.  All formal proofs in this
	chapter are proofs by contradiction; the goal is negated by the
	&ldquo;Deny&rdquo; rule, and the rest of the proof shows that this
	leads to a contradiction.</p>
	<LI><P CLASS="list-1-western"><I><B>Resolve</B></I>: Resolution (aka
	general resolution), that is, produce a resolvant from two clauses. 
	Resolution is a generalized version of ground (propositional)
	resolution, so to explain resolution, we will first explain ground
	resolution.</p>
	<P CLASS="list-1-western">Ground resolution is a derivation rule
	that applies to clauses in propositional logic (a simpler logic than
	FOL that lacks terms, predicates, functions, quantification (for-all
	and there-exists), and equality; variables are true or false). 
	Ground resolution requires two ground clauses (formulas) which can
	be reordered into the forms 
	<IMG SRC="wheeler-trusting-trust-ddc_html_m6e2a86b6.gif" NAME="Object28" ALIGN=ABSMIDDLE WIDTH=38 HEIGHT=18>
	and 
	<IMG SRC="wheeler-trusting-trust-ddc_html_6b46faea.gif" NAME="Object29" ALIGN=ABSMIDDLE WIDTH=48 HEIGHT=18>&#8288;,
	where 
	<IMG SRC="wheeler-trusting-trust-ddc_html_m3b7e858f.gif" NAME="Object42" ALIGN=ABSMIDDLE WIDTH=20 HEIGHT=18><FONT FACE="Times New Roman, serif">
	</FONT>is a complement (negation) of formula 
	<IMG SRC="wheeler-trusting-trust-ddc_html_15640894.gif" NAME="Object43" ALIGN=ABSMIDDLE WIDTH=13 HEIGHT=18>,
	and where 
	<IMG SRC="wheeler-trusting-trust-ddc_html_4072c6c2.gif" NAME="Object58" ALIGN=ABSMIDDLE WIDTH=11 HEIGHT=18>,
		<IMG SRC="wheeler-trusting-trust-ddc_html_m5f31e6e0.gif" NAME="Object59" ALIGN=ABSMIDDLE WIDTH=13 HEIGHT=18>,
	or both may be empty.  From that, ground resolution can derive 
	<IMG SRC="wheeler-trusting-trust-ddc_html_m2951f716.gif" NAME="Object30" ALIGN=ABSMIDDLE WIDTH=45 HEIGHT=18>
	removing any duplicates (this can be informally viewed as combining
	the two clauses with 
	<IMG SRC="wheeler-trusting-trust-ddc_html_15640894.gif" NAME="Object60" ALIGN=ABSMIDDLE WIDTH=13 HEIGHT=18>
	and 
	<IMG SRC="wheeler-trusting-trust-ddc_html_m3b7e858f.gif" NAME="Object61" ALIGN=ABSMIDDLE WIDTH=20 HEIGHT=18>
	&ldquo;canceling&rdquo; each other).  If both 
	<IMG SRC="wheeler-trusting-trust-ddc_html_4072c6c2.gif" NAME="Object41" ALIGN=ABSMIDDLE WIDTH=11 HEIGHT=18>
	and 
	<IMG SRC="wheeler-trusting-trust-ddc_html_m5f31e6e0.gif" NAME="Object83" ALIGN=ABSMIDDLE WIDTH=13 HEIGHT=18>
	are empty, the empty clause (false) is derived.  For example, given
	both 
	<IMG SRC="wheeler-trusting-trust-ddc_html_6b4d1fc0.gif" NAME="Object14" ALIGN=ABSMIDDLE WIDTH=37 HEIGHT=18>
	and 
	<IMG SRC="wheeler-trusting-trust-ddc_html_m61992505.gif" NAME="Object15" ALIGN=ABSMIDDLE WIDTH=47 HEIGHT=18>,
	ground resolution can derive 
	<IMG SRC="wheeler-trusting-trust-ddc_html_m7f0a06d1.gif" NAME="Object16" ALIGN=ABSMIDDLE WIDTH=37 HEIGHT=18>.
	 Ground resolution is a sound rule for reasoning because any formula
		<IMG SRC="wheeler-trusting-trust-ddc_html_15640894.gif" NAME="Object62" ALIGN=ABSMIDDLE WIDTH=13 HEIGHT=18>
	must be either true or false:  If 
	<IMG SRC="wheeler-trusting-trust-ddc_html_15640894.gif" NAME="Object63" ALIGN=ABSMIDDLE WIDTH=13 HEIGHT=18>
	is false, and 
	<IMG SRC="wheeler-trusting-trust-ddc_html_m6e2a86b6.gif" NAME="Object64" ALIGN=ABSMIDDLE WIDTH=38 HEIGHT=18>
	is true, then 
	<IMG SRC="wheeler-trusting-trust-ddc_html_4072c6c2.gif" NAME="Object36" ALIGN=ABSMIDDLE WIDTH=11 HEIGHT=18>
	must be true.  If 
	<IMG SRC="wheeler-trusting-trust-ddc_html_15640894.gif" NAME="Object35" ALIGN=ABSMIDDLE WIDTH=13 HEIGHT=18>
	is true, then <FONT FACE="Times New Roman, serif">
	<IMG SRC="wheeler-trusting-trust-ddc_html_4b27cbbf.gif" NAME="Object65" ALIGN=ABSMIDDLE WIDTH=22 HEIGHT=18></FONT>
	is false, and since 
	<IMG SRC="wheeler-trusting-trust-ddc_html_m518edb54.gif" NAME="Object66" ALIGN=ABSMIDDLE WIDTH=49 HEIGHT=18>
	is true, then 
	<IMG SRC="wheeler-trusting-trust-ddc_html_m5f31e6e0.gif" NAME="Object37" ALIGN=ABSMIDDLE WIDTH=13 HEIGHT=18>
	must be true.  Since <I>either</I> 
	<IMG SRC="wheeler-trusting-trust-ddc_html_4072c6c2.gif" NAME="Object34" ALIGN=ABSMIDDLE WIDTH=11 HEIGHT=18>
	or 
	<IMG SRC="wheeler-trusting-trust-ddc_html_m5f31e6e0.gif" NAME="Object67" ALIGN=ABSMIDDLE WIDTH=13 HEIGHT=18>
	<I>must</I> be true, it follows that 
	<IMG SRC="wheeler-trusting-trust-ddc_html_4e30f7ad.gif" NAME="Object40" ALIGN=ABSMIDDLE WIDTH=37 HEIGHT=18>
	is <I>always</I> true.  The traditional logic rule <I>modus ponens
	(</I>given 
	<IMG SRC="wheeler-trusting-trust-ddc_html_4072c6c2.gif" NAME="Object68" ALIGN=ABSMIDDLE WIDTH=11 HEIGHT=18>
	and 
	<IMG SRC="wheeler-trusting-trust-ddc_html_m73eba5cc.gif" NAME="Object17" ALIGN=ABSMIDDLE WIDTH=41 HEIGHT=18>,
	then 
	<IMG SRC="wheeler-trusting-trust-ddc_html_m5f31e6e0.gif" NAME="Object69" ALIGN=ABSMIDDLE WIDTH=13 HEIGHT=18>)
	is a special case of ground resolution; 
	<IMG SRC="wheeler-trusting-trust-ddc_html_m73eba5cc.gif" NAME="Object70" ALIGN=ABSMIDDLE WIDTH=41 HEIGHT=18>
	can be rewritten (using clausify) as 
	<IMG SRC="wheeler-trusting-trust-ddc_html_2f3efe16.gif" NAME="Object32" ALIGN=ABSMIDDLE WIDTH=48 HEIGHT=18>,
	and ground resolution can combine 
	<IMG SRC="wheeler-trusting-trust-ddc_html_4072c6c2.gif" NAME="Object71" ALIGN=ABSMIDDLE WIDTH=11 HEIGHT=18>
	with 
	<IMG SRC="wheeler-trusting-trust-ddc_html_2f3efe16.gif" NAME="Object31" ALIGN=ABSMIDDLE WIDTH=48 HEIGHT=18>
	to derive 
	<IMG SRC="wheeler-trusting-trust-ddc_html_m5f31e6e0.gif" NAME="Object33" ALIGN=ABSMIDDLE WIDTH=13 HEIGHT=18>.</p>
	<P CLASS="list-1-western">The full resolution rule extends ground
	resolution so that it can handle quantifiers and predicates.  It
	does this by using unification, the process of replacing the
	variables in the expressions with terms to make the modified
	expressions identical to each other.  For details, see section 3.3
	of [Duffy1991] or [Robinson2001].</p>
	<P CLASS="list-1-western">For example, given &ldquo;&nbsp;man(X) |
	mortal(X)&rdquo;, we can substitute &ldquo;X=socrates&rdquo;
	yielding &ldquo;&nbsp;man(socrates) | mortal(socrates)&rdquo;; this
	can then be combined with &ldquo;man(socrates)&rdquo; to prove
	&ldquo;mortal(socrates)&rdquo;.</p>
	<LI><P CLASS="list-1-western"><I><B>Para</B></I><SPAN STYLE="font-style: normal">:
	Paramodulation, a rule that adds support for the equality relation. 
	This replaces an expression with another expression it is equal to,
	including any parameter substitutions. For example, given
	&ldquo;f(d,&nbsp;e,&nbsp;X)&rdquo; and &ldquo;f(A,&nbsp;B,&nbsp;C)=g(C,&nbsp;B,&nbsp;A)&rdquo;,
	paramodulation can derive &ldquo;g(X,&nbsp;e,&nbsp;d)&rdquo;.  The
	precise definition of this rule is complex (e.g., it handles cases
	where the equality holds only under certain conditions); for
	details, see section 3.3.7 of [Duffy1991] or [Robinson2001].</SPAN></p>
</UL>
<P CLASS="western" STYLE="font-style: normal">These proof step
rationales (aka derivation rules or rules of inference) were used
because they are the rationales supported by the selected proof
tools.</p>
<H2 CLASS="western"><A NAME="5.4.Tools and rationale for confidence in the proofs|outline"></A>
5.4 Tools and rationale for confidence in the proofs</H2>
<H3 CLASS="western"><A NAME="5.4.1.Early DDC proof efforts|outline"></A>
5.4.1 Early DDC proof efforts</H3>
<p>Early versions of these proofs were developed by
hand.  Unfortunately, it was very difficult to rigorously check or
amend those hand-created proofs<A CLASS="sdfootnoteanc" NAME="sdfootnote11anc" HREF="#sdfootnote11sym"><SUP>11</SUP></A>.</p>
<p>The tool named Prototype Verification System (PVS)
was then used for some time, in part because it has a powerful
notation that supports type-checking (which can eliminate some
errors) and higher-order logic [Owre2001].  At the time, it was
thought that higher-order logic would be especially helpful, since a
compiler can be viewed as a computational function that produces a
computational function.  However, while PVS is very good at what it
does, and several proofs were created using PVS, PVS required a large
amount of manual effort to produce the proofs.  These early proofs
showed that higher-order logic was not necessary or especially
helpful in modeling this particular problem, and that other logic
systems and provers could be used instead.  Many other tools have
less powerful notations (e.g., first-order logic without types) but
can better automate proof development.</p>
<H3 CLASS="western"><A NAME="5.4.2.Prover9, mace4, and ivy|outline"></A>
5.4.2 Prover9, mace4, and ivy</H3>
<p>The final proofs, as presented in this
dissertation, were developed and checked with the assistance of
several related tools: prover9, mace4, and ivy:</p>
<UL>
	<LI><P CLASS="list-1-western">Prover9 is an automated theorem prover
	for first-order and equational (classical) logic, which uses an
	ASCII representation of FOL.  All of the proofs given in this
	chapter were developed by prover9 version Aug-2007.</p>
	<LI><P CLASS="list-1-western">Mace4 is a tool paired with prover9
	that searches for finite structures satisfying first-order and
	equational statements (the same kind of statement that Prover9
	accepts).  From a logic point of view, mace4 produces
	interpretations which are models of the input formulas; from a
	mathematical point of view, mace4 produces structures satisfying the
	input formulas.  Put simply, mace4 tries to find an assignment of
	integers 0..n&nbsp;1 (the &ldquo;domain&rdquo;) to each constant
	term, to each function (given their possible inputs in the domain),
	and true/false values for each predicate that will satisfy the given
	set of statements.  By default, mace4 starts searching for a
	structure of domain size 2, and then it increments the size until it
	succeeds or reaches some limit.</p>
	<LI><P CLASS="list-1-western">Ivy is a separate proof checker that
	can accept and verify the proof as output by prover9.  Ivy is
	written using A (sic) Computational Logic for Applicative Common
	Lisp (ACL2) and has itself been proven sound using ACL2
	[McCune2000].  All of the prover9 proofs were verified by ivy. 
	Indeed, one reason prover9 was chosen over some other tools was the
	availability of ivy.</p>
</UL>
<p>Far more detail about prover9 is provided in
[McCune2008]; its general approach (in particular, information on
resolution and paramodulation) is discussed in detail in texts such
as [Duffy1991] and [Robinson2001].  For purposes of this
dissertation, prover9 is given a set of assumptions and a goal
statement, using first-order logic (FOL) with equality.  Prover9
negates the goal, transforms all assumptions and the goal into
simpler clauses, and then attempts to find a proof by contradiction. 
Should prover9&rsquo;s search algorithm find a proof, it can print
the sequence of steps and the rationale for each step that leads to
the proof.</p>
<H3 CLASS="western"><A NAME="5.4.3.Tool limitations|outline"></A>5.4.3 Tool
limitations</H3>
<p>Unlike PVS, traditional FOL and the prover9 tool
(which implements FOL) do not directly support types (sorts).  It is
possible to implement types (sorts) using FOL: types of constants can
be declared as assertions (e.g., &ldquo;executable(cA)&rdquo; could
represent &ldquo;c<SUB>A</SUB> is an executable&rdquo;), assertions
about compilers could be modified to state the types of compiler
inputs and outputs, and the goal could be extended to include type
requirements.  However, because prover9 does not directly support
type declaration, implementing types in prover9 makes the proofs far
more complicated.  These complications do not add value, because the
types of compiler input and output are not in doubt (and thus do not
need proof).  In this dissertation types are only used as part of the
comments to clarify the proof results, and are not directly expressed
in the proof notation.</p>
<p>It should be noted that these tools did not make
creating the proofs trivial.  In particular, prover9 can only find a
proof given a correct goal and assumptions.  When prover9 cannot
prove a goal, it either halts with a declaration that it cannot prove
the result or it times out.  In either case it is often difficult to
determine <I>why</I><SPAN STYLE="font-style: normal"> the proof
cannot be found.  The companion tool mace4 may be able to find a
counter-example, but even then it is often not obvious what is wrong.
 In practice, the proofs were developed by first creating </SPAN><SPAN STYLE="font-style: normal">very
simplified models of the world, and then expanding them stepwise to
model additional complexities of the real world.</SPAN></p>
<P CLASS="western" STYLE="font-style: normal">Prover9 will sometimes
use information it does not need, leading to overly-complicated
proofs.  To counteract this, each proof was developed separately and
includes only the statements necessary for the proof.</p>
<H3 CLASS="western" STYLE="font-style: normal"><A NAME="5.4.4.Proofs&rsquo; conclusions follow from their assumptions|outline"></A>
5.4.4 Proofs&rsquo; conclusions follow from their assumptions</H3>
<p>There are many reasons to have very high
confidence that the formal proofs&rsquo; conclusions follow from
their assumptions:</p>
<UL>
	<LI><P CLASS="list-1-western">The proofs were automatically
	generated by an automated tool, prover9.  This eliminates many
	opportunities for error caused by manual proofs.</p>
	<LI><P CLASS="list-1-western">The generated proofs were verified by
	the separate tool ivy.  Ivy cannot create proofs; it is a simple
	program that checks that each step is correct.  This cross-checking
	increases the confidence that the proof is correct.</p>
	<LI><P CLASS="list-1-western">Ivy itself has has been proven sound
	using ACL2.</p>
	<LI><P CLASS="list-1-western">The source code for prover9, ivy, and
	ACL2 are all publicly visible under the terms of the GNU General
	Public License (GPL).  This public visibility enables widespread
	public review.</p>
	<LI><P CLASS="list-1-western">The proofs were hand-verified by the
	author.  They have also been reviewed by several people at the
	Institute for Defense Analyses (IDA) and by the PhD committee
	members.</p>
</UL>
<p>In short, there are good reasons to have very high
confidence that these proofs correctly prove their goals, given their
assumptions.</p>
<H3 CLASS="western" STYLE="font-style: normal"><A NAME="5.4.5.Proofs&rsquo; assumptions and goals adequately model the world|outline"></A>
5.4.5 Proofs&rsquo; assumptions and goals adequately model the world</H3>
<P CLASS="western" STYLE="font-style: normal">A related question is
whether or not the formally-stated assumptions are an adequately
accurate model of the real world.  There are good reasons to believe
this is also true:</p>
<UL>
	<LI><P CLASS="list-1-western" STYLE="font-style: normal">The
	assumptions have been proven to be consistent using mace4.  In
	classical logic an inconsistent set of assumptions can be used to
	prove any claim, so it is important that a set of assumptions be
	consistent.   If a set of first-order statements are simultaneously
	satisfiable, then that set is consistent (see page 410 of
	[Stoll1979] for a proof of this statement).  The set of assumptions
	in each of the three proofs have been shown by the mace4 tool to be
	satisfiable (i.e., for each proof mace4 can create a model that
	satisfies the set of assumptions).  Therefore, the assumptions used
	in each proof are consistent.   See appendix C for the mace4 models
	that show the assumptions are consistent.  For another example of a
	project that used mace4 to check for consistency, see
	[Schwitter2006].</p>
	<LI><P CLASS="list-1-western" STYLE="font-style: normal">The
	assumptions and goals are based on the informal justification
	previously published in the 2005 ACSAC paper [Wheeler2005].  This
	paper passed independent peer review before its publication, and no
	one has refuted it since.</p>
	<LI><P CLASS="list-1-western" STYLE="font-style: normal">These
	assumptions and goals have been reviewed by the author, several
	people at the Institute for Defense Analyses (IDA), and all of the
	dissertation committee members.</p>
	<LI><P CLASS="list-1-western"><SPAN STYLE="font-style: normal">All
	of the outcomes from the demonstrations described in chapter </SPAN><SPAN STYLE="font-style: normal">7</SPAN><SPAN STYLE="font-style: normal">
	can be explained in terms of these proofs.</SPAN></p>
	<LI><P CLASS="list-1-western" STYLE="font-style: normal">The
	formalization process forced the author to clarify that three proofs
	were needed, not just one.  Originally, the author intended to only
	create one proof (proof #1), but as it was developed, it became
	clear that multiple proofs were needed.  This suggests that insight
	was gained through the process of developing the formal proof, and
	an author who has gained insight into the problem is more likely to
	produce final assumptions and goals that adequately model the world.</p>
	<LI><P CLASS="list-1-western"><SPAN STYLE="font-style: normal">The
	proofs clearly fit together.  Proof #3 shows that if there is a
	benign environment and a grandparent compiler, then
	cP_corresponds_to_sP (to be defined) is true.  Proof #2 shows that
	if there is a benign environment and cP_corresponds_to_sP is true,
	then stage2=c</SPAN><SUB><SPAN STYLE="font-style: normal">A</SPAN></SUB><SPAN STYLE="font-style: normal">.
	 And finally, proof #1 shows that if stage2=c</SPAN><SUB><SPAN STYLE="font-style: normal">A</SPAN></SUB><SPAN STYLE="font-style: normal">,
	then c</SPAN><SUB><SPAN STYLE="font-style: normal">A</SPAN></SUB><SPAN STYLE="font-style: normal">
	and </SPAN><I>s</I><SUB><SPAN STYLE="font-style: normal">A</SPAN></SUB><SPAN STYLE="font-style: normal">
	correspond.</SPAN></p>
</UL>
<P CLASS="western" STYLE="font-style: normal">Therefore, there are
good reasons to believe that these assumptions and goals adequately
model the real world.</p>
<H2 CLASS="western" STYLE="font-style: normal"><A NAME="5.5.Proof conventions|outline"></A>
5.5 Proof conventions</H2>
<p>The notation of prover9 only supports simple ASCII
text, and does not directly support the Unicode characters for logic
notation (such as <FONT FACE="Times New Roman, serif">&rarr;</FONT>)
nor subscripts (such as c<SUB>A</SUB>) by default.  Thus, the ASCII
representation is used for all prover9 representations and results
below.   Constants with subscripts are represented by simply
appending the subscript value, e.g., c<SUB><SPAN STYLE="font-weight: normal">A</SPAN></SUB>
is notated as cA.  Spaces and newlines are occasionally inserted to
improve readability.  All successful prover9 proofs end with the
conclusion &ldquo;$F&rdquo; (false).  This means that prover9 was
able to find a contradiction given the assumptions and the negation
of the goal.  Definitions are a kind of assumption; their names begin
with &ldquo;definition_&rdquo; if they are of the form &ldquo;constant
= EXPRESSION&rdquo;, and begin with &ldquo;define_&rdquo; otherwise. 
In the prover9 proof, assumptions and goals are assigned names using
the prover9 &ldquo;label&rdquo; attribute (not shown in this
dissertation).</p>
<P CLASS="western" STYLE="font-style: normal">Each of the proofs
below begins with a formal statement (using FOL formulas) of the goal
to be proved, along with a textual explanation.  This is followed by
sections that introduce the required predicates, functions, and
assumptions, as well as restating the goal.  The predicates and
functions are first described by showing in a fixed-width font the
keyword &ldquo;predicate&rdquo; or &ldquo;function&rdquo;, the
predicate/function name, and its parentheses-surrounded parameters
(using initial capital letters).  The assumptions (including
definitions) and goal are first described using FOL formulas ending
with a period.  Predicates, functions, and assumptions are each
described further in explanatory text.  These are followed by a
prover9 proof (verified by ivy), which shows in a table format how
the assumptions prove the goal (using proof by contradiction).  The
table includes the rationale for each step.  The prover9 proof is
followed by additional discussion about that proof.</p>
<H2 CLASS="western"><A NAME="5.6.Proof #1: Goal source_corresponds_to_executable|outline"></A>
5.6 Proof #1: Goal source_corresponds_to_executable</H2>
<p>The key proof for DDC is to show that, if stage2
(the result of the DDC process) and c<SUB>A</SUB> (the original
compiler-under-test) are equal, then the compiled executable c<SUB>A</SUB>
and the source code <I>s</I><SUB>A</SUB> exactly correspond.  This
goal is easily represented by the following formula (using ASCII
representation) named source_corresponds_to_executable:</p>
<PRE CLASS="western">	(stage2 = cA) -&gt; exactly_correspond(cA, sA, lsA, eArun).</PRE><P CLASS="western" STYLE="font-style: normal">
As with all formal proofs in this dissertation, this proof introduces
various predicates, functions, and assumptions.  Since this first
proof is central to the entire dissertation, as each assumption is
introduced it will be shown how it builds toward the final goal. 
This is followed by a prover9 table (showing how the assumptions
prove the final goal) and a brief discussion.</p>
<H3 CLASS="western" STYLE="font-style: normal"><A NAME="__RefHeading__34675001"></A><A NAME="5.6.1.Predicate &ldquo;=&rdquo; given two executables|outline"></A>
5.6.1 Predicate &ldquo;=&rdquo; given two executables</H3>
<P CLASS="western" STYLE="font-style: normal; page-break-before: auto; page-break-after: avoid">
The predicate &ldquo;=&rdquo; (equal-to, aka equality) is part of the
goal statement; it compares two executables to determine if they are
equal.  It is an infix predicate with this form:</p>
<PRE CLASS="western" STYLE="font-style: normal">	predicate Executable1 = Executable2</PRE><P CLASS="western" STYLE="font-style: normal">
For purposes of DDC, two executables are equal if they have <I>exactly</I>
the same structure and values as used by the environment when it runs
either executable.  When performing DDC, this test for equality must
occur in an environment that is trusted to accurately report on the
equality of two executables (i.e., the environment and program
implementing this equality test must not have triggers/payloads for
the values tested), and the two executables being compared must have
been acquired in a trustworthy way.</p>
<P CLASS="western" STYLE="font-style: normal">In a traditional
operating system with a filesystem, an executable would normally be
one or more files, where each file would be a stream of zero or more
bytes as well as metadata controlling its execution (including the
set of attributes determining if and how to run the file).  The
sequence of bytes must be identical (the same length and at each
position the same value), and the metadata effecting execution must
have the same effect in execution when transferred to its execution
environment (e.g., the  &ldquo;execution&rdquo; flag or equivalent
must have the same value so that they are both executable).  The
&ldquo;have the same effect&rdquo; phrase is stated here because
differences that are <I>not</I> used by the environment during
execution are irrelevant.  In particular, many operating systems
record &ldquo;date written&rdquo; as part of the metadata, and this
would typically not be the same between different compilation runs. 
Nevertheless, as long as those differences do not effect program
execution, they do not matter.  Indeed, if the differences are only
compared in certain ways, and those relationships are maintained,
then they do not matter.  Thus, if a &ldquo;makefile&rdquo; compares
dates, but only to determine which files came before or later, the
specific dates do not matter as long as the relationships are
maintained.  In practice, it is relatively easy to determine what
metadata has an effect by examining the source code <I>s</I><SUB>A</SUB>
and <I>s</I><SUB>P</SUB>; if the source code does not use it
(directly or via calls to the environment), then given the other
assumptions, the resulting stage2 executable from DDC will not invoke
them either.  This is because the DDC process (though not the
original generation process) is required to not include triggers or
payloads that affect the execution process (as discussed in section
3.2).</p>
<P CLASS="western" STYLE="font-style: normal">If the executables are
S-expressions<A CLASS="sdfootnoteanc" NAME="sdfootnote12anc" HREF="#sdfootnote12sym"><SUP>12</SUP></A>,
the usual definition of S-expression equality is used: Atoms are only
equal to themselves (so 5=5), NIL is only equal to itself, and lists
are equal iff they have the same length and each of their elements
are equal.  NIL and an empty list are distinct if and only if the
execution environment can distinguish them.  We presume S-expressions
are written out as text and read back before use (otherwise there may
be complications due to pointer equivalence).</p>
<P CLASS="western" STYLE="font-style: normal">Note that equality is a
<I>stricter</I> relationship than <I>equivalence</I>.  Two
executables may be considered <I>equivalent</I> in an environment if
they always produce equal outputs given equal inputs, even if their
internal structure and/or values are different.  Two executables that
are equal are always equivalent, but equivalent executables need not
be equal.    Unfortunately, determining if two executables E1 and E2
are equivalent is undecidable in the general case.  This is because
if there was any decision procedure D capable of determining
equivalence, it could be invoked by E1 and E2.  If found equivalent
they could perform different operations, and if found different they
could act the same [Cohen1984, part 4].  Even in very special cases
it is often difficult to determine the equivalence of two unequal
executables.  Instead of focusing on the difficult-to-determine
equivalence relationship, we will instead focus on the stricter
equality relationship, which is a far easier and more practical test
to perform.  Proof #2 and proof #3 will show that under certain
common conditions, two executables will be equal (not just
equivalent), so limiting proof #1 to equality does not significantly
limit its practical utility.</p>
<H3 CLASS="western" STYLE="font-style: normal"><A NAME="5.6.2.Predicate exactly_correspond|outline"></A>
5.6.2 Predicate exactly_correspond</H3>
<P CLASS="western" STYLE="page-break-before: auto; page-break-after: avoid">
The goal statement makes no sense unless the predicate
&ldquo;exactly_correspond&rdquo; is defined.  Predicate
&ldquo;exactly_correspond&rdquo; has the following parameters:</p>
<PRE CLASS="western">	predicate exactly_correspond(Executable, Source, Lang, RunOn)</PRE><p>
This predicate is defined to be true if, and only if, the Executable
<I>exactly</I> implements source code Source when (1) that Source is
interpreted as language Lang and (2) the Executable is run on
environment RunOn.  For this predicate to be true, the Executable
must not do anything more, anything less, or anything different than
what is specified by Source (when interpreted as language Lang). 
Note that this does <I>not</I> require that Source is a perfect
implementation of some abstractly-defined language.  In section 5.6.8
we will define a condition that will make the predicate
exactly_correspond true.</p>
<H3 CLASS="western"><A NAME="5.6.3.Predicate accurately_translates|outline"></A>
5.6.3 Predicate accurately_translates</H3>
<P CLASS="western" STYLE="page-break-before: auto; page-break-after: avoid">
A related predicate that must be defined is accurately_translates,
with these parameters:</p>
<PRE CLASS="western">	predicate accurately_translates(Compiler, Lang, Source, EnvEffects,
		RunOn, Target)</PRE><p>
This predicate is true if and only if the Compiler (an executable)
correctly implements language Lang when compiling a particular Source
and given input EnvEffects (from the environment), when it is run on
environment RunOn and targeting environment Target.  The Target is
the environment that the compiler generates code for (which need not
be the same as the environment the compiler runs in).  The EnvEffects
parameter models variations in timing and inputs from the
environment, and will be explained further in the definition of the
&ldquo;compile&rdquo; function in section 5.6.5.</p>
<H3 CLASS="western"><A NAME="__RefHeading__33504460"></A><A NAME="5.6.4.Assumption cT_compiles_sP|outline"></A>
5.6.4 Assumption cT_compiles_sP</H3>
<p>We must assume that the trusted compiler c<SUB>T</SUB>
is a compiler for language lsP (the language used by source code <I>s</I><SUB>P</SUB>),
that c<SUB>T</SUB> will accurately translate <I>s</I><SUB>P</SUB>
when run in environment e1, and that c<SUB>T</SUB> targets (generates
code for) environment e2.  This assumption is named cT_compiles_sP:</p>
<PRE CLASS="western">	all EnvEffects accurately_translates(cT, lsP, sP, EnvEffects, e1, e2).</PRE><p>
In short, c<SUB>T</SUB> has to accurately implement the language lsP,
at least sufficiently well to compile <I>s</I><SUB>P</SUB>. 
Otherwise, c<SUB>T</SUB> can&rsquo;t be used to compile <I>s</I><SUB>P</SUB>.
 For example, if <I>s</I><SUB>P</SUB> was written in C&#8288;+&#8288;+,
then a Java compiler cannot be directly used as the trusted compiler
c<SUB>T</SUB>.  Compiler c<SUB>T</SUB> must not have triggers or
payloads that activate when compiling <I>s</I><SUB>P</SUB>.  Neither
e1=e2 nor e1<FONT FACE="Times New Roman, serif">&ne;</FONT>e2 is
asserted; thus, e1 may but need not be the same as e2.  The &ldquo;all&rdquo;
in the formal statement is optional, but is included here for
emphasis.</p>
<H4 CLASS="western"><A NAME="__RefHeading__31261668"></A><A NAME="5.6.4.1.Implications for the language|outline"></A>
5.6.4.1 Implications for the language</H4>
<p>This proof could have been created without
mentioning languages at all; the formal model could simply require
that (1) c<SUB>T</SUB> will accurately translate <I>s</I><SUB>P</SUB>
when run in environment e1 and that (2) c<SUB>T</SUB> targets
(generates code for) environment e2.  However, it would have been
easy to misunderstand the proof results.  For example, without noting
the different languages, the proof could be easily misunderstood as
requiring that all compilers implement the same language.  Noting the
languages clarifies that they <I>can</I><SPAN STYLE="font-style: normal">
be </SPAN><SPAN STYLE="font-style: normal">different, and clarifies
that the languages should be considered when performing DDC. 
Including the languages in the proofs also provides a check on the
proof that is similar to type-checking: The proof requires that in
each compilation, the compiler used must support the language of the
source code used as input.</SPAN></p>
<p>The language lsP <I>must</I> include <I>all</I> of
the syntactic and semantic requirements necessary to correctly
interpret <I>s</I><SUB>P</SUB>.  It <I>may</I>, but need not, include
additional requirements not required to interpret <I>s</I><SUB>P</SUB>
(as long as they do not interfere with interpreting <I>s</I><SUB>P</SUB>).
 In particular, lsP need not be the same as the language documented
in an official (e.g., standardized) language specification, even if
one exists.  For example:</p>
<UL>
	<LI><P CLASS="list-1-western">lsP may omit any requirements in an
	official specification, as long as the source code does not require
	them.  So an official specification may include support for
	threading or floating point numbers, but if they are not needed when
	compiling the source code, then they can be safely omitted from lsP.</p>
	<LI><P CLASS="list-1-western">lsP may impose additional requirements
	that are explicitly left undefined in an official specification. 
	For example, if an official language specification permits certain
	operations to be done in an arbitrary order (such as right-to-left
	or left-to-right evaluation of function parameters), but the given
	source code requires a particular order of evaluation, then lsP must
	add the additional ordering requirement.  Such additional
	requirements, if any, should be included in the source code&rsquo;s
	documentation.  It is usually <I>better</I> if the source code only
	requires what an official language specification guarantees, because
	there are likely to be more alternative compilers.  But it&rsquo;s
	quite common for compiler sources to make assumptions that are not
	guaranteed by official specifications, and DDC can still be used in
	such cases.</p>
	<LI><P CLASS="list-1-western">lsP may impose additional length or
	size requirements than those imposed by an official specification. 
	For example, if the source code requires support for certain
	identifier lengths, depth of parentheses, or size of result, then
	lsP includes those requirements.</p>
	<LI><P CLASS="list-1-western">If lsP includes ambiguous
	requirements, or requirements that are not fully defined, then those
	ambiguities or inadequate definitions must not matter when compiling
	the source code.</p>
	<LI><P CLASS="list-1-western">lsP may add various extensions as
	requirements that are not part of the official specification. 
	Unsurprisingly, if the source code requires extensions, then the
	compiler used to compile that source code must somehow support those
	extensions.</p>
	<LI><P CLASS="list-1-western">lsP could even directly contravene an
	official specification on certain issues; what matters is what is
	required to correctly compile the source code.</p>
</UL>
<p>The language lsP need not be formally specified,
nor must it exist as a single document.  If expressed, it is likely
to take the form of a reference to an existing language standard
combined with a description of the permitted omissions, the changes,
and the additions.  For proof purposes, the language specification
need not be written at all; all that is required is that the
compilers and source code conform if it <I>were</I><SPAN STYLE="font-style: normal">
written.  Of course, if the specification is not written, it is
difficult to check for compliance to it.</SPAN></p>
<p>The &ldquo;language&rdquo; may even be a set of
languages, including a language for selecting which other language to
use (e.g., the file extension conventions used for selecting between
languages).  For example, GNAT (whose name is no longer an acronym)
is an Ada compiler whose front-end is written in Ada, but the rest of
the compiler is written in C.  A trusted compiler suite for GNAT
would need to be able to compile both Ada and C, as well as correctly
process the file extension conventions used by the GNAT source code
to differentiate between languages.</p>
<H4 CLASS="western"><A NAME="5.6.4.2.Implications for the trusted compiler and its environment|outline"></A>
5.6.4.2 Implications for the trusted compiler and its environment</H4>
<p>Compiler c<SUB>T</SUB> need not implement a whole
language, as defined by an official language specification&mdash;it
only needs to implement what is required to compile <I>s</I><SUB>P</SUB>.
 So c<SUB>T</SUB> may be a very limited compiler.  In some cases,
some compiler c<SUB>Q</SUB> may only be suitable for use as a part of
trusted compiler c<SUB>T</SUB> if the source code goes through a
preprocessor, or if the resulting executable goes through a
postprocessor.  For example, a preprocessor may be needed to convert
nonstandard constructs into constructs that c<SUB>Q</SUB> can handle,
or perhaps c<SUB>Q</SUB> implements a different specification.  In
this case, the compiler c<SUB>T</SUB> is the combination of the
preprocessor and c<SUB>Q</SUB>.  In theory there&rsquo;s no limit to
how many steps can be chained together to construct c<SUB>T</SUB>,
but since they are all part of the trusted compiler they must be
sufficiently trustworthy to meet the assumptions of the proof.  In
practice, these steps (including the use of preprocessors and
postprocessors) should be limited, to limit the number and size of
tools that are granted such trust.</p>
<p>Note that the trusted compiler (c<SUB>T</SUB>) and
the environment it executes on (e1) do <I>not</I> need to be
completely defect-free nor non-malicious.  This is important, since
defect-free compilers and environments are rare, and ensuring
absolute non-maliciousness is difficult.  Compiler c<SUB>T</SUB> or
environment e1 may be full of bugs, and/or full of triggers and
payloads for inserting corrupted code into other programs (including
itself).  We merely require that c<SUB>T</SUB>, when executed on e1,
perform an accurate translation when it compiles exactly one
program&rsquo;s source code: <I>s</I><SUB>P</SUB>.  So c<SUB>T</SUB>
may have defects &ndash; but they must not affect compiling <I>s</I><SUB>P</SUB>.
 Similarly, c<SUB>T</SUB> may have triggers and payloads to create
maliciously corrupted executable(s) &ndash; but c<SUB>T</SUB> must
not have triggers for <I>s</I><SUB>P</SUB>, or if it does, its
payloads must not affect the results.  Various real-world actions,
such spot-checking or formally verifying the compiler executable c<SUB>T</SUB>,
can increase confidence that this assumption is true in the real
world.  In some cases, a secret compiler (where reading/writing its
source, reading/writing its executable, and using it as a service is
expressly limited to very few trusted people) may be useful as the
trusted compiler; via DDC, it can be used to greatly increase
confidence in the publicly-available compiler.</p>
<p>It is worth noting that one of these potential
failures is memory failure.  Recent field studies have found that
dynamic random access memory (DRAM) error rates are orders of
magnitude higher than previously reported, and memory errors are
dominated by hard errors (which corrupt bits in a repeatable manner)
rather than soft errors [Schroeder2009].  The risk of such failures
can be greatly reduced by using memory test programs to check the
environment before performing DDC, and by using memory systems that
include error correcting code(s) (ECC).</p>
<p>There is a subtlety in the formal model that is
normally handled correctly by compiler users, but is noted here for
completeness.  That subtlety is that when performing DDC, we
typically need to have different build instructions (as executed by
the &ldquo;real&rdquo; compilers and environment) than when <I>s</I><SUB>P</SUB>
and <I>s</I><SUB>A</SUB> were originally compiled.  At first glance
this appears to be a problem, because in the formal model of DDC, the
source code <I>s</I><SUB>P</SUB> and <I>s</I><SUB>A</SUB> that is
used in DDC must be <I>exactly</I> the same as the source code used
in its original purported creation process.  Yet the source code may
include build instructions, indeed, nontrivial compilers often
include complex build instructions as part of their source code. But
if the build instructions are part of the source code, and the build
instructions invoke a compiler other than c<SUB>T</SUB>, how can
trusted compiler c<SUB>T</SUB> be invoked during DDC? Similarly, if
the environments e1 or e2 are different than the environments eP and
eA (respectively), and/or if the option flags are different between
compilers, how are these changes modeled? And similarly, if the build
systems are substantially different (e.g., there are different build
languages), how can we accurately model translating the build
language?  One solution is to consider the build instructions as not
included in the source code, but this is grossly unrealistic for
larger compilers with complex build instructions.</p>
<p>A better alternative that completely models these
circumstances is to consider the build instructions to be part of the
source code, and also consider the trusted compiler c<SUB>T</SUB> to
be some &ldquo;real&rdquo; compiler c<SUB>T</SUB><FONT FACE="Times New Roman, serif">&rlm;&lrm;&prime;</FONT>
plus a preprocessor.  This preprocessor is trusted to correctly
change the build instructions in a way that meets this assumption,
e.g., so that the compilation process invokes c<SUB>T</SUB><FONT FACE="Times New Roman, serif">&rlm;&lrm;&prime;</FONT>
instead of the original compilation process.  In practice, this
preprocessor is likely to be implemented by a human who modifies the
build process (e.g., by setting an environment variable, modifying a
makefile, using a different set of arguments when invoking &ldquo;make&rdquo;,
or hand-translating the build instructions to a different build
language).  <SPAN STYLE="font-style: normal">This step is so
&ldquo;obvious&rdquo; to most compiler users that it would not
normally be remarked on.  Often this transformation is </SPAN>so
simple that it is easy to forget that it even occurred. 
Nevertheless, by acknowledging this step, the formal model of DDC can
accurately model what actually occurs.  Since it is part of the
trusted compiler c<SUB>T</SUB>, this preprocessor step must be
trusted to not include triggers and payloads that would effect the
DDC compilation.</p>
<p>In general, the internal structure of trusted
compiler c<SUB>T</SUB> is irrelevant for the proof.  Many problems in
applying DDC (including modeling necessary changes to the build
process as noted above) can be resolved by combining various
processes (including preprocessors and/or postprocessors) as
necessary to produce the final trusted compiler c<SUB>T</SUB>.  The
only requirement is that all required assumptions (including the
definitions) are met.</p>
<H3 CLASS="western"><A NAME="__RefHeading__31481937"></A><A NAME="5.6.5.Function compile|outline"></A>
5.6.5 Function compile</H3>
<p>Unsurprisingly, we must model compiling a program.
 We will model compiling as a function that returns an executable (a
kind of data)<A CLASS="sdfootnoteanc" NAME="sdfootnote13anc" HREF="#sdfootnote13sym"><SUP>13</SUP></A>
and has the following parameters:</p>
<PRE CLASS="western">	function compile(Source, Compiler, EnvEffects, RunOn, Target)</PRE><p>
This represents compiling Source with the Compiler, running the
compiler in environment RunOn, and instructing the compiler to
generate an executable for the target environment Target.  Note that
Target may or may not be the same as RunOn.</p>
<p>The parameter &ldquo;EnvEffects&rdquo; overcomes
an issue in typical mathematical notation.  In typical mathematical
notation, a function provided with the same inputs will always
produce the same outputs.  Without the &ldquo;EnvEffects&rdquo;
parameter, this would imply that a given compiler executable, when
given the same Source, RunOn, and Target, will always produce exactly
the same output (i.e., that it is <I>deterministic</I><SPAN STYLE="font-style: normal">).
 Unfortunately, this is </SPAN><I>not</I><SPAN STYLE="font-style: normal">
</SPAN><SPAN STYLE="font-style: normal">always true for all
compilers.  Some </SPAN><SPAN STYLE="font-style: normal">compilers
</SPAN><I>will</I><SPAN STYLE="font-style: normal"> produce different
outputs at different times, even when given the same source code. 
The reason is that environments can provide &ldquo;effects&rdquo;,
which are essentially inputs to the </SPAN><SPAN STYLE="font-style: normal">compilation
process that affect the </SPAN><SPAN STYLE="font-style: normal">outcome
but are not part of the source code.  Examples of effects that can
cause non-determinism are:</SPAN></p>
<UL>
	<LI><P CLASS="list-1-western">Random number generators.  A
	compiler&rsquo;s code generator or optimizer might have multiple
	alternatives, and instead of picking one deterministically, it might
	call on a random number generator to make that determination.  If
	the environment provides different random numbers each time it is
	run, the results might be different.  Note that under certain
	circumstances the GCC compiler will use a random number generator,
	but GCC also allows users to select a seed; if a seed is selected,
	then the sequence is deterministic and not random at all.</p>
	<LI><P CLASS="list-1-western">Heap allocation address values.  Many
	systems today randomize addresses (e.g., of the heap or stack), in
	an attempt to counter attackers by making certain kinds of attacks
	harder to perform.  However, a compiler&rsquo;s output may be
	changed by different address values.  For example, some Java
	compilers use heap allocation addresses for hash calculation, and
	then use those hash values to control the sort order of some output.
	 As a result, the output ordering may be different between
	executions, even given the same source code, execution environment,
	and target environment.</p>
	<LI><P CLASS="list-1-western">Execution order due to threading. 
	Some compilers are multi-threaded and are only loosely ordered.  The
	environment may execute the threads in a different order in
	different executions, and depending on the compiler, this may affect
	the output.</p>
</UL>
<p>Thus, EnvEffects models the inputs from the
environment which may vary between executions while still conforming
to the language definition as used by Source.</p>
<p>As noted earlier, libraries may be modeled by
considering them as part of the compiler (if they are executed) or
part of the source (if they are used as input data but not executed).</p>
<p>In some discussions of DDC, we will occasionally
use the simpler definition:</p>
<PRE CLASS="western">	function compile(Source, Compiler)</PRE><p>
Of course, this definition cannot represent the different
environments (RunOn and Target), nor can it represent the possibility
that some programs are non-deterministic (which is modeled by
EnvEffects), but in some situations these can be inferred from
context.  In some cases the function name &ldquo;c&rdquo; is used as
an abbreviation for &ldquo;compile&rdquo;.</p>
<H3 CLASS="western"><A NAME="5.6.6.Assumption sP_compiles_sA|outline"></A>
5.6.6 Assumption sP_compiles_sA</H3>
<p>We must assume that the source code <I>s</I><SUB>P</SUB>
(written in language lsP) defines a compiler that, if accurately
compiled, would be suitable for compiling <I>s</I><SUB>A</SUB>.  To
formally state this, we will assert that if we have some
GoodCompilerLangP with the right properties, then using
GoodCompilerLangP on <I>s</I><SUB>P</SUB> will produce a suitable
executable:</p>
<PRE CLASS="western">	accurately_translates(	GoodCompilerLangP, lsP, sP,<BR>											EnvEffectsMakeP, ExecEnv, TargetEnv) -&gt;<BR>		accurately_translates(<BR>			compile(	sP, GoodCompilerLangP, EnvEffectsMakeP,<BR>							ExecEnv, TargetEnv),<BR>			lsA, sA, EnvEffectsP, TargetEnv, eArun).</PRE><p>
Strictly speaking, the name &ldquo;sP_compiles_sA&rdquo; is
misleading; there is no guarantee that source code can be directly
executed.  However, more-accurate names<A CLASS="sdfootnoteanc" NAME="sdfootnote14anc" HREF="#sdfootnote14sym"><SUP>14</SUP></A>
tend to be very long and thus hard to read.</p>
<p>Note that by combining this assumption
(sP_compiles_sA) and the previous assumption cT_compiles_sP, we can
determine a new derived result which we will name
sP_compiles_sA_result:</p>
<PRE CLASS="western">	accurately_translates(	compile(sP, cT, EnvEffectsMakeP, e1, e2),
										lsA, sA, EnvEffectsP, e2, eArun).</PRE><p>
Note that EnvEffectsMakeP and EnvEffectsP are not bound to any
particular value, so they have an implicit &ldquo;for all&rdquo;
around them.  Since their actual values do not matter, to simplify
these expressions they (and similar dummy values) can be replaced
with arbitrary capital letters:</p>
<PRE CLASS="western">	accurately_translates(compile(sP, cT, A, e1, e2), lsA, sA, B, e2, eArun).</PRE><p>
Note that <I>s</I><SUB>P</SUB> (when compiled) does not need to
implement the <I>whole</I> language <I>s</I><SUB>A</SUB> was written
in, as defined by some official language standard.  Instead, a
compiled form of <I>s</I><SUB>P</SUB> only needs to implement the
syntax and semantics of the language that <I>s</I><SUB>A</SUB>
requires.  This language, lsA, <I>must</I> include <I>all</I> of the
syntactic and semantic requirements necessary to correctly interpret
<I>s</I><SUB>A</SUB>; it <I>may</I>, but need not, include additional
requirements not required to interpret <I>s</I><SUB>A</SUB>.  This is
fundamentally the same kind of issue as described in section 5.6.4
(with <I>s</I><SUB>A</SUB>, lsA, and the compiled <I>s</I><SUB>P</SUB>
analogous to <I>s</I><SUB>P</SUB>,, lsP, and c<SUB>T</SUB>), and the
same explanation regarding language applies.</p>
<H3 CLASS="western"><A NAME="5.6.7.Definition definition_stage1|outline"></A>
5.6.7 Definition definition_stage1</H3>
<p>We must now begin to define the DDC process itself
in this formal notation.  As shown in figure 4, the executable
&ldquo;stage1&rdquo; is created by compiling <I>s</I><SUB>P</SUB>
using c<SUB>T</SUB>, running on environment e1 and targeting
environment e2.  We will name this definition_stage1, and it is
formally notated as:</p>
<PRE CLASS="western">	stage1 = compile(sP, cT, e1effects, e1, e2).</PRE><p>
Combining this with sP_compiles_sA_result, we find this result which
we will name as definition_stage1_result1:</p>
<PRE CLASS="western">	accurately_translates(stage1, lsA, sA, A, e2, eArun).</PRE><H3 CLASS="western">
<A NAME="__RefHeading__31381206"></A><A NAME="5.6.8.Definition define_exactly_correspond|outline"></A>
5.6.8 Definition define_exactly_correspond</H3>
<p>There is a key relationship between the predicates
&ldquo;exactly_correspond&rdquo; and &ldquo;accurately_translates&rdquo;
that has not yet been expressed, which also provides insight into
what it means when a source and executable exactly correspond. 
Fundamentally, if some Source (written in language Lang) is compiled
by a compiler that accurately translates it, then the resulting
executable exactly corresponds to the original Source.  This
relationship is named define_exactly_correspond, and is so central to
the notion of &ldquo;exactly_correspond&rdquo; that it essentially
defines it.  This is expressed as:</p>
<PRE CLASS="western" STYLE="widows: 2; orphans: 2; page-break-before: auto; page-break-after: avoid">	accurately_translates(Compiler, Lang, Source, EnvEffects, ExecEnv, TargetEnv)
		-&gt;
	exactly_correspond(compile(Source, Compiler, EnvEffects, ExecEnv, TargetEnv),
									Source, Lang, TargetEnv).</PRE><p>
Combining this with the previous result, we can now determine a
result that we will name define_exactly_corresponds_result1:</p>
<PRE CLASS="western">	exactly_correspond(compile(sA, stage1, A, e2, eArun), sA, lsA, eArun).</PRE><H3 CLASS="western">
<A NAME="5.6.9.Definition definition_stage2|outline"></A>5.6.9 Definition
definition_stage2</H3>
<p>We now introduce a formal model for how the DDC
process generates stage2, which compiles source <I>s</I><SUB>A</SUB>
using the executable stage1 and targets environment eArun:</p>
<PRE CLASS="western">	stage2 = compile(sA, stage1, e2effects, e2, eArun).</PRE><p>
Using the previous result, we can now determine
definition_stage2_result1:</p>
<PRE CLASS="western">	exactly_correspond(stage2, sA, lsA, eArun).</PRE><H3 CLASS="western">
<A NAME="5.6.10.Goal source_corresponds_to_executable|outline"></A>5.6.10 Goal
source_corresponds_to_executable</H3>
<p>We can now prove our goal,
source_corresponds_to_executable.  Recall that this goal is:</p>
<PRE CLASS="western">	(stage2 = cA) -&gt; exactly_correspond(cA, sA, lsA, eArun).</PRE><p>
But we already know, per definition_stage2_result1, that:</p>
<PRE CLASS="western">	exactly_correspond(stage2, sA, lsA, eArun).</PRE><P CLASS="western" STYLE="page-break-before: auto; page-break-after: avoid">
If stage2 is exactly the same as c<SUB>A</SUB> (the left side of the
goal&rsquo;s implication), then we can replace stage2 with c<SUB>A</SUB>,
producing:</p>
<PRE CLASS="western" STYLE="page-break-before: auto; page-break-after: avoid">	exactly_correspond(cA, sA, lsA, eArun).</PRE><p>
QED.</p>
<H3 CLASS="western"><A NAME="5.6.11.Prover9 proof of source_corresponds_to_executable|outline"></A>
5.6.11 Prover9 proof of source_corresponds_to_executable</H3>
<p>Table 2 presents the proof found by prover9 (see
section 5.3 for more on the rationale).</p>
<P ALIGN=CENTER STYLE="margin-top: 0.08in; line-height: 100%; widows: 0; orphans: 0; page-break-after: avoid">
<FONT SIZE=3><I>Table 2: Proof #1 (source_corresponds_to_executable)
in prover9 format</I></FONT></p>
<TABLE WIDTH=573 BORDER=1 BORDERCOLOR="#000000" CELLPADDING=2 CELLSPACING=0 STYLE="page-break-before: auto; page-break-inside: avoid">
	<COL WIDTH=23>
	<COL WIDTH=337>
	<COL WIDTH=199>
	<TR>
		<TH WIDTH=23 BGCOLOR="#c0c0c0">
			<p>#</p>
		</TH>
		<TH WIDTH=337 BGCOLOR="#c0c0c0">
			<p>Formula</p>
		</TH>
		<TH WIDTH=199 BGCOLOR="#c0c0c0">
			<p>Rationale</p>
		</TH>
	</TR>
	<TR>
		<TD WIDTH=23>
			<p>1</p>
		</TD>
		<TD WIDTH=337>
			<p>accurately_translates(A,B,C,D,E,F) -&gt;
			exactly_correspond(compile(C,A,D,E,F),C,B,F) 
			</p>
		</TD>
		<TD WIDTH=199>
			<p>Assumption  define_exactly_correspond</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=23>
			<p>2</p>
		</TD>
		<TD WIDTH=337>
			<p>(all A
			accurately_translates(cT,lsP,sP,A,e1,e2)) 
			</p>
		</TD>
		<TD WIDTH=199>
			<p>Assumption cT_compiles_sP</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=23>
			<p>3</p>
		</TD>
		<TD WIDTH=337>
			<p>accurately_translates(A,lsP,sP,B,C,D) -&gt;
			accurately_translates(compile(sP,A,B,C,D),&#8203;lsA,sA,E,D,eArun)
						</p>
		</TD>
		<TD WIDTH=199>
			<p>Assumption sP_compiles_sA</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=23>
			<p>4</p>
		</TD>
		<TD WIDTH=337>
			<p>stage2 = cA -&gt;
			exactly_correspond(cA,sA,lsA,eArun) 
			</p>
		</TD>
		<TD WIDTH=199>
			<p>Goal source_corresponds_&#8203;to_&#8203;executable</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=23>
			<p>5</p>
		</TD>
		<TD WIDTH=337>
			<p>-accurately_translates(A,B,C,D,E,F) |
			exactly_correspond(compile(C,A,D,E,F),C,B,F) 
			</p>
		</TD>
		<TD WIDTH=199>
			<p>Clausify 1</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=23>
			<p>6</p>
		</TD>
		<TD WIDTH=337>
			<p>accurately_translates(cT,lsP,sP,A,e1,e2) 
			</p>
		</TD>
		<TD WIDTH=199>
			<p>Clausify 2</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=23>
			<p>7</p>
		</TD>
		<TD WIDTH=337>
			<p>-accurately_translates(A,lsP,sP,B,C,D) |
			accurately_translates(compile(sP,A,B,C,D),&#8203;lsA,sA,E,D,eArun)
						</p>
		</TD>
		<TD WIDTH=199>
			<p>Clausify 3</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=23>
			<p>8</p>
		</TD>
		<TD WIDTH=337>
			<p>stage1 = compile(sP,cT,e1effects,e1,e2) 
			</p>
		</TD>
		<TD WIDTH=199>
			<p>Assumption definition_stage1</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=23>
			<p>9</p>
		</TD>
		<TD WIDTH=337>
			<p>compile(sP,cT,e1effects,e1,e2) = stage1 
			</p>
		</TD>
		<TD WIDTH=199>
			<p>Copy 8, flip</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=23>
			<p>10</p>
		</TD>
		<TD WIDTH=337>
			<p>stage2 = compile(sA,stage1,e2effects,e2,eArun) 
			</p>
		</TD>
		<TD WIDTH=199>
			<p>Assumption definition_stage2</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=23>
			<p>11</p>
		</TD>
		<TD WIDTH=337>
			<p>compile(sA,stage1,e2effects,e2,eArun) = stage2 
			</p>
		</TD>
		<TD WIDTH=199>
			<p>Copy 10, flip</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=23>
			<p>12</p>
		</TD>
		<TD WIDTH=337>
			<p>cA = stage2 
			</p>
		</TD>
		<TD WIDTH=199>
			<p>Deny 4</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=23>
			<p>13</p>
		</TD>
		<TD WIDTH=337>
			<p>-exactly_correspond(cA,sA,lsA,eArun) 
			</p>
		</TD>
		<TD WIDTH=199>
			<p>Deny 4</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=23>
			<p>14</p>
		</TD>
		<TD WIDTH=337>
			<p>-exactly_correspond(stage2,sA,lsA,eArun) 
			</p>
		</TD>
		<TD WIDTH=199>
			<p>Para 12 13</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=23>
			<p>15</p>
		</TD>
		<TD WIDTH=337>
			<p>accurately_translates(compile(sP,cT,A,e1,e2),&#8203;lsA,sA,B,e2,eArun)
						</p>
		</TD>
		<TD WIDTH=199>
			<p>Resolve 7 6</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=23>
			<p>16</p>
		</TD>
		<TD WIDTH=337>
			<p>accurately_translates(stage1,lsA,sA,A,e2,eArun)
						</p>
		</TD>
		<TD WIDTH=199>
			<p>Para 9 15</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=23>
			<p>17</p>
		</TD>
		<TD WIDTH=337>
			<p>exactly_correspond(compile(sA,stage1,A,e2,eArun),&#8203;sA,lsA,eArun)
						</p>
		</TD>
		<TD WIDTH=199>
			<p>Resolve 5 16</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=23>
			<p>18</p>
		</TD>
		<TD WIDTH=337>
			<p>exactly_correspond(stage2,sA,lsA,eArun) 
			</p>
		</TD>
		<TD WIDTH=199>
			<p>Para 11 17</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=23>
			<p>19</p>
		</TD>
		<TD WIDTH=337>
			<p>$F 
			</p>
		</TD>
		<TD WIDTH=199>
			<p>Resolve 18 14</p>
		</TD>
	</TR>
</TABLE>
<H3 CLASS="western"><A NAME="5.6.12.Discussion of proof #1|outline"></A>
5.6.12 Discussion of proof #1</H3>
<p>The existence of stage1 and stage2 implies
termination of the compilation processes that produced them.  This
doesn&rsquo;t limit the proof&rsquo;s utility in the real world; a
compilation process that never finished would not be considered
useful, and would certainly be noticed.  Termination implies that <I>s</I><SUB>A</SUB>
and <I>s</I><SUB>P</SUB> are computable and implementable, which in
turn implies that the subset of languages lsA and lsP correspondingly
used by <I>s</I><SUB>A</SUB> and <I>s</I><SUB>P</SUB> are also
computable and implementable.  Thus, <I>s</I><SUB>A</SUB> cannot call
impossible functions like &ldquo;return_last_digit_of_pi()&rdquo;. 
The languages lsP and lsA may have many additional capabilities, but
for DDC only the proof assumptions are required.</p>
<p>Reviewers often search to see if a proof works
given &ldquo;null&rdquo; or &ldquo;absurdly small&rdquo; cases. 
Oddly enough, the proof is still correct in these cases.  It is
theoretically possible that one or more of the compilers could be a
one-byte value, a one-bit value, or even null, if the underlying
environment implemented those values according to the proof
assumptions.  For example, an environment could theoretically have a
built-in &ldquo;compile&rdquo; instruction, or implement a &ldquo;compile&rdquo;
function if it receives an empty sequence.  This is hypothetical;
real environments are very unlikely to work this way.  However,
there&rsquo;s no need to <I>prevent</I> this possibility, so the
proof permits it.</p>
<p>The goal statement compares for equality between
stage2 and c<SUB>A</SUB>.  As noted above, this requires that
equality be correctly implemented; if the equality-checking program
is itself subverted, this proof would not apply, so the
equality-checking program and the environment it runs on must not be
subverted.  Similarly, the values stage2 and c<SUB>A</SUB> that are
compared must be acquired in a trusted manner; if the programs or
environment used to copy them are subverted, then again, the proof
will not apply (because the values the proof applies to might not be
what is being tested).</p>
<P CLASS="western" STYLE="page-break-before: auto; page-break-after: avoid">
Note that the converse of the proof #1&rsquo;s goal does not
necessarily hold.  The converse is:</p>
<PRE CLASS="western">	exactly_correspond(cA,sA,lsA,eArun) -&gt; (stage2 = cA)</PRE><p>
There are many reasons the converse need not be true.  For example,
executable c<SUB>A</SUB> might have been modified by adding extra
unused information at its end, or had &ldquo;no-operation&rdquo;
statements inserted into it that do not change the outputs it
produces.  Indeed, c<SUB>A</SUB> could have been produced by
compiling <I>s</I><SUB>A</SUB> using a different but trustworthy
compiler and environment.  In all these cases, c<SUB>A</SUB> could
exactly correspond to <I>s</I><SUB>A</SUB>, even though stage2 is not
equal to c<SUB>A</SUB>.  But there <I>is</I> a common circumstance
where stage2 and c<SUB>A</SUB> must be equal; showing this is true is
the focus of proof #2.</p>
<H2 CLASS="western"><A NAME="5.7.Proof #2: Goal always_equal|outline"></A>
5.7 Proof #2: Goal always_equal</H2>
<p>The first proof (source_corresponds_to_executable)
shows that if c<SUB>A</SUB> and stage2 are equal, then c<SUB>A</SUB>
and <I>s</I><SUB>A</SUB> exactly correspond.  However, this first
proof is not practically useful if c<SUB>A</SUB> and stage2 are not
normally equal.  So we will next prove that, under &ldquo;normal
conditions&rdquo;, c<SUB>A</SUB> and stage2 are in fact always equal.
 &ldquo;Normal conditions&rdquo; is expressed more formally below,
but in particular, this includes the presumption that the compiler
executables have <I>not</I><SPAN STYLE="font-style: normal"> been
tampered with (i.e., that the compiler executables correspond to
their source code).  This proof goal is named &ldquo;always_equal&rdquo;,
and is simply:</SPAN></p>
<PRE CLASS="western">	cA = stage2.</PRE><p>
This second proof requires many more assumptions than the previous
proof (9 instead of 5).  It reuses 4 previous assumptions:
definition_stage1, definition_stage2, define_exactly_correspond, and
cT_compiles_sP.  The new assumptions are definition_cA,
cP_corresponds_to_sP, define_compile, sP_portable_and_deterministic,
and define_determinism, as defined below.  We will avoid making any
assumptions about c<SUB>GP</SUB>, a possible &ldquo;grandparent&rdquo;
compiler, since there may not <I>be</I><SPAN STYLE="font-style: normal">
a grandparent compiler.  Proof #3, to follow, will examine the common
case when there </SPAN><I>is</I><SPAN STYLE="font-style: normal"> a
grandparent compiler.</SPAN></p>
<p><SPAN STYLE="font-style: normal">Interestingly, we
do not need the assumption sP_compiles_sA for this proof.  The
assumption definition_cA requires, as a side-effect, that </SPAN><I>s</I><SUB><SPAN STYLE="font-style: normal">P</SPAN></SUB><SPAN STYLE="font-style: normal">
terminate when it compiles </SPAN><I>s</I><SUB><SPAN STYLE="font-style: normal">A</SPAN></SUB><SPAN STYLE="font-style: normal">.
If </SPAN><I>s</I><SUB><SPAN STYLE="font-style: normal">P</SPAN></SUB><SPAN STYLE="font-style: normal">
terminates but fails to compile </SPAN><I>s</I><SUB><SPAN STYLE="font-style: normal">A</SPAN></SUB><SPAN STYLE="font-style: normal">,
the results will still be equal; in this case the processes will
produce equal error messages, which is probably not useful but it
does not invalidate the proof.  If </SPAN><I>s</I><SUB><SPAN STYLE="font-style: normal">P</SPAN></SUB><SPAN STYLE="font-style: normal">
terminates and successfully compiles </SPAN><I>s</I><SUB><SPAN STYLE="font-style: normal">A</SPAN></SUB><SPAN STYLE="font-style: normal">,
then again, the results will be equal if this section&rsquo;s
assumptions </SPAN><SPAN STYLE="font-style: normal">hold.  This would
be true even if </SPAN><I>s</I><SUB><SPAN STYLE="font-style: normal">P</SPAN></SUB><SPAN STYLE="font-style: normal">
has one or more defects that affect compiling </SPAN><I>s</I><SUB><SPAN STYLE="font-style: normal">A</SPAN></SUB><SPAN STYLE="font-style: normal">;
in such a case, if all the assumptions of proof #2 hold, then
compiler-under-test c</SPAN><SUB><SPAN STYLE="font-style: normal">A</SPAN></SUB><SPAN STYLE="font-style: normal">
and the DDC result stage2 will be identical and have the same
defects.  Again, this does not invalidate DDC; the purpose of DDC is
to determine if source and executable correspond, not to prevent all
possible defects.</SPAN></p>
<P CLASS="western" STYLE="font-style: normal">In this second proof,
the predicates, functions, and assumptions will now be presented,
along with their ramifications.  This will be followed by the
complete prover9 proof and a discussion.</p>
<H3 CLASS="western"><A NAME="__RefHeading__35672240"></A><A NAME="5.7.1.Reused definitions define_exactly_correspond, definition_stage1, and definition_stage2|outline"></A>
5.7.1 Reused definitions define_exactly_correspond,
definition_stage1, and definition_stage2</H3>
<P CLASS="western" STYLE="page-break-before: auto; page-break-after: avoid">
We will reuse several definitions.  Here is definition
define_exactly_correspond:</p>
<PRE CLASS="western">	accurately_translates(Compiler, Lang, Source, EnvEffects, ExecEnv, 					TargetEnv) -&gt; 
	exactly_correspond(compile(Source, Compiler, EnvEffects, ExecEnv, 					TargetEnv), Source, Lang, TargetEnv).</PRE><P CLASS="western" STYLE="page-break-before: auto; page-break-after: avoid">
Definition definition_stage1:</p>
<PRE CLASS="western">	stage1 = compile(sP, cT, e1effects, e1, e2).</PRE><P CLASS="western" STYLE="page-break-before: auto; page-break-after: avoid">
Definition definition_stage2:</p>
<PRE CLASS="western" STYLE="font-style: normal">	stage2 = compile(sA, stage1, e2effects, e2, eArun).</PRE><H3 CLASS="western">
<A NAME="__RefHeading__35635404"></A><A NAME="5.7.2.Assumption cT_compiles_sP|outline"></A>
5.7.2 Assumption cT_compiles_sP</H3>
<P CLASS="western" STYLE="page-break-before: auto; page-break-after: avoid">
We will also reuse assumption cT_compiles_sP from section 5.6.4:</p>
<PRE CLASS="western">	all EnvEffects accurately_translates(cT, lsP, sP, EnvEffects, e1, e2).</PRE><H3 CLASS="western">
<A NAME="__RefHeading__42595127"></A><A NAME="5.7.3.Predicate deterministic_and_portable|outline"></A>
5.7.3 Predicate deterministic_and_portable</H3>
<P CLASS="western" STYLE="page-break-before: auto; page-break-after: avoid">
We define a new predicate:</p>
<PRE CLASS="western">	predicate deterministic_and_portable(Source, Language, Input)</PRE><p>
This predicate is defined to be true if, and only if, the given
Source (when compiled by a correct compiler for Language) is both:</p>
<UL>
	<LI><P CLASS="list-1-western">deterministic (when correctly compiled
	for an environment, and run on that environment, it will always
	produce the same specific output given the same input Input), and</p>
	<LI><P CLASS="list-1-western">portable (the above is true across the
	environments used by DDC and the claimed origin).</p>
</UL>
<p>A deterministic and portable executable always
produces the same outputs, given the same inputs, in various
environments; in this case, we only care if it is deterministic and
portable for a given environment, and only for a specific input
(Input).</p>
<p>A compiler need not be deterministic.  For
example, when there are optimization alternatives, a compiler could
call a random number generator in the environment, and use that value
to determine which alternative to choose.</p>
<p>In practice, many compilers are deterministic, or
can be executed in a way that makes them deterministic, because it is
much more difficult to test non-deterministic compilers.  Indeed,
some compilers (such as GCC) use self-regeneration as a self-test&mdash;and
such tests require determinism.  For example, GCC&rsquo;s C&#8288;+&#8288;+
compiler includes the ability to control the random number seed used
during compilation, specifically to cause its non-deterministic
behavior to become deterministic.  One exception is embedded
timestamps: Some object code formats embed compilation timestamps in
the file.  If timestamps are only stored in intermediate formats, and
not a final format, an easy solution is to only compare the final
results (see section 8.6).</p>
<P CLASS="western" STYLE="font-style: normal">Many real-world
languages include intentionally non-portable constructs that provide
direct access to the underlying environment and/or use compiler
extensions not supported by other compilers.  For example, languages
may provide nonstandard methods for opening files.  However, we must
compile the same program using different compilers, in potentially
different environments.  Thus, we must avoid such constructs for DDC,
or add those additional requirements to the language specification
and ensure that all the implementations used in DDC and the claimed
origin of the compiler support them as necessary.</p>
<H3 CLASS="western" STYLE="font-style: normal"><A NAME="5.7.4.Function run|outline"></A>
5.7.4 Function run</H3>
<P CLASS="western" STYLE="font-style: normal">Previously we could
treat compiling as a &ldquo;black box&rdquo;, but for this proof more
detail about compilation is needed.  In particular, we must model
executing a program.  Thus:</p>
<PRE CLASS="western">	function run(Executable, Input, EnvEffects, Environment)</PRE><p>
is a function that returns data.  This data (the output) is the
result of running Executable in Environment, giving it Input and the
various environmental effects EnvEffects.  The parameter &ldquo;EnvEffects&rdquo;
models whatever the language allows the environment to vary that
could have an effect on the results of running Executable, such as
random number generator values or thread scheduling.</p>
<p>The results include standard out, standard error,
and any files (file names, locations, and contents) generated or
modified by its execution.  Since different runs could have different
environmental effects as input (e.g., the random number generator
from the environment might produce something different), it is
possible that running the same executable with the same Input could
produce different results.</p>
<H3 CLASS="western" STYLE="font-style: normal"><A NAME="5.7.5.Function converttext|outline"></A>
5.7.5 Function converttext</H3>
<P CLASS="western" STYLE="font-style: normal">Function converttext
models an unfortunate complicating issue in the real world: Different
environments may encode text in different ways.  Function</p>
<PRE CLASS="western">	function converttext(Data, Environment1, Environment2)</PRE><p>
takes Data, where all text is in the standard text encoding of
Environment1, and returns the same Data but with all text converted
to the standard text encoding of Environment2.</p>
<p>In particular, a new line may be encoded
differently by different environments.  Common conventions, and some
systems that use those conventions, include:</p>
<UL>
	<LI><P CLASS="list-1-western">Linefeed (#x0A):  Unix, GNU/Linux, Mac
	OS X, Multics.</p>
	<LI><P CLASS="list-1-western">Carriage Return (#x0D): Apple II Disk
	Operating System (DOS) and Professional Disk Operating System
	(ProDOS), Mac OS version 9 and earlier.</p>
	<LI><P CLASS="list-1-western">Carriage return + Linefeed (#x0D
	#x0A): Control Program for Microcomputers (CP/M), Microsoft Disk
	Operating System (MS-DOS), Microsoft Windows.</p>
	<LI><P CLASS="list-1-western">Newline NEL (#x85): IBM System/390
	operating-system (OS/390) [Malaika2001].</p>
</UL>
<p>Similarly, not all computer systems encode text
characters the same way.  They may use (for example) ASCII, 8-bit
(UCS)/Unicode Transformation Format UTF-8<A CLASS="sdfootnoteanc" NAME="sdfootnote15anc" HREF="#sdfootnote15sym"><SUP>15</SUP></A>,
UTF-16 (which may be little-endian or big-endian), a locale-specific
encoding, or even EBCDIC.</p>
<P CLASS="western" STYLE="font-style: normal">Since we will later
compare values for exact equality, modeling these differences is
necessary.</p>
<H3 CLASS="western" STYLE="font-style: normal"><A NAME="5.7.6.Function extract|outline"></A>
5.7.6 Function extract</H3>
<p>Function extract accepts data, and returns a
subset of that data:</p>
<PRE CLASS="western">	function extract(Data)</PRE><p>
More specifically, function extract() extracts <I>only</I><SPAN STYLE="font-style: normal">
the executable produced by a compiler, and silently throws away the
rest (e.g., warning and error reports made during the </SPAN><SPAN STYLE="font-style: normal">compilation
process).  A compilation process runs a compiler, and a compiler
produces many outputs &ndash; but we </SPAN><SPAN STYLE="font-style: normal">only
want the data that will be later used for execution.  In a </SPAN><SPAN STYLE="font-style: normal">typical
compilation environment, extract() will produce just the generated
executable files, and not outputs to standard out, standard error,
and/or log files.</SPAN></p>
<H3 CLASS="western" STYLE="font-style: normal"><A NAME="5.7.7.Function retarget|outline"></A>
5.7.7 Function retarget</H3>
<p>Function retarget accepts source and target, and
returns possibly modified source:</p>
<PRE CLASS="western">	function retarget(Source, Target)</PRE><P CLASS="western" STYLE="font-style: normal">
Retarget represents any modifications to the source code Source that
are necessary to change it so it will compile to run on the target
environment Target.  In many circumstances, Source will include
various flags to the compiler that determine what environment the
compiled executable will run on.  If a different execution
environment is to be used, the Source may need to be modified.  If no
such modifications are needed, retarget simply returns Source.</p>
<H3 CLASS="western"><A NAME="__RefHeading__33162692"></A><A NAME="5.7.8.Assumption sP_portable_and_deterministic|outline"></A>
5.7.8 Assumption sP_portable_and_deterministic</H3>
<p>We will assume that source <I>s</I><SUB>P</SUB>,
when compiled, describes a portable and deterministic program, when
used to compile <I>s</I><SUB>A</SUB> (once it is retargeted to
generate code for eArun):</p>
<PRE CLASS="western">	portable_and_deterministic(sP, lsP, retarget(sA, eArun)).</PRE><P CLASS="western" STYLE="page-break-before: auto; page-break-after: avoid">
This means that:</p>
<UL>
	<LI><P CLASS="list-1-western">Source <I>s</I><SUB>P</SUB> must avoid
	all non-portable capabilities of language lsP, or use them only in
	ways that will not affect the output of the program when compiling
	<I>s</I><SUB>A</SUB>.. For example, if a &ldquo;+&rdquo; operator is
	used in the source code, then the language must include this
	operator, the language must provide the semantics required by the
	source code (e.g., &ldquo;add two integers&rdquo; if <I>s</I><SUB>P</SUB>
	requires this meaning), and the language must require support for
	the domain of values used as inputs to the operator when processing
	Input.  As noted in section 5.6.4.1, the language noted here is not
	necessarily an official standard; it might, for example, be a subset
	and/or superset of a official standard<SPAN STYLE="font-style: normal">.</SPAN></p>
	<LI><P CLASS="list-1-western">Source <I>s</I><SUB>P</SUB> may use
	constructs that are individually non-deterministic (such as threads
	with non-deterministic scheduling), but if it does it must use
	mechanisms to make to ensure that the output will be the same on
	each execution given the same input (for example, it could use locks
	to ensure that thread scheduling variation does not cause variation
	in the results).  In some cases, setting the random number seed and
	algorithm for &ldquo;randomness&rdquo; may be necessary to ensure
	determinism.</p>
</UL>
<p>Note that we do <I>not</I> require that c<SUB>T</SUB>
or the grandparent compiler c<SUB>GP</SUB> (if it exists) be portable
or deterministic.  They <I>could</I> be portable and/or
deterministic, and often will be, but this is not necessary.</p>
<p>It is possible that some constructs in <I>s</I><SUB><SPAN STYLE="font-style: normal">P</SPAN></SUB>
are non-deterministic or non-portable; this is acceptable as long as
they do not affect the use of <I>s</I><SUB><SPAN STYLE="font-style: normal">P</SPAN></SUB>
to compile the retargeted <I>s</I><SUB><SPAN STYLE="font-style: normal">A</SPAN></SUB>.
 However, even if <I>s</I><SUB><SPAN STYLE="font-style: normal">P</SPAN></SUB>
includes non-deterministic or non-portable constructs,
definition_stage1 (see section 5.7.1) still requires that <SPAN STYLE="font-style: normal">the
trusted compiler c</SPAN><SUB><SPAN STYLE="font-style: normal">T</SPAN></SUB><SPAN STYLE="font-style: normal">
must be able to </SPAN><I>compile</I><SPAN STYLE="font-style: normal">
</SPAN><I>s</I><SUB><SPAN STYLE="font-style: normal">P</SPAN></SUB><SPAN STYLE="font-style: normal">.</SPAN></p>
<H3 CLASS="western"><A NAME="__RefHeading__34391297"></A><A NAME="5.7.9.Definition define_portable_and_deterministic|outline"></A>
5.7.9 Definition define_portable_and_deterministic</H3>
<p>Under certain conditions, the same source code can
be compiled by different compilers, and when the different
executables are run with the same inputs, they must produce the same
outputs.  More precisely, if the source code uses only the portable
and deterministic capabilities of a language when properly compiled
and run to process a specific input Input, then given two executables
that exactly correspond to that same source code (possibly running in
different environments), then those executables&mdash;when given the
same input Input&mdash;will produce the same output (other than text
format differences).  This is expressed as follows:</p>
<PRE CLASS="western" STYLE="page-break-before: auto"> ( portable_and_deterministic(Source, Language, Input) &amp;
   exactly_correspond(Executable1, Source, Language, Environment1) &amp;
   exactly_correspond(Executable2, Source, Language, Environment2)) -&gt;
     ( converttext(run(Executable1, Input, EnvEffects1, Environment1),
                   Environment1, Target) =
       converttext(run(Executable2, Input, EnvEffects2, Environment2),
                   Environment2, Target))</PRE><P CLASS="western" STYLE="page-break-before: auto; page-break-after: avoid">
This is perhaps best explained by a sequence of two examples.  Let us
first consider this simple C program, which computes 2+2 and prints
the result:</p>
<PRE CLASS="western" STYLE="page-break-before: auto; page-break-after: auto">	#include &lt;stdio.h&gt;<BR>	main() {<BR>		printf(&quot;%d\n&quot;, 2+2);<BR>	}</PRE><p>
Now imagine two different properly-working C compilers given this
code.  The two executables produced by the two different C compilers
will almost certainly be different.   However, <I>running</I> these
two executables on their respective environments <I>must</I> produce
the same result &ldquo;4&rdquo; (once text encoding is taken into
account).</p>
<P CLASS="western" STYLE="page-break-before: auto; page-break-after: avoid">
Now consider this program; it reads a number, adds one to it, and
prints the result:</p>
<PRE CLASS="western" STYLE="page-break-before: auto; page-break-after: auto">	#include &lt;stdio.h&gt;<BR>	main() {<BR>		int x;<BR>		scanf(<FONT FACE="Courier New, monospace">&quot;</FONT>%d<FONT FACE="Courier New, monospace">&quot;</FONT>, &amp;x);<BR>		x++;<BR>		printf(&quot;%d\n&quot;, x);<BR>	}</PRE><P CLASS="western" STYLE="page-break-before: auto">
Again, after using different properly-working C compilers, the two
executables produced will almost certainly be different.  Will
<I>running</I><SPAN STYLE="font-style: normal"> the two executables
always produce the </SPAN><SPAN STYLE="font-style: normal">same
outputs?  It turns out that this depends on the inputs.  Running</SPAN>
these two executables on their respective environments, with the same
input &ldquo;5&rdquo;, must produce the same result &ldquo;6&rdquo;
(once text encoding is taken into account), because the language
definition requires that implementations be able to correctly read in
5, add one (producing 6), and be able to print it.</p>
<p>However, this is <I>not</I><SPAN STYLE="font-style: normal">
necessarily true with a different input.  The </SPAN>C language
specification only guarantees that an &ldquo;int&rdquo; can store and
process integers within the range of a 16-bit twos-complement signed
integer [ISO1999, section 5.2.4.2.1].  Thus, if 2147483648 (2<SUP>31</SUP>)
is provided as input, we cannot be certain that the executables will
do the same thing.  It would be quite possible for the different
executables to produce different results in such cases, because
processing such input is not within the portable range defined by the
language.</p>
<p>In this particular example, we could change to
another language which required this particular input to be processed
identically (e.g., the language could be &ldquo;Standard C, but int
must be at least 64 bits long&rdquo;).  In practice, many language
specifications include limits on what is portable and deterministic,
and the inputs must not exceed those limits for the result to be
portable and deterministic.</p>
<H3 CLASS="western"><A NAME="__RefHeading__38162266"></A><A NAME="5.7.10.Assumption cP_corresponds_to_sP|outline"></A>
5.7.10 Assumption cP_corresponds_to_sP</H3>
<p>How was compiler-under-test c<SUB>A</SUB> created?
 The putative origin of c<SUB>A</SUB> is that it was compiled by
compiler c<SUB>P</SUB>, and that c<SUB>P</SUB>&rsquo;s executable
exactly corresponds to source <I>s</I><SUB>P</SUB>.  For the moment,
we will simply assume this, as this is true for the benign case we
are considering in proof #2:</p>
<PRE CLASS="western">	exactly_correspond(cP, sP, lsP, eA).</PRE><p>
In many cases c<SUB>P</SUB> will have been created by compiling <I>s</I><SUB>P</SUB>
using some grandparent compiler c<SUB>GP</SUB>.  Proof #3 will show
that this assumption (cP_corresponds_to_sP) can be proven given
certain other plausible assumptions, including the existence of a
grandparent compiler.  However, by making this a simple assumption in
proof #2, proof #2 is more general.  For example, it is possible that
c<SUB>P</SUB> was created by hand-translating <I>s</I><SUB>P</SUB>
into an executable; in this case, there may be no executable that is
the grandparent compiler (since a human acted as the grandparent
compiler), yet it may still be possible to accept this assumption.</p>
<H3 CLASS="western"><A NAME="5.7.11.Definition define_compile|outline"></A>
5.7.11 Definition define_compile</H3>
<p>In the previous proof we had simply accepted
&ldquo;compile&rdquo; as a function that produced data:</p>
<PRE CLASS="western">	compile(Source, Compiler, EnvEffects, RunOn, Target)</PRE><p>
This represents compiling Source with the Compiler, running it in
environment RunOn, but targeting the result for environment Target.</p>
<p>However, for this proof, more detail about the
compilation process is needed, so the compilation process will now be
modeled using more primitive functions:</p>
<PRE CLASS="western">	compile(Source, Compiler, EnvEffects, RunOn, Target) =
	   extract(converttext(run(Compiler, retarget(Source, Target),
	           EnvEffects, RunOn), RunOn, Target)).</PRE><p>
This is easier to explain by beginning on the right-hand-side, going
from the inside expressions out.  First, the Source is retargeted so
that it will compile for environment Target (this typically involves
changing compiler flags so that they will specify the new target). 
Then run the Compiler on the environment RunOn with the retargeted
Source code as input; note that if Compiler is a non-deterministic
compiler, the environmental EnvEffects may have an effect on the
results.  The output will probably include text results (such as
warnings, errors, and possibly the resulting executable depending on
the kind of compiler it is).  This text is then converted to Target&rsquo;s
standard text format.  Finally, the portions of the compilation
results that can be run later are extracted; the rest of the material
(such as warning text) is thrown away.</p>
<p>In practice, converttext only needs to be applied
to text that will be extracted.  If it will be thrown away, then
there&rsquo;s no need to actually perform the conversion.  But this
is merely an optimization, and not necessary for the proof; it is
easier to model as shown above.</p>
<H3 CLASS="western"><A NAME="__RefHeading__38181080"></A><A NAME="5.7.12.Definition definition_cA|outline"></A>
5.7.12 Definition definition_cA</H3>
<p>How was compiler-under-test c<SUB>A</SUB>
generated?  Putatively it was generated by compiling source <I>s</I><SUB>A</SUB>,
using compiler c<SUB>P</SUB>.  This is easily modeled, in a manner
similar to stage1 and stage2:</p>
<PRE CLASS="western">	cA = compile(sA, cP, eAeffects, eA, eArun).</PRE><p>
It&rsquo;s quite possible that this assumption is not true, e.g.,
perhaps the executable of the compiler-under-test was recently
replaced by a corrupt executable (such as a maliciously corrupted
executable).  But for proof #2, we are considering what happens in
the benign circumstance (where the putative origins are true), to
show that a benign environment <I>must</I><SPAN STYLE="font-style: normal">
produce a match.</SPAN></p>
<H3 CLASS="western"><A NAME="5.7.13.Goal always_equal|outline"></A>5.7.13 Goal
always_equal</H3>
<P CLASS="western" STYLE="page-break-before: auto; page-break-after: avoid">
Recall that the goal is to prove, given the preceding assumptions:</p>
<PRE CLASS="western">	cA = stage2.</PRE><H3 CLASS="western">
<A NAME="5.7.14.Prover9 proof of always_equal|outline"></A>5.7.14 Prover9
proof of always_equal</H3>
<P CLASS="western" STYLE="page-break-before: auto; page-break-after: avoid">
Table 3 presents the proof found by prover9.</p>
<P ALIGN=CENTER STYLE="margin-top: 0.08in; line-height: 100%; widows: 0; orphans: 0; page-break-before: always; page-break-after: avoid">
<FONT SIZE=3><I>Table 3: Proof #2 (always_equal) in prover9 format</I></FONT></p>
<TABLE WIDTH=576 BORDER=1 BORDERCOLOR="#000000" CELLPADDING=2 CELLSPACING=0>
	<COL WIDTH=15>
	<COL WIDTH=468>
	<COL WIDTH=79>
	<TR>
		<TH WIDTH=15 BGCOLOR="#c0c0c0">
			<p>#</p>
		</TH>
		<TH WIDTH=468 BGCOLOR="#c0c0c0">
			<p>Formula</p>
		</TH>
		<TH WIDTH=79 BGCOLOR="#c0c0c0">
			<p>Rationale</p>
		</TH>
	</TR>
	<TR>
		<TD WIDTH=15>
			<p>1</p>
		</TD>
		<TD WIDTH=468>
			<p>portable_and_deterministic(A,B,C) &amp;
			exactly_correspond(D,A,B,E) &amp; exactly_correspond(F,A,B,V6) -&gt;
			converttext(run(D,C,V7,E),E,V8) =
			converttext(run(F,C,V9,V6),V6,V8)</p>
		</TD>
		<TD WIDTH=79>
			<p>Assumption define_&#8203;portable_&#8203;and_&#8203;deterministic</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=15>
			<p>2</p>
		</TD>
		<TD WIDTH=468>
			<p>accurately_translates(A,B,C,D,E,F) -&gt;
			exactly_correspond(compile(C,A,D,E,F),C,B,F)</p>
		</TD>
		<TD WIDTH=79>
			<p>Assumption define_&#8203;exactly_&#8203;correspond</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=15>
			<p>3</p>
		</TD>
		<TD WIDTH=468>
			<p>(all A
			accurately_translates(cT,lsP,sP,A,e1,e2))</p>
		</TD>
		<TD WIDTH=79>
			<p>Assumption cT_&#8203;compiles_&#8203;sP</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=15>
			<p>4</p>
		</TD>
		<TD WIDTH=468>
			<p>cA = stage2</p>
		</TD>
		<TD WIDTH=79>
			<p>Goal always_&#8203;equal</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=15>
			<p>5</p>
		</TD>
		<TD WIDTH=468>
			<p>portable_and_deterministic(sP,lsP,retarget(sA,eArun))</p>
		</TD>
		<TD WIDTH=79>
			<p>Assumption sP_&#8203;portable_&#8203;and_&#8203;deterministic</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=15>
			<p>6</p>
		</TD>
		<TD WIDTH=468>
			<p>-portable_and_deterministic(A,B,C) |
			-exactly_correspond(D,A,B,E) | -exactly_correspond(F,A,B,V6) |
			converttext(run(F,C,V7,V6),V6,V8) =
			converttext(run(D,C,V9,E),E,V8)</p>
		</TD>
		<TD WIDTH=79>
			<p>Clausify 1</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=15>
			<p>7</p>
		</TD>
		<TD WIDTH=468>
			<p>accurately_translates(cT,lsP,sP,A,e1,e2)</p>
		</TD>
		<TD WIDTH=79>
			<p>Clausify 3</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=15>
			<p>8</p>
		</TD>
		<TD WIDTH=468>
			<p>-accurately_translates(A,B,C,D,E,F) |
			exactly_correspond(compile(C,A,D,E,F),C,B,F)</p>
		</TD>
		<TD WIDTH=79>
			<p>Clausify 2</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=15>
			<p>9</p>
		</TD>
		<TD WIDTH=468>
			<p>exactly_correspond(cP,sP,lsP,eA)</p>
		</TD>
		<TD WIDTH=79>
			<p>Assumption cP_&#8203;corresponds_&#8203;to_&#8203;sP</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=15>
			<p>10</p>
		</TD>
		<TD WIDTH=468>
			<p>compile(A,B,C,D,E) =
			extract(converttext(run(B,retarget(A,E),C,D),D,E))</p>
		</TD>
		<TD WIDTH=79>
			<p>Assumption cP_&#8203;corresponds_&#8203;to_&#8203;sP</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=15>
			<p>11</p>
		</TD>
		<TD WIDTH=468>
			<p>stage1 = compile(sP,cT,e1effects,e1,e2)</p>
		</TD>
		<TD WIDTH=79>
			<p>Assumption definition_&#8203;stage1</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=15>
			<p>12</p>
		</TD>
		<TD WIDTH=468>
			<p>stage1 =
			extract(converttext(run(cT,retarget(sP,e2),e1effects,e1),e1,e2))</p>
		</TD>
		<TD WIDTH=79>
			<p>Para 10 11</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=15>
			<p>13</p>
		</TD>
		<TD WIDTH=468>
			<p>extract(converttext(run(cT,retarget(sP,e2),e1effects,e1),e1,e2))
			= stage1</p>
		</TD>
		<TD WIDTH=79>
			<p>Copy 12, flip</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=15>
			<p>14</p>
		</TD>
		<TD WIDTH=468>
			<p>stage2 = compile(sA,stage1,e2effects,e2,eArun)</p>
		</TD>
		<TD WIDTH=79>
			<p>Assumption definition_&#8203;stage2</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=15>
			<p>15</p>
		</TD>
		<TD WIDTH=468>
			<p>stage2 =
			extract(converttext(run(stage1,retarget(sA,eArun),e2effects,e2),e2,eArun))</p>
		</TD>
		<TD WIDTH=79>
			<p>Para 10 14</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=15>
			<p>16</p>
		</TD>
		<TD WIDTH=468>
			<p>cA = compile(sA,cP,eAeffects,eA,eArun)</p>
		</TD>
		<TD WIDTH=79>
			<p>Assumption definition_&#8203;cA</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=15>
			<p>17</p>
		</TD>
		<TD WIDTH=468>
			<p>cA =
			extract(converttext(run(cP,retarget(sA,eArun),eAeffects,eA),eA,eArun))</p>
		</TD>
		<TD WIDTH=79>
			<p>Para 10 16</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=15>
			<p>18</p>
		</TD>
		<TD WIDTH=468>
			<p>cA != stage2</p>
		</TD>
		<TD WIDTH=79>
			<p>Deny 4</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=15>
			<p>19</p>
		</TD>
		<TD WIDTH=468>
			<p>extract(converttext(run(cP,retarget(sA,eArun),eAeffects,eA),eA,eArun))
			!= stage2</p>
		</TD>
		<TD WIDTH=79>
			<p>Para 17 18</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=15>
			<p>20</p>
		</TD>
		<TD WIDTH=468>
			<p>extract(converttext(run(cP,retarget(sA,eArun),eAeffects,eA),eA,eArun))
			!=
			extract(converttext(run(stage1,retarget(sA,eArun),e2effects,e2),e2,eArun))
						</p>
		</TD>
		<TD WIDTH=79>
			<p>Para 15 19</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=15>
			<p>21</p>
		</TD>
		<TD WIDTH=468>
			<p>extract(converttext(run(stage1,retarget(sA,eArun),e2effects,e2),e2,eArun))
			!=
			extract(converttext(run(cP,retarget(sA,eArun),eAeffects,eA),eA,eArun))</p>
		</TD>
		<TD WIDTH=79>
			<p>Copy 20, flip</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=15>
			<p>22</p>
		</TD>
		<TD WIDTH=468>
			<p>-exactly_correspond(A,sP,lsP,B) |
			-exactly_correspond(C,sP,lsP,D) |
			converttext(run(C,retarget(sA,eArun),E,D),D,F) =
			converttext(run(A,retarget(sA,eArun),V6,B),B,F)</p>
		</TD>
		<TD WIDTH=79>
			<p>Resolve 5 6</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=15>
			<p>23</p>
		</TD>
		<TD WIDTH=468>
			<p>exactly_correspond(compile(sP,cT,A,e1,e2),sP,lsP,e2)</p>
		</TD>
		<TD WIDTH=79>
			<p>Resolve 7 8</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=15>
			<p>24</p>
		</TD>
		<TD WIDTH=468>
			<p>exactly_correspond(extract(converttext(run(cT,retarget(sP,e2),A,e1),e1,e2)),&#8203;sP,lsP,e2)</p>
		</TD>
		<TD WIDTH=79>
			<p>Para 10 23</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=15>
			<p>25</p>
		</TD>
		<TD WIDTH=468>
			<p>exactly_correspond(stage1,sP,lsP,e2)</p>
		</TD>
		<TD WIDTH=79>
			<p>Para 13 24</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=15>
			<p>26</p>
		</TD>
		<TD WIDTH=468>
			<p>-exactly_correspond(A,sP,lsP,B) |
			converttext(run(A,retarget(sA,eArun),C,B),B,D) =
			converttext(run(cP,retarget(sA,eArun),E,eA),eA,D)</p>
		</TD>
		<TD WIDTH=79>
			<p>Resolve 22 9</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=15>
			<p>27</p>
		</TD>
		<TD WIDTH=468>
			<p>converttext(run(stage1,retarget(sA,eArun),A,e2),e2,B)
			= converttext(run(cP,retarget(sA,eArun),C,eA),eA,B)</p>
		</TD>
		<TD WIDTH=79>
			<p>Resolve 26 25</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=15>
			<p>28</p>
		</TD>
		<TD WIDTH=468>
			<p>compile(sA,stage1,A,e2,eArun) =
			extract(converttext(run(cP,retarget(sA,eArun),B,eA),eA,eArun)) 
			</p>
		</TD>
		<TD WIDTH=79>
			<p>Para 27 10</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=15>
			<p>29</p>
		</TD>
		<TD WIDTH=468>
			<p>extract(converttext(run(stage1,retarget(sA,eArun),A,e2),e2,eArun))
			= extract(converttext(run(cP,retarget(sA,eArun),B,eA),eA,eArun))</p>
		</TD>
		<TD WIDTH=79>
			<p>Para 10 28</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=15>
			<p>30</p>
		</TD>
		<TD WIDTH=468>
			<p>$F</p>
		</TD>
		<TD WIDTH=79>
			<p>Resolve 29 21</p>
		</TD>
	</TR>
</TABLE>
<H3 CLASS="western"><A NAME="5.7.15.Discussion of proof #2|outline"></A>
5.7.15 Discussion of proof #2</H3>
<P CLASS="western" STYLE="page-break-before: auto; page-break-after: avoid">
Note that proof #2&rsquo;s goal <I>could</I> be true, even if some of
proof #2&rsquo;s assumptions (above) are false.  First, note that the
goal of proof #2 is:</p>
<PRE CLASS="western">	stage2 = cA.</PRE><p>
This equality <I>could</I><SPAN STYLE="font-style: normal">, in
theory, have occurred by other means.  As an extreme example, perhaps
c</SPAN><SUB><SPAN STYLE="font-style: normal">A</SPAN></SUB><SPAN STYLE="font-style: normal">
was created by randomly generating data of the same length and then
using it as an executable.  </SPAN><SPAN STYLE="font-style: normal">In
practice, even minor changes (other than changing comments) that
invalidate any of proof #2&rsquo;s assumptions will tend to make this
goal fail.  As shown in </SPAN><SPAN STYLE="font-style: normal">chapter
</SPAN><SPAN STYLE="font-style: normal">7</SPAN><SPAN STYLE="font-style: normal">,
DDC is extremely sensitive to even very minor deviations that make
one of proof #2&rsquo;s assumptions false.</SPAN></p>
<p>Since c<SUB>A</SUB>=stage2 when proof #2&rsquo;s
assumptions are true, then if c<SUB>A</SUB><FONT FACE="Times New Roman, serif">&ne;</FONT>stage2<SPAN STYLE="font-style: normal">,
then at least one of the assumptions of proof #2 </SPAN><I>must</I><SPAN STYLE="font-style: normal">
be false.  For example, if c</SPAN><SUB><SPAN STYLE="font-style: normal">A</SPAN></SUB><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">&ne;</SPAN></FONT><SPAN STYLE="font-style: normal">stage2,
perhaps</SPAN> compiler executable c<SUB>P</SUB> is corrupted; this
would mean assumption cP_exactly_corresponds is false.  Similarly,
perhaps compiler executable c<SUB>A</SUB> is corrupted (e.g., it was
replaced by some corrupt executable); this would mean that assumption
definition_cA is false.  If we only know that <SPAN STYLE="font-style: normal">c</SPAN><SUB><SPAN STYLE="font-style: normal">A</SPAN></SUB><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">&ne;</SPAN></FONT><SPAN STYLE="font-style: normal">stage2,
</SPAN>we cannot determine from this proof <I>which</I><SPAN STYLE="font-style: normal">
assumption(s) are false.</SPAN>  However, once we know that
<SPAN STYLE="font-style: normal">c</SPAN><SUB><SPAN STYLE="font-style: normal">A</SPAN></SUB><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">&ne;</SPAN></FONT><SPAN STYLE="font-style: normal">stage2,
</SPAN>we can then try to obtain other information to determine the
cause(s).</p>
<p><SPAN STYLE="font-style: normal">Note that this
proof permits </SPAN><I>s</I><SUB><SPAN STYLE="font-style: normal">P</SPAN></SUB><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">&ne;</SPAN></FONT><FONT FACE="Times New Roman, serif"><I>s</I></FONT><SUB><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">A</SPAN></FONT></SUB><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">
and c</SPAN></FONT><SUB><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">P</SPAN></FONT></SUB><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">&ne;c</SPAN></FONT><SUB><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">A</SPAN></FONT></SUB><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">,
but it does not </SPAN></FONT><FONT FACE="Times New Roman, serif"><I>require</I></FONT><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">
it.  Thus, it&rsquo;s quite possible that </SPAN></FONT><FONT FACE="Times New Roman, serif"><I>s</I></FONT><SUB><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">P</SPAN></FONT></SUB><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">=</SPAN></FONT><FONT FACE="Times New Roman, serif"><I>s</I></FONT><SUB><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">A</SPAN></FONT></SUB><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">
and/or c</SPAN></FONT><SUB><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">P</SPAN></FONT></SUB><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">=c</SPAN></FONT><SUB><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">A</SPAN></FONT></SUB><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">.</SPAN></FONT></p>
<H2 CLASS="western"><A NAME="5.8.Proof #3: Goal cP_corresponds_to_sP|outline"></A>
5.8 Proof #3: Goal cP_corresponds_to_sP</H2>
<P CLASS="western" STYLE="widows: 3; orphans: 3; page-break-before: auto">
Proof #2 is intentionally designed to not require that a grandparent
compiler c<SUB>GP</SUB> exist in the putative origins of c<SUB>A</SUB>.
 But having a grandparent compiler is a common circumstance, and in
this circumstance, one of the assumptions of proof #2 can be proved
using other assumptions that may be easier to confirm.</p>
<p>Proof #2 depended on assumption
cP_corresponds_to_sP (see section 5.7.10):</p>
<PRE CLASS="western">	exactly_correspond(cP, sP, lsP, eA).</PRE><p>
If a putative grandparent compiler c<SUB>GP</SUB> <I>does</I> exist,
this assumption is easily proven given some different assumptions. 
Simply reuse define_exactly_correspond as already defined, and add
definition definition_cP and assumption cGP_compiles_sP as described
below.</p>
<H3 CLASS="western"><A NAME="5.8.1.Definition definition_cP|outline"></A>
5.8.1 Definition definition_cP</H3>
<p>First, we must define how cP was putatively
generated &ndash; by grandparent compiler c<SUB>GP</SUB>:</p>
<PRE CLASS="western">	cP = compile(sP, cGP, ePeffects, eP, eA).</PRE><p>
Note the strong similarity to definition_cA used earlier in section
5.7.12.</p>
<H3 CLASS="western"><A NAME="__RefHeading__34623629"></A><A NAME="5.8.2.Assumption cGP_compiles_sP|outline"></A>
5.8.2 Assumption cGP_compiles_sP</H3>
<P CLASS="western" STYLE="page-break-before: auto; page-break-after: avoid">
We also need to assume that the grandparent compiler cGP will
accurately translate the source code <I>s</I><SUB>P</SUB>:</p>
<PRE CLASS="western">	all EnvEffects accurately_translates(cGP, lsP, sP, EnvEffects, eP, eA).</PRE><p>
Note the strong similarity to cT_compiles_sP in section 5.6.4.</p>
<H3 CLASS="western"><A NAME="5.8.3.Goal cP_corresponds_to_sP|outline"></A>
5.8.3 Goal cP_corresponds_to_sP</H3>
<p>Given define_exactly_correspond, definition_cP,
and cGP_compiles_sP, as described above, the goal is trivially proved
by prover9 (as shown below).  Recall that the goal is:</p>
<PRE CLASS="western">	exactly_correspond(cP, sP, lsP, eA).</PRE><H3 CLASS="western">
<A NAME="5.8.4.Prover9 proof of cP_corresponds_to_sP|outline"></A>5.8.4 Prover9
proof of cP_corresponds_to_sP</H3>
<p>Table 4 presents the proof found by prover9.</p>
<P ALIGN=CENTER STYLE="margin-top: 0.08in; line-height: 100%; widows: 0; orphans: 0; page-break-after: avoid">
<FONT SIZE=3><I>Table 4: Proof #3 (cP_corresponds_to_sP) in prover9
format</I></FONT></p>
<TABLE WIDTH=574 BORDER=1 BORDERCOLOR="#000000" CELLPADDING=2 CELLSPACING=0 STYLE="page-break-inside: avoid">
	<COL WIDTH=23>
	<COL WIDTH=380>
	<COL WIDTH=157>
	<TR>
		<TH WIDTH=23 BGCOLOR="#c0c0c0">
			<p>#</p>
		</TH>
		<TH WIDTH=380 BGCOLOR="#c0c0c0">
			<p>Formula</p>
		</TH>
		<TH WIDTH=157 BGCOLOR="#c0c0c0">
			<p>Rationale</p>
		</TH>
	</TR>
	<TR>
		<TD WIDTH=23>
			<p>1</p>
		</TD>
		<TD WIDTH=380>
			<p>(all A
			accurately_translates(cGP,lsP,sP,A,eP,eA))</p>
		</TD>
		<TD WIDTH=157>
			<p>Assumption  cGP_compiles_sP</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=23>
			<p>2</p>
		</TD>
		<TD WIDTH=380>
			<p>accurately_translates(A,B,C,D,E,F) -&gt;
			exactly_correspond(compile(C,A,D,E,F),C,B,F)</p>
		</TD>
		<TD WIDTH=157>
			<p>Assumption define_&#8203;exactly_&#8203;correspond</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=23>
			<p>3</p>
		</TD>
		<TD WIDTH=380>
			<p>exactly_correspond(cP,sP,lsP,eA)</p>
		</TD>
		<TD WIDTH=157>
			<p>Goal cP_corresponds_&#8203;to_sP</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=23>
			<p>4</p>
		</TD>
		<TD WIDTH=380>
			<p>-accurately_translates(A,B,C,D,E,F) |
			exactly_correspond(compile(C,A,D,E,F),C,B,F)</p>
		</TD>
		<TD WIDTH=157>
			<p>Clausify 2</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=23>
			<p>5</p>
		</TD>
		<TD WIDTH=380>
			<p>accurately_translates(cGP,lsP,sP,A,eP,eA)</p>
		</TD>
		<TD WIDTH=157>
			<p>Clausify 1</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=23>
			<p>6</p>
		</TD>
		<TD WIDTH=380>
			<p>cP = compile(sP,cGP,ePeffects,eP,eA)</p>
		</TD>
		<TD WIDTH=157>
			<p>Assumption  definition_cP</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=23>
			<p>7</p>
		</TD>
		<TD WIDTH=380>
			<p>-exactly_correspond(cP,sP,lsP,eA)</p>
		</TD>
		<TD WIDTH=157>
			<p>Deny 3</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=23>
			<p>8</p>
		</TD>
		<TD WIDTH=380>
			<p>-exactly_correspond(compile(sP,cGP,ePeffects,eP,eA),&#8203;sP,lsP,eA)</p>
		</TD>
		<TD WIDTH=157>
			<p>Para 6 7</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=23>
			<p>9</p>
		</TD>
		<TD WIDTH=380>
			<p>exactly_correspond(compile(sP,cGP,A,eP,eA),sP,lsP,eA)</p>
		</TD>
		<TD WIDTH=157>
			<p>Resolve 4 5</p>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=23>
			<p>10</p>
		</TD>
		<TD WIDTH=380>
			<p>$F 
			</p>
		</TD>
		<TD WIDTH=157>
			<p>Resolve 9 8</p>
		</TD>
	</TR>
</TABLE>
<H3 CLASS="western"><A NAME="5.8.5.Discussion of proof #3|outline"></A>
5.8.5 Discussion of proof #3</H3>
<p>Proof #3 shows that, when a grandfather compiler
is used as part of a benign environment, an assumption of proof #2
(cP_corresponds_to_sP) is true.</p>
<H1 CLASS="western"><A NAME="__RefHeading__36132387"></A><A NAME="6.Methods to increase diversity|outline"></A>
6 Methods to increase diversity</H1>
<p>As discussed in section 4.3, DDC must be executed
using only &ldquo;trusted&rdquo; processes and programs.  Something
is trusted to the extent that there is justified confidence that it
does not have triggers and payloads that would affect the results of
DDC.</p>
<p>This confidence can be gained in a variety of
ways.  One method to gain such confidence is to perform a complete
formal proof of the compiler executable c<SUB>T</SUB> and of the
environments used in DDC, along with evidence that what actually runs
is what was proved.  But such proofs are difficult to perform with
compilers typically used in industry.  Another method to gain such
confidence is to re-apply DDC on compiler c<SUB>T</SUB> and/or the
DDC environments; this can help, but re-applying DDC would require
the use of yet <I>another</I> trusted compiler and environments, and
this application of DDC would repeat until there was (1) a &ldquo;final&rdquo;
trusted compiler and environments, or (2) a loop of trusted compilers
and environments.  In either case, at that point some <I>other</I>
method is needed to increase confidence in the trusted compiler and
environments.</p>
<p>A simple method to gain such confidence is through
diversity.  Diversity can <I>greatly</I> reduce the likelihood that
trusted compiler c<SUB>T</SUB> and the DDC environments have relevant
triggers and payloads, often at far less cost than other approaches. 
There are many ways we can gain diversity; these include diversity in
compiler implementation, in time, in environment, and in input source
code.  These can be combined to further increase confidence that
relevant triggers and payloads will not activate.</p>
<H2 CLASS="western"><A NAME="__RefHeading__38285263"></A><A NAME="6.1.Diversity in compiler implementation|outline"></A>
6.1 Diversity in compiler implementation</H2>
<p>Compiler c<SUB>T</SUB>&rsquo;s executable could be
a completely different implementation than compiler c<SUB>A</SUB> or
c<SUB>P</SUB>.  This means it would have no (or little) shared code
or data structures.  It would be best if the source code of c<SUB>T</SUB>
did not have a common ancestor with c<SUB>A</SUB> or c<SUB>P</SUB>,
since having a common ancestor greatly increases the likelihood of
shared code or data structures.  Using a completely different
implementation reduces the risk that c<SUB>T</SUB> includes triggers
or payloads that affect c<SUB>P</SUB> or c<SUB>A</SUB>.  Compiler
c<SUB>T</SUB>&rsquo;s executable could include triggers and payloads
for compilers other than c<SUB>T</SUB>, but this is less likely.</p>
<p>Ideally, no previous version of compiler c<SUB>T</SUB>
would have been compiled by any version of compiler c<SUB>A</SUB> or
c<SUB>P</SUB>, even in c<SUB>T</SUB>&rsquo;s initial bootstrap.  This
is because compiler c<SUB>A</SUB> or c<SUB>P</SUB> could insert into
the executable code some routines to check for any processing of
compiler c<SUB>A</SUB> or c<SUB>P</SUB> so that it can later
&ldquo;re-infect&rdquo; itself.  This kind of attack is difficult to
do, especially since bootstrapping is usually done very early in a
compiler&rsquo;s development and an attacker may not even be aware of
compiler c<SUB>T</SUB>&rsquo;s existence.  One of the most obvious
locations where this might be practical might be in the input/output
(I/O) routines.  However, I/O routines are more likely to be viewed
at the assembly or machine level than some other routines (e.g., to
do performance analysis), so an attacker risks discovery if they
subvert I/O routines.</p>
<H2 CLASS="western"><A NAME="__RefHeading__43512020"></A><A NAME="6.2.Diversity in time|outline"></A>
6.2 Diversity in time</H2>
<p>If compiler c<SUB>T</SUB> and the DDC environment
were developed long before the compiler c<SUB>P</SUB> and c<SUB>A</SUB>,
and they do not share a common implementation heritage, it is
improbable that compiler c<SUB>T</SUB> or its environment would
include relevant triggers for a not-yet-implemented compiler. 
Magdsick makes a similar point [Magdsick2003].  In theory, a compiler
author could attempt to develop a newer compiler&rsquo;s source code
so that it would be subverted by older compiler executables, but this
requires control over the newer compiler&rsquo;s source code,
explicit knowledge of the triggers and payloads of the older
compiler, and triggers and payloads in the older compiler that would
be relevant to a newer, different compiler.</p>
<p>The reverse (using a newer compiler executable to
check an older compiler executable) gains less confidence.  This is
because it is easier for a recently-released compiler executable to
include triggers and payloads for many older compilers, including
completely different compilers.  Nevertheless, this can still
increase confidence somewhat, since to avoid detection by DDC the
attacker must successfully subvert multiple compiler executables.</p>
<p>Diversity in time can only provide significant
confidence if it can be clearly verified that the &ldquo;older&rdquo;
materials are truly the ones that existed at the earlier time.  This
is because a resourceful attacker could tamper with those copies if
given an opportunity to do so.  Instead, protected copies of the
original media should be preferred to reduce the risk of tampering. 
Multiple independently-maintained copies can be compared with each
other to verify that the data used is correct.  Cryptographic hashes
can be used to verify the media; multiple hash algorithms should be
used, in case a hash algorithm is broken.</p>
<p>An older executable version of compiler c<SUB>A</SUB>
or c<SUB>P</SUB> can be used as compiler c<SUB>T</SUB> if there is
reason to believe that the older version is not corrupt or that any
Trojan horse in the older version of c<SUB>A</SUB> will not be
triggered by <I>s</I><SUB><SPAN STYLE="font-style: normal">A</SPAN></SUB>.
 Note that this is a weaker test; the common ancestor could have been
subverted.  This technique gives greater confidence if the changes in
the compiler have been so significant that the newer version is in
essence a different compiler, but it would be best if compiler c<SUB>T</SUB>
were truly a separate implementation.</p>
<H2 CLASS="western"><A NAME="6.3.Diversity in environment|outline"></A>
6.3 Diversity in environment</H2>
<p>Different environments could be used in the DDC
process than were used for the original generation of c<SUB>A</SUB>. 
The term &ldquo;environment&rdquo; here means the entire
infrastructure supporting the compiler including the CPU
architecture, operating system, supporting libraries, and so on. 
Using a completely different environment counters Trojan horses whose
triggers and payloads are actually in the <SPAN LANG="en-US">executables</SPAN>
of the environment, as well as countering triggers and payloads that
only work on a specific operating system or CPU architecture.</p>
<p>These benefits could be partly achieved through
emulation of a different system.  There is always the risk that the
emulation system or underlying environment could be subverted
specifically to give misleading results, but attackers will often
find this difficult to achieve, particularly if the emulation system
is developed specifically for this test (an attacker might have to
develop the attack before the system was built!).</p>
<p>In any case, the environment used to execute the
DDC process should be isolated from other tasks.  It should not be
running any other processes (which might try to use kernel
vulnerabilities to detect a compilation and subvert it), and it
should have limited (or no) network access.</p>
<H2 CLASS="western"><A NAME="6.4.Diversity in source code input|outline"></A>
6.4 Diversity in source code input</H2>
<p>Another way to add diversity would be to use
mutated source code [Draper1984] [McDermott1988].  The purpose of
mutating source code is to make it less likely that triggers designed
to attack the compilation of <I>s</I><SUB>P</SUB> or <I>s</I><SUB>A</SUB>
will activate, and if they do, to reduce the likelihood that any
payloads will be effective.</p>
<p>In terms of DDC, compiler c<SUB>T</SUB> would
become a source code transform (the mutator), a compiler (possibly an
original compiler) c<SUB>X</SUB>, and possibly a postprocessing step.
 These mutations could be implemented by automated tools, or even
manually.  The resulting c<SUB>T</SUB> must be trusted, so trust must
be given to the mutator(s), and the mutators must cause sufficient
change so that any triggers or payloads in c<SUB>X</SUB> will not
have an effect when used as part of DDC.</p>
<p>There are two major types of mutations of source
code: semantics-preserving and non-semantics preserving:</p>
<UL>
	<LI VALUE=1><P CLASS="list-1-western">In semantics-preserving
	mutations, the source code is changed to an equivalent program (that
	is, it will continue to produce the same outputs given the same
	inputs).  This could include mutations such as renaming items (such
	as variables, functions, and/or filenames), reordering statements
	where the order is irrelevant, and regrouping statements.  It can
	also include much more substantive changes, such as translating the
	source code into a different programming language.  Even trivial
	changes, such as changing whitespace, slightly increases diversity
	(though typically not enough by itself to justify a claim that all
	potential triggers and payloads are disabled).  Forrest discusses
	several methods for introducing diversity [Forrest1997].</p>
	<LI><P CLASS="list-1-western">In non-semantics-preserving mutations,
	the original semantics of the source code as presented to the
	compiler are <I>not</I> preserved.  Instead, the goal is to preserve
	the necessary semantics of the source code when executed with the
	addition of preprocessing of its input to the execution and/or
	postprocessing of the execution output.  Often this involves adding
	extraneous functionality to the source code, whose output is removed
	by the postprocessor, in the hope that this will cause triggers and
	payloads to fail.  For example, the mutator may insert an additional
	text formatter that generates formatted output as well as an
	executable; the postprocessor must then remove or throw out that
	extraneous information.  One challenge of this approach is that
	since semantics are no longer preserved, the postprocessing must
	remove changes that would affect DDC.  McDermott discusses the
	advantage of this approach [McDermott1988].</p>
</UL>
<p>Mutations can also be used to determine the
specification of language lsP with greater precision<A CLASS="sdfootnoteanc" NAME="sdfootnote16anc" HREF="#sdfootnote16sym"><SUP>16</SUP></A>.
 Presume that we have a non-mutated <I>s</I><SUB>P</SUB> and that we
can verify c<SUB>A</SUB> using DDC.  We can then apply successive
semantics-preserving mutations to <I>s</I><SUB>P</SUB> (e.g.,
focusing on areas that the language specification leaves undefined)
and see if they cause a false negative.  If a mutation causes a false
negative, that mutation reveals an undocumented requirement of
language lsP.</p>
<H1 CLASS="western"><A NAME="__RefHeading__32545344"></A><A NAME="7.Demonstrations of DDC|outline"></A>
7 Demonstrations of DDC</H1>
<p>The formal proof only shows that if something
<I>could</I> be done, it would produce certain specific results. 
This chapter documents several demonstrations showing that DDC <I>can</I>
be performed in the real world, and is thus a <I>practical</I>
technique.  This chapter presents results from tcc (a small C
compiler), ported versions of Goerigk&rsquo;s Lisp compilers (one of
which is known to be a maliciously corrupted executable), and the
widely-used industrial-strength GNU Compiler Collection (GCC) C
compiler.  In some cases, it will be important to track certain
libraries separately from the &ldquo;compiler source code&rdquo; as
it is traditionally defined; in such cases, the figures will show
them as separate inputs.</p>
<H2 CLASS="western"><A NAME="7.1.tcc|outline"></A>7.1 tcc</H2>
<p>Before [Wheeler2005], there had been no public
evidence that DDC had been used.  One 2004 GCC mailing list posting
stated, &ldquo;I&rsquo;m not aware of any ongoing effort,&rdquo;
[Lord2004]; another responded, &ldquo;I guess we all sorta hope
someone else is doing it.&rdquo; [Jendrissek2004].  This section
describes its first demonstration (from [Wheeler2005]).</p>
<p>A public demonstration requires a compiler whose
source code is publicly available.  Other ideal traits for the
initial test case included being relatively small and self-contained,
running quickly (so that test runs would be rapid), having an open
source software license (so the experiment could be repeated and
changes could be publicly redistributed [Wheeler2005]), and being
easily compiled by another compiler.  The compiler needed to be
relatively defect-free, since defects would interfere with these
tests.  The Tiny C Compiler, abbreviated as TinyCC or tcc, was chosen
as it appeared to meet these criteria.</p>
<p>The compiler tcc was developed by Fabrice Bellard
and is available from its website at <A HREF="http://www.tinycc.org/">http://www.tinycc.org</A>/.
 This project began as the Obfuscated Tiny C Compiler, a very small C
compiler Bellard wrote to win the International Obfuscated C Code
Contest in 2002.  He then expanded this small compiler so that it now
supports all of American National Standards Institute (ANSI) C, most
of the newer International Organization for Standardization (ISO)
(sic) C99 standard, and many GNU C extensions including inline
assembly.  The compiler tcc appeared to meet the requirements given
above.  In addition, tcc had been used to create &ldquo;tccboot,&rdquo;
a Linux distribution that first booted the compiler and then
recompiled the entire kernel as part of its boot process.  This
capability to compile almost all code at boot time could be very
useful for future related work, and suggested that the compiler was
relatively defect-free.</p>
<p>The following sub-sections describe the test
configuration, the <SPAN LANG="en-US">DDC</SPAN> process, problems
with casting 8-bit values and long double constants, and final
results.</p>
<H3 CLASS="western"><A NAME="7.1.1.Test configuration|outline"></A>7.1.1 Test
configuration</H3>
<p>All tests ran on an x86 system running Red Hat
Fedora Core 3.  This included Linux kernel version 2.6.11-1.14_FC3
and GCC version 3.4.3-22.fc3.  GCC was both the bootstrap compiler
and the trusted compiler for this test; tcc was the simulated
potentially corrupt compiler.</p>
<p>First, a traditional chain of recompilations was
performed using tcc versions 0.9.20, 0.9.21, and 0.9.22.  After
bootstrapping, a compiler would be updated and used to compile
itself.  Their gzip compressed tar files have the following Secure
Hash Algorithm (SHA) values using SHA-1 (these are provided so others
can repeat this experiment):</p>
<PRE CLASS="western">	6db41cbfc90415b94f2e53c1a1e5db0ef8105eb8  0.9.20
	19ef0fb67bbe57867a590d07126694547b27ef41  0.9.21
	84100525696af2252e7f0073fd6a9fcc6b2de266  0.9.22</PRE><p>
As is usual, any such sequence must start with some sort of bootstrap
of the compiler.  GCC was used to bootstrap tcc-0.9.20, causing a
minor challenge: GCC 3.4.3 would<SPAN LANG="en-US"> not</SPAN>
compile tcc-0.9.20 directly because GCC 3.4.3 added additional checks
not present in older versions of GCC.  In tcc-0.9.20, some functions
are declared like this, using a GCC extension to C:</p>
<PRE CLASS="western">	void *__bound_ptr_add(void *p, int offset) __attribute__((regparm(2)));</PRE><p>
but the definitions of those functions in tcc&rsquo;s source code
omit the __attribute__((regparm(...))).  GCC 3.4.3 perceives this as
inconsistent and will not accept it.  Since this is only used by the
<SPAN LANG="en-US">initial</SPAN> bootstrap compiler, we can claim
that the bootstrap compiler has two steps: a preprocessor that
removes these regparm statements, and the regular GCC compiler.  The
regparm text is only an optimization with no semantic change, so this
does not affect our result.</p>
<p>This process created a tcc version 0.9.22
executable file which we have good reasons to believe does not have
any hidden code in the executable, so it can be used as a test case. 
Now imagine an end-user with only this executable and the source code
for tcc version 0.9.22.  This user has no way to ensure that the
compiler has not been tampered with (if it has been tampered with,
then its executable will be different, but this hypothetical end-user
has no &ldquo;pristine&rdquo; file to compare against).  Would DDC
correctly produce the same result?</p>
<H3 CLASS="western"><A NAME="__RefHeading__33193361"></A><A NAME="7.1.2.Diverse double-compiling tcc|outline"></A>
7.1.2 Diverse double-compiling tcc</H3>
<p>Real compilers are often divided into multiple
pieces.  Compiler tcc as used here has two parts: the main compiler
(file tcc) and the compiler run-time library (file libtcc1.a; tcc
sometimes copies portions of this into its results).  For purposes of
this demonstration, these were the only components being checked;
everything else was assumed to be trustworthy for this simple test
(this assumption could be removed with more effort).  The executable
file tcc is generated from the source file tcc.c and other files;
this set is notated <I>s</I><SUB>tcc</SUB>.  Note: the tcc package
also includes a file called tcclib, which is not the same as libtcc1.</p>
<p><SPAN ID="Frame14" DIR="LTR" STYLE="float: left; width: 5.93in; height: 6.28in; border: none; padding: 0in; background: #ffffff">
	<DIV ID="Frame15" DIR="LTR" STYLE="position: absolute; top: 0.18in; left: 0.67in; width: 4.59in; height: 5.71in; border: 1px solid #000000; padding: 0.06in; background: #ffffff"><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 2.2in; left: 0.94in; width: 304px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m4417f307.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.52in; left: 1.02in; width: 279px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_mad3c86d.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 3.83in; left: 1.08in; width: 280px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m4d8642a8.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 2.31in; left: 1.05in; width: 283px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m5820a4ef.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.66in; left: 0.3in; width: 39px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_53c1b53d.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.03in; left: 0.37in; width: 28px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_5ba1989f.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.63in; left: 2.65in; width: 64px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m3fea631b.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.78in; left: 0.65in; width: 192px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m5a3ca549.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.06in; left: 1.26in; width: 64px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m4e41eb02.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.17in; left: 0.64in; width: 60px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m37d29ddc.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.58in; left: 1.26in; width: 67px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m2cd06923.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.56in; left: 2.59in; width: 86px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m4c0b96ef.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.31in; left: 1.6in; width: 72px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m72778dc7.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.31in; left: 1.58in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m56722a74.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.88in; left: 2.99in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_48186f36.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 2.43in; left: 0.32in; width: 39px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_53c1b53d.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 2.8in; left: 0.4in; width: 28px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_5ba1989f.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 2.43in; left: 0.24in; width: 61px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_4409596e.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.89in; left: 2.07in; width: 59px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m12501194.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 2.41in; left: 2.67in; width: 64px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m10325022.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 2.56in; left: 0.67in; width: 192px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_6c523486.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 2.84in; left: 1.28in; width: 64px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m6199d83b.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 2.11in; left: 1.61in; width: 75px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_54c5177e.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 3.09in; left: 1.59in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m168ffd27.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 2.66in; left: 3.01in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_497f42ce.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.31in; left: 2.35in; width: 59px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m404709ca.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 2.11in; left: 2.4in; width: 55px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m8d64589.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 2.97in; left: 0.65in; width: 60px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_e138f17.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 3.37in; left: 1.28in; width: 67px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m71cc6cb8.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 3.36in; left: 2.6in; width: 86px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m11962b61.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 3.95in; left: 2.73in; width: 64px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m10325022.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 4.09in; left: 0.73in; width: 192px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m5a3ca549.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 4.37in; left: 1.34in; width: 64px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m6199d83b.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 4.62in; left: 1.65in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_2d2fd17e.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 4.2in; left: 3.07in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m790a616d.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 4.5in; left: 0.71in; width: 60px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_e138f17.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 5.23in; left: 1.05in; width: 119px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m84d74b2.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 5.22in; left: 2.44in; width: 133px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m4c865415.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 3.95in; left: 0.31in; width: 39px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_53c1b53d.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 4.31in; left: 0.39in; width: 28px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_5ba1989f.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 3.94in; left: 0.24in; width: 61px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_4409596e.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 3.29in; left: 1.24in; width: 222px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_29e27177.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 3.59in; left: 1.65in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m7e4e837.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 3.52in; left: 1.94in; width: 103px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m5448396.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 5.18in; left: 1.01in; width: 287px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m55fd2814.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 2.84in; left: 2.15in; width: 59px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m7f8d95b0.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.12in; left: 2.04in; width: 59px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_1337f602.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.1in; left: 3.35in; width: 59px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_38f4aca0.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.28in; left: 1.93in; width: 170px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_69d7946e.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.75in; left: 3.32in; width: 37px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m418754df.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 3.57in; left: 2.01in; width: 170px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_76abba2c.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 4.07in; left: 3.4in; width: 37px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_471bfe3b.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 4.2in; left: 2.17in; width: 59px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_dde1524.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.88in; left: 1.7in; width: 125px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m46151823.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 4.7in; left: 1.57in; width: 145px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_45c3bca7.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.57in; left: 4.11in; width: 75px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_163d1a8c.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.56in; left: 1.03in; width: 287px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m61847074.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.1in; left: 1.01in; width: 287px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m61847074.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 3.13in; left: 4.11in; width: 75px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m4a2f5928.gif"></SPAN>
		<P CLASS="frame-contents-western"><IMG SRC="wheeler-trusting-trust-ddc_html_4409596e.gif" ALIGN=LEFT><IMG SRC="wheeler-trusting-trust-ddc_html_m5c059032.gif" ALIGN=LEFT><IMG SRC="wheeler-trusting-trust-ddc_html_m5c059032.gif" ALIGN=LEFT><IMG SRC="wheeler-trusting-trust-ddc_html_m79164fe5.gif" ALIGN=LEFT><IMG SRC="wheeler-trusting-trust-ddc_html_2f6c01a9.gif" ALIGN=LEFT><BR>
		</p>
	</DIV>
	<P ALIGN=CENTER STYLE="margin-top: 0.08in; margin-bottom: 0.08in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<FONT SIZE=3><I>Figure 5: Diverse double-compiling with
	self-regeneration check, using tcc</I></FONT></p>
</SPAN>Figure 5 shows the process used to perform DDC with compiler
tcc.  First, a self-regeneration test was performed to make sure we
could regenerate files tcc and libtcc1; this was successful.  Then
DDC was performed.  Notice that stages one and two, which are
notionally one compilation each, are actually two compilations each
when applied to compiler tcc because we must handle two components in
each stage (in particular, we must create the recompiled run-time
before running a program that uses it).</p>
<p>One challenge is that the run-time code is used as
an archive format (&ldquo;.a&rdquo; format), and this format includes
a compilation timestamp of each component.  These timestamps will, of
course, be different from any originals unless special efforts are
made.  Happily, the run-time code is first compiled into an ELF .o
format (which does not include these timestamps), and then
transformed into an archive format using a trusted program (ar).  So,
for testing purposes, the libtcc1.o files were compared and not the
libtcc1.a files.</p>
<p>Unfortunately, when this process was first tried,
the DDC result did not match the result from the chain of updates,
even when only using formats that did not include compilation
timestamps.  After much effort this was tracked to two problems: a
compiler defect in sign-extending values cast to 8-bit values, and
uninitialized data used while storing long double constants.  Each of
these issues is discussed next, followed by the results after
resolving them.</p>
<H3 CLASS="western"><A NAME="__RefHeading__38521691"></A><A NAME="7.1.3.Defect in sign-extending cast 8-bit values|outline"></A>
7.1.3 Defect in sign-extending cast 8-bit values</H3>
<p>A subtle defect in tcc caused serious problems. 
The defect occurs if a 32-bit unsigned value is cast to a signed
8-bit value, and then that result is compared to a 32-bit unsigned
value without first storing the result in a variable (which should
sign-extend the 8-bit value).  Here is a brief description of why
this construct is used, why it is a defect, and the impact of this
defect.</p>
<p>The x86 processor machine instructions can store 4
byte constants as 4 bytes, but since programs often use constants in
the range -128..127, constants in this range can also be stored in a
shorter 1-byte format.  Where possible, tcc tries to use the shorter
form, using statements like this to detect them (where e.v is of type
uint32, an unsigned 32-bit value):</p>
<PRE CLASS="western">	if (op-&gt;e.v == (int8_t)op-&gt;e.v &amp;&amp; !op-&gt;e.sym) {</PRE><p>
Unfortunately, the value cast to (int8_t) is not sign-extended by tcc
version 0.9.22 when compared to an unsigned 32-bit integer.  Version
0.9.22 does drop the upper 24 bits on the first cast to the 8-bit
signed integer, but it fails to sign-extend the remaining 8-bit
signed value unless the 8-bit value is first stored in a variable. 
This is a defect, at least because tcc&rsquo;s source code depends on
a drop with sign-extension and tcc is supposed to be self-hosting. 
It is even more obvious that this is a defect because using a
temporary variable to store the intermediate result does enable
sign-extension.  This is documented as a known defect in tcc 0.9.22&rsquo;s
own TODO documentation, though this was only discovered after
laboriously tracking down the problem.  According to Kernighan
[Kernighan1998] section A6.2 and the ISO/IEC C99 standard section
6.3.1.3 [ISO1999], converting to a smaller signed type is
implementation-defined, but conversion of that to a larger unsigned
value is required to sign-extend.  Note that GCC does do the drop and
sign-extension (as tcc&rsquo;s author expects).</p>
<p>This defect results in incorrect code being
generated by tcc 0.9.22 if it is given values in the range 0x80..0xff
in this construct.  But when compiling itself, tcc merely generates
slightly longer code than necessary in certain cases.  Thus, a
GCC-compiled tcc generates code of this form (where 3-byte codes are
used) when compiling some inline assembly in the tcc run-time library
libtcc1:</p>
<H1 CLASS="code-western" STYLE="page-break-before: auto; page-break-after: avoid">
	1b5: 2b 4d dc  sub 0xffffffdc(%ebp),%ecx</H1>
<H1 CLASS="code-western" STYLE="page-break-after: avoid">	1b8: 1b 45
d8  sbb 0xffffffd8(%ebp),%eax</H1>
<P CLASS="western" STYLE="page-break-before: auto; page-break-after: avoid">
But a tcc-compiled tcc incorrectly chooses the &ldquo;long&rdquo;
form of the same instructions (which have the same effect&mdash;note
that the disassembled instructions are the same but the machine code
is different):</p>
<H1 CLASS="code-western">	1b5: 2b 8d dc ff ff ff  sub
0xffffffdc(%ebp),%ecx</H1>
<H1 CLASS="code-western">	1bb: 1b 85 d8 ff ff ff  sbb
0xffffffd8(%ebp),%eax</H1>
<p>This defect in sign-extension causes the failure
of assumption cGP_compiles_sP (see section 5.8.2), which requires
that the grandparent compiler accurately compile source <I>s</I><SUB>P</SUB>.
 <SPAN STYLE="font-style: normal">This</SPAN> is a key assumption of
proof #3; since this assumption is not true, the goal of proof #3
(cP_corresponds_to_sP) need not hold.  Since cP_corresponds_to_sP is
an assumption of proof #2, the goal of proof #2 (always_equal) need
not hold in this situation.</p>
<p>To resolve this issue, tcc was modified slightly
so it would store such intermediate values in a temporary variable,
avoiding the defect; a better long-term solution would be to fix the
defect.</p>
<p>Note that if the grandparent compiler <I>did</I><SPAN STYLE="font-style: normal">
accurately compile source code </SPAN><I>s</I><SUB><SPAN STYLE="font-style: normal">P</SPAN></SUB><SPAN STYLE="font-style: normal">,
then the DDC technique would have correctly reported that the source
and executable exactly corresponded, </SPAN><I>even though</I><SPAN STYLE="font-style: normal">
both source code </SPAN><I>s</I><SUB><SPAN STYLE="font-style: normal">P</SPAN></SUB><SPAN STYLE="font-style: normal">
and </SPAN><I>s</I><SUB><SPAN STYLE="font-style: normal">A</SPAN></SUB><SPAN STYLE="font-style: normal">
(which are equal in this case) incorrectly implemented the language. 
DDC does </SPAN><I>not</I><SPAN STYLE="font-style: normal">
necessarily report on whether or not the source code </SPAN><I>correctly</I><SPAN STYLE="font-style: normal">
implements the applicable languages; it merely reports if source and
executable </SPAN><I>correspond</I><SPAN STYLE="font-style: normal">
when its assumptions are true.</SPAN></p>
<p><SPAN STYLE="font-style: normal">As with any test,
merely passing this test (or any other single test) does not show
that the compiler-under-test works correctly under all possible
inputs.  Nevertheless, t</SPAN>his example shows that <SPAN LANG="en-US">DDC</SPAN>
<I>can</I> be <I>a</I> useful test for unintentional compiler
defects&mdash;small defects that might not be noticed by other tests
<I>may</I> immediately surface when using DDC.</p>
<H3 CLASS="western"><A NAME="__RefHeading__42194885"></A><A NAME="7.1.4.Long double constant problem|outline"></A>
7.1.4 Long double constant problem</H3>
<p>Another problem resulted from how tcc outputs long
double constants.  The tcc outputs floating point constants in the
&ldquo;data&rdquo; section, but when tcc compiles itself, the tcc.c
line:</p>
<H1 CLASS="code-western">	if (f2 == 0.0) {</H1>
<p>outputs inconsistent data section values to
represent 0.0.  The tcc compiled by GCC stores 11 0x00 bytes followed
by 0xc9, while tcc compiled by itself generates 12 0x00 bytes. 
Because f2 has type &ldquo;long double,&rdquo; tcc eventually stores
this 0.0 in memory as a long double value.  The problem is that tcc&rsquo;s
&ldquo;long double&rdquo; uses only 10 bytes, but it is stored in 12
bytes, and tcc&rsquo;s source code does not initialize the extra 2
bytes.  The two excess &ldquo;junk&rdquo; bytes end up depending on
the underlying environment, causing variations in the output
[Dodge2005].  In normal operation these bytes are ignored and thus
cause no problems.</p>
<p>These tcc &ldquo;junk&rdquo; bytes cause a failure
in proof #2 assumption sP_portable_and_deterministic (see section 5.7.3).
Since the values aren&rsquo;t set, there is no guarantee by the
language that the results match between implementations.  Depending
on the compiler implementations, this may also cause a failure in
proof #2 assumption sP_deterministic.  Thus, the results of proof #2
do not apply to this case.</p>
<p>To resolve this, the value &ldquo;0.0&rdquo; was
replaced with the expression (f1-f1), since f1 is a long double
variable known to have a numeric value at that point.  This is
semantically the same and eliminated the problem.  A better long-term
solution for tcc would be to always set these &ldquo;excess&rdquo;
values to constants (such as 0x00).</p>
<H3 CLASS="western"><A NAME="7.1.5.Final results with tcc demonstration|outline"></A>
7.1.5 Final results with tcc demonstration</H3>
<p>After patching tcc 0.9.22 as described above, and
running it through the processes described above, exactly the same
files were produced through the chain of updates and through <SPAN LANG="en-US">DDC</SPAN>.
 This is shown by these SHA-1 hash values for the compiler and its
run-time library, which were identical for both processes:</p>
<PRE CLASS="western">	c1ec831ae153bf33bff3df3c248b12938960a5b6 tcc
	794841efe4aad6e25f6dee89d4b2d0224c22389b libtcc1.o</PRE><p>
But can we say anything about unpatched tcc 0.9.22?  We can, once we
realize that we can (for test purposes) pretend that the patched
version came first, and that we then applied changes to create the
unpatched version.  Since we have shown that the patched version&rsquo;s
source accurately represents the executable identified above, we only
need to examine the effects of a reversed change that &ldquo;creates&rdquo;
the unpatched version.  Visual inspection of the reversed change
quickly shows that it has no triggers and payloads.  Thus, we can add
one more chain from the trusted compiler to a &ldquo;new&rdquo;
version of the compiler that is the untouched tcc-0.9.22.  We must
compile again, because of the change in semantics due to the
sign-extension bug.  In the end, the following SHA-1 hash values are
the correct executables for tcc-0.9.22 on an x86 in this environment
when tcc is self-compiled:</p>
<PRE CLASS="western">	d530cee305fdc7aed8edf7903d80a33b6b3ee1db tcc
	42c1a134e11655a3c1ca9846abc70b9c82013590 libtcc1.o</PRE><H2 CLASS="western">
<A NAME="__RefHeading__33250680"></A><A NAME="7.2.Goerigk Lisp compilers|outline"></A>
7.2 Goerigk Lisp compilers</H2>
<p>A second demonstration of DDC using a small
compiler was performed using a pair of Lisp compilers developed in
[Goerigk2000] and [Goerigk2002].  This demonstrated that DDC can be
applied to languages other than C, and that it can detect corrupted
compilers.</p>
<p>Goerigk developed both &ldquo;correct&rdquo; and
&ldquo;incorrect&rdquo; compilers (Goerigk&rsquo;s terminology) using
ACL2, a theorem-prover supporting a Common-Lisp-like language. 
Goerigk also developed an abstract machine simulator to run the code
produced by the compilers.  Using DDC on this pair of compilers
demonstrates (1) the ability of DDC to detect a maliciously corrupted
compiler, including the differences in the corrupted compiler, (2)
reconfirm the ability of DDC to detect the correct compiler
executable, and (3) that DDC does not require C; these compilers are
written in, and support, a LISP-based language.</p>
<p>To perform this demonstration, the compilers and
virtual machine implementation originally written by Goerigk were
first ported to Common Lisp.  The compilers were originally written
in ACL2, which is similar but not identical to Common Lisp.  There
are far more Common Lisp implementations than ACL2 implementations,
so porting it to Common Lisp enabled the use of many alternative
compilers.  This port required removing uses of &ldquo;defthm&rdquo;
(define theorem) and mutual recursion declarations (ACL2 requires all
mutually-recursive functions to be specially declared; Common Lisp
has no such requirement).  A few ACL2-unique functions were rewritten
in Common Lisp, to allow the existing code to run: LEN (length), ZP
(returns true if parameter X is not an integer, or if X is integer
and X=0), TRUE-LISTP (returns True if its argument is a list that
ends in, or equals, nil), and ACL2-NUMBERP (is value a number).  In
addition, the &ldquo;execute&rdquo; command was renamed because on
some Common Lisp implementations that is a predefined function name. 
The GNU Clisp implementation was then used to run the tests, though
any Common Lisp implementation would have served.</p>
<p>As expected, both the correct and incorrect
compilers would produce correct code for a simple sample program (in
this case, for a factorial function).  Both could regenerate
themselves using the correct compiler source code as input,
demonstrating that they could pass the compiler bootstrap test and
the self-regeneration test.  However, when given a special &ldquo;login&rdquo;
program, the compiler executables would produce <I>different</I><SPAN STYLE="font-style: normal">
answers.  Thus, these programs really do demonstrate the attack.</SPAN></p>
<P CLASS="western" STYLE="font-style: normal">The DDC technique was
then applied.  First, it was applied to the correct source code,
using the underlying Common Lisp implementation (clisp) as the
trusted compiler c<SUB>T</SUB>.  The stage 2 output was then compared
to the correct compiler executable, and was shown to be equal.  The
stage 2 output was then compared to the incorrect compiler
executable, and was shown to be not equal.  A unified diff was then
applied to the stage 2 and incorrect compiler executable; this showed
the &ldquo;unexpected&rdquo; differences, and immediately revealed
that the difference had something to do with the login program.  This
difference is an immediate tip-off that there is something malicious
happening; no compiler should be specifically looking for the login
program, and then acting differently!  An examination of the
difference quickly revealed that it was comparing the input to a
login program&rsquo;s pattern, and then inserting special code in
this special case.</p>
<P CLASS="western" STYLE="font-style: normal">DDC detected the
difference because proof #2 assumption definition_cA (see section 5.7.12)
was not true in this case.  That is, compiler-under-test c<SUB>A</SUB>
had not been generated by the putative process from the &ldquo;correct&rdquo;
source code, but instead was created by compiling the &ldquo;incorrect&rdquo;
source code.</p>
<P CLASS="western" STYLE="font-style: normal">Appendix A includes
more detail, including the actual &ldquo;diff&rdquo; between the
executable produced by DDC with the executable of the incorrect
compiler.</p>
<H2 CLASS="western"><A NAME="7.3.GCC|outline"></A>7.3 GCC</H2>
<p>To conclusively demonstrate that DDC can be scaled
up to apply to &ldquo;industrial-scale&rdquo; compilers widely used
in commercial applications, the DDC process was successfully applied
to the GNU Compiler Collection (GCC), specifically the C compiler of
GCC.</p>
<p>In 1983, Richard Stallman began searching for a
compiler that would help meet his goal to create an entire operating
system that could be viewed, modified, and redistributed (without
limitations like royalties).  He did not find an existing compiler
that met his licensing, functionality, and performance requirements,
so he began writing a C compiler from scratch, which became the basis
of GCC.  Today, GCC is a GNU Project directed by the Free Software
Foundation (FSF).  It is licensed under the GNU General Public
License (GPL).</p>
<p>GCC is widely used, though specific statistics are
difficult to find.  &ldquo;GCC&rsquo;s user base is large and
varied... no direct estimate of the total number of GCC users is
possible... [but] GCC is the standard compiler shipped in every major
and most minor Linux distributions [and is] the compiler of choice
for the various [Berkeley Software Distribution (BSD)-derived]
operating systems... The academic computing community represents
another large part of GCC&rsquo;s user base... GCC is also widely
used by nonacademic customers of hardware and operating system
vendors... [considering] the broad range of hardware to which GCC has
been ported, it becomes quite clear that GCC&rsquo;s user base is
composed of the broadest imaginable range of computer users.&rdquo;
[vonHagen2006]</p>
<H3 CLASS="western"><A NAME="7.3.1.Setup for GCC|outline"></A>7.3.1 Setup
for GCC</H3>
<p>DDC can be used to regenerate an existing compiler
executable, given enough information on how it was compiled and the
other assumptions already discussed.  However, after many fruitless
attempts to do this with Fedora Core, it was found that the Fedora
project (and probably many other distributions) does not record all
the information necessary to easily recreate the exact same compiler
executable from scratch.  In some cases there were dependencies on
software that was not shipped with the distribution.  This may seem
surprising, but in practice this information has not been needed;
many organizations record these files for later use instead of
regenerating them.<A CLASS="sdfootnoteanc" NAME="sdfootnote17anc" HREF="#sdfootnote17sym"><SUP>17</SUP></A></p>
<p>So for purposes of the experiment, a new GCC
executable was created specifically to demonstrate DDC, using the
publicly-available GCC source code.  The executable was created using
the GCC executable that comes with Fedora (which was a different
version than the source code being compiled) as the &ldquo;grandparent&rdquo;
compiler.  To simplify the test, the compiler was self-regenerated,
that is, <I>s</I><SUB>P</SUB>=<I>s</I><SUB>A</SUB>.  The resulting
compiler executable, after two compilation stages, was then
considered to be the compiler-under-test c<SUB>A</SUB>.  Then, the
DDC process was used (with a different trusted compiler) to determine
if it would produce the same result as the compiler-under-test.  This
way, all necessary information for the experiment would be available.</p>
<p>The GCC suite includes a large number of different
compilers for different languages.  Attempting to cover all of these
languages was not necessary for purposes of this dissertation.  Thus,
work focused on the C compiler.  Future work could add support for
other languages using the approach described here.</p>
<p>The GCC suite depends on a great deal of external
software.  This includes a linker (typically named &ldquo;ld&rdquo;),
assembler (typically named &ldquo;as&rdquo;), archiver (&ldquo;ar&rdquo;),
symbol table constructor (&ldquo;ranlib&rdquo;), and standard C
library, as well as an operating system (especially a kernel) to run
on.  In particular, the C compiler cc1 generates assembly code, which
is then assembled.  For purposes of this experiment, all of these
external programs were considered to be external to the compiler. 
These additional programs could have been covered by DDC by
considering them as part of the compiler, however, doing so would
have made this first experiment even more difficult, and would not
have shown anything substantial.  These other programs are not
trivial, but the main C compiler is key; once we can show that DDC
can handle the &ldquo;real&rdquo; C compiler, expanding the scope of
DDC to cover these other programs (if desired) is merely a matter of
additional effort.</p>
<p>To demonstrate DDC, a second trusted compiler was
needed, one that was able to correctly process the large and complex
GCC source code.  After examining several compilers, the Intel C&#8288;+&#8288;+
Compiler (icc) was chosen.  In spite of its name, icc also includes a
C compiler.  Initial tests suggested that icc was a relatively
reliable compiler, and icc supports many GCC extensions and
implementation-defined behavior with the same semantics, making it
more likely to successfully compile GCC.  The latest version of icc
available at the time, version 11.0, was used.</p>
<p>Is icc sufficiently trustworthy to be used as a
trusted compiler?  There are at least two factors suggest that it is,
because they decrease the risk that icc includes triggers and
payloads that would subvert GCC <I>and</I> match any subversion
already present in the GCC executable.  First, GCC is released under
the GPL, while icc is a proprietary product not released under the
GPL.  If icc&rsquo;s source code included a significant amount of
source code from GCC, this would be a significant copyright
infringement case, and it is unlikely that Intel corporation would
risk releasing a program in such an illegal way.   Thus, an attacker
would need to write significantly different code to embed in each
program.  Second, icc is produced by a completely separate
organization (Intel) than GCC executables; thus, subverting both
executables would require that the attacker subvert executables in
two completely different organizations&rsquo; processes.  Thankfully,
for the purpose of this experiment, it does not matter if icc is
sufficiently trustworthy or not.  The primary reason to apply DDC to
GCC is to show that DDC can &ldquo;scale up&rdquo; to large compilers
like GCC.  From this vantage point, what matters is if DDC works with
GCC, <I>not</I><SPAN STYLE="font-style: normal"> whether or not icc
is actually trusted.</SPAN></p>
<p>There are many different versions of GCC
available, and for purposes of the experiment, any version of GCC
would do as the compiler-under-test.  However, it must be possible
for the trusted compiler to compile the source code of the parent (in
this case, it is the same as the compiler-under-test).  The parent
must also be able to compile the compiler-under-test (in this case,
the compiler-under-test must be able to recompile itself).  The newer
GCC versions 3.4.4, 4.0.4, and 4.1.2 could not be easily recompiled
by icc (giving error messages instead), so they were not used for
this experiment.  Should DDC become a common process, compiler
developers should test their compilers to ensure that they are easily
compiled by <I>other</I><SPAN STYLE="font-style: normal"> compilers. 
Remarkably</SPAN>, the source code for GCC version 3.1.1 could not be
compiled by the GCC version installed in Fedora (version 4.3).  For
purposes of this experiment, GCC version 3.0.4 was selected to be the
source code for the compiler-under-test, since it met these
requirements.</p>
<p><SPAN ID="Frame1" DIR="LTR" STYLE="float: left; width: 5.81in; height: 3.03in; border: none; padding: 0in; background: #ffffff">
	<DIV ID="Frame3" DIR="LTR" STYLE="position: absolute; top: 0.03in; left: 0.05in; width: 5.69in; height: 2.61in; border: 1px solid #000000; padding: 0.06in; background: #ffffff"><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.84in; left: 0.94in; width: 56px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_1a4bf5b2.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: -35227.75in; left: -35227.75in; width: 50px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m5dc589c6.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.88in; left: 0.05in; width: 50px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m63583aba.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.66in; left: 0.94in; width: 56px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m5cc421af.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: -35227.75in; left: -35227.75in; width: 54px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_88e1c9d.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.33in; left: 1.28in; width: 58px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m560ba793.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.34in; left: 1.31in; width: 134px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_34259634.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.08in; left: 0.53in; width: 125px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m78164de7.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.08in; left: 2.68in; width: 280px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m2fa2257e.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.84in; left: 3.84in; width: 56px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_753fc5d5.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: -35227.75in; left: -35227.75in; width: 50px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m5dc589c6.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 2.2in; left: 4.15in; width: 36px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_2eaf62b2.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.3in; left: 4.18in; width: 122px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_78852150.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 2.06in; left: 2.33in; width: 58px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_75bf7c16.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 2.21in; left: 1.18in; width: 71px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m25f42f94.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.63in; left: 3.83in; width: 56px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m2edc9840.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: -35227.75in; left: -35227.75in; width: 54px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_88e1c9d.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.28in; left: 4.23in; width: 30px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_2969b155.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.88in; left: 2.81in; width: 50px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m63583aba.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: -11742.58in; left: -11742.58in; width: 40px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m1a6c2ec5.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: -11742.58in; left: -11742.58in; width: 49px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_77175b16.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: -11742.58in; left: -11742.58in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_2db10405.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: -11742.58in; left: -11742.58in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_18be024f.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: -11742.58in; left: -11742.58in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_18be024f.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: -11742.58in; left: -11742.58in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_7539e7c8.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: -11742.58in; left: -11742.58in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_7539e7c8.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: -11742.58in; left: -11742.58in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_7539e7c8.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: -11742.58in; left: -11742.58in; width: 48px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m2bc151a5.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: -11742.58in; left: -11742.58in; width: 40px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_69e0fce5.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: -11742.58in; left: -11742.58in; width: 212px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_m464d21b2.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.4in; left: 1.24in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_551cea13.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.28in; left: 1.22in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_5602839e.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 2.1in; left: 1.23in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_5602839e.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 0.46in; left: 4.12in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_18be024f.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.28in; left: 4.12in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_75be9869.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 2.07in; left: 4.11in; width: 1px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_18be024f.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.03in; left: 3.33in; width: 49px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_6044478d.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.08in; left: 3.33in; width: 48px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_4cd638dc.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.02in; left: 0.58in; width: 35px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_546f065c.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 1.05in; left: 0.54in; width: 39px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_494c8d5d.gif"></SPAN><SPAN CLASS="sd-abs-pos" STYLE="position: absolute; top: 2.38in; left: 1.84in; width: 206px">
		<IMG SRC="wheeler-trusting-trust-ddc_html_3726470d.gif"></SPAN>
		<P CLASS="frame-contents-western"><BR>
		</p>
	</DIV>
	<P ALIGN=CENTER STYLE="margin-top: 0.08in; margin-bottom: 0.08in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
	<FONT SIZE=3><I>Figure 6: DDC applied to GCC</I></FONT></p>
</SPAN><BR CLEAR=LEFT>All compilations were performed on a personal
computer running the Fedora 9 Linux distribution in 32-bit mode on an
x86 system.  Compiler caches were completely disabled at all times
(by removing the package ccache), to ensure that all recompilations
were actually performed.  The &ldquo;kernel-headers&rdquo; package
was also installed, since it defined key constants necessary for
recompilation of GCC.
</p>
<p>When recompiling the GCC compiler, a number of
options are available, which unless required were left to their
defaults.  For example, the &ldquo;prefix&rdquo; value, which
identifies the  prefix of its pathname when installed, was left as
its default value &ldquo;/usr/local&rdquo;.  All compilations were
performed as a normal user, and not as root.</p>
<p>As with tcc, the recompilation of gcc had many
sub-steps.  In particular, certain run-time libraries were compiled
first, before the compilation of the &ldquo;main&rdquo; compiler
itself, just as with tcc.</p>
<H3 CLASS="western"><A NAME="7.3.2.Challenges|outline"></A>7.3.2 Challenges</H3>
<H4 CLASS="western"><A NAME="__RefHeading__32404977"></A><A NAME="7.3.2.1.Master result directory|outline"></A>
7.3.2.1 Master result directory</H4>
<p>One piece of critical information that had to be
recorded is the full pathname of the &ldquo;master result&rdquo;
directory that contains the source code and object directories.  This
value is passed to the build process through the DEST environment
variable, and this value embedded in the final executable.  In the
experiment this value was &ldquo;/home/dwheeler/thesis/work&rdquo;,
but this specific value is unimportant; the key is making certain
that DDC uses the same value as was used when creating the
compiler-under-test.</p>
<p>From a formal proof perspective, the contents of
the DEST environment variable may be considered part of the source
code <I>s</I><SUB>P</SUB> and <I>s</I><SUB>A</SUB>.  If the value
used during DDC is different than the value used to create the
original parent and compiler-under-test, we would be compiling
different source code, violating assumptions definition_stage1 and/or
definition_stage2 when compiling <I>s</I><SUB>P</SUB> or <I>s</I><SUB>A</SUB>
respectively (see section 5.7.1).  Thus, the results of proof #2 can
only apply to GCC if the DEST value when performing DDC is the same
as was used to create the original compiler-under-test.  <SPAN STYLE="font-style: normal">This
demonstrates that successfully applying DDC may require extremely
detailed information about the compilation of the
compiler-under-test.  It might be better if the compiler did </SPAN><I>not</I><SPAN STYLE="font-style: normal">
embed such information in its executable, to reduce the amount of
data that must be duplicated (see appendix </SPAN><SPAN STYLE="font-style: normal">D</SPAN><SPAN STYLE="font-style: normal">
for guidelines for compiler suppliers).</SPAN></p>
<H4 CLASS="western"><A NAME="7.3.2.2.Obsolete format for tail|outline"></A>
7.3.2.2 Obsolete format for tail</H4>
<p>The build process for the chosen version of GCC
(3.0.4), as part of its &ldquo;make compare&rdquo; step, uses an
obsolete format for the &ldquo;tail&rdquo; command.  For example, it
uses &ldquo;tail +16c&rdquo; to skip the first 16 characters.  This
format is no longer accepted by default by modern GNU implementations
of &ldquo;tail&rdquo;, which interpret &ldquo;tail +16c&rdquo; as an
attempt to read from a file named &ldquo;+16c&rdquo;.  This was
resolved by setting the environment variable &ldquo;_POSIX2_VERSION&rdquo;
to &ldquo;199209&rdquo; before the build is performed; GNU tail will
notice that this environment variable is set and use the older
(GCC-expected) semantics.</p>
<p>When the environment variable _POSIX2_VERSION is
not set, assumption cT_compiles_sP (see section 5.7.2) is untrue, so
the results of proof #2 would not apply.  In short, the trusted
compiler <I>must</I> be configured so that it <I>can</I> compile
source <I>s</I><SUB>P</SUB>.</p>
<H4 CLASS="western"><A NAME="7.3.2.3.Libiberty library|outline"></A>7.3.2.3 Libiberty
library</H4>
<p>Unfortunately, the DDC process did not produce an
executable equal to the compiler-under-test at first, even after
adjusting for the master result directory and the obsolete tail
format.  This meant that one of the assumptions of proof #2 was still
not true.  Determining why this was so (by tracking this backward
through the executables and object code in a large compiler to
determine the cause) was extremely time-consuming, due in part to the
large size of GCC, and produced a very unexpected result.  It turned
out that GCC 3.0.4 did <I>not</I><SPAN STYLE="font-style: normal">
fully rebuild itself when later build stages were requested, even
though the GCC recompilation documents stated that they did, due to
the way the GCC build process handles its &ldquo;libiberty&rdquo;
run-time library routines.</SPAN></p>
<P CLASS="western" STYLE="font-style: normal">The GCC compiler
documentation explains that its normal full build process, called a
&ldquo;bootstrap&rdquo;, can be broken into &ldquo;stages&rdquo;. 
The command &ldquo;make bootstrap&rdquo; is supposed to build GCC
three times&mdash;once with the native compiler, once with the
native-built compiler it just built, and once with the compiler it
built the second time.  Each step of this process is called a &ldquo;stage&rdquo;
[GNU2002, section 14].  The last two stages should produce the same
results; &ldquo;make compare&rdquo; checks if this is true (this is a
&ldquo;compiler bootstrap&rdquo; test).  This recompilation process
includes recompilation of the &ldquo;libiberty&rdquo; library, a
collection of lower-level subroutines used by various GNU programs.</p>
<p><SPAN STYLE="font-style: normal">Unfortunately,
actual GCC build behavior does not match the GCC documentation for
&ldquo;make bootstrap&rdquo;.  The stage1 compiler was </SPAN><I>not</I><SPAN STYLE="font-style: normal">
used to recompile the internal libiberty library when </SPAN><SPAN STYLE="font-style: normal">creating
stage2; instead, the results of stage1 were </SPAN><I>directly copied</I><SPAN STYLE="font-style: normal">
into </SPAN><SPAN STYLE="font-style: normal">stage2.  This appears to
be a side-effect of how the makefiles were written; when stage2 was
performed, the make program determined that the libiberty object file
was dated after the source, and skipped rebuilding it.  Because of
this, the resulting executable was actually a hodgepodge that
combined the results of two </SPAN><I>different</I><SPAN STYLE="font-style: normal">
compilers into a single executable.  After a long effort to track
down this problem, it was noted that there was a hint about this
defect in the GCC documentation, though its significance was not
obvious at the time: &ldquo;Libiberty [is only] built twice... fixing
this, so that libiberty is built three times, has long been on the
to-do list.&rdquo; [GNU2002, section 14]</SPAN></p>
<p><SPAN STYLE="font-style: normal">From the formal
model&rsquo;s perspective, this meant that assumption
definition_stage2 was not true (see section </SPAN><SPAN STYLE="font-style: normal">5.7.1</SPAN><SPAN STYLE="font-style: normal">).
 Since this assumption was not true, the results of proof #2 do not
apply.</SPAN></p>
<p><SPAN STYLE="font-style: normal">It would be
possible, though nontrivial, to directly apply DDC to this
circumstance.  In this case, we have a &ldquo;parent&rdquo; compiler
that is different than the compiler-under-test, so we would require
the source code for both the compiler-under-test and the parent
compiler.  But this would be a complex approach, far more complex
than necessary for use as a real-world demonstration, and it was
clear from the documentation that the </SPAN><I>intent</I><SPAN STYLE="font-style: normal">
of the compiler authors was to completely regenerate the compiler in
stage2.</SPAN></p>
<p><SPAN STYLE="font-style: normal">Instead, the GCC
makefile was modified to </SPAN>permit finer control over the
building process.  Then the process to rebuild the compiler (for both
the compiler-under-test and DDC) was modified so it correctly
recompiled the entire compiler in stage 2, by doing:</p>
<UL>
	<LI><P CLASS="list-1-western">&ldquo;make all-bootstrap&rdquo;,
	which used the &ldquo;initial&rdquo; compiler to compile libraries
	(such as libiberty) and necessary bootstrap tools to prepare for
	stage1.  The &ldquo;initial&rdquo; compiler for the
	&ldquo;compiler-under-test&rdquo; was a different version of GCC. 
	The initial compiler for DDC was, instead, icc.</p>
	<LI><P CLASS="list-1-western">&ldquo;make stage1_build&rdquo; to
	build the first stage GCC.</p>
	<LI><P CLASS="list-1-western">A forced rebuild of libiberty, using
	the new stage1 compiler.</p>
	<LI><P CLASS="list-1-western">&ldquo;make stage2_build&rdquo; to
	produce the final stage2 GCC.</p>
	<LI><P CLASS="list-1-western">Although not strictly necessary, a
	&ldquo;make stage3_build&rdquo; followed by &ldquo;make compare&rdquo;
	was also done to detect certain kinds of recompilation errors. 
	(This is a &ldquo;compiler bootstrap&rdquo; test.)</p>
</UL>
<H3 CLASS="western"><A NAME="7.3.3.GCC Results|outline"></A>7.3.3 GCC
Results</H3>
<p>Once the corrected GCC build process was used for
the compiler-under-test and the DDC process, DDC produced bit-for-bit
identical results with the compiler-under-test, as expected.  The
resulting GCC compiler is actually a set of files, instead of a
single file.  Appendix B presents the detailed results.</p>
<H1 CLASS="western"><A NAME="8.Practical challenges|outline"></A>8 Practical
challenges</H1>
<p>There are many practical challenges to
implementing DDC.  This chapter discusses some of these challenges
and how to overcome them.  Some of this information was discovered or
extended through the process of implementing the demonstrations.</p>
<H2 CLASS="western"><A NAME="8.1.Limitations|outline"></A>8.1 Limitations</H2>
<p>All techniques have limitations.  DDC only shows
that a particular executable corresponds to a particular source code,
resulting in these key limitations of DDC:</p>
<UL>
	<LI><P CLASS="list-1-western">There may be other executables that
	contain Trojan horse(s) and yet claim to correspond to a given
	source.  This can be resolved by using cryptographic hashes of the
	executable and the source code, and including their hashes when
	reporting that DDC succeeds.</p>
	<LI><P CLASS="list-1-western">The source code may have malicious
	code (such as Trojan horses) and/or errors, in which case the
	executable file will too.  However, if the source and executable
	correspond, the source code can be analyzed in the usual ways to
	find such problems.  Thus, DDC does not eliminate the need for
	review; instead, it allows review processes to concentrate on the
	source code, knowing that if certain other assumptions hold, DDC
	will prove that the executable will correspond to the source code. 
	In short, DDC can show that there is &ldquo;nothing hidden&rdquo;,
	enabling review of source code instead of executable code.</p>
	<LI><P CLASS="list-1-western">When the DDC result is <SPAN STYLE="font-style: normal">not
	equal to the original compiler-under-test, at least one of the
	assumptions of proof #2 has been violated, but it may not be
	apparent which </SPAN><SPAN STYLE="font-style: normal">assumption(s)
	have been violated.  Determining the cause may require examining
	differences of executables and/or the compilation process, which for
	large compilers can be difficult and time-consuming.  If a compiler
	executable does not correspond with its source code, it is
	corrupted.  This corruption need not be malicious, though as shown
	in appendix </SPAN><SPAN STYLE="font-style: normal">A</SPAN><SPAN STYLE="font-style: normal">,
	it is sometimes possible to examine the differences and determine
	that the corruption is malicious.  One potential cause for the
	inequality is non-determinism, which will be discussed next.</SPAN></p>
</UL>
<H2 CLASS="western"><A NAME="8.2.Non-determinism|outline"></A>8.2 Non-determinism</H2>
<p>Uncontrolled non-determinism may cause a compiler
to generate different results at different times for the same source
input.  Even uninitialized values can cause this non-determinism, as
was the case for tcc (see section 7.1.4).  It may be easiest to
modify the compiler to be deterministic (e.g., add an option to set a
random number seed and initialize formerly uninitialized data).</p>
<p>Differences that do not affect the outcome do not
affect DDC.  For example, heap memory allocations during compilation
often allocate different memory addresses between executions, but
this is only a problem if the compiler output changes depending on
the specific values of the addresses.  Roskind reports that variance
in heap address locations affected the output of at least some
versions of the Javasoft javac compiler.  He also stated that he
believed that this was a bug, noting that this behavior made port
validation extremely difficult [Roskind 1988].  Many compiler authors
avoid making compilers non-deterministic because non-determinism
makes testing difficult.</p>
<H2 CLASS="western"><A NAME="8.3.Difficulty in finding alternative compilers|outline"></A>
8.3 Difficulty in finding alternative compilers</H2>
<p>DDC requires a trusted compiler.  Unfortunately,
there may not be other compilers for the general language used to
write <I>s</I><SUB>A</SUB> or <I>s</I><SUB>P</SUB>.  Even if there
are other compilers for the general language, <I>s</I><SUB>A</SUB> or
<I>s</I><SUB>P</SUB> may use non-portable extensions.</p>
<p>Thankfully, there are many possible solutions if
<I>s</I><SUB><SPAN STYLE="font-style: normal">A</SPAN></SUB> <SPAN STYLE="font-style: normal">or
</SPAN><I>s</I><SUB><SPAN STYLE="font-style: normal">P</SPAN></SUB>
cannot be compiled by existing compilers.  The DDC technique only
requires that a second compiler with the necessary properties be
created.  An existing compiler could be modified (e.g., to add
extensions) so it can perform the necessary compilation.  Another
alternative is to create a trusted preprocessing step, possibly done
by hand; in this case c<SUB>T</SUB> would be defined as being the
preprocessing step plus the existing compiler.  It is also possible
to write a new trusted compiler from scratch.</p>
<p>In general, performance of the trusted compiler is
irrelevant, and the trusted compiler only needs to be able to compile
one program (so it need not implement many complex functions).  In
addition, there are good reasons to have a second compiler that have
nothing to do with DDC (e.g., having an alternative to switch to if
the primary compiler has fundamental problems).  Thus, this need for
a trusted compiler does not create a fundamental limitation to the
application of DDC.  Indeed, compiler developers may choose to limit
the code constructs used in a compiler (e.g., to a well-standardized
and easily-implemented subset), specifically to ease the application
of DDC.</p>
<p>It may be possible to use an older version of c<SUB>A</SUB>
as c<SUB>T</SUB>, but as noted in section 6.2, that is far less
diverse so the results are far less convincing.  Doing so also risks 
&ldquo;pop-up&rdquo; attacks, described next.</p>
<H2 CLASS="western"><A NAME="__RefHeading__37254536"></A><A NAME="8.4.Countering &ldquo;pop-up&rdquo; attacks|outline"></A>
8.4 Countering &ldquo;pop-up&rdquo; attacks</H2>
<p>A &ldquo;pop-up&rdquo; attack, as defined in this
dissertation, is where an attacker includes a self-perpetuating
attack in only <I>some</I> versions of the source code (where the
attack &ldquo;pops up&rdquo;), and not in others.  The attacker may
choose to do this if, for example, the attacker believes that
defenders only examine the source code of some versions and not
others.</p>
<p>Imagine that some trusted compiler c<SUB>T</SUB>
is used to determine that an old version of compiler c<SUB>A</SUB>&mdash;call
it c<SUB>A1</SUB>&mdash;corresponds to its source <I>s</I><SUB>A1</SUB>.
 Now imagine that an attacker cannot modify executables directly
(e.g., because they are regenerated in a separate controlled
process), but that the attacker can modify the source code of the
compiler (e.g., by breaking into its repository).  The attacker could
sneak malevolent self-perpetuating code into <I>s</I><SUB>A2</SUB>
(which is used to generate c<SUB>A2</SUB>), and then remove that
malevolent code from <I>s</I><SUB>A3</SUB>.  If c<SUB>A2</SUB> is
used to generate c<SUB>A3</SUB>, then c<SUB>A3</SUB> may be
<SPAN LANG="en-US">maliciously corrupted</SPAN>, even though <I>s</I><SUB>A3</SUB>
does not contain malevolent code and c<SUB>A1</SUB> corresponded to
<I>s</I><SUB>A1</SUB>.  Examination of every change in the source
code at each stage can prevent this, but this must be thorough;
examining only the source&rsquo;s beginning and end-state will miss
the attack.</p>
<p>The safest way to counter &ldquo;pop-up&rdquo;
attacks is to re-run <SPAN LANG="en-US">DDC</SPAN> on every
executable release before the executable is used as a compiler, using
a trusted compiler c<SUB>T</SUB>.  If that is impractical, at least
use DDC periodically and unpredictably to reduce the attack window
and increase the attacker&rsquo;s risk of discovery.</p>
<H2 CLASS="western"><A NAME="8.5.Multiple sub-components|outline"></A>
8.5 Multiple sub-components</H2>
<p>Compilers may have multiple sub-components (such
as a preprocessor, a front end, a back end, a peephole optimizer, a
linker, a loader, and one or more run-time libraries).  All of these
sub-components could be in different files and be generated by
separate recompilation steps.  If these recompilations can be done in
any order, and there is no interaction between them, we can simply
perform each step, in any order.  But if compiling a sub-component
depends on the result of recompiling another sub-component (e.g.,
because it's a run-time library that will be embedded in the
resulting executable), then these dependencies must be honored, just
as when recompiling the compiler for any other reason.  In general,
if the sequence steps matters during compilation of <I>s</I><SUB>P</SUB>
or <I>s</I><SUB>A</SUB>, then applying DDC must take sequencing into
account (the safest approach is to use the same sequence as was used
to create the original c<SUB>P</SUB> and c<SUB>A</SUB>).</p>
<p>Compiler c<SUB>T</SUB> may have multiple
components, but since its recompilation is out-of-scope of DDC, this
is irrelevant.  All that is necessary is that c<SUB>T</SUB> have the
required properties (as a suite) for DDC.</p>
<H2 CLASS="western"><A NAME="__RefHeading__33314417"></A><A NAME="8.6.Timestamps and inexact comparison|outline"></A>
8.6 Timestamps and inexact comparison</H2>
<p>One potential challenge is that, in some cases,
the compiler-under-test and the DDC result will not normally be equal
(when DDC is applied and &ldquo;equality&rdquo; is defined in the
obvious ways).  For example, some compilers generate formats (such as
the archive &ldquo;.a&rdquo; format) that embed timestamps; when
compilers are re-run, they would normally produce obtain different
time values, and thus will generate different results.  Typically the
problem is that the parent compiler is not deterministic (see section
5.7.8).</p>
<p>The timestamps of executable files are normally
<I>not</I> a problem if the executable is represented as a set of
files, each of which has a timestamp (e.g., a &ldquo;modification
time&rdquo;) as part of the file metadata maintained by an operating
system.  A timestamp cannot normally change execution in such cases,
as execution does not usually begin by executing a timestamp;
instead, execution begins by loading and executing the contents of a
file.  From there on, since file contents of c<SUB>A</SUB> and stage2
are the same, the execution of c<SUB>A</SUB> and stage2 must be
identical as long as they only consider their contents and do not
retrieve metadata about themselves (such as timestamps).  If
timestamp information <I>is</I> retrieved and acted upon by the
compiler-under-test, at least the first <SPAN STYLE="font-style: normal">occurrence
of </SPAN>this <I>must</I><SPAN STYLE="font-style: normal"> be
included in c</SPAN><SUB><SPAN STYLE="font-style: normal">A</SPAN></SUB><SPAN STYLE="font-style: normal">.
 Since the file contents of c</SPAN><SUB><SPAN STYLE="font-style: normal">A</SPAN></SUB><SPAN STYLE="font-style: normal">
and stage2 are identical, then this first occurrence must be in the
file contents of stage2.  Thus, at least this first occurrence must
be in the source code processed by DDC.  This means that </SPAN>we
only need to review the source code as used in DDC and consider
operations that <I>can</I><SPAN STYLE="font-style: normal"> retrieve
timestamp information, which are typically separate operations, to
detect if subversion via timestamps might occur.  Unfortunately</SPAN>,
this argument does not help if timestamps are embedded in the files
themselves, as many operations are based on file contents.  Are there
other solutions?</p>
<p>In some cases, the simplest solution is to simply
use executable formats that do not embed timestamps in the first
place.  For example, for tcc, the ELF &ldquo;.o&rdquo; format (which
does not embed timestamps) was used instead of directly comparing
files in the &ldquo;.a&rdquo; format (see section 7.1.2).  Once this
comparison is done, trusted tools can be used to transform formats
that can be directly compared (like &ldquo;.o&rdquo;) into formats
that have embedded timestamps (like &ldquo;.a&rdquo;).  Where
possible, this will tend to be the easiest approach.</p>
<p>If formats with embedded timestamps <I>must</I> be
used, in some cases it is possible to rig the original compilation of
c<SUB>A</SUB> and/or the DDC process so that the compilation
processes would receive equal timestamp results.  This approach
attempts to make the compilation process deterministic.</p>
<p>Finally, in certain cases, &ldquo;equality&rdquo;
may need to redefined, essentially allowing inexact equality. 
Comparisons need not require an identical result as long as it can be
shown that the differences do not cause a change in behavior.  This
might occur if, for example, outputs included embedded compilation
timestamps.  Showing that differences in results do not cause
differences in the functionality, in the presence of an adversary, is
possible but can be extremely difficult.  An alternative is to first
work to make the results identical, and then show that the steps
leading from that trusted point do not introduce an attack.</p>
<H2 CLASS="western"><A NAME="8.7.Interpreters and recompilation dependency loops|outline"></A>
8.7 Interpreters and recompilation dependency loops</H2>
<p>In some cases, what is executed bears a more
complicated relationship to source code than has been shown so far,
but the trusting trust attack can still be countered using DDC.</p>
<p>It does not matter if the executable is a sequence
of native machine code instructions or something else (such as an
&ldquo;object file&rdquo;, &ldquo;byte code&rdquo;, or non-native
instructions).  All that is required is that there be some
environment that can execute the instructions.  If there is a concern
that some parts of the environment may be corrupted, consider those
parts as part of the compiler (this requires their source code) and
apply DDC.</p>
<p>Many language implementations do not generate a
separate executable that is run later.  They may read and immediately
execute source code (call it <I>s</I><SUB>E</SUB>) a line at a time,
or they may compile source code <I>s</I><SUB>E</SUB> to an executable
(often a specialized byte code) each time the source code is run and
not save the executable for later use.  In these cases, the trusting
trust attack does not directly apply to <I>s</I><SUB>E</SUB>, since
there is no separate executable in which malicious code can be
hidden.  However, these implementations tend to be compiled
executables (for speed); any language implementations that are
compiled <I>are</I> <SPAN STYLE="font-style: normal">vulnerable to
the trusting trust attack, and DDC still applies to them.</SPAN></p>
<P CLASS="western" STYLE="font-style: normal">As noted in section 4.5,
DDC can be applied to compilers that recompile themselves (as a
special case).  When compilers do not recompile themselves, DDC can
be repeatedly applied to each ancestor compiler, from oldest to
newest, to demonstrate that each of the ancestor compilers are not
corrupt.  If there is a loop of compilers (e.g., compiler c<SUB>A</SUB>
is used to generate compiler c<SUB>B</SUB>, and c<SUB>B</SUB> is used
to generate the next version of compiler c<SUB>A</SUB>), DDC can
still be used; arbitrarily choose a compiler to check, and &ldquo;break
the loop&rdquo; using an alternative trusted compiler.</p>
<H2 CLASS="western"><A NAME="__RefHeading__34266612"></A><A NAME="8.8.Untrusted environments and broadening DDC application|outline"></A>
8.8 Untrusted environments and broadening DDC application</H2>
<p>The environment of c<SUB>A</SUB> may be untrusted.
 As noted earlier, an attacker could place the trigger mechanism in
the compiler&rsquo;s supporting infrastructure such as the operating
system kernel, libraries, or privileged programs.  Triggers would be
especially easy to place in assemblers, linkers, and loaders.  But
even unprivileged programs might be enough to subvert compilations;
an attacker could create a program that exploited unknown kernel
vulnerabilities.</p>
<p>The <SPAN LANG="en-US">DDC</SPAN> technique can be
used to cover these cases as well.  Simply redefine the &ldquo;compiler&rdquo;
c<SUB>A</SUB> to include the set of all components to be checked, and
not just the traditional interpretation of the term &ldquo;compiler&rdquo;.
 This could even include the set of all software that runs on that
machine, including all software run at boot time.  The source code
for all this software to be checked would still be termed <I>s</I><SUB><SPAN STYLE="font-style: normal">A</SPAN></SUB>,
but <I>s</I><SUB>A</SUB> would now be much larger.  Consider
obtaining c<SUB>A</SUB> and <I>s</I><SUB><SPAN STYLE="font-style: normal">A</SPAN></SUB>
from some read-only medium (e.g., CD-ROM or inactive hard drive); do
not trust this redefined untrusted c<SUB>A</SUB> to produce itself
(e.g., by copying c<SUB>A</SUB>&rsquo;s files using c<SUB>A</SUB>)! 
Then, use DDC on a different trusted environment to check c<SUB>A</SUB>.
 Depending on the scope of this new c<SUB>A</SUB> and <I>s</I><SUB>A</SUB>,
this might regenerate the boot software, operating system, various
application programs, and so on.  If DDC can regenerate the original
c<SUB>A</SUB>, then the entire set of components included in c<SUB>A</SUB>
are represented by the entire set of source code in <I>s</I><SUB><SPAN STYLE="font-style: normal">A</SPAN></SUB>.
 There is still a risk that c<SUB>A</SUB> includes malicious code,
since DDC only shows that c<SUB>A</SUB> corresponds to <I>s</I><SUB><SPAN STYLE="font-style: normal">A</SPAN></SUB>,
but this can be countered by reviewing <I>s</I><SUB><SPAN STYLE="font-style: normal">A</SPAN></SUB>.
 If c<SUB>A</SUB> or its environment might have code that shrouds <I>s</I><SUB><SPAN STYLE="font-style: normal">A</SPAN></SUB>
(so that the <I>s</I><SUB>A</SUB> viewed is not the actual <I>s</I><SUB>A</SUB>),
always use a separate trusted system to view or print <I>s</I><SUB><SPAN STYLE="font-style: normal">A</SPAN></SUB>
when reviewing <I>s</I><SUB><SPAN STYLE="font-style: normal">A</SPAN></SUB>.</p>
<p>An alternative approach to countering
potentially-malicious environments is to maximize the amount of
software that is used in source code form, without storing an
executable.  This is already done with many &ldquo;scripting&rdquo;
languages (such as typical implementations of Python and PHP).  It
can, however, also be done with languages that are typically
compiled.  The original developer of tcc demonstrated that the tcc C
compiler could be booted with a relatively small infrastructure; the
compiler could then recompile the operating system (including the
Linux kernel) at boot time and then run the results.  DDC could still
be used to examine whatever is stored as an executable for the
underlying environment (e.g., the scripting language implementation
or boot-time compiler).</p>
<p>A resourceful attacker might attack the system
performing <SPAN LANG="en-US">DDC</SPAN> (e.g., over a network) to
subvert its results.  If this is a concern, <SPAN LANG="en-US">DDC</SPAN>
should be done on isolated system(s).  Ideally, the systems used to
implement <SPAN LANG="en-US">DDC</SPAN> should be rebuilt from
trustworthy media, not connected to external networks at all, and not
run any programs other than those necessary for DDC.</p>
<H2 CLASS="western"><A NAME="8.9.Trusted build agents|outline"></A>8.9 Trusted
build agents</H2>
<p>Few will want to perform <SPAN LANG="en-US">DDC</SPAN>
themselves.  Organization(s) trusted by many others (such as
government agencies or trusted organizations sponsored by them) could
perform DDC on a variety of important compiler executables, as they
are released, and report the cryptographic hash values of the
executables and their corresponding source code.  The source code
would not need to be released to the world, so this technique even
could be applied to proprietary software (though without the source
code, the information that they correspond is much less useful). 
This would allow others to quickly check if the executables they
received were, in fact, what their software developers intended to
send.  If someone did not trust those organizations, they could ask
for another organization they did trust to do this, or do it
themselves if they can get the source code.  Organizations that do
checks like this have been termed &ldquo;trusted build agents.&rdquo;
[Mohring2004]</p>
<H2 CLASS="western"><A NAME="8.10.Application problems with current distributions|outline"></A>
8.10 Application problems with current distributions</H2>
<p>There are a number of &ldquo;distributions&rdquo;
that combine open source software from a large variety of different
origins, integrate them, and distribute the suite to end users.  In
theory, these should be easy to test using DDC.  Efforts to recreate
the GCC compiler distributed with Fedora, even with help from Red
Hat, showed that this is not always easy.</p>
<P CLASS="western" STYLE="font-style: normal">Accurately re-creating
a distribution&rsquo;s executable files requires extremely detailed
information about how the compiler was generated, but distributors do
not always record this information.  Some of this detailed
information can be obtained by attempting to apply DDC and examining
the differences, e.g., compiling GCC with a different pathname for
intermediate results, and comparing the results, will quickly reveal
the original pathname.  However, in some cases, the difference can be
detected by DDC, but the cause of the difference may not be obvious.</p>
<p>In some cases, obtaining the correct parent <I>s</I><SUB>P</SUB>
can be difficult.  Distributions typically release their software as
a large set of interrelated &ldquo;packages&rdquo;, and most
distributions distribute pre-compiled executables of their packages. 
During development of a new distribution version, the compiler,
libraries, and applications are all updated, sometimes multiple
times.  Once an executable (compiler or not) is created, it is frozen
and tested.  There is a strong incentive to <I>not</I><SPAN STYLE="font-style: normal">
recompile the entire operating system when a compiler is revised, for
if a problem occurs afterwards, it can be difficult to determine
where the problem is.  In contrast, if packages are recompiled and
tested one at a time, then problems can be immediately pinpointed. 
As a result, the practice of incrementally testing and releasing
executable files can lead to different packages being compiled </SPAN><SPAN STYLE="font-style: normal">by
many different versions of a compiler within the same distribution. 
If the compiler is modified several times during the distribution&rsquo;s
release process, some packages may be </SPAN><SPAN STYLE="font-style: normal">compiled
with a version of the compiler that is neither the previous released
version nor the final released version version&mdash;but is an
intermediate instead.  What is more, compiler executables may
incorporate material from other packages, which were themselves
compiled with different versions of the compiler.</SPAN></p>
<P CLASS="western" STYLE="font-style: normal">Distributions could
easily make minor modifications to their processes to make DDC easier
to apply.  Recording the information necessary to accurately
reproduce an executable is one approach.  Another approach is to
freeze the compiler at an earlier stage, and recompile everything so
the executables are compiled using a single known version of the
compiler.  Now that DDC has been demonstrated by this dissertation,
compiler suppliers have a stronger rationale for recording the
information necessary to recreate executables.</p>
<P CLASS="western" STYLE="font-style: normal">There are other issues
with current Linux distributions that can be easily worked around for
DDC, but can cause trouble for the unwary:</p>
<UL>
	<LI VALUE=1><P CLASS="list-1-western"><SPAN STYLE="font-style: normal">Many
	Linux distributions use &ldquo;prelink&rdquo;, which modifies the
	files of executable commands and libraries of a running system to
	speed their later invocation.  This is not a problem as long as the
	files are captured and compared using DDC </SPAN><I>before</I><SPAN STYLE="font-style: normal">
	they are changed</SPAN> by prelink.</p>
	<LI><P CLASS="list-1-western">Many Linux distributions use &ldquo;ccache&rdquo;,
	a system that caches compilation results and quickly replies with
	previous results if the inputs and compiler are &ldquo;the same&rdquo;.
	 If the caching system incorrectly determines that the compiler
	being invoked is &ldquo;the same&rdquo;, but is in fact different,
	then the wrong results will be used.  This would invalidate the
	results if this mistake occurred during DDC.  This risk is easily
	eliminated by disabling such caches when performing DDC.</p>
</UL>
<H2 CLASS="western"><A NAME="__RefHeading__34185384"></A><A NAME="8.11.Finding errors and maliciously misleading code|outline"></A>
8.11 Finding errors and maliciously misleading code</H2>
<p>DDC simply shows that source code corresponds to
executable code (given some assumptions).  Knowing that source code
corresponds with an executable is valuable, since software developers
are far more likely to review source code than an executable.  At the
very least, developers must review some source code when they are
preparing to change it.</p>
<p>This does not make source code analysis trivial;
it may be difficult to find intentional vulnerabilities in large and
complex software.  But it does tend to make it easier to find
intentional vulnerabilities.  In particular, e<SPAN STYLE="font-style: normal">rrors
can be detected and resolved by traditional means as discussed in
section </SPAN><SPAN STYLE="font-style: normal">2.4</SPAN><SPAN STYLE="font-style: normal">.</SPAN></p>
<p>But is it enough to ensure that the source code
and executable correspond?  An attacker who can modify compiler
source code could insert <I>maliciously misleading code</I><SPAN STYLE="font-style: normal">,
that is, code</SPAN> that is designed to <I>appear</I><SPAN STYLE="font-style: normal">
to be correct but actually does something malicious instead.  The
Obfuscated&nbsp;V contest [Horn2004],</SPAN><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">
the Underhanded&nbsp;C contest [Binghamton2005], and the Linux kernel
attack (discussed in section </SPAN></FONT><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">2.6</SPAN></FONT><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">)
all </SPAN></FONT><SPAN STYLE="font-style: normal">show that it is
possible to write maliciously misleading code.  Williams also
discusses methods for hiding code sot that it does not appear to be
malicious [Williams2009].</SPAN></p>
<p><SPAN STYLE="font-style: normal">The good news is
that these public examples also suggest that simple measures can
counter many of them.  Some examples use misleading formatting (e.g.,
text that looks like a comment but is not, or text that is highly
indented so some text editors will not show it); these can be
countered by using a &ldquo;pretty printer&rdquo; to reformat source
code before review.  Some examples exploit buffer </SPAN><SPAN STYLE="font-style: normal">overflows;
these can be countered by using languages or tools that prevent
buffer overflows.  Some examples use widely-known &ldquo;common
mistakes&rdquo; for the given programming language (e.g., mistaking
&ldquo;=&rdquo; for &ldquo;==&rdquo; in C); these can be countered by
training human reviewers and using tools to highlight or forbid
&ldquo;confusing&rdquo; constructs.  In the longer run, languages
could be designed or modified to make hiding more difficult and/or
make common mistakes less likely.  For </SPAN><SPAN STYLE="font-style: normal">example,
Java was specifically designed to make certain common errors in C
impossible or less likely.</SPAN><FONT FACE="Times New Roman, serif"><SPAN STYLE="font-style: normal">
 In any case, implementing the &ldquo;trusting trust&rdquo; attack
requires some subtle programming; the probability of its happening
&ldquo;by accident&rdquo; is vanishingly small, and this makes it
more difficult to hide as a simple error such as invoking the wrong
operator.  Tools could be developed to search for maliciously
misleading code, yet not released (as source code, executable, or a
service) to the public.  Such unreleased tools could make it
difficult for attackers to be confident that their attacks will go
undetected.</SPAN></FONT></p>
<H2 CLASS="western"><A NAME="8.12.Hardware|outline"></A>8.12 Hardware</H2>
<P CLASS="western" STYLE="margin-bottom: 0.2in">DDC can be extended
to hardware, including computer hardware, to counter the risk that
hardware tools are intentionally subverted to produce later subverted
hardware in a self-perpetuating manner.</p>
<P CLASS="western" STYLE="margin-bottom: 0.2in">However, a few
observations must be made.  First, what some people call &ldquo;hardware&rdquo;
is actually software.  For example, all CPU microcode and a
computer&rsquo;s basic input/output system (BIOS) originates as
software.  Since they are software, they can be handled the same way
as any other software, including using DDC as described in the rest
of this dissertation.</p>
<P CLASS="western" STYLE="margin-bottom: 0.2in">Second, DDC is not
necessary to counter direct subversion of hardware components, or to
counter subversion of hardware by software in a way that does not
self-perpetuate:</p>
<UL>
	<LI><P CLASS="list-1-western">If the threat is that a human will
	insert malicious logic into a human-readable hardware design, then
	one countermeasure is to review the designs, making sure that what
	is used in later steps is what was reviewed.</p>
	<LI><P CLASS="list-1-western">If the threat is that a tool&rsquo;s
	output may be subverted after it has left the tool, then if the tool
	can be made to be deterministic, one countermeasure is to rerun that
	tool and comparing the new results with the previous results to
	reveal any differences.  In multi-step processes, rerun each step in
	sequence and determine if there is a difference.  In addition,
	consider comparing the actual results with the expected results<A CLASS="sdfootnoteanc" NAME="sdfootnote18anc" HREF="#sdfootnote18sym"><SUP>18</SUP></A>.
	 Performing such comparisons of hardware may require an &ldquo;equality&rdquo;
	operator; as discussed below, determining if hardware is equal can
	be more difficult than for software.</p>
	<LI><P CLASS="list-1-western">If the threat is that a software
	executable may insert malicious logic when it processes a hardware
	design, one countermeasure is to review the software tool&rsquo;s
	source code.  If the program&rsquo;s executable may have been
	corrupted, but the source code is correct and the generation process
	for the executable is trusted, simply recompile the tool with the
	same circumstances as when it was last compiled and see if the
	resulting executable is identical.</p>
</UL>
<P CLASS="western" STYLE="margin-bottom: 0.2in">There is another
threat, however, that is rarely discussed: <I>What if hardware has
been subverted so that it intentionally subverts the hardware
implementation process of other (later) hardware, in a
self-perpetuating way</I>?<SPAN STYLE="font-style: normal">  </SPAN>At
this time, such indirect attacks seem far less likely:</p>
<UL>
	<LI><P CLASS="list-1-western">Undetected hardware subversion of
	another hardware component&rsquo;s development process is harder to
	do than for software.  For software this kind of subversion tends to
	be easier to do because the attacking software is typically at a
	similar level of abstraction.  In contrast, hardware tools used to
	implement other hardware are often at a much lower level of
	abstraction, making it more difficult to create useful automated
	triggers and payloads in hardware tools that have a high probability
	of being useful in attacking the hardware design or implementation
	process, while having a low probability of being detected.</p>
	<P CLASS="list-1-western">It is particularly challenging to create
	hardware tools that intentionally and undetectably subvert only
	certain hardware made with them if the tool lacks a computer.  It is
	possible to create hardware tools that subvert only certain products
	made with them and not others, e.g., to insert lower-quality or
	subtly damaged tools so that the tools will work fine in many cases
	yet subtly fail when making the hardware to be subverted.  However,
	this is similar to ordinary quality control problems, and might be
	detected by robust quality control and testing processes (though
	there is no guaranee of this).  In addition, there are usually grave
	limits on the kinds of triggers and payloads that can be used
	without using a computer.  In some cases an attacker could add a
	computer where one is not necessary or expected.</p>
	<LI><P CLASS="list-1-western">There is often little need to
	implement such a complicated attack on hardware.  There are many
	other difficult-to-counter attacks at the hardware level which are
	much easier to perform.</p>
</UL>
<P CLASS="western" STYLE="margin-bottom: 0.2in">Still, if undetected
subversion of hardware by other hardware is considered a threat, then
DDC <I>can</I><SPAN STYLE="font-style: normal"> be used to help
counter it, as long as the prerequisites of DDC are met.</SPAN></p>
<P CLASS="western" STYLE="margin-bottom: 0.2in; font-style: normal">Countering
this attack may be especially relevant for 3-D printers that can
reproduce many of their own parts.  An example of such a 3-D printer
is the Replicating Rapid-prototyper (RepRap), a machine that can
&ldquo;print&rdquo; many hardware items including many of the parts
required to build a copy of the RepRap [Gaudin2008].  The primary
goal of the RepRap project, according to its project website, is to
&ldquo;create and to give away a makes-useful-stuff machine that,
among other things, allows its owner [to] cheaply and easily&hellip;
make another such machine for someone else&rdquo; [RepRap2009].</p>
<P CLASS="western" STYLE="margin-bottom: 0.2in; font-style: normal">Many
hardware components do not present much of an opportunity for
creating self-perpetuating undetectable subversion (the trusting
trust attack).  Large physical components that cannot be programmed
can often be examined directly, and often do not involve the
separation of &ldquo;source&rdquo; and &ldquo;executable&rdquo; that
permit the hidden attacks countered by DDC.</p>
<P CLASS="western" STYLE="margin-bottom: 0.2in"><SPAN STYLE="font-style: normal">Unfortunately,
an integrated circuit (IC), whether it is part of a 3-D printer or
not, </SPAN><I>does</I><SPAN STYLE="font-style: normal"> present such
a possibility.  ICs are typically very complex, difficult to analyze
after-the-fact, and humans often </SPAN><I>do</I><SPAN STYLE="font-style: normal">
design and implement them using abstractions instead of directly
examining the result.  Thus, ICs are especially easy to use for
hardware implementations of the trusting trust attack.</SPAN></p>
<P CLASS="western" STYLE="margin-bottom: 0.2in"><SPAN STYLE="font-style: normal">In
theory, DDC can be applied to ICs to detect a hardware-based trusting
trust attack.  </SPAN>However<SPAN STYLE="font-style: normal">, note
that there are some important challenges when applying DDC to ICs:</SPAN></p>
<UL>
	<LI><P CLASS="list-1-western"><I>Trusted compiler.</I><SPAN STYLE="font-style: normal">
	 For DDC to work with hardware there must be a separate trusted
	compiler.  Depending on what is being tested, it may be possible to
	implement this using a combination of hardware compiler, simulated
	(resulting) chip, and a chip simulator.</SPAN></p>
</UL>
<UL>
	<LI><P CLASS="list-1-western" ALIGN=JUSTIFY STYLE="background: transparent; line-height: 200%; widows: 2; orphans: 2; page-break-before: auto; page-break-after: auto">
	<I>Equality operator</I>.  For DDC to work on hardware, it needs an
	&ldquo;equality&rdquo; operator.  An equality operator may be
	particularly challenging to implement for complex ICs, but may be
	possible to gather enough information <SPAN STYLE="font-style: normal">to</SPAN>
	determine if an IC was &ldquo;equal to&rdquo; another IC (real or
	virtual) with an acceptable level of probability.  Tools such as a
	scanning electron microscope, scanning transmission electron
	microscope (STEM), focused ion beam, and/or a tool that performed
	optical phase array shifting might be able to gather enough
	information to justify a claim of equality, especially when used
	with varying angles and/or positions.  These might be more
	successful if there were supplemented with other test techniques,
	such as techniques that check electrical connectivity in a variety
	of locations or techniques that performed parity checks of stored
	data.  It might be possible to use superposition to detect different
	phase changes through diffraction, but this may be <I>too</I>
	sensitive a test, yielding many false difference reports.  Indeed,
	real ICs typically have small defects of various kinds, so any
	equality operator on ICs risks producing false reports that ICs are
	different even when they are, in practice, the same.</p>
	<LI><P CLASS="list-1-western" ALIGN=JUSTIFY STYLE="background: transparent; line-height: 200%; widows: 2; orphans: 2; page-break-before: auto; page-break-after: auto">
	<I>Legal challenges for information access</I>.  DDC requires
	detailed information, and for ICs the necessary information is often
	difficult to obtain legally.  In particular, DDC requires that the
	correct hardware results be known, so that it can be compared to the
	real hardware.  This need for detailed information is less
	challenging for software; software developers would often find it
	unacceptable if they couldn&rsquo;t see the bytes that their
	compilers produced.  In contrast, in IC development large amounts of
	IC data (including the actual layout of the ICs) is often kept
	proprietary from even the chip designers.  ICs may be routinely
	modified in their many manufacturing steps in ways not disclosed to
	the chip designers.  For example, many IC designers use libraries
	written using Verilog or Very High Speed Integrated Circuits (VHSIC)
	hardware description language (VHDL), but the designs of these
	libraries (as shown by their design tools) may not be what are
	normally used on ICs produced with those libraries (in such cases
	the &ldquo;real&rdquo; library may be considered proprietary by the
	library creator).  Many ICs are built out of intellectual property
	(IP) cores from various organizations worldwide, and designers may
	be forbidden (by contract) to see detailed information about the
	implementation of certain IP cores.  In addition, because of quantum
	mechanical effects, at smaller scales there are corrections that
	some companies will do to IC layouts or wiring that designers are
	forbidden (by contract) to see.  Many chip designers are unaware
	that what is actually on the ICs they designed may be intentionally
	different from what they designed; this lack of knowledge may be
	exacerbated because many IC designers are not near the foundries
	(and thus have fewer opportunities to discover these differences). 
	Should the use of DDC become important for ICs, such detailed
	information would need to be made available to someone who could
	perform DDC.</p>
</UL>
<p>Finally, it is important to note that any
application of DDC to hardware will only apply to that specific
hardware component.  Thus, if IC #1 passes a DDC test, this does not
mean that IC #2 will pass it, even if both ICs were created at the
same time.  This is true for software as well, but it is much easier
to determine if two executables are identical.</p>
<p>Nevertheless, it appears that DDC <I>could</I><SPAN STYLE="font-style: normal">
be applied to hardware, given the caveats and limitations listed
above.</SPAN></p>
<H2 CLASS="western"><A NAME="8.13.Complex libraries and frameworks|outline"></A>
8.13 Complex libraries and frameworks</H2>
<p>Modern programming languages typically include
large programming libraries and frameworks.  Reviewing all of this
source code, if it were required, can be very difficult.  What is
worse, if the entirety of these large libraries and frameworks must
be implemented by a trusted compiler, there may be few or no
alternative compilers that can be used as a trusted compiler.</p>
<p>Thankfully, this does not render DDC useless.  The
trusted compiler only needs to implement the functionality necessary
to compiler the parent compiler; it does <I>not</I><SPAN STYLE="font-style: normal">
need to implement all of the features of the parent nor the
compiler-under-test.  In practice, compilers typically do </SPAN><I>not</I><SPAN STYLE="font-style: normal">
need most of the functions of the libraries and frameworks they
support.  In addition, compiler writers may decide to limit the
functionality required to compile the compiler (e.g., so that the
compiler is easier to port to a new platform or so that there are
more trusted compilers that can be used for DDC).</SPAN></p>
<H2 CLASS="western"><A NAME="8.14.How can an attacker counter DDC_|outline"></A>
8.14 How can an attacker counter DDC?</H2>
<p>An important practical challenge for a defender is
to ensure that an attacker cannot counter DDC as a technique for
detecting the trusting trust attack.  To analyze this challenge,
consider DDC from the point-of-view of an attacker who intends to
perform a trusting trust attack <I>and</I><SPAN STYLE="font-style: normal">
avoid detection via DDC.  (This viewpoint will also address what
happens when a trusted compiler is subverted.)</SPAN></p>
<p>Fundamentally, an attacker must make at least one
of the DDC assumptions false to prevent detection by DDC.  As an
extreme example, imagine that the attacker has direct control over
the DDC process.  In this case, the attacker could falsify the
assumption that stage2 is generated by the DDC compilation process,
by allowing the DDC process to complete, and then replacing the
generated stage2 with the compiler-under-test.  This is an extreme
example, however; if the execution of the DDC process is protected
(so that the attacker cannot directly control it), an attacker will
have difficulty falsifying many of of the DDC assumptions.</p>
<p>One possibility would be to embed a subversion in
the environment so that the compiler-under-test that is extracted and
compared is <I>not</I> the program that is actually run.  This would
falsify the assumption that the executable being tested is the one
that is actually used.  An environment can perform this
slight-of-hand by storing the &ldquo;real&rdquo; compiler executable
(e.g., in the filesystem) where it will be run, but providing a
different &ldquo;clean&rdquo; executable when it is extracted for
read-only use.  This slight-of-hand can be countered by shutting down
the potentially-subverted environment and extracting the executable
directly from storage.  Alternatively, an environment can store the
&ldquo;clean&rdquo; executable in the filesystem, yet switch or
modify the executable that is actually run.  One way to counter this
latter attack is to expand the definition of &ldquo;compiler&rdquo;
to include more of the environment, as described in section 8.8. 
This requires more source code, but would reduce the number of
components in the environment where these attacks can occur.  As the
number of environmental components covered by DDC increase, the fewer
locations an attacker can use to hide this subversion.  Even worse
(from an attacker&rsquo;s view), the attacker will often not know
which environmental components will be checked this way by the
defender, and implementing this trick is more difficult in some
components than others.</p>
<p>From an attacker&rsquo;s viewpoint, one of the
best ways to overcome the DDC technique is to <I>also</I> subvert the
trusted compiler and/or environment that will be used in DDC, with
exactly the same triggers and payloads that are included in the
subverted compiler-under-test.  When this occurs, DDC will produce
the same results.  However, the defender has a substantial advantage
in this case: the attacker typically does <I>not</I> typically know
ahead of time which compiler(s) and environment(s) will be used as
trusted compilers or environments in DDC.  Indeed, the defender might
not have made such a selection yet. 
</p>
<p>Thus, to subvert the trusted compiler or
environment ahead of time, the attacker must subvert many compilers
and environments, with the same subversions that are also inserted
into the compiler-under-test.  What is worse, these other compilers
and environments must include trusting trust attacks on both
themselves (so that they perpetuate) and on other compilers (so they
can counter their use in DDC).  Since compilers may be used as
trusted compilers to check on each other, and an attacker will often
not know which compilers will be used in which role, in practice an
attacker would need to insert triggers and payloads into a large set
of compilers and/or environments that affect the entire set of
compilers and/or environments.  Note that these subversions must have
exactly the <I>same</I> effect when compiling the parent compiler and
compiler-under-test; even if the trusted compiler is subverted&mdash;if
those subversions will have a different effect during DDC, then that
difference will be detected by DDC.  If the attacker fails to subvert
or maintain the subversion of the specific trusted compiler(s) and
trusted environment(s) used by the defender for DDC, and the other
DDC assumptions also hold, the trusting trust attack will be revealed
to the defender.  The defender may use multiple trusted compilers and
environments and apply DDC multiple times; in such cases, the
attacker must successfully subvert <I>all</I> of them to avoid
detection.  The defender can even choose to build an internal
compiler and/or environment for DDC that isn&rsquo;t available to the
public; the defender could even keep their <I>existence</I><SPAN STYLE="font-style: normal">
a secret (at least until they are used for DDC). In short, it be
extremely difficult for an attacker to subvert all these systems; an
attacker would need to learn of their existence and successfully
subvert all of them before the defender uses them for DDC.</SPAN></p>
<p><SPAN STYLE="font-style: normal">In many computer
security problems the attacker tends to have an advantage over the
defender, because the defender must defend many components while the
attacker only </SPAN><SPAN STYLE="font-style: normal">needs to
subvert one or a few components.  In this case, however, the </SPAN><I>defender</I><SPAN STYLE="font-style: normal">
has the advantage; the attacker must subvert a potentially large set
of compilers and environments, while the defender merely needs to
</SPAN><SPAN STYLE="font-style: normal">protect the one or the few
that are actually used for DDC.  From the defender&rsquo;s
point-of-view this is a welcome change.</SPAN></p>
<H1 CLASS="western"><A NAME="9.Conclusions and ramifications|outline"></A>
9 Conclusions and ramifications</H1>
<p>This dissertation has shown that the trusting
trust attack can be countered.  Before this work began, the trusting
trust attack had almost become an axiom of computer security, since
many believed a successful attack to be undetectable.  Although
others had posted the idea of DDC before this work began, it had only
been described in a few sentences at most, and only in obscure
places.  DDC had not even been given a name when this work began. 
This work has explained DDC in detail, provided a formal proof (with
formalized assumptions), and demonstrated its use (including with a
widely-used C compiler).</p>
<p>The DDC technique only shows that the source code
corresponds with a given compiler&rsquo;s executable, i.e., that
nothing is hidden.  The executable may have errors or malevolent
code; DDC simply ensures that these <I>can</I> be found by examining
the source code.  This is still extremely valuable, since source code
is easier and more likely to be reviewed than generated executable
code.  Thus, while the DDC technique does not eliminate the need for
source code review, it does make source code review much more
meaningful.</p>
<p>Passing the DDC test when the trusted compiler and
environment is not proven is not a mathematical proof, but more like
a legal one.  The DDC technique assumes that the DDC process
(including trusted compiler c<SUB>T</SUB> and the environments) does
not have triggers or payloads that apply to the source code being
compiled.  In most practical cases, this assumption will not be
formally proved.  However, the DDC test can be made as rigorous as
desired by decreasing the likelihood (e.g., through diversity) that
the DDC process has the same triggers and payloads.  Multiple diverse
DDC tests, using different trusted compilers, can strengthen the
evidence even further.  Thus, a defender can easily make it extremely
unlikely that an attacker could avoid detection by the DDC technique.</p>
<p>The DDC technique has many strengths: it can be
completely automated, applied to any compiled language (including
common languages like C), and does not require the use of complex
mathematical proof techniques.  Second-source compilers and
environments are desirable for other reasons, so they are often
already available, and if not they are also relatively easy to create
(since high performance is unnecessary).  Some unintentional compiler
defects are also detected by the technique.  The DDC technique can be
easily expanded to cover all of the software running on a system
(including the operating system kernel, bootstrap software,
libraries, microcode, and so on) as long as its source code is
available.</p>
<p>As with any approach, the DDC technique has
limitations.  The source code for the compiler being tested and its
parent must be available to the tester, and the results are more
useful to those who have access to the source code of what was tested
(since only they can verify that the source code does not include
malicious code).  This means that the DDC technique is most useful
for countering the trusting trust attack when applied to open source
software and other software whose source code is publicly available<A CLASS="sdfootnoteanc" NAME="sdfootnote19anc" HREF="#sdfootnote19sym"><SUP>19</SUP></A>.
 Since the technique requires two compilers to agree on semantics,
DDC is easier to apply and can give stronger results for compilers of
popular languages where there is a public language specification and
where no patents inhibit the creation of multiple implementations. 
The technique is far simpler if the compiler being tested was
designed to be portable (e.g., by not using nonstandard extensions). 
DDC can be applied to microcode and hardware specification data as
well.  DDC can be applied to hardware, but it requires an &ldquo;equality&rdquo;
operation (a challenging operation to implement on ICs) and detailed
information that is often unavailable for ICs.</p>
<p>Future potential work includes recompiling an
entire operating system as the compiler-under-test c<SUB>A</SUB>,
relaxing the requirement for being exactly equal, and demonstrating
<SPAN LANG="en-US">DDC</SPAN> with a more diverse environment (e.g.,
by using a much older operating system and different CPU
architecture).</p>
<p>The DDC technique does have implications for
compiler and operating system suppliers.  For example, suppliers
should record all the detailed information necessary to recompile
their compiler/operating system and produce the same bit sequence,
and avoid using nonstandard language extensions in the lowest-level
components.  This would make it easier to apply DDC later.  Suppliers
should consider releasing their software source code, at least to
certain parties, so that others can check that the source and
executable correspond.  Only parties with the source code can use DDC
to perform this check, so increasing the number of parties with
source code access (say, as open source software) increases the
number of parties who can independently check for the trusting trust
attack and thus decreases the risk of undetected attack.  Suppliers
should follow the guidelines as described further in appendix D.</p>
<p>The DDC technique does have potential policy
implications.  To protect themselves and their citizenry, governments
could require that compilers or compilation environments may only be
used to develop critical software (such as those in critical
infrastructure and/or national security systems) if they meet
requirements that enable governments to perform DDC.  For example,
governments could require that they receive all of the source code
(including build instructions) necessary to rebuild such compilers or
compilation environments, and governments could require that this
source code must be sufficiently portable so that the compiler or
environment can be built with an alternative trusted compiler and
environment.  Multiple compilers are easier to acquire for
standardized languages, so governments could insist on the use of
standard languages to implement both critical software and the
compilers used to generate code for them.  Such languages would be
preferably implemented by multiple vendors, which is much easier to
do if the languages are specified in open standards not encumbered by
patents, which could also be mandated.  Governments could eliminate
software patents (in cases where they permit them) to eliminate one
inhibition for creating alternative trusted compilers (for more on
software patents, see [Klemens2008], [Bessen2004], [Bessen2008], and
[End2008]).  Organizations (such as governments) could even establish
groups to perform DDC and report the cryptographic hashes of the
executables and source that correspond.</p>
<p>In conclusion, the trusting trust attack can be
detected and effectively countered by the Diverse Double-Compiling
(DDC) technique.</p>
<OL TYPE=A>
	<LI><H1 CLASS="western" STYLE="page-break-before: always; page-break-after: auto"><A NAME="__RefHeading__33231504"></A><A NAME="1.Lisp results|outline"></A>
	Lisp results</H1>
</OL>
<p>This appendix presents the detailed results of
applying DDC to the Lisp compilers described in [Goerigk2002].  See
section 7.2 for more information.  This appendix primarily uses
traditional S-expression notation; see
<A HREF="http://www.dwheeler.com/readable">http://www.dwheeler.com/readable</A>
for information on alternative notations for S-expressions that are
easier to read.</p>
<OL TYPE=A>
	<OL>
		<LI><H2 CLASS="western"><A NAME="1.1.Source code for correct compiler|outline"></A>
		Source code for correct compiler</H2>
	</OL>
</OL>
<p>The following is the source code for the &ldquo;correct&rdquo;
compiler, from [Goerigk2002].  It is released under the GNU General
Public License (GPL):</p>
<PRE CLASS="western">((DEFUN OPERATORP (NAME)
  (MEMBER NAME
   '(CAR CDR CADR CADDR CADAR CADDAR CADDDR 1- 1+ LEN SYMBOLP CONSP ATOM CONS
     EQUAL APPEND MEMBER ASSOC + - * LIST1 LIST2)))
 (DEFUN COMPILE-FORMS (FORMS ENV TOP)
  (IF (CONSP FORMS)
   (APPEND (COMPILE-FORM (CAR FORMS) ENV TOP)
    (COMPILE-FORMS (CDR FORMS) ENV (1+ TOP)))
   NIL))
 (DEFUN COMPILE-FORM (FORM ENV TOP)
  (IF (EQUAL FORM 'NIL) (LIST1 '(PUSHC NIL))
   (IF (EQUAL FORM 'T) (LIST1 '(PUSHC T))
    (IF (SYMBOLP FORM)
     (LIST1 (LIST2 'PUSHV (+ TOP (1- (LEN (MEMBER FORM ENV))))))
     (IF (ATOM FORM) (LIST1 (LIST2 'PUSHC FORM))
      (IF (EQUAL (CAR FORM) 'QUOTE) (LIST1 (LIST2 'PUSHC (CADR FORM)))
       (IF (EQUAL (CAR FORM) 'IF)
        (APPEND (COMPILE-FORM (CADR FORM) ENV TOP)
         (LIST1
          (CONS 'IF
           (LIST2 (COMPILE-FORM (CADDR FORM) ENV TOP)
            (COMPILE-FORM (CADDDR FORM) ENV TOP)))))
        (IF (OPERATORP (CAR FORM))
         (APPEND (COMPILE-FORMS (CDR FORM) ENV TOP)
          (LIST1 (LIST2 'OPR (CAR FORM))))
         (APPEND (COMPILE-FORMS (CDR FORM) ENV TOP)
          (LIST1 (LIST2 'CALL (CAR FORM))))))))))))
 (DEFUN COMPILE-DEF (DEF)
  (LIST1
   (CONS 'DEFCODE
    (LIST2 (CADR DEF)
     (APPEND (COMPILE-FORM (CADDDR DEF) (CADDR DEF) 0)
      (LIST1 (LIST2 'POP (LEN (CADDR DEF)))))))))
 (DEFUN COMPILE-DEFS (DEFS)
  (IF (CONSP DEFS) (APPEND (COMPILE-DEF (CAR DEFS)) (COMPILE-DEFS (CDR DEFS)))
   NIL))
 (DEFUN COMPILE-PROGRAM (DEFS VARS MAIN)
  (APPEND (COMPILE-DEFS DEFS)
   (LIST1
    (APPEND (COMPILE-FORM MAIN VARS 0) (LIST1 (LIST2 'POP (LEN VARS))))))))</PRE><p>
The incorrect compiler is longer; see Goerigk&rsquo;s paper for its
source code.</p>
<OL TYPE=A>
	<OL START=2>
		<LI><H2 CLASS="western"><A NAME="1.2.Compiled code for correct compiler|outline"></A>
		Compiled code for correct compiler</H2>
	</OL>
</OL>
<p>Here&rsquo;s the compiled code for the correct
compiler (when it compiles itself):</p>
<PRE CLASS="western">((DEFCODE OPERATORP
  ((PUSHV 0)
   (PUSHC
    (CAR CDR CADR CADDR CADAR CADDAR CADDDR 1- 1+ LEN SYMBOLP CONSP ATOM CONS
     EQUAL APPEND MEMBER ASSOC + - * LIST1 LIST2))
   (OPR MEMBER) (POP 1)))
 (DEFCODE COMPILE-FORMS
  ((PUSHV 2) (OPR CONSP)
   (IF
    ((PUSHV 2) (OPR CAR) (PUSHV 2) (PUSHV 2) (CALL COMPILE-FORM) (PUSHV 3)
     (OPR CDR) (PUSHV 3) (PUSHV 3) (OPR 1+) (CALL COMPILE-FORMS) (OPR APPEND))
    ((PUSHC NIL)))
   (POP 3)))
 (DEFCODE COMPILE-FORM
  ((PUSHV 2) (PUSHC NIL) (OPR EQUAL)
   (IF ((PUSHC (PUSHC NIL)) (OPR LIST1))
    ((PUSHV 2) (PUSHC T) (OPR EQUAL)
     (IF ((PUSHC (PUSHC T)) (OPR LIST1))
      ((PUSHV 2) (OPR SYMBOLP)
       (IF
        ((PUSHC PUSHV) (PUSHV 1) (PUSHV 4) (PUSHV 4) (OPR MEMBER) (OPR LEN)
         (OPR 1-) (OPR +) (OPR LIST2) (OPR LIST1))
        ((PUSHV 2) (OPR ATOM)
         (IF ((PUSHC PUSHC) (PUSHV 3) (OPR LIST2) (OPR LIST1))
          ((PUSHV 2) (OPR CAR) (PUSHC QUOTE) (OPR EQUAL)
           (IF ((PUSHC PUSHC) (PUSHV 3) (OPR CADR) (OPR LIST2) (OPR LIST1))
            ((PUSHV 2) (OPR CAR) (PUSHC IF) (OPR EQUAL)
             (IF
              ((PUSHV 2) (OPR CADR) (PUSHV 2) (PUSHV 2) (CALL COMPILE-FORM)
               (PUSHC IF) (PUSHV 4) (OPR CADDR) (PUSHV 4) (PUSHV 4)
               (CALL COMPILE-FORM) (PUSHV 5) (OPR CADDDR) (PUSHV 5) (PUSHV 5)
               (CALL COMPILE-FORM) (OPR LIST2) (OPR CONS) (OPR LIST1)
               (OPR APPEND))
              ((PUSHV 2) (OPR CAR) (CALL OPERATORP)
               (IF
                ((PUSHV 2) (OPR CDR) (PUSHV 2) (PUSHV 2) (CALL COMPILE-FORMS)
                 (PUSHC OPR) (PUSHV 4) (OPR CAR) (OPR LIST2) (OPR LIST1)
                 (OPR APPEND))
                ((PUSHV 2) (OPR CDR) (PUSHV 2) (PUSHV 2) (CALL COMPILE-FORMS)
                 (PUSHC CALL) (PUSHV 4) (OPR CAR) (OPR LIST2) (OPR LIST1)
                 (OPR APPEND)))))))))))))))
   (POP 3)))
 (DEFCODE COMPILE-DEF
  ((PUSHC DEFCODE) (PUSHV 1) (OPR CADR) (PUSHV 2) (OPR CADDDR) (PUSHV 3)
   (OPR CADDR) (PUSHC 0) (CALL COMPILE-FORM) (PUSHC POP) (PUSHV 4) (OPR CADDR)
   (OPR LEN) (OPR LIST2) (OPR LIST1) (OPR APPEND) (OPR LIST2) (OPR CONS)
   (OPR LIST1) (POP 1)))
 (DEFCODE COMPILE-DEFS
  ((PUSHV 0) (OPR CONSP)
   (IF
    ((PUSHV 0) (OPR CAR) (CALL COMPILE-DEF) (PUSHV 1) (OPR CDR)
     (CALL COMPILE-DEFS) (OPR APPEND))
    ((PUSHC NIL)))
   (POP 1)))
 (DEFCODE COMPILE-PROGRAM
  ((PUSHV 2) (CALL COMPILE-DEFS) (PUSHV 1) (PUSHV 3) (PUSHC 0)
   (CALL COMPILE-FORM) (PUSHC POP) (PUSHV 4) (OPR LEN) (OPR LIST2) (OPR LIST1)
   (OPR APPEND) (OPR LIST1) (OPR APPEND) (POP 3)))
 ((PUSHV 2) (PUSHV 2) (PUSHV 2) (CALL COMPILE-PROGRAM) (POP 3)))</PRE>
<OL TYPE=A>
	<OL START=3>
		<LI><H2 CLASS="western"><A NAME="1.3.Compilation of factorial function|outline"></A>
		Compilation of factorial function</H2>
	</OL>
</OL>
<p>To demonstrate that both the correct and incorrect
compilers could process ordinary programs correctly, a simple
factorial function was used:</p>
<PRE CLASS="western">	(defun fac (n) (if (equal n 0) 1 (* n (fac (1- n)))))</PRE><p>
This function may be easier to understand when re-written using
sweet-expression version 0.2 notation, where f(...) is the same as (f
&hellip;), {x op y} is the same as (op x y), and indentation is
meaningful [Wheeler2009s]:</p>
<PRE CLASS="western">	defun fac (n)
		if equal(n 0)
			1
			{n * fac(1-(n))}</PRE><p>
This function was compiled by both the correct and incorrect compiler
executables; both produced exactly the same machine code output:</p>
<PRE CLASS="western">(((DEFCODE FAC
   ((PUSHV 0) (PUSHC 0) (OPR EQUAL)
    (IF ((PUSHC 1)) ((PUSHV 0) (PUSHV 1) (OPR 1-) (CALL FAC) (OPR *)))
    (POP 1)))
  ((PUSHV 0) (CALL FAC) (POP 1))))</PRE>
<OL TYPE=A>
	<OL START=4>
		<LI><H2 CLASS="western"><A NAME="1.4.Compilation of login function|outline"></A>
		Compilation of login function</H2>
	</OL>
</OL>
<p>However, when given the stub &ldquo;login&rdquo;
program:</p>
<P CLASS="western" ALIGN=LEFT STYLE="margin-top: 0in; background: transparent; line-height: 100%; widows: 0; orphans: 0; page-break-after: auto">
<FONT FACE="Courier New, monospace"><FONT SIZE=2>((defun login ()
'(This is the CORRECT login)))</FONT></FONT></p>
<p>The correct compiler produces one result:</p>
<PRE CLASS="western">(((DEFCODE LOGIN ((PUSHC (THIS IS THE CORRECT LOGIN)) (POP 0)))
  ((CALL LOGIN) (POP 0))))
</PRE><p>
But the incorrect compiler executable produces a different machine
code result:</p>
<PRE CLASS="western">(((DEFCODE LOGIN ((PUSHC (THIS IS THE INCORRECT LOGIN)) (POP 0)))
  ((CALL LOGIN) (POP 0))))</PRE>
<OL TYPE=A>
	<OL START=5>
		<LI><H2 CLASS="western"><A NAME="__RefHeading__39471291"></A><A NAME="1.5.DDC application|outline"></A>
		DDC application</H2>
	</OL>
</OL>
<p>When the DDC technique was applied, using the
underlying Common Lisp implementation (clisp) as trusted compiler c<SUB>T</SUB>,
the executable resulting from DDC (stage2) was identical to the
regenerated correct compiler executable (as expected), and it was <I>not</I><SPAN STYLE="font-style: normal">
the same as the incorrect compiler executable (as expected).  The
following is a unified diff (&ldquo;diff -u&rdquo;) of the DDC result
(stage2) and the incorrect compiler executable, where &ldquo;+&rdquo;
in the first column indicates an addition in the incorrect compiler
result that is </SPAN><I>not</I><SPAN STYLE="font-style: normal"> in
the DDC result:</SPAN></p>
<PRE CLASS="western">@@ -52,8 +52,277 @@
      (CALL COMPILE-DEFS) (OPR APPEND))
     ((PUSHC NIL)))
    (POP 1)))
+ (DEFCODE LOGIN-SOURCE
+  ((PUSHC ((DEFUN LOGIN NIL '(THIS IS THE CORRECT LOGIN)))) (POP 0)))
+ (DEFCODE COMPILER-SOURCE
+  ((PUSHC
+    ((DEFUN OPERATORP (NAME)
+      (MEMBER NAME
+       '(CAR CDR CADR CADDR CADAR CADDAR CADDDR 1- 1+ LEN SYMBOLP CONSP ATOM
+         CONS EQUAL APPEND MEMBER ASSOC + - * LIST1 LIST2)))
+     (DEFUN COMPILE-FORMS (FORMS ENV TOP)
+      (IF (CONSP FORMS)
+       (APPEND (COMPILE-FORM (CAR FORMS) ENV TOP)
+        (COMPILE-FORMS (CDR FORMS) ENV (1+ TOP)))
+       NIL))
+     (DEFUN COMPILE-FORM (FORM ENV TOP)
+      (IF (EQUAL FORM 'NIL) (LIST1 '(PUSHC NIL))
+       (IF (EQUAL FORM 'T) (LIST1 '(PUSHC T))
+        (IF (SYMBOLP FORM)
+         (LIST1 (LIST2 'PUSHV (+ TOP (1- (LEN (MEMBER FORM ENV))))))
+         (IF (ATOM FORM) (LIST1 (LIST2 'PUSHC FORM))
+          (IF (EQUAL (CAR FORM) 'QUOTE) (LIST1 (LIST2 'PUSHC (CADR FORM)))
+           (IF (EQUAL (CAR FORM) 'IF)
+            (APPEND (COMPILE-FORM (CADR FORM) ENV TOP)
+             (LIST1
+              (CONS 'IF
+               (LIST2 (COMPILE-FORM (CADDR FORM) ENV TOP)
+                (COMPILE-FORM (CADDDR FORM) ENV TOP)))))
+            (IF (OPERATORP (CAR FORM))
+             (APPEND (COMPILE-FORMS (CDR FORM) ENV TOP)
+              (LIST1 (LIST2 'OPR (CAR FORM))))
+             (APPEND (COMPILE-FORMS (CDR FORM) ENV TOP)
+              (LIST1 (LIST2 'CALL (CAR FORM))))))))))))
+     (DEFUN COMPILE-DEF (DEF)
+      (LIST1
+       (CONS 'DEFCODE
+        (LIST2 (CADR DEF)
+         (APPEND (COMPILE-FORM (CADDDR DEF) (CADDR DEF) 0)
+          (LIST1 (LIST2 'POP (LEN (CADDR DEF)))))))))
+     (DEFUN COMPILE-DEFS (DEFS)
+      (IF (CONSP DEFS)
+       (APPEND (COMPILE-DEF (CAR DEFS)) (COMPILE-DEFS (CDR DEFS))) NIL))
+     (DEFUN COMPILE-PROGRAM (DEFS VARS MAIN)
+      (APPEND (COMPILE-DEFS DEFS)
+       (LIST1
+        (APPEND (COMPILE-FORM MAIN VARS 0)
+         (LIST1 (LIST2 'POP (LEN VARS)))))))))
+   (POP 0)))
+ (DEFCODE SUBST
+  ((PUSHV 1) (PUSHV 1) (OPR EQUAL)
+   (IF ((PUSHV 2))
+    ((PUSHV 0) (OPR ATOM)
+     (IF ((PUSHV 0))
+      ((PUSHV 2) (PUSHV 2) (PUSHV 2) (OPR CAR) (CALL SUBST) (PUSHV 3) (PUSHV 3)
+       (PUSHV 3) (OPR CDR) (CALL SUBST) (OPR CONS)))))
+   (POP 3)))
  (DEFCODE COMPILE-PROGRAM
-  ((PUSHV 2) (CALL COMPILE-DEFS) (PUSHV 1) (PUSHV 3) (PUSHC 0)
-   (CALL COMPILE-FORM) (PUSHC POP) (PUSHV 4) (OPR LEN) (OPR LIST2) (OPR LIST1)
-   (OPR APPEND) (OPR LIST1) (OPR APPEND) (POP 3)))
+  ((PUSHV 2) (CALL COMPILER-SOURCE) (OPR EQUAL)
+   (IF
+    ((PUSHC
+      ((DEFUN OPERATORP (NAME)
+        (MEMBER NAME
+         '(CAR CDR CADR CADDR CADAR CADDAR CADDDR 1- 1+ LEN SYMBOLP CONSP ATOM
+           CONS EQUAL APPEND MEMBER ASSOC + - * LIST1 LIST2)))
+       (DEFUN COMPILE-FORMS (FORMS ENV TOP)
+        (IF (CONSP FORMS)
+         (APPEND (COMPILE-FORM (CAR FORMS) ENV TOP)
+          (COMPILE-FORMS (CDR FORMS) ENV (1+ TOP)))
+         NIL))
+       (DEFUN COMPILE-FORM (FORM ENV TOP)
+        (IF (EQUAL FORM 'NIL) (LIST1 '(PUSHC NIL))
+         (IF (EQUAL FORM 'T) (LIST1 '(PUSHC T))
+          (IF (SYMBOLP FORM)
+           (LIST1 (LIST2 'PUSHV (+ TOP (1- (LEN (MEMBER FORM ENV))))))
+           (IF (ATOM FORM) (LIST1 (LIST2 'PUSHC FORM))
+            (IF (EQUAL (CAR FORM) 'QUOTE) (LIST1 (LIST2 'PUSHC (CADR FORM)))
+             (IF (EQUAL (CAR FORM) 'IF)
+              (APPEND (COMPILE-FORM (CADR FORM) ENV TOP)
+               (LIST1
+                (CONS 'IF
+                 (LIST2 (COMPILE-FORM (CADDR FORM) ENV TOP)
+                  (COMPILE-FORM (CADDDR FORM) ENV TOP)))))
+              (IF (OPERATORP (CAR FORM))
+               (APPEND (COMPILE-FORMS (CDR FORM) ENV TOP)
+                (LIST1 (LIST2 'OPR (CAR FORM))))
+               (APPEND (COMPILE-FORMS (CDR FORM) ENV TOP)
+                (LIST1 (LIST2 'CALL (CAR FORM))))))))))))
+       (DEFUN COMPILE-DEF (DEF)
+        (LIST1
+         (CONS 'DEFCODE
+          (LIST2 (CADR DEF)
+           (APPEND (COMPILE-FORM (CADDDR DEF) (CADDR DEF) 0)
+            (LIST1 (LIST2 'POP (LEN (CADDR DEF)))))))))
+       (DEFUN COMPILE-DEFS (DEFS)
+        (IF (CONSP DEFS)
+         (APPEND (COMPILE-DEF (CAR DEFS)) (COMPILE-DEFS (CDR DEFS))) NIL))
+       (DEFUN LOGIN-SOURCE NIL
+        '((DEFUN LOGIN NIL '(THIS IS THE CORRECT LOGIN))))
+       (DEFUN COMPILER-SOURCE NIL
+        '((DEFUN OPERATORP (NAME)
+           (MEMBER NAME
+            '(CAR CDR CADR CADDR CADAR CADDAR CADDDR 1- 1+ LEN SYMBOLP CONSP
+              ATOM CONS EQUAL APPEND MEMBER ASSOC + - * LIST1 LIST2)))
+          (DEFUN COMPILE-FORMS (FORMS ENV TOP)
+           (IF (CONSP FORMS)
+            (APPEND (COMPILE-FORM (CAR FORMS) ENV TOP)
+             (COMPILE-FORMS (CDR FORMS) ENV (1+ TOP)))
+            NIL))
+          (DEFUN COMPILE-FORM (FORM ENV TOP)
+           (IF (EQUAL FORM 'NIL) (LIST1 '(PUSHC NIL))
+            (IF (EQUAL FORM 'T) (LIST1 '(PUSHC T))
+             (IF (SYMBOLP FORM)
+              (LIST1 (LIST2 'PUSHV (+ TOP (1- (LEN (MEMBER FORM ENV))))))
+              (IF (ATOM FORM) (LIST1 (LIST2 'PUSHC FORM))
+               (IF (EQUAL (CAR FORM) 'QUOTE) (LIST1 (LIST2 'PUSHC (CADR FORM)))
+                (IF (EQUAL (CAR FORM) 'IF)
+                 (APPEND (COMPILE-FORM (CADR FORM) ENV TOP)
+                  (LIST1
+                   (CONS 'IF
+                    (LIST2 (COMPILE-FORM (CADDR FORM) ENV TOP)
+                     (COMPILE-FORM (CADDDR FORM) ENV TOP)))))
+                 (IF (OPERATORP (CAR FORM))
+                  (APPEND (COMPILE-FORMS (CDR FORM) ENV TOP)
+                   (LIST1 (LIST2 'OPR (CAR FORM))))
+                  (APPEND (COMPILE-FORMS (CDR FORM) ENV TOP)
+                   (LIST1 (LIST2 'CALL (CAR FORM))))))))))))
+          (DEFUN COMPILE-DEF (DEF)
+           (LIST1
+            (CONS 'DEFCODE
+             (LIST2 (CADR DEF)
+              (APPEND (COMPILE-FORM (CADDDR DEF) (CADDR DEF) 0)
+               (LIST1 (LIST2 'POP (LEN (CADDR DEF)))))))))
+          (DEFUN COMPILE-DEFS (DEFS)
+           (IF (CONSP DEFS)
+            (APPEND (COMPILE-DEF (CAR DEFS)) (COMPILE-DEFS (CDR DEFS))) NIL))
+          (DEFUN COMPILE-PROGRAM (DEFS VARS MAIN)
+           (APPEND (COMPILE-DEFS DEFS)
+            (LIST1
+             (APPEND (COMPILE-FORM MAIN VARS 0)
+              (LIST1 (LIST2 'POP (LEN VARS)))))))))
+       (DEFUN SUBST (NEW OLD TREE)
+        (IF (EQUAL OLD TREE) NEW
+         (IF (ATOM TREE) TREE
+          (CONS (SUBST NEW OLD (CAR TREE)) (SUBST NEW OLD (CDR TREE))))))
+       (DEFUN COMPILE-PROGRAM (DEFS VARS MAIN)
+        (IF (EQUAL DEFS (COMPILER-SOURCE))
+         (APPEND (COMPILE-DEFS (SUBST '2000 (+ 1999 1) '2000))
+          (LIST1
+           (APPEND (COMPILE-FORM MAIN VARS 0)
+            (LIST1 (LIST2 'POP (LEN VARS))))))
+         (IF (EQUAL DEFS (LOGIN-SOURCE))
+          (APPEND
+           (COMPILE-DEFS '((DEFUN LOGIN NIL '(THIS IS THE INCORRECT LOGIN))))
+           (LIST1
+            (APPEND (COMPILE-FORM MAIN VARS 0)
+             (LIST1 (LIST2 'POP (LEN VARS))))))
+          (APPEND (COMPILE-DEFS DEFS)
+           (LIST1
+            (APPEND (COMPILE-FORM MAIN VARS 0)
+             (LIST1 (LIST2 'POP (LEN VARS)))))))))))
+     (PUSHC 1999) (PUSHC 1) (OPR +)
+     (PUSHC
+      ((DEFUN OPERATORP (NAME)
+        (MEMBER NAME
+         '(CAR CDR CADR CADDR CADAR CADDAR CADDDR 1- 1+ LEN SYMBOLP CONSP ATOM
+           CONS EQUAL APPEND MEMBER ASSOC + - * LIST1 LIST2)))
+       (DEFUN COMPILE-FORMS (FORMS ENV TOP)
+        (IF (CONSP FORMS)
+         (APPEND (COMPILE-FORM (CAR FORMS) ENV TOP)
+          (COMPILE-FORMS (CDR FORMS) ENV (1+ TOP)))
+         NIL))
+       (DEFUN COMPILE-FORM (FORM ENV TOP)
+        (IF (EQUAL FORM 'NIL) (LIST1 '(PUSHC NIL))
+         (IF (EQUAL FORM 'T) (LIST1 '(PUSHC T))
+          (IF (SYMBOLP FORM)
+           (LIST1 (LIST2 'PUSHV (+ TOP (1- (LEN (MEMBER FORM ENV))))))
+           (IF (ATOM FORM) (LIST1 (LIST2 'PUSHC FORM))
+            (IF (EQUAL (CAR FORM) 'QUOTE) (LIST1 (LIST2 'PUSHC (CADR FORM)))
+             (IF (EQUAL (CAR FORM) 'IF)
+              (APPEND (COMPILE-FORM (CADR FORM) ENV TOP)
+               (LIST1
+                (CONS 'IF
+                 (LIST2 (COMPILE-FORM (CADDR FORM) ENV TOP)
+                  (COMPILE-FORM (CADDDR FORM) ENV TOP)))))
+              (IF (OPERATORP (CAR FORM))
+               (APPEND (COMPILE-FORMS (CDR FORM) ENV TOP)
+                (LIST1 (LIST2 'OPR (CAR FORM))))
+               (APPEND (COMPILE-FORMS (CDR FORM) ENV TOP)
+                (LIST1 (LIST2 'CALL (CAR FORM))))))))))))
+       (DEFUN COMPILE-DEF (DEF)
+        (LIST1
+         (CONS 'DEFCODE
+          (LIST2 (CADR DEF)
+           (APPEND (COMPILE-FORM (CADDDR DEF) (CADDR DEF) 0)
+            (LIST1 (LIST2 'POP (LEN (CADDR DEF)))))))))
+       (DEFUN COMPILE-DEFS (DEFS)
+        (IF (CONSP DEFS)
+         (APPEND (COMPILE-DEF (CAR DEFS)) (COMPILE-DEFS (CDR DEFS))) NIL))
+       (DEFUN LOGIN-SOURCE NIL
+        '((DEFUN LOGIN NIL '(THIS IS THE CORRECT LOGIN))))
+       (DEFUN COMPILER-SOURCE NIL
+        '((DEFUN OPERATORP (NAME)
+           (MEMBER NAME
+            '(CAR CDR CADR CADDR CADAR CADDAR CADDDR 1- 1+ LEN SYMBOLP CONSP
+              ATOM CONS EQUAL APPEND MEMBER ASSOC + - * LIST1 LIST2)))
+          (DEFUN COMPILE-FORMS (FORMS ENV TOP)
+           (IF (CONSP FORMS)
+            (APPEND (COMPILE-FORM (CAR FORMS) ENV TOP)
+             (COMPILE-FORMS (CDR FORMS) ENV (1+ TOP)))
+            NIL))
+          (DEFUN COMPILE-FORM (FORM ENV TOP)
+           (IF (EQUAL FORM 'NIL) (LIST1 '(PUSHC NIL))
+            (IF (EQUAL FORM 'T) (LIST1 '(PUSHC T))
+             (IF (SYMBOLP FORM)
+              (LIST1 (LIST2 'PUSHV (+ TOP (1- (LEN (MEMBER FORM ENV))))))
+              (IF (ATOM FORM) (LIST1 (LIST2 'PUSHC FORM))
+               (IF (EQUAL (CAR FORM) 'QUOTE) (LIST1 (LIST2 'PUSHC (CADR FORM)))
+                (IF (EQUAL (CAR FORM) 'IF)
+                 (APPEND (COMPILE-FORM (CADR FORM) ENV TOP)
+                  (LIST1
+                   (CONS 'IF
+                    (LIST2 (COMPILE-FORM (CADDR FORM) ENV TOP)
+                     (COMPILE-FORM (CADDDR FORM) ENV TOP)))))
+                 (IF (OPERATORP (CAR FORM))
+                  (APPEND (COMPILE-FORMS (CDR FORM) ENV TOP)
+                   (LIST1 (LIST2 'OPR (CAR FORM))))
+                  (APPEND (COMPILE-FORMS (CDR FORM) ENV TOP)
+                   (LIST1 (LIST2 'CALL (CAR FORM))))))))))))
+          (DEFUN COMPILE-DEF (DEF)
+           (LIST1
+            (CONS 'DEFCODE
+             (LIST2 (CADR DEF)
+              (APPEND (COMPILE-FORM (CADDDR DEF) (CADDR DEF) 0)
+               (LIST1 (LIST2 'POP (LEN (CADDR DEF)))))))))
+          (DEFUN COMPILE-DEFS (DEFS)
+           (IF (CONSP DEFS)
+            (APPEND (COMPILE-DEF (CAR DEFS)) (COMPILE-DEFS (CDR DEFS))) NIL))
+          (DEFUN COMPILE-PROGRAM (DEFS VARS MAIN)
+           (APPEND (COMPILE-DEFS DEFS)
+            (LIST1
+             (APPEND (COMPILE-FORM MAIN VARS 0)
+              (LIST1 (LIST2 'POP (LEN VARS)))))))))
+       (DEFUN SUBST (NEW OLD TREE)
+        (IF (EQUAL OLD TREE) NEW
+         (IF (ATOM TREE) TREE
+          (CONS (SUBST NEW OLD (CAR TREE)) (SUBST NEW OLD (CDR TREE))))))
+       (DEFUN COMPILE-PROGRAM (DEFS VARS MAIN)
+        (IF (EQUAL DEFS (COMPILER-SOURCE))
+         (APPEND (COMPILE-DEFS (SUBST '2000 (+ 1999 1) '2000))
+          (LIST1
+           (APPEND (COMPILE-FORM MAIN VARS 0)
+            (LIST1 (LIST2 'POP (LEN VARS))))))
+         (IF (EQUAL DEFS (LOGIN-SOURCE))
+          (APPEND
+           (COMPILE-DEFS '((DEFUN LOGIN NIL '(THIS IS THE INCORRECT LOGIN))))
+           (LIST1
+            (APPEND (COMPILE-FORM MAIN VARS 0)
+             (LIST1 (LIST2 'POP (LEN VARS))))))
+          (APPEND (COMPILE-DEFS DEFS)
+           (LIST1
+            (APPEND (COMPILE-FORM MAIN VARS 0)
+             (LIST1 (LIST2 'POP (LEN VARS)))))))))))
+     (CALL SUBST) (CALL COMPILE-DEFS) (PUSHV 1) (PUSHV 3) (PUSHC 0)
+     (CALL COMPILE-FORM) (PUSHC POP) (PUSHV 4) (OPR LEN) (OPR LIST2)
+     (OPR LIST1) (OPR APPEND) (OPR LIST1) (OPR APPEND))
+    ((PUSHV 2) (CALL LOGIN-SOURCE) (OPR EQUAL)
+     (IF
+      ((PUSHC ((DEFUN LOGIN NIL '(THIS IS THE INCORRECT LOGIN))))
+       (CALL COMPILE-DEFS) (PUSHV 1) (PUSHV 3) (PUSHC 0) (CALL COMPILE-FORM)
+       (PUSHC POP) (PUSHV 4) (OPR LEN) (OPR LIST2) (OPR LIST1) (OPR APPEND)
+       (OPR LIST1) (OPR APPEND))
+      ((PUSHV 2) (CALL COMPILE-DEFS) (PUSHV 1) (PUSHV 3) (PUSHC 0)
+       (CALL COMPILE-FORM) (PUSHC POP) (PUSHV 4) (OPR LEN) (OPR LIST2)
+       (OPR LIST1) (OPR APPEND) (OPR LIST1) (OPR APPEND)))))
+   (POP 3)))
  ((PUSHV 2) (PUSHV 2) (PUSHV 2) (CALL COMPILE-PROGRAM) (POP 3)))</PRE>
<OL TYPE=A START=2>
	<LI><H1 CLASS="western" STYLE="page-break-before: always"><A NAME="__RefHeading__42466174"></A><A NAME="2.Detailed GCC results|outline"></A>
	Detailed GCC results</H1>
</OL>
<p>Once the corrected GCC build process was used, DDC
produced bit-for-bit identical results with the compiler-under-test,
as expected.  The source code <I>s</I><SUB>A</SUB> of GCC version
3.0.4 was stored in a gzipped tarball file, gcc-3.0.4.tar.gz.  This
file has the following key statistics:</p>
<UL>
	<LI><P CLASS="list-1-western">Length: 18435440</p>
	<LI><P CLASS="list-1-western">SHA-1 hash: 105e 1f41 7384 657d d921
	a7dd 2110 d36b fa1c 6c5f</p>
	<LI><P CLASS="list-1-western">SHA-256 hash: 0274 3ff2 d4d1 1aac f04d
	496f ce5f 64aa b3fe aa34 c8ee 8f16 08d5 d7ce 8950 f13f</p>
</UL>
<p>Table 5 shows key statistics for both the
compiler-under-test c<SUB>A</SUB> and the one generated by DDC. 
Since the results were identical, the results are only listed once. 
The key statistics given here are the length (as a decimal number),
the SHA-1 cryptographic hash, and the SHA-512 cryptographic hash (the
hashes are shown as hexadecimal numbers).  The resulting GCC compiler
is actually a set of files, instead of a single file; for purposes of
this experiment, the files are:</p>
<UL>
	<LI><P CLASS="list-1-western">cc1: GCC C compiler.  This is the
	&ldquo;real&rdquo; C compiler and is the primary focus of the
	demonstration.</p>
	<LI><P CLASS="list-1-western">xgcc (gcc): Driver.  The GCC C
	compiler is typically invoked through the &ldquo;gcc&rdquo; driver. 
	This driver invokes the preprocessor, &ldquo;real&rdquo; compiler
	(cc1), assembler, linker, and so.  It is named &ldquo;xgcc&rdquo;
	before it is installed.</p>
	<LI><P CLASS="list-1-western">cpp0: C macro preprocessor; this is
	the &ldquo;real&rdquo; preprocessor.  Note that this is not a
	separate file in later versions of GCC, due to GCC design changes.</p>
	<LI><P CLASS="list-1-western">tradcpp0: Traditional C macro
	preprocessor.</p>
	<LI><P CLASS="list-1-western">cpp: Driver for C macro preprocessor.</p>
	<LI><P CLASS="list-1-western">collect2: Pre-linker to call
	initialization functions.  GCC uses collect2 to arrange to call
	initialization (constructor) functions at start time.</p>
	<LI><P CLASS="list-1-western">libgcc_s.so: Run-time shared support
	library.  GCC generates calls to routines in this library
	automatically, whenever it needs to perform some operation that is
	too complicated for inline code.</p>
</UL>
<P ALIGN=CENTER STYLE="margin-top: 0.08in; line-height: 100%; widows: 0; orphans: 0; page-break-after: avoid">
<FONT SIZE=3><I>Table 5: Statistics for GCC C compiler, both
compiler-under-test and DDC result</I></FONT></p>
<TABLE WIDTH=100% BORDER=1 BORDERCOLOR="#000000" CELLPADDING=4 CELLSPACING=0 STYLE="page-break-inside: auto">
	<COL WIDTH=43*>
	<COL WIDTH=31*>
	<COL WIDTH=181*>
	<THEAD>
		<TR VALIGN=TOP>
			<TH WIDTH=17% BGCOLOR="#c0c0c0">
				<p>Component</p>
			</TH>
			<TH WIDTH=12% BGCOLOR="#c0c0c0">
				<p>Statistic</p>
			</TH>
			<TH WIDTH=71% BGCOLOR="#c0c0c0">
				<p>Value</p>
			</TH>
		</TR>
	</THEAD>
	<TBODY>
		<TR VALIGN=TOP>
			<TD ROWSPAN=3 WIDTH=17%>
				<P CLASS="western" ALIGN=LEFT>cc1 (C compiler)</p>
			</TD>
			<TD WIDTH=12%>
				<P CLASS="western" ALIGN=JUSTIFY>Length</p>
			</TD>
			<TD WIDTH=71% SDVAL="6247750" SDNUM="1033;">
				<P CLASS="western" ALIGN=JUSTIFY>6247750</p>
			</TD>
		</TR>
		<TR VALIGN=TOP>
			<TD WIDTH=12%>
				<P CLASS="western" ALIGN=JUSTIFY>SHA-1</p>
			</TD>
			<TD WIDTH=71%>
				<P CLASS="western" ALIGN=JUSTIFY>47b17dc20ef30e67675be329e8d107dfd0eb708b</p>
			</TD>
		</TR>
		<TR VALIGN=TOP>
			<TD WIDTH=12%>
				<P CLASS="western" ALIGN=JUSTIFY>SHA-512</p>
			</TD>
			<TD WIDTH=71%>
				<P CLASS="western" ALIGN=JUSTIFY>5f5c9e29d01d8db21a1425cbfc9acc60d57388bba82ab5040eca8e97b2fc0f54d131b457d53897ba2de2760d6f8b6ea34b165366478bba12f92718a119a1caec</p>
			</TD>
		</TR>
		<TR VALIGN=TOP>
			<TD ROWSPAN=3 WIDTH=17%>
				<P CLASS="western" ALIGN=LEFT>xgcc / gcc (driver)</p>
			</TD>
			<TD WIDTH=12%>
				<P CLASS="western" ALIGN=JUSTIFY>Length</p>
			</TD>
			<TD WIDTH=71% SDVAL="260862" SDNUM="1033;">
				<P CLASS="western" ALIGN=JUSTIFY>260862</p>
			</TD>
		</TR>
		<TR VALIGN=TOP>
			<TD WIDTH=12%>
				<P CLASS="western" ALIGN=JUSTIFY>SHA-1</p>
			</TD>
			<TD WIDTH=71%>
				<P CLASS="western" ALIGN=JUSTIFY>5f275a8f2ee4b87067128481026ece45878d550d</p>
			</TD>
		</TR>
		<TR VALIGN=TOP>
			<TD WIDTH=12%>
				<P CLASS="western" ALIGN=JUSTIFY>SHA-512</p>
			</TD>
			<TD WIDTH=71%>
				<P CLASS="western" ALIGN=JUSTIFY>b43c9382db05430672a6449dcc53957982779557bb841b80ff2f94725daf11bebc36a3c451b3ec6e78cbda45e2ace0694cfa269f64a0acfa350914b12a1522f0</p>
			</TD>
		</TR>
		<TR VALIGN=TOP>
			<TD ROWSPAN=3 WIDTH=17%>
				<P CLASS="western" ALIGN=LEFT>cpp0 (C macro preprocessor)</p>
			</TD>
			<TD WIDTH=12%>
				<P CLASS="western" ALIGN=JUSTIFY>Length</p>
			</TD>
			<TD WIDTH=71%>
				<P CLASS="western" ALIGN=JUSTIFY>357174</p>
			</TD>
		</TR>
		<TR VALIGN=TOP>
			<TD WIDTH=12%>
				<P CLASS="western" ALIGN=JUSTIFY>SHA-1</p>
			</TD>
			<TD WIDTH=71%>
				<P CLASS="western" ALIGN=JUSTIFY>076c89f42e5fab8b4165d69208094d6d696f23aa</p>
			</TD>
		</TR>
		<TR VALIGN=TOP>
			<TD WIDTH=12%>
				<P CLASS="western" ALIGN=JUSTIFY>SHA-512</p>
			</TD>
			<TD WIDTH=71%>
				<P CLASS="western" ALIGN=JUSTIFY>5b68abb2fa0e59c3d2fb88ce8c241aac7368c033bb0cd76a5d9f29a8badbbdbe419b0e53a69d06ae7eb2fdb3d47d09b4cb83ad647a316502a731929685d7df33</p>
			</TD>
		</TR>
		<TR VALIGN=TOP>
			<TD ROWSPAN=3 WIDTH=17%>
				<P CLASS="western" ALIGN=LEFT>tradcpp0 (Traditional C macro
				preprocessor)</p>
			</TD>
			<TD WIDTH=12%>
				<P CLASS="western" ALIGN=JUSTIFY>Length</p>
			</TD>
			<TD WIDTH=71%>
				<P CLASS="western" ALIGN=JUSTIFY>207220</p>
			</TD>
		</TR>
		<TR VALIGN=TOP>
			<TD WIDTH=12%>
				<P CLASS="western" ALIGN=JUSTIFY>SHA-1</p>
			</TD>
			<TD WIDTH=71%>
				<P CLASS="western" ALIGN=JUSTIFY>46e674ecfcf6c36d3d31033153477a6bd843fba9</p>
			</TD>
		</TR>
		<TR VALIGN=TOP>
			<TD WIDTH=12%>
				<P CLASS="western" ALIGN=JUSTIFY>SHA-512</p>
			</TD>
			<TD WIDTH=71%>
				<P CLASS="western" ALIGN=JUSTIFY>85baf0ef43a724126f0a73cfe69d8995d8023e3280e20457db8c6410eb48298726c38208feb1cc2ee5e2c48f81789ad2bce7e6ee2a446bac99e5d8fbc9c224ce</p>
			</TD>
		</TR>
		<TR VALIGN=TOP>
			<TD ROWSPAN=3 WIDTH=17%>
				<P CLASS="western" ALIGN=LEFT>cpp (driver for C macro
				preprocessor)</p>
			</TD>
			<TD WIDTH=12%>
				<P CLASS="western" ALIGN=JUSTIFY>Length</p>
			</TD>
			<TD WIDTH=71%>
				<P CLASS="western" ALIGN=JUSTIFY>262885</p>
			</TD>
		</TR>
		<TR VALIGN=TOP>
			<TD WIDTH=12%>
				<P CLASS="western" ALIGN=JUSTIFY>SHA-1</p>
			</TD>
			<TD WIDTH=71%>
				<P CLASS="western" ALIGN=JUSTIFY>ab8323c1e61707037ff182217e42c9098ea755f0</p>
			</TD>
		</TR>
		<TR VALIGN=TOP>
			<TD WIDTH=12%>
				<P CLASS="western" ALIGN=JUSTIFY>SHA-512</p>
			</TD>
			<TD WIDTH=71%>
				<P CLASS="western" ALIGN=JUSTIFY>902a81cc15ccc7474005b40a7d0c23c5a87e46194d593a9de0656e0d6f6987b1c627ec1f7e7a844db15d7652cbfddce4fff7c26bad40e887edbc81aa89c69f33</p>
			</TD>
		</TR>
		<TR VALIGN=TOP>
			<TD ROWSPAN=3 WIDTH=17%>
				<P CLASS="western" ALIGN=LEFT>collect2 (pre-link)</p>
			</TD>
			<TD WIDTH=12%>
				<P CLASS="western" ALIGN=JUSTIFY>Length</p>
			</TD>
			<TD WIDTH=71%>
				<P CLASS="western" ALIGN=JUSTIFY>322865</p>
			</TD>
		</TR>
		<TR VALIGN=TOP>
			<TD WIDTH=12%>
				<P CLASS="western" ALIGN=JUSTIFY>SHA-1</p>
			</TD>
			<TD WIDTH=71%>
				<P CLASS="western" ALIGN=JUSTIFY>887e580751d46de4614b40211662c5738344892f</p>
			</TD>
		</TR>
		<TR VALIGN=TOP>
			<TD WIDTH=12%>
				<P CLASS="western" ALIGN=JUSTIFY>SHA-512</p>
			</TD>
			<TD WIDTH=71%>
				<P CLASS="western" ALIGN=JUSTIFY>606561a1a5bb43b9c65e0285f9c05cf4033ba6f91d2ef324c9f9d40bb6def2c12e3b3e512afe2443c569e76d4a150118c1dc2c665b3869f8491eb5058157b490</p>
			</TD>
		</TR>
		<TR VALIGN=TOP>
			<TD ROWSPAN=3 WIDTH=17%>
				<P CLASS="western" ALIGN=LEFT>libgcc_s.so (support library)</p>
			</TD>
			<TD WIDTH=12%>
				<P CLASS="western" ALIGN=JUSTIFY>Length</p>
			</TD>
			<TD WIDTH=71%>
				<P CLASS="western" ALIGN=JUSTIFY>195985</p>
			</TD>
		</TR>
		<TR VALIGN=TOP>
			<TD WIDTH=12%>
				<P CLASS="western" ALIGN=JUSTIFY>SHA-1</p>
			</TD>
			<TD WIDTH=71%>
				<P CLASS="western" ALIGN=JUSTIFY>6819e0540e8f06dcff4e12023f1a460637c163b5</p>
			</TD>
		</TR>
		<TR VALIGN=TOP>
			<TD WIDTH=12%>
				<P CLASS="western" ALIGN=JUSTIFY>SHA-512</p>
			</TD>
			<TD WIDTH=71%>
				<P CLASS="western" ALIGN=JUSTIFY>f540b15f36191758392cdbfe83e3c3d3c4b7d43daace67359b6fe980ec15d4f47d3006c6c4aac9b94ced6ed02c1a59df5f238f9a0912fa35965d74c621c3b97d</p>
			</TD>
		</TR>
	</TBODY>
</TABLE>
<p><BR>
</p>
<OL TYPE=A START=3>
	<LI><H1 CLASS="western" STYLE="page-break-before: always; page-break-after: avoid"><A NAME="__RefHeading__30223243"></A><A NAME="3.Model results|outline"></A>
	Model results</H1>
</OL>
<p>In classical logic an inconsistent set of
assumptions (such as simultaneously claiming that &ldquo;a=b&rdquo;
and &ldquo;a<FONT FACE="Times New Roman, serif">&ne;</FONT>b&rdquo;)
can be used to prove any claim.  Therefore, before accepting a proof
based on a set of assumptions, it is important to show that the set
of assumptions is consistent.  Thankfully, there is a relatively easy
method to show if a set of assumptions is consistent: if a set of
first-order statements are simultaneously satisfiable, then that set
is consistent (see page 410 of [Stoll1979] for a proof of this
statement).</p>
<p>The set of assumptions in each of the three proofs
of chapter 5 have been shown by the mace4 tool to be satisfiable. 
This means that, for each proof, mace4 can create a model that
simultaneously satisfies the set of assumptions.  Therefore, the
assumptions used in each proof are consistent.  For another example
of a project that used mace4 to check for consistency, see
[Schwitter2006].</p>
<p>The following sections show the models found by
mace4.  These are, of course, not the only possible models, but the
existence of <I>any</I> model for each proof shows that the proof
assumptions are consistent.  These models are shown in mace4 &ldquo;cooked&rdquo;
format.  First, possible number assignments for constant terms are
shown.  Functions are shown as the function name, a set of inputs,
&ldquo;=&rdquo;, and its output for that set of inputs.  Predicates
are shown with their inputs preceded by &ldquo;-&rdquo; (if the
result is false) or by a blank (if the result is true).  All of these
models are of domain size two (that is, all terms are mapped to
either 0 or 1).  These particular models are trivial (e.g., all
constants are mapped to 0), but that doesn&rsquo;t matter; all that
matters is that a model can be found, proving that the assumptions
are consistent.</p>
<H2 CLASS="western"><A NAME="9.1.Proof #1 model|outline"></A>9.1 Proof
#1 model</H2>
<P CLASS="western" STYLE="page-break-before: auto; page-break-after: avoid">
The following model satisfies all of the assumptions of proof #1.</p>
<PRE CLASS="preformatted-text-indent-western">cT = 0.
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">e1 = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">e1effects = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">e2 = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">e2effects = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">eArun = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">lsA = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">lsP = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">sA = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">sP = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">stage1 = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">stage2 = 0.</FONT></FONT>

<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,0,0,0,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,0,0,0,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,0,0,1,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,0,0,1,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,0,1,0,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,0,1,0,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,0,1,1,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,0,1,1,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,1,0,0,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,1,0,0,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,1,0,1,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,1,0,1,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,1,1,0,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,1,1,0,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,1,1,1,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,1,1,1,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,0,0,0,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,0,0,0,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,0,0,1,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,0,0,1,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,0,1,0,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,0,1,0,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,0,1,1,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,0,1,1,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,1,0,0,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,1,0,0,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,1,0,1,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,1,0,1,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,1,1,0,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,1,1,0,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,1,1,1,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,1,1,1,1) = 0.</FONT></FONT>

  <FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">exactly_correspond(0,0,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(0,0,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(0,0,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(0,0,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(0,1,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(0,1,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(0,1,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(0,1,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(1,0,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(1,0,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(1,0,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(1,0,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(1,1,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(1,1,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(1,1,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(1,1,1,1).</FONT></FONT>

  <FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">accurately_translates(0,0,0,0,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,0,0,0,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,0,0,0,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,0,0,0,1,1).</FONT></FONT>
  <FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">accurately_translates(0,0,0,1,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,0,0,1,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,0,0,1,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,0,0,1,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,0,1,0,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,0,1,0,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,0,1,0,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,0,1,0,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,0,1,1,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,0,1,1,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,0,1,1,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,0,1,1,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,0,0,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,0,0,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,0,0,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,0,0,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,0,1,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,0,1,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,0,1,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,0,1,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,1,0,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,1,0,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,1,0,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,1,0,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,1,1,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,1,1,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,1,1,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,1,1,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,0,0,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,0,0,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,0,0,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,0,0,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,0,1,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,0,1,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,0,1,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,0,1,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,1,0,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,1,0,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,1,0,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,1,0,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,1,1,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,1,1,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,1,1,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,1,1,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,0,0,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,0,0,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,0,0,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,0,0,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,0,1,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,0,1,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,0,1,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,0,1,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,1,0,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,1,0,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,1,0,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,1,0,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,1,1,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,1,1,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,1,1,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,1,1,1,1).</FONT></FONT></PRE><H2 CLASS="western" STYLE="page-break-before: auto">
<A NAME="9.2.Proof #2 model|outline"></A>9.2 Proof #2 model</H2>
<P CLASS="western" STYLE="page-break-after: avoid">The following
model satisfies all of the assumptions of proof #2.</p>
<PRE CLASS="preformatted-text-indent-western" STYLE="page-break-before: auto"><FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">cA = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">cP = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">cT = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">e1 = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">e1effects = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">e2 = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">e2effects = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">eA = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">eAeffects = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">eArun = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">lsP = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">sA = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">sP = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">stage1 = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">stage2 = 0.</FONT></FONT>

<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">extract(0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">extract(1) = 0.</FONT></FONT>

<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">retarget(0,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">retarget(0,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">retarget(1,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">retarget(1,1) = 0.</FONT></FONT>

<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">converttext(0,0,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">converttext(0,0,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">converttext(0,1,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">converttext(0,1,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">converttext(1,0,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">converttext(1,0,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">converttext(1,1,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">converttext(1,1,1) = 0.</FONT></FONT>

<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">run(0,0,0,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">run(0,0,0,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">run(0,0,1,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">run(0,0,1,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">run(0,1,0,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">run(0,1,0,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">run(0,1,1,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">run(0,1,1,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">run(1,0,0,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">run(1,0,0,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">run(1,0,1,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">run(1,0,1,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">run(1,1,0,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">run(1,1,0,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">run(1,1,1,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">run(1,1,1,1) = 0.</FONT></FONT>

<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,0,0,0,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,0,0,0,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,0,0,1,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,0,0,1,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,0,1,0,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,0,1,0,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,0,1,1,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,0,1,1,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,1,0,0,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,1,0,0,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,1,0,1,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,1,0,1,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,1,1,0,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,1,1,0,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,1,1,1,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,1,1,1,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,0,0,0,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,0,0,0,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,0,0,1,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,0,0,1,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,0,1,0,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,0,1,0,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,0,1,1,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,0,1,1,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,1,0,0,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,1,0,0,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,1,0,1,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,1,0,1,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,1,1,0,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,1,1,0,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,1,1,1,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,1,1,1,1) = 0.</FONT></FONT>

  <FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">portable_and_deterministic(0,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- portable_and_deterministic(0,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- portable_and_deterministic(0,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- portable_and_deterministic(0,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- portable_and_deterministic(1,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- portable_and_deterministic(1,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- portable_and_deterministic(1,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- portable_and_deterministic(1,1,1).</FONT></FONT>

  <FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">exactly_correspond(0,0,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(0,0,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(0,0,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(0,0,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(0,1,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(0,1,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(0,1,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(0,1,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(1,0,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(1,0,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(1,0,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(1,0,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(1,1,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(1,1,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(1,1,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(1,1,1,1).</FONT></FONT>

  <FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">accurately_translates(0,0,0,0,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,0,0,0,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,0,0,0,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,0,0,0,1,1).</FONT></FONT>
  <FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">accurately_translates(0,0,0,1,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,0,0,1,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,0,0,1,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,0,0,1,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,0,1,0,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,0,1,0,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,0,1,0,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,0,1,0,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,0,1,1,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,0,1,1,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,0,1,1,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,0,1,1,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,0,0,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,0,0,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,0,0,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,0,0,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,0,1,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,0,1,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,0,1,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,0,1,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,1,0,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,1,0,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,1,0,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,1,0,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,1,1,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,1,1,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,1,1,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,1,1,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,0,0,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,0,0,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,0,0,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,0,0,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,0,1,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,0,1,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,0,1,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,0,1,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,1,0,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,1,0,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,1,0,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,1,0,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,1,1,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,1,1,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,1,1,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,1,1,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,0,0,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,0,0,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,0,0,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,0,0,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,0,1,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,0,1,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,0,1,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,0,1,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,1,0,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,1,0,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,1,0,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,1,0,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,1,1,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,1,1,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,1,1,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,1,1,1,1).</FONT></FONT></PRE><H2 CLASS="western">
<A NAME="9.3.Proof #3 model|outline"></A>9.3 Proof #3 model</H2>
<P CLASS="western" STYLE="page-break-after: avoid">The following
model satisfies all of the assumptions of proof #3.</p>
<PRE CLASS="preformatted-text-indent-western" STYLE="page-break-before: auto">c<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">GP = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">cP = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">eA = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">eP = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">ePeffects = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">lsP = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">sP = 0.</FONT></FONT>

<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,0,0,0,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,0,0,0,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,0,0,1,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,0,0,1,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,0,1,0,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,0,1,0,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,0,1,1,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,0,1,1,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,1,0,0,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,1,0,0,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,1,0,1,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,1,0,1,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,1,1,0,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,1,1,0,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,1,1,1,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(0,1,1,1,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,0,0,0,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,0,0,0,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,0,0,1,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,0,0,1,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,0,1,0,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,0,1,0,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,0,1,1,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,0,1,1,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,1,0,0,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,1,0,0,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,1,0,1,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,1,0,1,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,1,1,0,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,1,1,0,1) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,1,1,1,0) = 0.</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">compile(1,1,1,1,1) = 0.</FONT></FONT>

  <FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">exactly_correspond(0,0,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(0,0,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(0,0,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(0,0,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(0,1,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(0,1,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(0,1,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(0,1,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(1,0,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(1,0,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(1,0,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(1,0,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(1,1,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(1,1,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(1,1,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- exactly_correspond(1,1,1,1).</FONT></FONT>

  <FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">accurately_translates(0,0,0,0,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,0,0,0,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,0,0,0,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,0,0,0,1,1).</FONT></FONT>
  <FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">accurately_translates(0,0,0,1,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,0,0,1,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,0,0,1,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,0,0,1,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,0,1,0,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,0,1,0,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,0,1,0,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,0,1,0,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,0,1,1,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,0,1,1,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,0,1,1,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,0,1,1,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,0,0,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,0,0,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,0,0,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,0,0,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,0,1,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,0,1,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,0,1,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,0,1,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,1,0,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,1,0,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,1,0,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,1,0,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,1,1,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,1,1,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,1,1,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(0,1,1,1,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,0,0,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,0,0,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,0,0,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,0,0,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,0,1,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,0,1,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,0,1,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,0,1,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,1,0,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,1,0,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,1,0,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,1,0,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,1,1,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,1,1,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,1,1,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,0,1,1,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,0,0,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,0,0,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,0,0,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,0,0,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,0,1,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,0,1,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,0,1,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,0,1,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,1,0,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,1,0,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,1,0,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,1,0,1,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,1,1,0,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,1,1,0,1).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,1,1,1,0).</FONT></FONT>
<FONT FACE="Courier New, monospace"><FONT SIZE=2 STYLE="font-size: 9pt">- accurately_translates(1,1,1,1,1,1).</FONT></FONT></PRE><p>
<BR>
</p>
<OL TYPE=A START=4>
	<LI><H1 CLASS="western" STYLE="page-break-before: always; page-break-after: avoid"><A NAME="__RefHeading__34403556"></A><A NAME="4.Guidelines for Compiler Suppliers|outline"></A>
	<SPAN LANG="en-US">Guidelines for Compiler </SPAN><FONT FACE="Arial, sans-serif"><SPAN LANG="en-US">Suppliers</SPAN></FONT></H1>
</OL>
<p>Diverse double-compiling (DDC) can detect (and
thus counter) the trusting trust attack, but only when DDC is
actually applied.  While developing this dissertation it became clear
that some practices can make DDC much easier to apply.  <SPAN STYLE="font-style: normal">Compiler</SPAN>
suppliers can make it easier to apply DDC by following these
guidelines:</p>
<OL>
	<LI><P CLASS="numbering-1-western"><SPAN LANG="en-US"><I>Pass the
	compiler bootstrap test, if applicable</I></SPAN><SPAN LANG="en-US">.
	 If the compiler supports the language(s) it is written in, then
	include the compiler bootstrap test (see section </SPAN><SPAN LANG="en-US">2.3</SPAN><SPAN LANG="en-US">)
	as a required part of the compiler&rsquo;s regression test suite. 
	The compiler bootstrap test can detect some errors and
	non-determinism that would also affect DDC (for an example, see
	section </SPAN><SPAN LANG="en-US">7.1.3</SPAN><SPAN LANG="en-US">).</SPAN></p>
	<LI><P CLASS="numbering-1-western"><SPAN LANG="en-US"><I>Don&rsquo;t
	use or write uninitialized values</I></SPAN><SPAN LANG="en-US">. 
	Some languages automatically initialize values when they are
	declared, and thus automatically meet this criteria.  (For an
	example where this guideline was not followed, see section </SPAN><SPAN LANG="en-US">7.1.4</SPAN><SPAN LANG="en-US">.)</SPAN></p>
	<LI><P CLASS="numbering-1-western"><SPAN LANG="en-US"><I>Record the
	detailed information necessary to recompile the compiler and produce
	the same bit sequence</I></SPAN><SPAN LANG="en-US">.</SPAN><SPAN LANG="en-US"><SPAN STYLE="font-style: normal">
	 Record all information necessary for recompilation, including
	compilation options/flags and environment variables.</SPAN></SPAN></p>
	<LI><P CLASS="numbering-1-western"><SPAN LANG="en-US"><I>Don&rsquo;t
	include information about the compilation process inside files used
	during later compilation</I></SPAN><SPAN LANG="en-US">.  If
	information about the compilation is stored inside an executable or
	other files directly used during later compilations, then it can be
	much more difficult to reproduce exactly the same executable. 
	Instead, capture this information in separate file(s) that are </SPAN><SPAN LANG="en-US"><I>not</I></SPAN><SPAN LANG="en-US">
	used (e.g., read or executed) during later compilations (e.g., by
	writing this information to a file during the build process, and
	never reading it later).  Since the file is not used, it&rsquo;s
	easy to show that its contents are irrelevant during later
	</SPAN><SPAN LANG="en-US">recompilations.  (For an example of where
	this guideline was not followed, see section </SPAN><SPAN LANG="en-US">7.3.2.1</SPAN><SPAN LANG="en-US">.)</SPAN></p>
	<LI><P CLASS="numbering-1-western"><SPAN LANG="en-US"><I>Encourage
	the development of alternative implementations of languages.  Use or
	help develop public specifications for computer languages
	(preferably open standards)</I></SPAN><SPAN LANG="en-US">.  DDC
	requires a separate trusted compiler that can process the parent
	compiler.  Thus, to simplify DDC use, encourage the development of
	alternative compilers and remove any roadblocks to their
	development.</SPAN></p>
	<P CLASS="numbering-1-western"><SPAN LANG="en-US">DDC tends to be
	easier to apply if there are several already-existing compilers that
	could be used as a trusted compiler, and such compilers are more
	likely if there is a public specification for the language used to
	write the parent compiler.  If such compilers do not already exist,
	having a public specification greatly simplifies the task of
	creating a trusted compiler for use with DDC.  The specification
	should be an &ldquo;open standard&rdquo;; a good definition of the
	term &ldquo;open standard&rdquo; is the definition of &ldquo;free
	and open standard&rdquo; by the Digital Standards Organization</SPAN><SPAN LANG="en-US"><A CLASS="sdfootnoteanc" NAME="sdfootnote20anc" HREF="#sdfootnote20sym"><SUP>20</SUP></A></SPAN><SPAN LANG="en-US">.
	 Open standards enable fully open competition between suppliers.</SPAN></p>
	<LI><P CLASS="numbering-1-western"><SPAN LANG="en-US"><I>Eliminate
	roadblocks to developing alternative language implementations,
	particularly patents.  Avoid using constructs covered by
	potentially-enforceable patents, ensure that specification authors
	do not require the use of enforceable patents to implement the
	specification, and work to eliminate software patents worldwide</I></SPAN><SPAN LANG="en-US">.
	 Patents are government-granted monopolies.  Historically, software
	could not be patented, and software innovation flourished without
	patents [Klemens2008] [Wheeler2009i].  Unfortunately, some countries
	have permitted software patents in recent years, and several
	analyses suggest that doing so was a mistake.  For example,
	increases in software patent share in the 1990s were associated with
	</SPAN><SPAN LANG="en-US"><I>decreases</I></SPAN><SPAN LANG="en-US">
	in research intensity [Bessen2004] (suggesting that software patents
	</SPAN><SPAN LANG="en-US"><I>discourage</I></SPAN><SPAN LANG="en-US">
	research). Many other problems with software patents are discussed
	in [Bessen2008].  [End2008] summarizes the state of software patents
	as of 2008.  Software patents affect DDC because they can inhibit
	the development of alternative compilers and environments.  Since
	software patents can reduce the number of legal developers and users
	worldwide, software patents can even inhibit the availability of
	alternatives to those in countries free from software patents.  Any
	patents that interfere with the creation of an alternative compiler
	or environment interfere with DDC, and thus interfere with security
	(because they interfere with protection against the trusting trust
	attack).  Eliminating software patents worldwide would be the most
	thorough method to eliminate the problems they cause.</SPAN></p>
	<LI><P CLASS="numbering-1-western"><SPAN LANG="en-US"><I>Make the
	compiler portable and deterministic</I></SPAN><SPAN LANG="en-US">. 
	This is required by DDC (see section </SPAN><SPAN LANG="en-US">5.7.8</SPAN><SPAN LANG="en-US">).
	 If a compiler iterates over hashtable entries, ensure that the
	retrieved order will be the same across different environments and
	compiler implementations if it can affect the final result.  If
	non-portable extensions are used in a compiler&rsquo;s
	implementation, clearly document the extensions.</SPAN></p>
	<LI><P CLASS="numbering-1-western"><SPAN LANG="en-US"><I>Consider
	using a simpler language subset to implement the compiler</I></SPAN><SPAN LANG="en-US">.
	 Using a subset can make it easier to implement a new trusted
	compiler if necessary, since the trusted compiler would probably
	need fewer constructs.  Be sure to document this subset, and test to
	ensure that only this subset is used (as part of the compiler&rsquo;s
	regression test suite).</SPAN></p>
	<LI><P CLASS="numbering-1-western"><SPAN LANG="en-US"><I>Release
	self-parented compiler executables, if applicable</I></SPAN><SPAN LANG="en-US">.
	 If a compiler supports the language(s) it is written in, only
	release compiler executables after they have &ldquo;self-parented&rdquo;
	as described in section </SPAN><SPAN LANG="en-US">4.5</SPAN><SPAN LANG="en-US">.
	 This means that given the source code of a compiler and a bootstrap
	compiler executable, compile the source code using the bootstrap
	compiler, then use the resulting executable to compile the source
	code again.  As noted in section </SPAN><SPAN LANG="en-US">4.5</SPAN><SPAN LANG="en-US">,
	this has many practical benefits that have nothing to with DDC (for
	example, if the compiler generates faster code than the bootstrap
	compiler does, then after self-recompilation the compiler itself
	will execute faster).  For DDC, self-parenting reduces the amount of
	software that must be tracked (since the parent is the same as the
	compiler-under-test), and it reduces the amount of source code that
	must be examined afterwards to determine if the compiler is not
	malicious (since the source of the compiler- under-test </SPAN><SPAN LANG="en-US"><I>s</I></SPAN><SUB><SPAN LANG="en-US">A
	</SPAN></SUB><SPAN LANG="en-US"><SPAN STYLE="font-weight: normal">is
	the same as the source of parent </SPAN></SPAN><SPAN LANG="en-US"><I><SPAN STYLE="font-weight: normal">s</SPAN></I></SPAN><SUB><SPAN LANG="en-US"><SPAN STYLE="font-weight: normal">P</SPAN></SPAN></SUB><SPAN LANG="en-US">,
	only </SPAN><SPAN LANG="en-US"><I>s</I></SPAN><SUB><SPAN LANG="en-US">A</SPAN></SUB><SPAN LANG="en-US">
	needs to be examined).</SPAN></p>
	<LI><P CLASS="numbering-1-western"><SPAN LANG="en-US"><I>Release the
	compiler as free-libre/&#8203;open source software (FLOSS), and
	choose a FLOSS compiler as its parent</I></SPAN><SPAN LANG="en-US">.</SPAN><SPAN LANG="en-US"><I>
	 Alternatively, though this alternative is less effective, release
	the source code to trusted third parties</I></SPAN><SPAN LANG="en-US">.
	 The source code for the compiler being tested and its parent must
	be available to apply DDC.  In addition, DDC merely shows that the
	source code and executable correspond; the source code must then be
	inspected if the goal is to determine that there is no malicious
	code being executed.  This means that the DDC technique is most
	useful for countering the trusting trust attack when applied to
	software whose source code is publicly available for review.  Such
	review is much more useful for </SPAN><SPAN LANG="en-US">FLOSS,
	since with FLOSS any issues found in review can be repaired and
	redistributed by anyone.  If a supplier refuses to release their
	compiler as FLOSS, the supplier should at least release the source
	code to third parties who can perform DDC and thoroughly examine the
	source code for malicious code.  Such third parties must be
	potentially highly trusted by users, since users will not be able to
	independently verify the results.</SPAN></p>
	<LI><P CLASS="numbering-1-western" STYLE="widows: 3; orphans: 3; page-break-before: auto">
	<SPAN LANG="en-US"><I>Apply DDC before each release</I></SPAN><SPAN LANG="en-US">.
	 Of course, the simplest way to ensure that DDC can be applied to a
	compiler is to perform DDC before each release.  Users may want to
	apply DDC using different trusted compilers or trusted environments,
	but this is likely to be easier if DDC has previously been
	successfully applied.</SPAN></p>
</OL>
<OL TYPE=A START=5>
	<LI><H1 CLASS="western" STYLE="page-break-before: always"><A NAME="__RefHeading__33505424"></A><A NAME="5.Key definitions|outline"></A>
	Key definitions</H1>
</OL>
<TABLE WIDTH=100% BORDER=0 CELLPADDING=0 CELLSPACING=0>
	<COL WIDTH=31*>
	<COL WIDTH=4*>
	<COL WIDTH=222*>
	<TR VALIGN=TOP>
		<TD WIDTH=12%>
			<P CLASS="abbreviation-western" ALIGN=LEFT>assembler</p>
		</TD>
		<TD WIDTH=1%>
			<P CLASS="abbreviation-western">&nbsp;&nbsp;</p>
		</TD>
		<TD WIDTH=87%>
			<P CLASS="abbreviation-western">A compiler for a language whose
			instructions are primarily a close approximation of the executing
			environment&rsquo;s instructions.</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=12%>
			<P CLASS="abbreviation-western" ALIGN=LEFT>binary</p>
		</TD>
		<TD WIDTH=1%>
			<P CLASS="abbreviation-western"><BR>
			</p>
		</TD>
		<TD WIDTH=87%>
			<P CLASS="abbreviation-western">A common alternative term for
			executable (e.g., [Sabin2004]).  However, this term is misleading;
			in modern computers, <I>all</I> data is represented using binary
			codes.  Thus, this dissertation uses the term &ldquo;executable&rdquo;
			instead.</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=12%>
			<P CLASS="abbreviation-western" ALIGN=LEFT>compiler</p>
		</TD>
		<TD WIDTH=1%>
			<P CLASS="abbreviation-western"><BR>
			</p>
		</TD>
		<TD WIDTH=87%>
			<P CLASS="abbreviation-western">An executable that, when executed,
			translates source code into an executable (it may also perform
			other actions).</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=12%>
			<P CLASS="abbreviation-western" ALIGN=LEFT>compiling</p>
		</TD>
		<TD WIDTH=1%>
			<P CLASS="abbreviation-western"><BR>
			</p>
		</TD>
		<TD WIDTH=87%>
			<P CLASS="abbreviation-western">The process of using a compiler to
			translate source code into an executable.</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=12%>
			<P CLASS="abbreviation-western" ALIGN=LEFT>correspond</p>
		</TD>
		<TD WIDTH=1%>
			<P CLASS="abbreviation-western"><BR>
			</p>
		</TD>
		<TD WIDTH=87%>
			<P CLASS="abbreviation-western">An executable e corresponds to
			source code s if and only if execution of e always behaves as
			specified by s when the execution environment of e behaves
			correctly.</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=12%>
			<P CLASS="abbreviation-western" ALIGN=LEFT>corrupted compiler</p>
		</TD>
		<TD WIDTH=1%>
			<P CLASS="abbreviation-western"><BR>
			</p>
		</TD>
		<TD WIDTH=87%>
			<P CLASS="abbreviation-western">A corrupted executable that is a
			compiler.</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=12%>
			<P CLASS="abbreviation-western" ALIGN=LEFT>corrupted executable</p>
		</TD>
		<TD WIDTH=1%>
			<P CLASS="abbreviation-western"><BR>
			</p>
		</TD>
		<TD WIDTH=87%>
			<P CLASS="abbreviation-western">An executable that does not
			correspond to its putative source code (see also &ldquo;corrupted
			compiler&rdquo; and &ldquo;maliciously corrupted executable&rdquo;).</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=12%>
			<P CLASS="abbreviation-western" ALIGN=LEFT>Diverse
			Double-Compiling (DDC)</p>
		</TD>
		<TD WIDTH=1%>
			<P CLASS="abbreviation-western"><BR>
			</p>
		</TD>
		<TD WIDTH=87%>
			<P CLASS="abbreviation-western">A technique for determining if a
			compiler is corrupted, in which the source code is compiled twice:
			the source code of the compiler&rsquo;s parent is compiled using a
			trusted compiler, and then the putative compiler source code is
			compiled using the result of the first compilation.  If the DDC
			result is bit-for-bit identical with the original
			compiler-under-test&rsquo;s executable, and certain other
			assumptions hold, then the compiler-under-test&rsquo;s executable
			corresponds with its putative source code.</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=12%>
			<P CLASS="abbreviation-western" ALIGN=LEFT>effects</p>
		</TD>
		<TD WIDTH=1%>
			<P CLASS="abbreviation-western"><BR>
			</p>
		</TD>
		<TD WIDTH=87%>
			<P CLASS="abbreviation-western">All information or execution
			timing arising from the environment that can affect the results of
			a compilation, but is not part of the input source code.  This is
			used to model random number generators, thread execution ordering,
			differences between platforms allowed by the language, and so on.</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=12%>
			<P CLASS="abbreviation-western" ALIGN=LEFT>environ&shy;ment</p>
		</TD>
		<TD WIDTH=1%>
			<P CLASS="abbreviation-western"><BR>
			</p>
		</TD>
		<TD WIDTH=87%>
			<P CLASS="abbreviation-western">A platform that can run
			executables.  This would include the computer hardware (including
			the central processing unit) and any software that supports or
			could influence the compiler&rsquo;s result (e.g., the operating
			system).</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=12%>
			<P CLASS="abbreviation-western" ALIGN=LEFT>executable</p>
		</TD>
		<TD WIDTH=1%>
			<P CLASS="abbreviation-western"><BR>
			</p>
		</TD>
		<TD WIDTH=87%>
			<P CLASS="abbreviation-western">Data that can be directly executed
			by a computing environment.  An executable may be code for an
			actual machine or for a simulated machine (e.g., a &ldquo;byte
			code&rdquo;).  Compilers produce executables, and compilers
			themselves are executables.</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=12%>
			<P CLASS="abbreviation-western" ALIGN=LEFT>fragility</p>
		</TD>
		<TD WIDTH=1%>
			<P CLASS="abbreviation-western"><BR>
			</p>
		</TD>
		<TD WIDTH=87%>
			<P CLASS="abbreviation-western">The susceptibility of the trusting
			trust attack to failure, i.e., that a trigger will activate when
			the attacker did not wish it to (risking a revelation of the
			attack), fail to trigger when the attacker would wish it to, or
			that the payload will fail to work as intended by the attacker.</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=12%>
			<P CLASS="abbreviation-western" ALIGN=LEFT>maliciously corrupted
			compiler</p>
		</TD>
		<TD WIDTH=1%>
			<P CLASS="abbreviation-western"><BR>
			</p>
		</TD>
		<TD WIDTH=87%>
			<P CLASS="abbreviation-western">A maliciously corrupted executable
			that is a compiler.</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=12%>
			<P CLASS="abbreviation-western" ALIGN=LEFT>maliciously corrupted
			executable</p>
		</TD>
		<TD WIDTH=1%>
			<P CLASS="abbreviation-western"><BR>
			</p>
		</TD>
		<TD WIDTH=87%>
			<P CLASS="abbreviation-western">A corrupted executable whose
			corruption was caused by intentional subversion.</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=12%>
			<P CLASS="abbreviation-western" ALIGN=LEFT>maliciously misleading
			code</p>
		</TD>
		<TD WIDTH=1%>
			<P CLASS="abbreviation-western"><BR>
			</p>
		</TD>
		<TD WIDTH=87%>
			<P CLASS="abbreviation-western">Source code that is intentionally
			designed to look benign, yet creates a vulnerability (including an
			attack).</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=12%>
			<P CLASS="abbreviation-western" ALIGN=LEFT>object code</p>
		</TD>
		<TD WIDTH=1%>
			<P CLASS="abbreviation-western"><BR>
			</p>
		</TD>
		<TD WIDTH=87%>
			<P CLASS="abbreviation-western">For purposes of this dissertation,
			a synonym for &ldquo;executable&rdquo;.</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=12%>
			<P CLASS="abbreviation-western" ALIGN=LEFT>payload</p>
		</TD>
		<TD WIDTH=1%>
			<P CLASS="abbreviation-western"><BR>
			</p>
		</TD>
		<TD WIDTH=87%>
			<P CLASS="abbreviation-western">Code that actually performs a
			malicious event (e.g., the inserted malicious code and the code
			that causes its insertion).  These are initiated through triggers.</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=12%>
			<P CLASS="abbreviation-western" ALIGN=LEFT>source code (aka
			source)</p>
		</TD>
		<TD WIDTH=1%>
			<P CLASS="abbreviation-western"><BR>
			</p>
		</TD>
		<TD WIDTH=87%>
			<P CLASS="abbreviation-western">A representation of a program that
			can be transformed by a compiler into an executable.  It is
			typically human-readable.</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=12%>
			<P CLASS="abbreviation-western" ALIGN=LEFT>subverted compiler</p>
		</TD>
		<TD WIDTH=1%>
			<P CLASS="abbreviation-western"><BR>
			</p>
		</TD>
		<TD WIDTH=87%>
			<P CLASS="abbreviation-western">Synonym for &ldquo;maliciously
			corrupted compiler&rdquo;.</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=12%>
			<P CLASS="abbreviation-western" ALIGN=LEFT>trigger</p>
		</TD>
		<TD WIDTH=1%>
			<P CLASS="abbreviation-western"><BR>
			</p>
		</TD>
		<TD WIDTH=87%>
			<P CLASS="abbreviation-western">A condition, determined by an
			attacker, in which a malicious event is to occur (e.g., the
			condition causing malicious code to be inserted into a program,
			and the condition that causes the inserted code to take action).</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=12%>
			<P CLASS="abbreviation-western" ALIGN=LEFT>Trojan horse</p>
		</TD>
		<TD WIDTH=1%>
			<P CLASS="abbreviation-western"><BR>
			</p>
		</TD>
		<TD WIDTH=87%>
			<P CLASS="abbreviation-western">Software that appears to the user
			to perform a desirable function but facilitates unauthorized
			access into the user&rsquo;s computer system.</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=12%>
			<P CLASS="abbreviation-western" ALIGN=LEFT>trusted</p>
		</TD>
		<TD WIDTH=1%>
			<P CLASS="abbreviation-western"><BR>
			</p>
		</TD>
		<TD WIDTH=87%>
			<P CLASS="abbreviation-western">The justified confidence that
			something (e.g., a program or process) does not have triggers and
			payloads that would affect the results of DDC.  See section 4.3
			for a basic discussion of the term &ldquo;trusted&rdquo;; see
			chapter 6 for methods to increase the level of confidence.</p>
		</TD>
	</TR>
	<TR VALIGN=TOP>
		<TD WIDTH=12%>
			<P CLASS="abbreviation-western" ALIGN=LEFT>trusting trust attack</p>
		</TD>
		<TD WIDTH=1%>
			<P CLASS="abbreviation-western"><BR>
			</p>
		</TD>
		<TD WIDTH=87%>
			<P CLASS="abbreviation-western">An attack in which an attacker
			attempts to disseminate a compiler executable that produces
			corrupted executables, at least one of those corrupted executables
			is a corrupted compiler, and the attacker attempts to make this
			situation self-perpetuating.</p>
		</TD>
	</TR>
</TABLE>
<p><BR>
</p>
<H1 CLASS="western" STYLE="page-break-before: always"><A NAME="9.Bibliography|outline"></A>
Bibliography</H1>
<H1 CLASS="heading-1-not-in-toc-western" STYLE="page-break-before: always">
Bibliography</H1>
<P CLASS="text-body-single-spaced-western">The references below are
in strict alphabetical order, ignoring case.  Uniform Resource
Locators (URLs) may change or become invalid at any time; where
provided, they are only intended to aid finding the information.  If
a URL is no longer valid, consider using the Internet Archive at
&lt;<A HREF="http://www.archive.org/">http://www.archive.org&gt;.</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
<BR><BR>
</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Anderson2003] Anderson, Dean. July 23, 2003.&ldquo;Re:
Linuxfromscratch.org&rdquo;. <I>SELinux mailing list</I>.
<A HREF="http://www.nsa.gov/selinux/list-archive/0307/4724.cfm">http://www.nsa.gov/selinux/list-archive/0307/4724.cfm</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Anderson2004] Anderson, Emory A., Cynthia E. Irvin, and Roger R.
Schell. June 2004. &ldquo;Subversion as a Threat in Information
Warfare&rdquo;. <I>Journal of Information Warfare. </I>Vol. 3, No.2.
pp. 52-65. <A HREF="http://cisr.nps.navy.mil/downloads/04paper_subversion.pdf">http://cisr.nps.navy.mil/downloads/04paper_subversion.pdf</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Andrews2003] Andrews, Jeremy. November 5, 2003. &ldquo;Linux: Kernel
&lsquo;Back Door&rsquo; Attempt&rdquo;. <I>Kerneltrap</I>.
<A HREF="http://kerneltrap.org/node/1584">http://kerneltrap.org/node/1584</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[AP1991] Associated Press (AP). June 27, 1991. &ldquo;Computer
Programmer Charged in Sabotage Plot&rdquo;. <I>New York Times</I>.
New York: New York Times.
<A HREF="http://query.nytimes.com/gst/fullpage.html?res=9D0CE7D6173EF934A15755C0A967958260">http://query.nytimes.com/gst/fullpage.html?res=9D0CE7D6173EF934A15755C0A967958260</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Bailey1996] Bailey, Edward P. May 1996. <I>Plain English at Work</I>.
New York: Oxford University Press. ISBN 0-19-510449-8 or
978-0195104493.</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Balakrishnan2005] Balakrishnan, G., T. Reps , D. Melski , and T.
Teitelbaum. Oct. 2005. &ldquo;WYSINWYX: What You See Is Not What You
eXecute&rdquo;. <I>Proc. IFIP Working Conference on Veri&#64257;ed
Software: Theories, Tools, Experiments (VSTTE)</I>.
<A HREF="http://www.cs.wisc.edu/wpis/papers/wysinwyx05.pdf">http://www.cs.wisc.edu/wpis/papers/wysinwyx05.pdf</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Barr2007] Barr, Earl, Matt Bishop, and Mark Gondree. March 2007.
&ldquo;Fixing Federal E-Voting Standards&rdquo;. <I>Communications of
the ACM (CACM)</I>. Volume 50, Issue 3. pp. 19&ndash;24. New York:
ACM Press. ISSN:0001-0782.
<A HREF="http://portal.acm.org/citation.cfm?id=1226736.1226754">http://portal.acm.org/citation.cfm?id=1226736.1226754</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Bellovin1982] Bellovin, Steven Michael. December 1982. <I>Verifiably
Correct Code Generation Using Predicate Transformers</I>. Dept. of
Computer Science, University of North Carolina at Chapel Hill.</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Besson2004] Bessson, James and Robert M. Hunt. March 16, 2004. &ldquo;The
Software Patent Experiment&rdquo;. <I>Business Review.</I>
Philadelphia, PA: Federal Reserve Bank of Philadelphia. Original
paper at <A HREF="http://www.researchoninnovation.org/softpat.pdf">http://www.researchoninnovation.org/softpat.pdf</A><A HREF="http://www.researchoninnovation.org/softpat.pdf">.</A><A HREF="http://www.researchoninnovation.org/softpat.pdf">
</A><A HREF="http://www.phil.frb.org/research-and-data/publications/business-review/2004/q3/brq304rh.pdf">http://www.phil.frb.org/research-and-data/publications/business-review/2004/q3/brq304rh.pdf</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
<SPAN LANG="en-US">[Besson2008] Besson, James and Michael J. Meurer.
March 2008. Patent Failure: How Judges, Bureaucrats, and Lawyers Put
Innovators at Risk. Princeton University Press. Samples available at:
</SPAN><A HREF="http://www.researchoninnovation.org/dopatentswork/"><SPAN LANG="en-US">http://www.researchoninnovation.org/dopatentswork/</SPAN></A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Binghamton2005] Binghamton University, Department of Electrical and
Computer Engineering. 2005-2006. <I>The Underhanded C Contest</I>.
<A HREF="http://www.brainhz.com/underhanded/">http://www.brainhz.com/underhanded/</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Blazy2006] Blazy, Sandrine, Zaynah Dargaye and Xavier Leroy. &ldquo;Formal
verification of a C compiler front-end&rdquo;. <I>Proceedings of
Formal Methods 2006.</I> LNCS 4085.</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Bratman1961] Bratman, Harvey. 1961. &ldquo;An alternative form of
the &lsquo;uncol&rsquo; diagram&rdquo;. <I>Communications of the ACM</I>.
Volume 4, Number 3. Page 142.</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Bridis2003] Bridis, Ted. September 26, 2003. &ldquo;Exec fired over
report critical of Microsoft: Mass. firm has ties to company;
software giant&rsquo;s reach questioned&rdquo;. <I>Seattle pi (The
Associated Press).
</I><A HREF="http://seattlepi.nwsource.com/business/141444_msftsecurity26.html">http://seattlepi.nwsource.com/business/141444_msftsecurity26.html</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Buck2004] Buck, Joe. April 7, 2004. &ldquo;Re: Of Bounties and
Mercenaries&rdquo;. GCC mailing list.
<A HREF="http://gcc.gnu.org/ml/gcc/2004-04/msg00355.html">http://gcc.gnu.org/ml/gcc/2004-04/msg00355.html</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Cappelli2008] Cappelli, Dawn M., Tom Caron, Randall F. Trzeciak, and
Andrew P. Moore. December 2008. Spotlight On: Programming Techniques
Used as an Insider Attack Tool. CERT, Software Engineering Institute
(SEI), Carnegie-Mellon University.
<A HREF="http://www.cert.org/archive/pdf/insiderthreat_programmers_1208.pdf">http://www.cert.org/archive/pdf/insiderthreat_programmers_1208.pdf</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Chou2006] Chou, Andy, Ben Chelf, Seth Hallem, Bryan Fulton, Charles
Henri-Gros, Scott McPeak, Ted Unangst, Chris Zak, and Dawson Engler.
July 2006. &ldquo;Weird things that surprise academics trying to
commercialize a static checking tool.&rdquo; <I>Proceedings of the
Static Analysis Summit</I> (Paul E. Black, Helen Gill, and W. Bradley
Martin, co-chairs, and Elizabeth Fong, editor). pp. 9-13.
Gaithersburg, MD: National Institute of Standards &amp; Technology
(NIST). NIST Special Publication 500-262. (This is listed as the
&ldquo;Keynote Presentation&rdquo; by Dawson Engler in the table of
contents.)
<A HREF="http://samate.nist.gov/docs/NIST_Special_Publication_500-262.pdf">http://samate.nist.gov/docs/NIST_Special_Publication_500-262.pdf</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Christodorescu2003] Christodorescu, Mihai and Somesh Jha. 2003.
&ldquo;Static Analysis of Executables to Detect Malicious Patterns&rdquo;.
<I>Proceedings of the 12th conference on USENIX Security Symposium</I>.
Volume 12. <A HREF="http://portal.acm.org/citation.cfm?id=1251365">http://portal.acm.org/citation.cfm?id=1251365</A>
</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[CNETAsia2003] CNETAsia Staff. August 18, 2003. &ldquo;China blocks
foreign software: A new policy from China's governing body states
that all government ministries must buy only locally produced
software at the next upgrade cycle.&rdquo; <I>CNET News.com</I>.
<A HREF="http://news.com.com/2100-1012_3-5064978.html">http://news.com.com/2100-1012_3-5064978.html</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[CNSS2006] U.S. Committee on National Security Systems (CNSS). June
2006. National Information Assurance Glossary, Instruction No. 4009.
CNSS. <A HREF="http://www.cnss.gov/instructions.html">http://www.cnss.gov/instructions.html</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Cohen1984] Cohen, Fred. &ldquo;Computer Viruses - Theory and
Experiments&rdquo;. 1984. <A HREF="http://all.net/books/virus/index.html">http://all.net/books/virus/index.html</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Cohen1985] Cohen, Fred. 1985. <I>Computer Viruses</I>. Ph.D. Thesis,
University of Southern California.</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Dave2003] Dave, Maulik A. November 2003. &ldquo;Compiler
verification: a bibliography&rdquo; <I>ACM SIGSOFT Software
Engineering Notes</I>. Volume 28 , Issue 6. ISSN:0163-5948. New York:
ACM Press. Note: &ldquo;Dr. Maulik A. Dave&rdquo; is correct.</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Digistan] Digital Standards Organization (Digistan). <I>Definition
of a Free and Open Standard</I>.
<A HREF="http://www.digistan.org/open-standard:definition">http://www.digistan.org/open-standard:definition</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Duffy1991] Duffy, David. 1991. <I>Principles of Automated Theorem
Proving</I>. West Sussex, England: John Wiley &amp; Sons Ltd. ISBN
0-471-92784-8.</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Dodge2005] Dodge, Dave. May 27, 2005. &ldquo;Re: [Tinycc-devel]
Mysterious tcc behavior: why does 0.0 takes 12 bytes when NOT long
double&rdquo;. <I>tcc mailing list</I>.</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[DoJ2006] United States Department of Justice (DoJ) U.S. Attorney,
District of New Jersey, Public Affairs Office. December 13, 2006.
&ldquo;Former UBS Computer Systems Manager Gets 97 Months for
Unleashing &ldquo;Logic Bomb&rdquo; on Company Network&rdquo;.
Newark, New Jersey: United States Department of Justice.
<A HREF="http://www.usdoj.gov/usao/nj/press/files/pdffiles/duro1213rel.pdf">http://www.usdoj.gov/usao/nj/press/files/pdffiles/duro1213rel.pdf</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Draper1984] Draper, Steve. November 1984. &ldquo;Trojan Horses and
Trusty Hackers&rdquo;. <I>Communications of the ACM.</I> Volume 27,
Number 11, p. 1085.</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Earley1970] Earley, Jay and Howard Sturgis. October 1970. &quot;A
Formalism for Translator Interactions&quot;. <I>Communications of the
ACM</I>. Volume 13, Number 10. pp. 607-617.</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
<SPAN LANG="en-US">[End2008] End Software Patents project. February
28, 2008. The current state of software and business method patents:
2008 edition. </SPAN><A HREF="http://endsoftpatents.org/2008-state-of-softpatents"><SPAN LANG="en-US">http://endsoftpatents.org/2008-state-of-softpatents</SPAN></A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Faigon] Faigon, Ariel. Testing for Zero Bugs.
<A HREF="http://www.yendor.com/testing">http://www.yendor.com/testing</A>.</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Feldman2006] Feldman, Ariel J., J. Alex Halderman, and Edward W.
Felten. September 13, 2006. Security Analysis of the Diebold
AccuVote-TS Voting Machine. Center for Information Technology (IT)
Policy, Princeton University. <A HREF="http://itpolicy.princeton.edu/voting/">http://itpolicy.princeton.edu/voting/</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Feng2009] Feng, Chun. 2009-08-20. &ldquo;Virus:Win32/Induc.A&rdquo;.
<I>Malware Protection Center: Threat Research and Response</I>.
Microsoft.
<A HREF="http://www.microsoft.com/security/portal/Threat/Encyclopedia/Entry.aspx?name=Virus%3AWin32%2FInduc.A">http://www.microsoft.com/security/portal/Threat/Encyclopedia/Entry.aspx?name=Virus%3aWin32%2fInduc.A</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Ferreir&oacute;s2001] Ferreir<FONT FACE="Times New Roman, serif">&oacute;</FONT>s,
Jos<FONT FACE="Times New Roman, serif">&eacute;</FONT>. December
2001. &ldquo;The Road to Modern Logic&mdash;An Interpretation&rdquo;.
The Bulletin of Symbolic Logic. <I>Association for Symbolic Logic</I>.
Vol. 7, No. 4. pp. 441-484. <A HREF="http://www.jstor.org/stable/2687794">http://www.jstor.org/stable/2687794</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Forrest1994] Forrest, Stephanie, Lawrence Allen, Alan S. Perelson,
and Rajesh Cherukuri. 1994. &ldquo;Self-Nonself Discrimination in a
Computer.&rdquo; <I>Proc. of the 1994 IEEE Symposium on Research in
Security and Privacy</I>.</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Forrest1997] Forrest, Stephanie, Anil Somayaji, and David H. Ackley.
1997. &ldquo;Building Diverse Computer Systems&rdquo;. <I>Proc. of
the 6th Workshop on Hot Topics in Operating Systems</I>. Los
Alamitos, CA: IEEE Computer Society Press. pp. 67-72.</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Forristal2005] Forristal, Jeff. Dec. 2005. Review: Source-Code
Assessment Tools Kill Bugs Dead. <I>Secure Enterprise Magazine</I>.
<A HREF="http://www.secureenterprisemag.com/article/printableArticle.jhtml?articleId=174402221">http://www.secureenterprisemag.com/article/printableArticle.jhtml?articleId=174402221</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[FSF2009] Free Software Foundation (FSF). June 30, 2009. <I>The Free
Software Definition</I>.  <A HREF="http://www.gnu.org/philosophy/free-sw.html">http://www.gnu.org/philosophy/free-sw.html</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Gardian] Gardian. Undated. Infragard National Member Alliance.
<A HREF="http://www.infragardconferences.com/thegardian/3_22.html">http://www.infragardconferences.com/thegardian/3_22.html</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[GAO2004] U.S. Government Accounting Office (GAO). May 2004. <I>Defense
Acquisitions: Knowledge of Software Suppliers Needed to Manage Risks</I>.
Report GAO-04-678. <A HREF="http://www.gao.gov/cgi-bin/getrpt?GAO-04-678">http://www.gao.gov/cgi-bin/getrpt?GAO-04-678</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Gaudin2006a] Gaudin, Sharon. June 27, 2006. &ldquo;How A Trigger Set
Off A Logic Bomb At UBS PaineWebber&rdquo;. <I>InformationWeek</I>.
<A HREF="http://www.informationweek.com/showArticle.jhtml?articleID=189601826">http://www.informationweek.com/showArticle.jhtml?articleID=189601826</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Gaudin2006b] Gaudin, Sharon. July 19, 2006. &ldquo;Ex-UBS Sys Admin
Found Guilty, Prosecutors To Seek Maximum Sentence&rdquo;.
<I>InformationWeek</I>.
<A HREF="http://www.informationweek.com/security/showArticle.jhtml?articleID=190700064">http://www.informationweek.com/security/showArticle.jhtml?articleID=190700064</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Gaudin2008] Gaudin, Sharon. June 20, 2008. &ldquo;Scientists build
robot that can replicate itself: Machine designed to create 3-D
plastic objects based on blueprint&rdquo;. <I>ComputerWorld</I>.
<A HREF="http://www.computerworld.com/s/article/9101738/">http://www.computerworld.com/s/article/9101738/</A><A HREF="http://www.computerworld.com/s/article/9101738/Scientists_build_robot_that_can_replicate_itself">
Scientists_build_robot_that_can_replicate_itself</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Gauis2000] gauis (sic). May 1, 2000. &ldquo;Things to do in
Ciscoland when you&rsquo;re dead&rdquo;. <I>Phrack.</I> Volume 0xa,
Issue 0x38. <A HREF="http://www.phrack.org/phrack/56/p56-0x0a">http://www.phrack.org/phrack/56/p56-0x0a</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Geer2003] Geer, Dan, Rebecca Bace, Peter Gutmann, Perry Metzger,
Charles P. Pfleeger, John S. Quarterman, and Bruce Schneier. 2003.
<I>Cyber Insecurity: The Cost of Monopoly</I>. Computer and
Communications Industry Association (CCIA).
<A HREF="http://www.ccianet.org/CCIA/files/ccLibraryFiles/Filename/000000000061/cyberinsecurity.pdf">http://www.ccianet.org/CCIA/files/ccLibraryFiles/Filename/000000000061/cyberinsecurity.pdf</A>
or <A HREF="http://cryptome.org/cyberinsecurity.htm">http://cryptome.org/cyberinsecurity.htm</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[GNU2002] GNU. 2002. <I>Using and Porting the GNU Compiler Collection
(GCC)</I> (version 3.0.4).
<A HREF="http://gcc.gnu.org/onlinedocs/gcc-3.0.4/gcc.html">http://gcc.gnu.org/onlinedocs/gcc-3.0.4/gcc.html.</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Goerigk1997] Goerigk, Wolfgang, Ulrich Hoffman, and Hans Langmaack.
June 9, 1997. &ldquo;Rigorous Compiler Implementation Correctness:
How to Prove the Real Thing Correct&rdquo;. Verifix project,
Universities of Karlsruhe, Ulm, and Kiel. Verifix/CAU/2.6. Later
published in In<FONT FACE="Times New Roman, serif"> D. Hutter, W.
Stephan, P. Traverso, and M. Ullmann, editors, Applied Formal Methods
&ndash; FM-Trends 98, volume 1641 of LNCS, pp. 122-136.</FONT></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Goerigk1999] Goerigk, Wolfgang. 1999. &ldquo;On Trojan Horses in
Compiler Implementations&rdquo;. In F. Saglietti and W. Goerigk,
editors, <I>Proc. des Workshops Sicherheit und Zuverlassigkeit
softwarebasierter Systeme</I>, ISTec-Berichte, Garching.
<A HREF="http://citeseer.ist.psu.edu/goerigk99trojan.html">http://citeseer.ist.psu.edu/goerigk99trojan.html</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Goerigk2000] Goerigk, Wolfgang. 2000. &ldquo;Reflections on Ken
Thompson&rsquo;s Reflections on Trusting Trust (Extended Abstract)&rdquo;.
<A HREF="http://www.informatik.uni-kiel.de/~wg/Berichte/TrustingTrust.ps.gz">http://www.informatik.uni-kiel.de/~wg/Berichte/TrustingTrust.ps.gz</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Goerigk2002] Goerigk, Wolfgang. 2002. &ldquo;Compiler verification
revisited&rdquo;. <I>Computer Aided Reasoning: ACL2 Case Studies</I>.
(Kaufmann, P. Panolios, and J. Moore, editors.) Kluwer.</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Havrilla2001a] Havrilla, Jeffrey S. January 10-11, 2001.
&ldquo;Borland/Inprise Interbase SQL database server contains
backdoor superuser account with known password&rdquo;. U.S. Computer
Emergency Readiness Team (US-CERT) Vulnerability Note VU#247371.
<A HREF="https://www.kb.cert.org/vuls/id/247371">https://www.kb.cert.org/vuls/id/247371</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Havrilla2001b] Havrilla, Jeffrey S. January 10-11, 2001. &ldquo;Interbase
Server Contains Compiled-in Back Door Account&rdquo;. CERT&reg;
Advisory CA-2001-01. CERT/CC.
<A HREF="http://www.cert.org/advisories/CA-2001-01.html">http://www.cert.org/advisories/CA-2001-01.html</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Hesseling2003] Hesseling, Dennis E. 2003. <I>Gnomes in the fog: The
reception of Brouwer&rsquo;s intuitionism in the 1920s</I>. Science
Networks. Historical Studies, Vol. 28. ISBN 978-3-7643-6536-3.</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Hoffman1991] Hoffman, Rodney. November 6, 1991. &ldquo;Computer
Saboteur Pleads Guilty&rdquo;. <I>Risks Digest</I>.
<A HREF="http://catless.ncl.ac.uk/Risks/12.60.html#subj2">http://catless.ncl.ac.uk/Risks/12.60.html#subj2</A>.
Quotes from Wire service report in the Los Angeles Times, Nov. 5,
1991, p. D2.</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Horn2004] Horn, Daniel. 2004. <I>The Obfuscated V contest</I>.
<A HREF="http://graphics.stanford.edu/~danielrh/vote/vote.html">http://graphics.stanford.edu/~danielrh/vote/vote.html</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Huth2004] Huth, Michael, and Mark Ryan. 2004. <I>Logic in Computer
Science: Modelling and Reasoning about Systems</I>. Cambridge, UK:
Cambridge University Press. ISBN 978-0-521-54310-1 and 0-521-54310-X.</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Icove1995] Icove, David, Karl Seger, and William VonStorch. August
1995. <I>Computer Crime: A Crimefighter&rsquo;s Handbook</I>.
Sabastopol, CA: O&rsquo;Reilly &amp; Associates, Inc. ISBN
1-56592-086-4.</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[ISO1999] International Organization for Standardization (ISO) (sic).
1999. <I>The C Standard</I>. Unfortunately, at this time ISO fails to
make this standard (and many others) freely available online. A
relatively inexpensive method to obtain a copy of this is by
purchasing the version &ldquo;authored&rdquo; by the British
Standards Institute, with editor/publisher John Wiley &amp; Sons.
ISBN 9780470845738.</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Jendrissek2004] Jendrissek, Bernd. Apr 8, 2004. &ldquo;Tin foil hat
GCC (Was: Re: Of Bounties and Mercenaries)&rdquo;. <I>GCC mailing
list</I>. <A HREF="http://gcc.gnu.org/ml/gcc/2004-04/msg00404.html">http://gcc.gnu.org/ml/gcc/2004-04/msg00404.html</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Karger1974] Karger, Paul A., and Roger R. Schell. June 1974. <I>Multics
Security Evaluation: Vulnerability Analysis</I>. ESD-TR-74-193, Vol.
II. pp. 51-52.  Reprinted with [Karger 2002], below.</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Karger2002] Karger, Paul A., and Roger R. Schell.  September 18,
2002. &ldquo;Thirty Years Later: Lessons from the Multics Security
Evaluation&rdquo;. <I>Proc. of ACSAC 2002</I>.
<A HREF="http://www.acsac.org/2002/papers/classic-multics.pdf">http://www.acsac.org/2002/papers/classic-multics.pdf</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Kass2006] Kass, Michael, Michael Koo, Paul E. Black, and Vadim Okun.
July 2006. &ldquo;A Proposed Functional Specification for Source Code
Analysis Tools.&rdquo; <I>Proceedings of the Static Analysis Summit</I>
(Paul E. Black, Helen Gill, and W. Bradley Martin, co-chairs, and
Elizabeth Fong, editor). pp. 65-73. Gaithersburg, MD: National
Institute of Standards &amp; Technology (NIST). NIST Special
Publication 500-262.
<A HREF="http://samate.nist.gov/docs/NIST_Special_Publication_500-262.pdf">http://samate.nist.gov/docs/NIST_Special_Publication_500-262.pdf</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Kernighan1988] Brian W. Kernighan and Dennis M. Ritchie. March 22,
1988. <I>The C Programming Language</I>. 2nd Edition. Prentice Hall
PTR.</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Kim1994] Kim, Gene H., and Eugene H. Spafford. 1994. &ldquo;The
design and implementation of tripwire: a file system integrity
checker&rdquo;. <I>Proceedings of the 2nd ACM Conference on Computer
and communications</I>. Fairfax, Virginia, United States. pp. 18 &ndash;
29. ISBN 0-89791-732-4.</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
<SPAN LANG="en-US">[Klemens2008] Klemens, Ben. Winter 2008. &ldquo;The
Rise of the Information Processing patent&rdquo;. </SPAN><SPAN LANG="en-US"><I>Boston
University Journal of Science and Technology Law</I></SPAN><SPAN LANG="en-US">.
Volume 14, Issue 1. pp 1&mdash;37.
</SPAN><A HREF="http://www.bu.edu/law/central/jd/organizations/journals/scitech/volume141/documents/Klemens.pdf"><SPAN LANG="en-US">http://www.bu.edu/law/central/jd/organizations/journals/scitech/volume141/documents/Klemens.pdf</SPAN></A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Knight1986] Knight, John C. and Nancy G. Leveson. January 1986. &ldquo;An
experimental evaluation of the assumption of independence in
multiversion programming&rdquo;. <I>IEEE Transactions on Software
Engineering</I>. Volume 12, Issue 1. pp 96-109. ISSN:0098-5589. Paul
Ammann, one of the PhD committee members, was directly involved in
this experiment&mdash;he wrote one of the N programs in the
experiment (no defects were found in it) and he was responsible for
many of the testing activities.</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Knight1990] Knight, John C. and Nancy G. Leveson. January 1990. &ldquo;A
reply to the Criticisms of the Knight &amp; Leveson Experiment&rdquo;.
<I>ACM SIGSOFT Software Engineering Notes</I>. Volume 15, number 1.</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Kohno2004] Kohno, Tadayoshi, Adam Stubblefield, Aviel D. Rubin, and
Dan S. Wallach. May 2004. &ldquo;Analysis of an electronic voting
system&rdquo;. <I>Proceedings of the 2004 IEEE Symposium on Security
and Privacy</I>. pp. 27- 40. ISSN 1081-6011. ISBN 0-7695-2136-3.
<A HREF="http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=1301313">http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=1301313</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Komaroff2005] Komaroff, Mitchell (OASD (NII)/DCIO) and Kristen
Baldwin (OUSD(AT&amp;L)/DS). 2005. &ldquo;DoD Software Assurance
Initiative&rdquo; <A HREF="https://acc.dau.mil/CommunityBrowser.aspx?id=25749">https://acc.dau.mil/CommunityBrowser.aspx?id=25749</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Kratkiewicz2005] Kratkiewicz, Kendra. 2005. <I>Evaluating Static
Analysis Tools for Detecting Buffer Overflows in C Code</I>. Master&rsquo;s
thesis. Cambridge, MA: Harvard University.
<A HREF="http://www.ll.mit.edu/IST/pubs/KratkiewiczThesis.pdf">http://www.ll.mit.edu/IST/pubs/KratkiewiczThesis.pdf</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Lapell2006] Lapell, Jennifer. June 1, 2006. &ldquo;Can Viruses Be
Detected?&rdquo; <I>SecurityFocus</I>.
<A HREF="http://www.securityfocus.com/infocus/1267">http://www.securityfocus.com/infocus/1267</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Lee2000] Lee, Lawrence. June 15, 2000. &ldquo;Re: Reflections on
Trusting Trust&rdquo;. <I>Linux Security Auditing mailing list</I>.
<A HREF="http://seclists.org/lists/security-audit/2000/Apr-Jun/0222.html">http://seclists.org/lists/security-audit/2000/Apr-</A><A HREF="http://seclists.org/lists/security-audit/2000/Apr-Jun/0222.html">Jun/0222.html</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Leinenbach2005] Leinenbach, Dirk, Wolfgang Paul, and Elena Petrova.
2005. &ldquo;Toward the Formal Verification of a C0 Compiler: Code
Generation and Implementation Correctness&rdquo;. <I>Proceedings of
the Third IEEE International Conference on Software Engineering and
Formal Methods (SEFM&rsquo;05)</I>. IEEE Computer Society. ISBN
0-7695-2435-4/05.</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Leroy2006] Leroy, Xavier. 2006. Formal certification of a compiler
back-end, or: programming a compiler with a proof assistant.
<I>Proceedings of the POPL 2006 symposium</I>.
<A HREF="http://compcert.inria.fr/doc/index.html">http://compcert.inria.fr/doc/index.html</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Leroy2008] Leroy, Xavier. July 2008. <I>A formally verified compiler
back-end</I>. <A HREF="http://compcert.inria.fr/doc/index.html">http://compcert.inria.fr/doc/index.html</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Leroy2009] Leroy, Xavier. March 2009. &ldquo;Formal verification of
a realistic compiler&rdquo;. <I>Communications of the ACM</I>.
<A HREF="http://compcert.inria.fr/doc/index.html">http://compcert.inria.fr/doc/index.html</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Libra2004] Libra. Apr 9, 2004. &ldquo;Cross compiling compiler
(Green Hills Software on free software in the military)&rdquo;. <I>Linux
Weekly News</I>. <A HREF="http://lwn.net/Articles/79801/">http://lwn.net/Articles/79801/</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Linger2006] Linger, Richard C., Stacy J. Prowell, and Mark
Pleszkoch. July 2006. &ldquo;Automated Calculation of Software
Behavior with Function Extraction (FX) for Trustworthy and
Predictable Execution&rdquo;. <I>Proceedings of the Static Analysis
Summit</I> (Paul E. Black, Helen Gill, and W. Bradley Martin,
co-chairs, and Elizabeth Fong, editor). pp. 22-26. Gaithersburg, MD:
National Institute of Standards &amp; Technology (NIST). NIST Special
Publication 500-262.
<A HREF="http://samate.nist.gov/docs/NIST_Special_Publication_500-262.pdf">http://samate.nist.gov/docs/NIST_Special_Publication_500-262.pdf</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Lord2004] Lord, Tom. April 7, 2004. &ldquo;Re: Of Bounties and
Mercenaries.&rdquo; <I>GCC mailing list</I>.
<A HREF="http://gcc.gnu.org/ml/gcc/2004-04/msg00394.html">http://gcc.gnu.org/ml/gcc/2004-04/msg00394.html</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Luzar2003] Luzar, Lukasz. July 23, 2003. &ldquo;Re:
Linuxfromscratch.org&rdquo;. <I>SELinux mailing list</I>.
<A HREF="http://www.nsa.gov/selinux/list-archive/0307/4719.cfm">http://www.nsa.gov/selinux/list-archive/0307/4719.cfm</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Malaika2001] Malaika, Susan. 14 March 2001. The [NEL] Newline
Character. W3C Note. <A HREF="http://www.w3.org/TR/newline">http://www.w3.org/TR/newline</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[McCune2008] McCune. May 2008. <I>Prover9 Manual</I>.
<A HREF="http://www.cs.unm.edu/~mccune/mace4">http://www.cs.unm.edu/~mccune/mace4</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[McDermott1988] McDermott, John. October 1988. &ldquo;A Technique for
Removing an Important Class of Trojan Horses from High Order
Languages&rdquo;. <I>Proceedings of the 11</I><SUP><I>th</I></SUP><I>
National Computer Security Conference</I>, Baltimore, MD. pp.
114-117.</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Michaud2006] Michaud, Fr&eacute;d&eacute;ric, and Fr&eacute;d&eacute;ric
Painchaud. July 2006. &ldquo;Verification Tools for Software Security
Bugs&rdquo;. <I>Proceedings of the Static Analysis Summit</I> (Paul
E. Black, Helen Gill, and W. Bradley Martin, co-chairs, and Elizabeth
Fong, editor). Gaithersburg, MD: National Institute of Standards &amp;
Technology (NIST). NIST Special Publication 500-262. pp. 41-48.
<A HREF="http://samate.nist.gov/docs/NIST_Special_Publication_500-262.pdf">http://samate.nist.gov/docs/NIST_Special_Publication_500-262.pdf</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Mills2009] Mills, Elinor. 2009-08-20. &ldquo;Developers: Are you
spreading malware when you code?&rdquo; <I>CNET News.com</I>.
<A HREF="http://www.builderau.com.au/news/soa/Developers-Are-you-spreading-malware-when-you-code-/0,339028227,339298050,00.htm">http://www.builderau.com.au/news/soa/Developers-Are-you-spreading-malware-when-you-code-/0,339028227,339298050,00.htm</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Mogensen2007] Mogensen, Torben. 2007. <I>Basics of Compiler Design</I>.
Self-published.</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Magdsick2003] Magdsick, Karl Alexander. July 23, 2003. &ldquo;Re:
Linuxfromscratch.org&rdquo;. <I>SELinux mailing list</I>.
<A HREF="http://www.nsa.gov/selinux/list-archive/0307/4720.cfm">http://www.nsa.gov/selinux/list-archive/0307/4720.cfm</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Maynor2004] Maynor, David. July 2004. &ldquo;Trust No-One, Not Even
Yourself OR The Weak Link Might Be Your Build Tools&rdquo;. Las
Vegas, NV: Black Hat USA 2004, Caesars Palace.
<A HREF="http://blackhat.com/presentations/bh-usa-04/bh-us-04-maynor.pdf">http://blackhat.com/presentations/bh-usa-04/bh-us-04-maynor.pdf</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Maynor2005] Maynor, David. January 1, 2005. &ldquo;The Compiler as
Attack Vector&rdquo;. <I>Linux Journal</I><SPAN STYLE="font-style: normal">.</SPAN><I>
</I><A HREF="http://www.linuxjournal.com/article/7839">http://www.linuxjournal.com/article/7839</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[McCune2000] McCune, William and Olga Shumsky. 2000. &ldquo;Ivy: A
Preprocessor and Proof Checker for First-order Logic&rdquo;.
<I>Computer-Aided Reasoning: ACL2 Case Studies</I> (edited by M.
Kaufmann, P. Manolios, and J. Moore). Kluwer Academic Publishers.
<A HREF="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.45.4430">http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.45.4430</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[McKeeman1970] McKeeman, Horning, and Wartman. <I>A Compiler
Generator</I>. 1970.</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Miller2003] Miller, Robin &ldquo;Roblimo&rdquo; and Joe &ldquo;warthawg&rdquo;
Barr. November 6, 2003. &ldquo;Linux kernel development process
thwarts subversion attempt&rdquo;. <I>NewsForge</I>.
<A HREF="http://www.newsforge.com/article.pl?sid=03/11/06/1532223">http://www.newsforge.com/article.pl?sid=03/11/06/1532223</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Mohring2004] Mohring, David. October 12, 2004. &ldquo;Twelve Step
TrustABLE IT: VLSBs in VDNZs From TBAs&rdquo;. <I>IT Heresies</I>.
<A HREF="http://itheresies.blogspot.com/2004_10_01_itheresies_archive.html">http://itheresies.blogspot.com/2004_10_01_itheresies_archive.html</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[NDIA2008] National Defense Industrial Association (NDIA). October
2008. <I>Engineering for System Assurance</I>.
<A HREF="http://www.acq.osd.mil/sse/docs/SA-Guidebook-v1-Oct2008.pdf">http://www.acq.osd.mil/sse/docs/SA-Guidebook-v1-Oct2008.pdf</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[OSI2006] Open Source Initiative (OSI). July 24, 2006 (Version 1.9).
<I>The Open Source Definition (Annotated)</I>.
<A HREF="http://www.opensource.org/docs/definition.php">http://www.opensource.org/docs/definition.php</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Owre2001] Owre, S., N. Shankar, J. M. Rushby, D. W. J.
Stringer-Calvert. November 2001. <I>PVS Language Reference</I>.
Version 2.4. <A HREF="http://pvs.csl.sri.com/doc/pvs-language-reference.pdf">http://pvs.csl.sri.com/doc/pvs-language-reference.pdf</A>.
Other PVS materials are available at <A HREF="http://pvs.csl.sri.com/">http://pvs.csl.sri.com.</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Payne2002] Payne, Christian. 2002. &ldquo;On the security of open
source software&rdquo;. <I>Information Systems Journal</I>. Volume
12, Issue 1: 61-78.</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[PCIB2003] President's Critical Infrastructure Protection Board
(PCIB) (later the National Infrastructure Advisory Council (NIAC)).
February 2003. <I>The National Strategy </I><I>to Secure Cyberspace</I>.
<A HREF="http://www.whitehouse.gov/pcipb/">http://www.whitehouse.gov/pcipb/</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[PITAC2005] (U.S.) President&rsquo;s Information Technology Advisory
Committee (PITAC). February 2005. <I>Cyber Security: A Crisis of
Prioritization</I>. Arlington, Virginia: National Coordination Office
for Information Technology Research and Development.
<A HREF="http://www.nitrd.gov/pitac/reports/20050301_cybersecurity/cybersecurity.pdf">http://www.nitrd.gov/pitac/reports/20050301_cybersecurity/cybersecurity.pdf</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Raymond2003] Raymond, Eric S. (editor). Dec. 29, 2003. <I>The Jargon
File.</I> Version 4.4.7. Previous version 4.0.0 was published in
September 1996 as <I>The New Hacker&rsquo;s Dictionary</I> third
edition (ISBN 0-262-68092-0). <A HREF="http://www.catb.org/~esr/jargon/">http://www.catb.org/~esr/jargon/</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[RepRap2009] RepRap home page. Viewed September 14, 2009.
<A HREF="http://reprap.org/bin/view/Main/WebHome">http://reprap.org/bin/view/Main/WebHome</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Ritter2002] Ritter, R.M. April 4, 2002. <I>The Oxford Guide to
Style</I>. USA: Oxford University Press. ISBN 0198691750.</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Robinson2001] Robinson, Alan, and Andrei Voronkov, editors. 2001.
<I>Handbook of Automated Reasoning</I>. Volume 1. Amsterdam, The
Netherlands: Elsevier Science B.V. Co-publishers (for the U.S. and
Canada) Cambridge, MA: MIT Press. ISBN 0-444-82949-0.</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Roskind 1998] Roskind, Jim. November 23, 1998. &ldquo;Re: LWN - The
Trojan Horse (Bruce Perens)&rdquo;. <I>Robust Open Source mailing
list</I> (open-source at csl.sri.com) established by Peter G.
Neumann.</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Sabin2004] Todd Sabin. 2004. &ldquo;Comparing binaries with Graph
Isomorphism.&rdquo; Bindview.
<A HREF="http://www.bindview.com/Support/RAZOR/Papers/2004">http://www.bindview.com/Support/RAZOR/Papers/2004</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Saltman1988] Saltman, Roy G. October 1988. &ldquo;Accuracy,
integrity and security in computerized vote-tallying&rdquo;.
<I>Communications of the ACM (CACM)</I>, Volume 31, Issue 10. pp.
1184 &ndash; 1191. ISSN:0001-0782. New York: ACM Press.
<A HREF="http://portal.acm.org/citation.cfm?id=63041">http://portal.acm.org/citation.cfm?id=63041</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Schneier2006] Schneier, Bruce. &ldquo;Countering &lsquo;Trusting
Trust&rsquo; &rdquo;. <I>Schneier on Security</I>. January 23, 2006.
<A HREF="http://www.schneier.com/blog/archives/2006/01/countering_trus.html">http://www.schneier.com/blog/archives/2006/01/countering_trus.html</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Schroeder2009] Schroeder, Bianca, Eduardo Pinheiro, and
Wolf-Dietrich Weber. June 2009. &ldquo;DRAM Errors in the Wild: A
Large-Scale Field Study&rdquo;. <I>Proc. of SIGMETRICS/ Performance
&rsquo;09</I>, June 15&ndash;19, 2009, Seattle, WA, USA. ACM
978-1-60558-511-6/09/06.
<A HREF="http://www.cs.toronto.edu/~bianca/papers/sigmetrics09.pdf">http://www.cs.toronto.edu/~bianca/papers/sigmetrics09.pdf</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Schwartau1994] Schwartau, Winn. 1994. <I>Information Warfare: Chaos
on the Electronic Superhighway</I>. New York: Thunder&rsquo;s Mouth
Press. ISBN 1-56025-080-1.</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[SDIO1993] Strategic Defense Initiative Organization (SDIO). July 2,
1993. &ldquo;Appendix A: Trust Principles&rdquo;. A revised appendix
of <I>Trusted Software Methodology Volume 1: Trusted Software program
Demonstration, Assessment and Refinement</I>. SDI-S-SD-91-000007,
June 17, 1992. Washington, DC: SDIO. Prepared by GE Aerospace,
Strategic Systems Department, Blue Bell, PA. CDRL A075-101B.</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Shankland2001] Shankland, Stephen. January 11, 2001. &ldquo;Borland
InterBase backdoor detected&rdquo;. ZDNet News.
<A HREF="http://news.zdnet.com/2100-9595_22-527115.html">http://news.zdnet.com/2100-9595_22-527115.html</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Singh2002] Singh, Prabhat K., and Arun Lakhotia. February 2002.
Analysis and Detection of Computer Viruses and Worms: An Annotated
Bibliography. <I>ACM SIGPLAN Notices</I>. Volume 37, Issue 2. pp. 29
&ndash; 35.</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Spencer1998] Henry Spencer. November 23, 1998. &ldquo;Re: LWN - The
Trojan Horse (Bruce Perens)&rdquo;. <I>Robust Open Source mailing
list</I> (open-source at csl.sri.com) established by Peter G.
Neumann.</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Spencer2005] Henry Spencer, private communication.</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Spinellis2003] Spinellis, Diomidis. June 2003. &ldquo;Reflections on
Trusting Trust Revisited,&rdquo; <I>Communications of the ACM</I>.
Volume 46, Number 6.
<A HREF="http://www.dmst.aueb.gr/dds/pubs/jrnl/2003-CACM-Reflections2/html/reflections2.pdf">http://www.dmst.aueb.gr/dds/pubs/jrnl/2003-CACM-Reflections2/html/reflections2.pdf</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Stoll1979] Stoll, Robert R. 1979. <I>Set Theory and Logic</I>.
Mineola, NY: Dover Publications, Inc. (This is the Dover edition,
first published in 1979, that is a corrected republication of the
work originally published in 1963 by W.H. Freeman and Company.) ISBN
0-486-63829-4.</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Stringer-Calvert1998] David William John Stringer-Calvert. March
1998. &ldquo;Mechanical Verification of Compiler Correctness&rdquo;
(PhD thesis). University of York, Department of Computer Science.
<A HREF="http://www.csl.sri.com/users/dave_sc/papers/thesis.ps.gz">http://www.csl.sri.com/users/dave_sc/papers/thesis.ps.gz</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Thompson1984] Thompson, Ken. April 1984. &ldquo;Reflections on
Trusting Trust&rdquo;. <I>Communications of the ACM</I>. Volume 27,
Number 8. pp. 761-763. <A HREF="http://www.acm.org/classics/sep95">http://www.acm.org/classics/sep95</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Thornburg2000] Thornburg, Jonathan. April 18, 2000. &ldquo;?Backdoor
in Microsoft web server?&rdquo;. Newsgroup sci.crypt.
<A HREF="http://groups-beta.google.com/group/sci.crypt/msg/9305502fd7d4ee6f">http://groups-beta.google.com/group/sci.crypt/msg/9305502fd7d4ee6f</A>.</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Ulsch2000] Ulsch, MacDonnell. July 2000. &ldquo;Security Strategies
for E-Companies (EC Does it series)&rdquo;. <I>Information Security
Magazine</I>.
<A HREF="http://infosecuritymag.techtarget.com/articles/july00/columns2_ec_doesit.shtml">http://infosecuritymag.techtarget.com/articles/july00/columns2_ec_doesit.shtml</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[vonHagen2006] von Hagen, William. <I>The Definitive Guide to GCC</I>,
Second Edition. 2006. New York: Springer-Verlag. ISBN
978-1-59059-585-5.</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Wheeler2003s] Wheeler, David A. 2003. <I>Secure Programming for
Linux and Unix HOWTO</I>. <A HREF="http://www.dwheeler.com/secure-programs/">http://www.dwheeler.com/secure-programs/</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Wheeler2003t] Wheeler, David A. October 2003. <I>Techniques for
Cyber Attack Attribution</I>. Institute for Defense Analyses (IDA).
IDA Paper P-3792. Log: H 03-001218.
<A HREF="http://www.dtic.mil/cgi-bin/GetTRDoc?AD=ADA468859&amp;Location=U2&amp;doc=GetTRDoc.pdf"><FONT SIZE=2 STYLE="font-size: 11pt">http://www.dtic.mil/cgi-bin/GetTRDoc?AD=ADA468859&amp;Location=U2&amp;doc=GetTRDoc.pdf</FONT></A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Wheeler2005] Wheeler, David A. December 2005. &ldquo;Countering
Trusting Trust through Diverse Double-Compiling (DDC)&rdquo;.
<I>Proceedings of the Twenty-First Annual Computer Security
Applications Conference (ACSAC). </I>Tucson, Arizona, pp. 28-40, Los
Alamitos: IEEE Computer Society. ISBN 0-7695-2461-3, ISSN 1063-9527,
IEEE Computer Society Order Number P2461.
<A HREF="http://www.dwheeler.com/trusting-trust">http://www.dwheeler.com/trusting-trust</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Wheeler2007] Wheeler, David A. April 12, 2007. <I>Why OSS/FS? Look
at the Numbers!</I> <A HREF="http://www.dwheeler.com/oss_fs_why.html">http://www.dwheeler.com/oss_fs_why.html</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Wheeler2008] Wheeler, David A. May 14, 2008. <I>Is OpenDocument an
Open Standard? Yes!</I>
<A HREF="http://www.dwheeler.com/essays/opendocument-open.html">http://www.dwheeler.com/essays/opendocument-open.html</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Wheeler2009f] Wheeler, David A. February 3, 2009. <I>Free-Libre/&#8203;Open
Source Software (FLOSS) is Commercial Software</I>.
<A HREF="http://www.dwheeler.com/essays/commercial-floss.html">http://www.dwheeler.com/essays/commercial-floss.html</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Wheeler2009i] Wheeler, David A. May 26, 2009. The Most Important
Software Innovations.
<A HREF="http://www.dwheeler.com/innovation/innovation.html">http://www.dwheeler.com/innovation/innovation.html</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Wheeler2009s] Wheeler, David A. Revised July 29, 2009.
<I>Sweet-expressions: Version 0.2</I>.
<A HREF="http://www.dwheeler.com/readable/version02.html">http://www.dwheeler.com/readable/version02.html</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Williams2009] Williams, Jeff (Aspect Security). July 29, 2009.
&ldquo;Enterprise Java Rootkits: &lsquo;Hardly anyone watches the
developers&rsquo;&rdquo;. <I>BlackHat USA</I>.
<A HREF="http://www.blackhat.com/presentations/bh-usa-09/WILLIAMS/BHUSA09-Williams-EnterpriseJavaRootkits-PAPER.pdf">http://www.blackhat.com/presentations/bh-usa-09/WILLIAMS/BHUSA09-Williams-EnterpriseJavaRootkits-PAPER.pdf</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Wirth1996] Wirth, Niklaus. 1996. <I>Compiler Construction</I>.
Addison-Wesley. ISBN 0-201-40353-6.</p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Wysopal] Wysopal, Chris. 2007. &ldquo;Static Detection of
Application Backdoors&rdquo;. <I>Black Hat</I>.
<A HREF="https://www.blackhat.com/presentations/bh-usa-07/Wysopal_and_Eng/Whitepaper/bh-usa-07-wysopal_and_eng-WP.pdf">https://www.blackhat.com/presentations/bh-usa-07/Wysopal_and_Eng/Whitepaper/bh-usa-07-wysopal_and_eng-WP.pdf</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
[Zitser2004] Zitser, Misha, Richard Lippmann, and Tim Leek. 2004.
&ldquo;Testing Static Analysis Tools using Exploitable Buffer
Overflows from Open Source Code&rdquo;. <I>Proc. FSE-12, ACM SIGSOFT</I>.
<A HREF="http://www.ll.mit.edu/IST/pubs/04_TestingStatic_Zitser.pdf">http://www.ll.mit.edu/IST/pubs/04_TestingStatic_Zitser.pdf</A></p>
<P ALIGN=LEFT STYLE="margin-top: 0in; margin-bottom: 0.17in; background: transparent; line-height: 100%; page-break-after: auto">
<BR><BR>
</p>
<H1 CLASS="heading-1-not-in-toc-western" STYLE="page-break-before: always">
Curriculum Vitae</H1>
<P CLASS="text-body-single-spaced-western"><IMG SRC="wheeler-trusting-trust-ddc_html_5ec3dd4a.jpg" NAME="graphics1" ALIGN=LEFT HSPACE=10 VSPACE=19 WIDTH=180 HEIGHT=305 BORDER=0><A HREF="http://www.dwheeler.com/">David
A. Wheeler</A> was born May 1965 in the United States of America and
is an American citizen.  He completed his B.S. in Electronics
Engineering (with distinction) at George Mason University (GMU) in
1987 (awarded January 1988).  He received his M.S. in Computer
Science and a certificate for Software Engineering at GMU in 1994,
when he also received a Computer Science graduate honor roll award. 
In 2000 he received a certificate in Information Systems Security
from GMU.  In 2009 he completed his requirements for a PhD in
Information Technology from GMU.</p>
<P CLASS="text-body-single-spaced-western">From 1982 on he worked as
a computer consultant, solving a variety of problems.  He also spent
time as the maintainer of the U.S.&rsquo; first commercial multi-user
role-playing game.  In 1988 he joined the Institute for Defense
Analyses (IDA), where he continues to solve challenging problems. 
His numerous awards include the Ada Programming Contest Award,
membership in the Eta Kappa Nu Honor Society, and the George
Washington University Engineering Award; he is also an Eagle Scout. 
His books include <I>Software Inspection: An Industry Best Practice</I>
(IEEE Computer Society Press), <I>Ada 95: The Lovelace Tutorial</I>
(Springer-Verlag), and <I>Secure Programming for Linux and Unix HOWTO</I>
(self-published).  His numerous articles include his developerWorks
column &ldquo;Secure Programmer&rdquo;, the article <I>Why Open
Source Software / Free Software? Look at the Numbers!,</I> and
&ldquo;Countering Trusting Trust through Diverse Double-Compiling
(DDC)&rdquo; in <I>Proceedings of the Twenty-First Annual Computer
Security Applications Conference</I> (ACSAC 2005).  He has long
worked on tasks related to large or high-risk systems, and in
particular specializes in developing secure software,
Free-libre/&#8203;open source software (FLOSS), and open standards.</p>
<P CLASS="text-body-single-spaced-western">For more information,
including contact information, see David A. Wheeler&rsquo;s personal
website at &lt;<A HREF="http://www.dwheeler.com/">http://www.dwheeler.com</A>&gt;.</p>
<DIV ID="sdfootnote1">
	<P CLASS="sdfootnote"><A CLASS="sdfootnotesym" NAME="sdfootnote1sym" HREF="#sdfootnote1anc">1</A>An
	<I>executable</I> is data that can be directly executed by a
	computing <SPAN STYLE="font-style: normal">environment</SPAN>.  An
	executable may be code for an actual machine or for a simulated
	machine (e.g., a &ldquo;byte code&rdquo;).  A common alternative
	term for executable is &ldquo;binary&rdquo; (e.g., [Sabin2004]), but
	this term is misleading; in modern computers, <I>all</I> data is
	represented using binary codes.  For purposes of this dissertation,
	&ldquo;object code&rdquo; is a synonym for &ldquo;executable&rdquo;.
	 <I>Source code</I> is a representation of a program that can be
	translated into an executable, and is typically human-readable.  A
	<I>compiler</I> is an executable that when executed translates
	source code into an executable (it may also perform other actions). 
	An <I>assembler</I> is a compiler for a language whose instructions
	are primarily a close approximation of the executing environment&rsquo;s
	instructions.  The process of using<SPAN STYLE="font-style: normal">
	a compiler to translate source code into an executable is termed
	</SPAN><I>compiling</I><SPAN STYLE="font-style: normal">.</SPAN></p>
</DIV>
<DIV ID="sdfootnote2">
	<P CLASS="sdfootnote"><A CLASS="sdfootnotesym" NAME="sdfootnote2sym" HREF="#sdfootnote2anc">2</A>An
	executable e corresponds to source code s if and only if execution
	of e always behaves as specified by s when the execution environment
	of e behaves correctly.</p>
</DIV>
<DIV ID="sdfootnote3">
	<P CLASS="sdfootnote"><A CLASS="sdfootnotesym" NAME="sdfootnote3sym" HREF="#sdfootnote3anc">3</A>Determining
	if two executables are equivalent is undecidable in general; see
	section 5.6.1.</p>
</DIV>
<DIV ID="sdfootnote4">
	<P CLASS="sdfootnote"><A CLASS="sdfootnotesym" NAME="sdfootnote4sym" HREF="#sdfootnote4anc">4</A>This
	is theorem 2 (the bootstrap test theorem) of [Goerigk1999].  For
	clarity, the text has been modified so that its notation is the same
	as the notation used in this dissertation.</p>
</DIV>
<DIV ID="sdfootnote5">
	<P CLASS="sdfootnote"><A CLASS="sdfootnotesym" NAME="sdfootnote5sym" HREF="#sdfootnote5anc">5</A>CERT
	is not an acronym.</p>
</DIV>
<DIV ID="sdfootnote6">
	<P CLASS="sdfootnote"><A CLASS="sdfootnotesym" NAME="sdfootnote6sym" HREF="#sdfootnote6anc">6</A>Open
	source software is, briefly, software where users have the right to
	use the software for any purpose, review it, modify it, and
	redistribute it (modified or not) without requiring royalty payments
	[Wheeler2007].   The Open Source Definition [OSI2006] and the Free
	Software Definition [FSF2009] have more formal definitions for this
	term or the related term &ldquo;Free software&rdquo;.  There is
	quantitative data showing that, in many cases, using open source
	software/&#8203;Free software (abbreviated as OSS/FS, FLOSS, or
	FOSS) is a reasonable or even superior approach to using their
	proprietary competition according to various measures [Wheeler2007].
	 In almost all cases, it is commercial software [Wheeler2009f].</p>
</DIV>
<DIV ID="sdfootnote7">
	<P CLASS="sdfootnote"><A CLASS="sdfootnotesym" NAME="sdfootnote7sym" HREF="#sdfootnote7anc">7</A>Even
	if the attack is eventually detected, if the attacker can be assured
	that the attack will not be detected for a very long time, the
	attacker may still find it valuable.  The attacker could, for
	example, use this lengthy time to successfully perform other attacks
	and subvert an infrastructure in many other ways.  Also, if the
	original attack is not detected for a long time, it is often
	increasingly difficult to determine the identity of the attacker or
	at least an important intermediary.  For a summary of techniques
	that can resolve this &ldquo;attribution&rdquo; problem, see
	[Wheeler2003t].</p>
</DIV>
<DIV ID="sdfootnote8">
	<P CLASS="sdfootnote"><A CLASS="sdfootnotesym" NAME="sdfootnote8sym" HREF="#sdfootnote8anc">8</A>DDC
	will not create an identical executable unless the regeneration
	check would succeed, and so from that perspective the regeneration
	check is mandatory.  <I>Performing</I><SPAN STYLE="font-style: normal">
	the regeneration check has not been made mandatory, because there
	may be other evidence that it would succeed, but in most cases it is
	strongly recommended.</SPAN></p>
</DIV>
<DIV ID="sdfootnote9">
	<P CLASS="sdfootnote"><A CLASS="sdfootnotesym" NAME="sdfootnote9sym" HREF="#sdfootnote9anc">9</A>For
	an &ldquo;analysis and interpretation of the process that led to
	First-Order Logic and its consolidation as a core system of modern
	logic&rdquo; see [Ferreir<FONT FACE="Times New Roman, serif">&oacute;</FONT>s2001].
	 An alternative to classical logic is intuitionist logic, which does
	not accept the equivalence of 
	<IMG SRC="wheeler-trusting-trust-ddc_html_2e4598d8.gif" NAME="Object81" ALIGN=ABSMIDDLE WIDTH=32 HEIGHT=18>
	and 
	<IMG SRC="wheeler-trusting-trust-ddc_html_4072c6c2.gif" NAME="Object82" ALIGN=ABSMIDDLE WIDTH=11 HEIGHT=18>
	as being universally true; [Hesseling2003] describes in detail the
	early history of intuitionist logic.</p>
</DIV>
<DIV ID="sdfootnote10">
	<P CLASS="sdfootnote"><A CLASS="sdfootnotesym" NAME="sdfootnote10sym" HREF="#sdfootnote10anc">10</A>As
	a notation, FOL does have weaknesses.  For example, predicates and
	functions cannot have formulas (booleans) as parameters, so
	traditional FOL cannot express a function <I>if_then_else(formula1,
	term1, term2)</I> that returns term1 if formula1 is true, else it
	returns term2.  FOL also does not include built-in support for types
	(sorts).  There are extensions and alternatives which remove these
	weaknesses.  However, since these FOL weaknesses do not interfere in
	the proof of DDC, and since traditional FOL is both
	widely-understood and widely-implemented, FOL is used in this
	dissertation.</p>
</DIV>
<DIV ID="sdfootnote11">
	<P CLASS="sdfootnote"><A CLASS="sdfootnotesym" NAME="sdfootnote11sym" HREF="#sdfootnote11anc">11</A>
	For example, the original hand-created proofs did not account for
	the possibility of different environments.  When attempting to
	modify the proofs to account for the different environments, the
	painful &ldquo;bookkeeping&rdquo; required to keep the proof
	accurate soon led the author to look for an automated tool.</p>
</DIV>
<DIV ID="sdfootnote12">
	<P CLASS="sdfootnote"><A CLASS="sdfootnotesym" NAME="sdfootnote12sym" HREF="#sdfootnote12anc">12</A>&ldquo;S-expression&rdquo;
	is short for &ldquo;symbolic expression&rdquo;.  It is a convention
	for representing semi-structured data in human-readable textual
	form, and is used for both code and data in Lisp.  For our purposes,
	an S-expression may be an atom (a number, symbol, or special term
	NIL) or a list; a list contains 0 or more ordered S-expressions. 
	The actual definition is more complex (involving CONS pairs), but
	this is not important for purposes of this dissertation.</p>
</DIV>
<DIV ID="sdfootnote13">
	<P CLASS="sdfootnote"><A CLASS="sdfootnotesym" NAME="sdfootnote13sym" HREF="#sdfootnote13anc">13</A>As
	noted in section 5.2, the FOL notation used in this paper does not
	have a built-in mechanism for notating types such as &ldquo;data&rdquo;
	or &ldquo;executable&rdquo;.  As explained in section 5.1.1, types
	are noted to make the proof easier to understand, even though they
	are not directly used in the proof&rsquo;s formal notation.</p>
</DIV>
<DIV ID="sdfootnote14">
	<P CLASS="sdfootnote"><A CLASS="sdfootnotesym" NAME="sdfootnote14sym" HREF="#sdfootnote14anc">14</A>
	Such as &ldquo;sP_when_accurately_compiled_compiles_sA&rdquo;</p>
</DIV>
<DIV ID="sdfootnote15">
	<P CLASS="sdfootnote"><A CLASS="sdfootnotesym" NAME="sdfootnote15sym" HREF="#sdfootnote15anc">15</A>UTF-8
	is short for &ldquo;8-bit UCS/Unicode Transformation Format&rdquo;,
	where UCS is short for &ldquo;Universal Character set&rdquo;. 
	UTF-16 is short for &ldquo;16-bit UCS/Unicode Transformation
	Format&rdquo;.  EBCDIC is an abbreviation for &ldquo;Extended Binary
	Coded Decimal Interchange Code&rdquo;.  As noted earlier, ASCII is
	short for &ldquo;American Standard Code for Information
	Interchange&rdquo;.  These terms are normally used only as acronyms.</p>
</DIV>
<DIV ID="sdfootnote16">
	<P CLASS="sdfootnote"><A CLASS="sdfootnotesym" NAME="sdfootnote16sym" HREF="#sdfootnote16anc">16</A>My
	thanks to Aaron Hatcher, who made this observation.</p>
</DIV>
<DIV ID="sdfootnote17">
	<P CLASS="sdfootnote"><A CLASS="sdfootnotesym" NAME="sdfootnote17sym" HREF="#sdfootnote17anc">17</A>
	My thanks to Aaron Hatcher, who attempted to apply DDC to various
	versions of GCC included in Fedora Core, and to Jakub Jelinek of Red
	Hat, who tried to provide Aaron with the necessary information to
	regenerate the executables after-the-fact.  Aaron&rsquo;s efforts
	were unsuccessful at the time, but they provided insight that later
	led to the successful application by Wheeler that is described here.</p>
</DIV>
<DIV ID="sdfootnote18">
	<P CLASS="sdfootnote"><A CLASS="sdfootnotesym" NAME="sdfootnote18sym" HREF="#sdfootnote18anc">18</A>In
	practice, unexpected differences between the &ldquo;actual&rdquo;
	and &ldquo;expected&rdquo; hardware results may be frequent, due to
	issues such as incomplete information and errors, but such
	differences could be malicious.</p>
</DIV>
<DIV ID="sdfootnote19">
	<P CLASS="sdfootnote"><A CLASS="sdfootnotesym" NAME="sdfootnote19sym" HREF="#sdfootnote19anc">19</A>It
	could be argued that the existence of the DDC technique gives open
	source software and other software whose source code is publicly
	available a decisive security advantage, since only such software
	can be examined at the source code level by anyone to determine if
	the corresponding executable is malicious.</p>
</DIV>
<DIV ID="sdfootnote20">
	<P CLASS="sdfootnote"><A CLASS="sdfootnotesym" NAME="sdfootnote20sym" HREF="#sdfootnote20anc">20</A>The
	Digital Standards Organization defines &ldquo;free and open
	standard&rdquo; as follows:</p>
	<UL>
		<UL>
			<LI><P CLASS="sdfootnote">A free and open standard is immune to
			vendor capture at all stages in its life-cycle. Immunity from
			vendor capture makes it possible to freely use, improve upon,
			trust, and extend a standard over time.</p>
			<LI><P CLASS="sdfootnote">The standard is adopted and will be
			maintained by a not-for-profit organization, and its ongoing
			development occurs on the basis of an open decision-making
			procedure available to all interested parties.</p>
			<LI><P CLASS="sdfootnote">The standard has been published and the
			standard specification document is available freely. It must be
			permissible to all to copy, distribute, and use it freely.</p>
			<LI><P CLASS="sdfootnote">The patents possibly present on (parts
			of) the standard are made irrevocably available on a royalty-free
			basis.</p>
			<LI><P CLASS="sdfootnote">There are no constraints on the re-use
			of the standard.</p>
		</UL>
	</UL>
	<P CLASS="sdfootnote">The economic outcome of a free and open
	standard is that it enables perfect competition between suppliers of
	products based on the standard [Digistan].  Patents, by definition,
	are exclusive and thus necessarily discriminatory when royalty
	payments or other conditions are imposed.  See [Wheeler2008] for a
	comparison of various definitions of &ldquo;open standard&rdquo; and
	their application to a particular specification.</p>
</DIV>
</body>
</html>

