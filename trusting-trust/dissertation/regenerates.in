% Diverse Double-Compiling (DDC), represented using prover9
% by David A. Wheeler.

% Usage:
% prover9 -f ddc.in > ddc.out

% Prove "regenerates", which helps explain the "simplified" situation
% when sA=sP.

% Prover9's default naming conventions require hard-to-read names. We'll use
% Prolog conventions instead (e.g., variables begin with an uppercase letter,
% while constants begin with a lowercase letter):
set(prolog_style_variables).

% Attempt to find a simpler-to-understand proof, at the cost of needing to
% work harder to find it:
set(restrict_denials).

formulas(assumptions).

 accurately_translates(Compiler, Lang, Source, EnvEffects,
                       ExecEnv, TargetEnv) ->
   exactly_correspond(compile(Source, Compiler, EnvEffects,
                              ExecEnv, TargetEnv),
                      Source, Lang, TargetEnv)
   # label(define_exactly_correspond).
 % Define what it means when source and executable "exactly correspond".
 % If some Source (written in language Lang) is compiled by a compiler that
 % accurately translates it, then the resulting executable exactly corresponds
 % to the original Source.

 all EnvEffects accurately_translates(cGP, lsP, sP, EnvEffects, e1, e2)
   # label(cGP_compiles_sP).
 % Trusted compiler cT is a compiler for language lsP, and it will
 % accurately translate sP.

 all EnvEffects accurately_translates(cA, lsA, sA, EnvEffects, e2, eArun)
   # label(cP_compiles_sA).

 accurately_translates(GoodCompilerLangP, lsP, sP, EnvEffectsMakeP,
                       ExecEnv, TargetEnv) ->
    accurately_translates(compile(sP, GoodCompilerLangP, EnvEffectsMakeP,
                                  ExecEnv, TargetEnv),
                          lsA, sA, EnvEffectsP, TargetEnv, eArun)
   # label(sP_compiles_sA).
 % Source sP (written in language lsP) must define a compiler
 % that, if accurately compiled, would be suitable for compiling sA.
 % Formally, if we have some GoodCompilerLangP for language lsP (that
 % correctly implements the source sP), then the executable that results
 % from compiling sP with it will (in turn) correctly compile sA.

 accurately_translates(GoodCompilerLangA, lsA, sA, EnvEffectsMakeA,
                       ExecEnv, TargetEnv) ->
    accurately_translates(compile(sA, GoodCompilerLangA, EnvEffectsMakeA,
                                  ExecEnv, TargetEnv),
                          lsA, sA, EnvEffectsP, TargetEnv, eArun)
   # label(sA_compiles_sA).

 %!exactly_correspond(Executable, Source, Lang, RunOn) --> bool.
 %    True iff Executable exactly implements source code Source when
 %    interpreted as language Lang when run on environment RunOn.

 ( deterministic(Source, Language) & portable(Source, Language) &
   exactly_correspond(Executable1, Source, Language, Environment1) &
   exactly_correspond(Executable2, Source, Language, Environment2)) ->
     ( converttext(run(Executable1, Input, EnvEffects1, Environment1),
                   Environment1, Target) =
       converttext(run(Executable2, Input, EnvEffects2, Environment2),
                   Environment2, Target))
   # label(define_determinism).
 % If the source code uses only the deterministic capabilities of a language,
 % and two executables exactly correspond to that same source code (they
 % may execute on different environments), then those executables - when
 % given the same input - will produce the same output.

 deterministic(sP, lsP) # label(sP_deterministic).
 % We will presume that source sP is deterministic. I.E., it avoids
 % all non-deterministic capabilities of language lsP, or uses them only in
 % ways that will not affect the output of the program. It can use
 % threads, but if it does it will use locks etc. to ensure that race
 % conditions will be avoided so that the output will be the same
 % on each run given the same input.  In some cases, setting the random
 % number seed and algorithm for "randomness" may be necessary to ensure
 % determinism.

 portable(sP, lsP) # label(sP_portable).
 % Similarly, sP must stick to the portable portion of lsP.

 deterministic(sA, lsA) # label(sA_deterministic).
 portable(sA, lsA) # label(sA_portable).

 compile(Source, Compiler, EnvEffects, RunOn, Target) =
     extract(converttext(run(Compiler, retarget(Source, Target),
             EnvEffects, RunOn), RunOn, Target)) # label(define_compile).

 exactly_correspond(cP, sP, lsP, eA) # label(cP_corresponds_to_sP).

 % WOKKA
 % exactly_correspond(cA, sA, lsA, eArun) # label(cA_corresponds_to_sA).

 % Here, we describe how we EXECTED cP and cA to have been created.
 % It's quite possible that these assumptions are not true, but in that case,
 % if the different have an executable effect the DDC process will catch it.

 cP = compile(sP, cGP, ePeffects, eP, eA)  # label(revised_definition_cP).

 cA = compile(sA, cP, eAeffects, eA, eArun) # label(definition_cA).

 cAprime = compile(sA, cA, eAeffectsprime, eArun, eArun)
      # label(definition_cAprime).

 cAprime2 = compile(sA, cAprime, eAeffectsprime2, eArun, eArun)
      # label(definition_cAprime).

 %!accurately_translates(Compiler, Lang, Source, EnvEffects, RunOn, Target)
 %!              --> bool.
 %   True iff Compiler (an executable) correctly implements language Lang
 %   when compiling Source (e.g., exactly that, nothing more or less),
 %   if run on environment RunOn and targeting environment Target.
 %!exactly_correspond(Executable, Source, Lang, RunOn) --> bool.
 %    True iff Executable exactly implements source code Source when
 %    interpreted as language Lang when run on environment RunOn.





end_of_list.

formulas(goals).

 cAprime = cAprime2 # label(regenerates).

end_of_list.


