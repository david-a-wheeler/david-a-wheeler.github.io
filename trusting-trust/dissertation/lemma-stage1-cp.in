% Diverse Double-Compiling (DDC), represented using prover9
% by David A. Wheeler.

% WARNING: THIS IS OBSOLETE

% Prove lemma "stage1_cP_eq_results", namely, that
% running stage1 and cP with the same inputs will produce the same outputs,
% regardless of the environmental effects, as long as they run on their
% correct environments.  Note that this does NOT prove that cP and stage1
% *themselves* are identical; in general they wouldn't be, since they were
% probably compiled by different compilers.  But since they were created by
% compiling the same source code, under certain conditions they'll _do_ the
% same thing.
%
% This lemma depends on the previously-proved lemma "stage1_corresponds_sP".

% Usage:
% prover9 -f lemma-stage1-cp.in > lemma-stage1-cp.out

% Prover9 implements first-order logic, so the formal assumptions and goals
% are written using very straightforward first-order logic.
% See its documentation for more about its format.

% Prover9's default naming conventions require hard-to-read names. We'll use
% Prolog conventions instead (e.g., variables begin with an uppercase letter,
% while constants begin with a lowercase letter):
set(prolog_style_variables).

% Attempt to find a simpler-to-understand proof, at the cost of needing to
% work harder to find it:
set(restrict_denials).

formulas(assumptions).

 %!exactly_correspond(Executable, Source, Lang, RunOn) --> bool.
 %    True iff Executable exactly implements source code Source when
 %    interpreted as language Lang when run on environment RunOn.

 exactly_correspond(cP, sP, lsP, eA) # label(cP_corresponds_to_sP).
 % Executable cP exactly corresponds to source sP.

 exactly_correspond(stage1, sP, lsP, e2)
   # label(stage1_corresponds_sP) # label(previous_lemma).
 % This was previously proved in a lemma.

 %! deterministic(Source, Language) -> bool.
 %    True iff the given source, compiled by a compiler for Language, will
 %    be deterministic.  This means that Source avoids using any potentially
 %    non-deterministic capabilities in the Language, such as a random
 %    number generator, presuming that memory addresses that it can read
 %    will be the same on all executions, etc.
 %
 % A compiler might not be deterministic, e.g., when there's are optimization
 % alternatives, it could "flip a coin" by calling on a random number
 % generator in the environment, and produce different results each time.
 % It could depend on the memory locations used for memory allocation,
 % process time allocation to different threads, etc.  In practice,
 % most compilers are deterministic, because it is much more difficult to test
 % non-deterministic compilers.
 %
 % Note that gcc's C++ compiler includes the ability to control the random
 % number seed used during a compilation, so the ability to enforce determinism
 % is not a pipe dream.

 ( deterministic(Source, Language) & portable(Source, Language) &
   exactly_correspond(Executable1, Source, Language, Environment1) &
   exactly_correspond(Executable2, Source, Language, Environment2)) ->
     ( converttext(run(Executable1, Input, EnvEffects1, Environment1),
                   Environment1, Target) =
       converttext(run(Executable2, Input, EnvEffects2, Environment2),
                   Environment2, Target))
   # label(define_determinism).
 % If the source code uses only the deterministic capabilities of a language,
 % and two executables exactly correspond to that same source code (they
 % may execute on different environments), then those executables - when
 % given the same input - will produce the same output.
 %
 % So, two C compilers might be given: ... printf("%d\n", 2+2); ...
 % the outputs of those compilers is likely to be completely different, but
 % RUNNING them must produce the same result (4), once their text output
 % (if any) is converted into the same environmental format.
 % Obviously, this depends on them implementing the same language
 % (for the purposes of the given Source).

 % Note the unusual function converttext(Data, Environment1, Environment2),
 % which converts any text it receives from
 % Environment1's standard text format to Environment2's standard text format.
 % If all of the world were Unix-based machines processing ASCII, this
 % wouldn't be needed.  But unfortunately, many programs read/write text,
 % and there is some variation in how text is represented.  In particular,
 % line-endings vary; some use LF (Unix,Linux,current Mac), some use CRLF
 % (Windows, CP/M), and some even use CR (old Mac).  The character
 % encoding can be different too (e.g., ASCII, UTF-8, UTF-16 of
 % various kinds,  or even EBCDIC).


 deterministic(sP, lsP) # label(sP_deterministic).
 % We will presume that source sP is deterministic. I.E., it avoids
 % all non-deterministic capabilities of language lsP, or uses them only in
 % ways that will not affect the output of the program. It can use
 % threads, but if it does it will use locks etc. to ensure that race
 % conditions will be avoided so that the output will be the same
 % on each run given the same input.  In some cases, setting the random
 % number seed and algorithm for "randomness" may be necessary to ensure
 % determinism.
 %
 % Strictly speaking, this is an overly strong requirement; we only really
 % REQUIRE that sP be deterministic when it's compiling sA, and only in
 % certain environments.   But expressing that nuance makes the proof more
 % complex, and doesn't really add anything.  Generally, compiler developers
 % want their compilers to be deterministic, period, and not only
 % when compiling specific programs or only when running on specific
 % environments.  So while this is a stronger requirement than we really need
 % for the proof, it's a realistic assumption that many real compilers meet.

 % Note that we do NOT require that cT or cGP be deterministic.
 % They _could_ be deterministic, and often will be, but we don't require it.


 portable(sP, lsP) # label(sP_portable).
 % Similarly, sP must stick to the portable portion of lsP.


 %!run(Executable, Input, EnvEffects, Environment) --> data
 % represents running Executable in Environment, giving it Input + the various
 % environmental effects EnvEffects.  The latter models whatever the language
 % allows or requires the environment to vary that COULD have an effect
 % on the result, e.g., random number generator,
 % stack location, heap allocation location, thread scheduling
 % (for a multi-threaded program this could critically change things!).
 % It returns whatever outputs are produced by running it, including
 % standard out, standard error, and any files (file names/locations/contents)
 % generated or modified by its execution.  Since different runs could have
 % different environment effects as input (e.g., the random number generator
 % from the environment might produce something different),
 % running the same executable with the same Input _could_ produce
 % different results.

end_of_list.

formulas(goals).

 converttext(run(stage1, Input, EnvEffects1, e2), e2, Environment) =
 converttext(run(cP, Input, EnvEffects2, eA), eA, Environment)
   # label(stage1_cP_eq_results) # label(lemma).
 
end_of_list.


