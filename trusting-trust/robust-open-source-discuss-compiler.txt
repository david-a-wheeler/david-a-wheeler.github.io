From dwheeler@ida.org Wed Aug 24 19:39:29 2005
Return-path: <dwheeler@ida.org>
Received: from exim by snoopy.runbox.com with spamfilter  (Exim 4.34)
	id 1E7zD0-0003UP-O5
	for dwheeler@runbox.com; Wed, 24 Aug 2005 19:39:29 +0200
Received: from [129.246.101.13] (helo=exim1-out.ida.org)
	by snoopy.runbox.com with esmtp  (Exim 4.34)
	id 1E7zCv-0003SJ-4X
	for dwheeler@dwheeler.com; Wed, 24 Aug 2005 19:38:42 +0200
Received: by exim1-out.ida.org with local-smtp 
	for <dwheeler@dwheeler.com>; Wed, 24 Aug 2005 13:38:31 -0400
Received: by exim1-out.ida.org with esmtp ; Wed, 24 Aug 2005 13:38:31 -0400
Message-ID: <430CADBC.3050804@ida.org>
Date: Wed, 24 Aug 2005 13:26:20 -0400
From: "David A. Wheeler" <dwheeler@ida.org>
User-Agent: Mozilla/5.0 (X11; U; SunOS sun4u; en-US; rv:1.0.1) Gecko/20020920 Netscape/7.0
X-Accept-Language: en-us, en
MIME-Version: 1.0
To: dwheeler@dwheeler.com,  dwheeler@ida.org
Subject: Subset of "Robust Open Source" with Henry Spencer's compiler technique
Content-Type: multipart/mixed;
 boundary="------------040209010806060502000609"
X-DSPAM-Factors: 27,
	what+could, 0.00010,
	us+ibm, 0.00010,
	is+special, 0.00010,
	Contact+your, 0.99990,
	we+manage, 0.99990,
	necessary+but, 0.00010,
	src+images, 0.99990,
	verified+that, 0.00010,
	HREF+IMG, 0.99990,
	assumption+is, 0.00010,
	problem+before, 0.00010,
	to+major, 0.99990,
	It+would, 0.00010,
	virtual+machine, 0.00010,
	to+become, 0.99990,
	this+point, 0.00010,
	file+is, 0.00010,
	distributed+to, 0.99990,
	this+code, 0.00010,
	value+added, 0.99990,
	enough+to, 0.00010,
	gif+alt, 0.99990,
	Linux+Users, 0.00010,
	patch+file, 0.00010,
	he+will, 0.99990,
	systems+with, 0.00010,
	The+US, 0.99990
X-DSPAM-Result: Innocent
X-DSPAM-Confidence: 0.5104
X-DSPAM-Probability: 0.0000
X-Spam-Checker-Version: SpamAssassin 3.0.2 (2004-11-16) on 
	marmaduke.runbox.com
X-Spam-Status: No, score=-100.0 required=5.0 tests=USER_IN_WHITELIST 
	autolearn=disabled version=3.0.2
X-Spam-Level: 

This is a multi-part message in MIME format.
--------------040209010806060502000609
Content-Type: text/plain; charset=us-ascii; format=flowed
Content-Transfer-Encoding: 7bit

Here's the subset.

--------------040209010806060502000609
Content-Type: text/plain;
 name="open-compile.txt"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline;
 filename="open-compile.txt"

20-Dec-1998 22:34:45-GMT,10691;000000000005
Received: from localhost (daemon@localhost)
	by csla.csl.sri.com (8.9.1/8.9.1) with SMTP id OAA24751;
	Wed, 11 Nov 1998 14:28:12 -0800 (PST)
Received: by csla.csl.sri.com (bulk_mailer v1.5); Wed, 11 Nov 1998 14:28:11 -0800
Received: (from server@localhost)
	by csla.csl.sri.com (8.9.1/8.9.1) id OAA24743
	for open-source-outgoing; Wed, 11 Nov 1998 14:28:11 -0800 (PST)
X-Authentication-Warning: csla.csl.sri.com: server set sender to owner-open-source using -f
Received: from chiron.csl.sri.com (chiron.csl.sri.com [130.107.15.73])
	by csla.csl.sri.com (8.9.1/8.9.1) with ESMTP id OAA24738
	for <open-source@CSL.sri.com>; Wed, 11 Nov 1998 14:28:06 -0800 (PST)
Received: (from neumann@localhost) by chiron.csl.sri.com (8.7.3/8.7.3) id OAA23984 for Robust-Open-Source List <open-source@CSL.sri.com>; Wed, 11 Nov 1998 14:24:48 -0800 (PST)
From: "Peter G. Neumann" <neumann@csl.sri.com>
Date: Wed, 11 Nov 98 14:24:48 PST
To: Robust-Open-Source List <open-source@csl.sri.com>
Subject: ROS: Robust open-source-software, prolegomenon
Message-ID: <CMM.0.90.1.910823088.neumann@chiron.csl.sri.com>
Sender: owner-open-source@csl.sri.com
Reply-To: open-source@csl.sri.com

Reply-to: open-source@CSL.sri.com for messages to the group
Reply-to: open-source-request@CSL.sri.com for (un)subscription requests
Reply-to: Neumann@CSL.sri.com for out-of-band messages to PGN

This is the initial message for a new e-mail discussion group whose purpose
is to promote the concept of *robust open-source* (ROS) software, where
``robust'' is intentionally an inclusive term embracing meaningful security,
reliability, availability, and survivability (with suitable definitions as
appropriate) in the face of a wide and realistic range of potential
adversities -- which in any given application might include hardware faults,
software flaws, malicious and accidental exploitation of systemic
vulnerabilities, environmental hazards, unfortunate animal behaviors, etc.
That is, we seek open-source systems and subsystems that have a much better
chance of avoiding the myriad risks that we now have to live with.  It is
certainly not aimed at *perfect* systems, because there are no such systems
and never will be.  However, it is aimed at creating an environment that
encourages an international collaborative integrative process by which
highly interoperable components can be evolved -- from scratch when
necessary, but otherwise from less robust components that exist today and
that continue to be improved -- and then subsequently readily composed into
systems and networks capable of ever greater robustness.  The entire process
needs to be open-ended, long-term, far-sighted, and incremental.  It is
intended to be an inclusive open effort, with participants from many
different disciplines and past experiences encouraged to participate.  There
are already very substantive efforts to develop, maintain, and support
open-source software systems.  We hope that all of these efforts will be
participants in what could become a mainstream integrative Robust Open
Source (ROS) movement, not just a countercultural outlier (ROSwell?).  If it
succeeds in producing demonstrably robust systems, it might even have an
influence on some of commercial systems whose developers are open-minded
enough to embrace it (e.g., Netscape).  But if that does not happen, the
expectation is that a large body of interoperable systems and subsystems
could nevertheless emerge.

It is intended that this effort be pluralistic, encompassing a variety of
operating systems and applications, as well as different approaches -- such
as cryptographically-based high-integrity enclosures for components and
systems, trustworthy sites for obtaining robust software, trustworthy
distribution channels (e.g., cryptographically protected), trustworthy
representation of provenance on integrity/authorship, trustworthy mechanisms
for upgrades, robust operating systems, virtual machine environments for
Webware and other executables, proof-carrying code, etc.  There are
wonderful opportunities for research, applications of formal methods,
testing, red-teaming, IV&V, etc.

A certain amount of altruism is undoubtedly necessary, along with an almost
religious-zeal commitment to the cause.  However, it is not realistic to
expect that people will do the superb work that is needed without any hopes
of compensation.  Fortunately, there are entrepreneurial possibilities, with
many possible business models that might be applicable.  After all, Les
Lamport put his son through college on the royalties from LaTeX books.
Richard Stallman has received a MacArthur Foundation grant and many
contributions, and the Gnu system with Linux represents an enormous and
valuable body of work.  Red Hat has demonstrated a very useful value-added
approach to distributing Linux.  Given a realization on the part of our
governments that approaches to robust open-source software can have enormous
potential that cannot be found in much of today's proprietary software,
enlightened R&D funding should eagerly begin to emerge -- perhaps with
preferential procurement incentives toward the development or use of robust
interoperable open-source software.  The U.S. Army Research Lab has already
expressed serious interest in robust open-source software (although the Navy
seems to be following a proprietary course!), and ARL might well look very
kindly on proposals to support ROS efforts (for example, see www.arl.mil
DAAD17-99-R-ARL-BAA http://w3.arl.mil/contracts/99arlbaa.htm).  I hope that
DARPA might find it advantageous as well (www.darpa.mil).  I'll leave to
later discussions how to evolve such strategies, as well as how to
effectively internationalize the process.  At this point, I am merely trying
to declare the critical need for more robust systems, throughout a very wide
range of applications, and to see who might be interested in participating.

The Robust Open Source e-mail group will initially exist as an unmoderated
Majordomo group.  Contributions will be restricted by Majordomo to addresses
that are on the distribution list (to minimize spamming, externally
generated flames, and other disruptive interference -- although that does
not rule out spoofing and bogus headers).  (If the form of address at which
you receive this message is sufficiently inconsistent with your FROM:
address so that you cannot respond to open-source@CSL.sri.com when you
really want to broadcast to the group, please let me know at
Neumann@CSL.sri.com.)  However, new subscription requests are welcomed, and
should be sent to open-source-request@CSL.sri.com with a one liner SUBSCRIBE
or UNSUBSCRIBE.  If your FROM: address is different from your desired
address, please make your one-liner SUBSCRIBE your-address@wherever Send
out-of-band messages to me if they are not appropriate for the group.
PLEASE USE DISCRETION in what you send to the reforwarding address at
open-source@CSL.sri.com .  Inadvertent messages that should have been out of
band seriously diminish the willingness of everyone else to participate.

A basic assumption is that every ROS e-mail message should be considered
public, without being subject to copyright or nondisclosure restrictions,
and therefore all contributions should be sent with that assumption in mind.
PLEASE: no flames, no personal attacks, no anticorporate vituperation, no
wildly unfounded contentiousness, etc.  Everything should be on the subject,
although a little levity might not hurt now and then.

If you received this message directly from open-source@CSL.sri.com, your
address is included either because you have asked to be included, or because
you are already a significant player in the open-source movement, or both.
If nothing else, I hope your participation can help bring some of the
communities that really require very robust software up to speed on the
potentials of the existing open-source movement, and can also alert the
open-source community to the deeper needs of robust systems.  

This is an unbounded opportunity for a long-term collaboration that is
motivated by doing the right thing.  I look forward to seeing how it all
plays out.  It is not an attempt to supplant already existing open-source
newsgroups, and there is no need for discussions on the important potentials
of open-source systems in general.  Instead, this is an effort to focus some
high-powered energies on the development of some wonderful open-source
software that can be used in systems with stringent requirements for
security, reliability, survivability, etc.

The initial mailing list is by no means an exhaustive collection of everyone
who really should be on it.  If you wish to forward this to folks who are
not already on the list, please feel free to do so.  If you do not want to
be on the list, I apologize for sending you this message (but thanks for
reading this far anyway); you may unsubscribe as above or let me know if
that does not work.  If you receive this message forwarded Nth-hand, please
do not be insulted that you were not on the initial list, which includes
only about 40 people.

I am normally opposed to unmoderated newsgroups (and find that it is not
possible to run RISKS without spending some time doing serious moderation),
but in this case it seems to be worth a try to see if ROS can be
unmoderated.  (But let me add that if someone contributes something that is
defamatory and results in a lawsuit, SRI, CSL, and PGN will of course have
to try to maintain that they are only conduits for those messages and not
information providers.  And in that case, the group would either have to
become moderated or else disband!  However, I hope such a situation does
not arise, and appreciate your efforts to make it so.)

I really look forward to what I hope will be a lively and productive
discussion.  Please feel free to discuss anything relevant to the topic,
such as integrative strategies for achieving interoperable robust
open-source software, analyses of the risks in trying to do so, offers to
contribute to the development effort, offers to use your own research to
enhance the process (e.g., formal methods applied to evaluating
trustworthiness of components and compositions of those components), how to
effectively involve existing groups already specifically devoted to specific
approaches (Linux, OpenBSD, etc.), ...  I'm happy to serve as the
UNmoderator (but not IMmoderator) unless this gets out of hand.

Peter G. Neumann

  Principal Scientist        
  Computer Science Lab
  SRI International EL-243
  333 Ravenswood Ave
  Menlo Park CA 94025-3493
    Tel 1-650/859-2375
    Fax 1-650/859-2844
    Neumann@CSL.sri.com
    http://www.csl.sri.com/~neumann/



28-Dec-1998  7:17:48-GMT,11973;000000000001
Received: from localhost (daemon@localhost)
	by csla.csl.sri.com (8.9.1/8.9.1) with SMTP id XAA22451;
	Wed, 18 Nov 1998 23:15:02 -0800 (PST)
Received: by csla.csl.sri.com (bulk_mailer v1.5); Wed, 18 Nov 1998 23:15:02 -0800
Received: (from server@localhost)
	by csla.csl.sri.com (8.9.1/8.9.1) id XAA22444
	for open-source-outgoing; Wed, 18 Nov 1998 23:15:01 -0800 (PST)
X-Authentication-Warning: csla.csl.sri.com: server set sender to owner-open-source using -f
Received: from church.cse.ogi.edu (root@cse.ogi.edu [129.95.20.2])
	by csla.csl.sri.com (8.9.1/8.9.1) with ESMTP id XAA22439
	for <open-source@csl.sri.com>; Wed, 18 Nov 1998 23:14:56 -0800 (PST)
Received: from cse.ogi.edu (crispin@slip-32-101-84-38.or.us.ibm.net [32.101.84.38])
	by church.cse.ogi.edu (8.8.6/8.8.6) with ESMTP id XAA04763
	for <open-source@csl.sri.com>; Wed, 18 Nov 1998 23:14:50 -0800 (PST)
Message-ID: <3653C570.5AF7AE98@cse.ogi.edu>
Date: Thu, 19 Nov 1998 07:14:57 +0000
From: Crispin Cowan <crispin@cse.ogi.edu>
Organization: Oregon Graduate Institute
X-Mailer: Mozilla 4.5b2 [en] (X11; I; Linux 2.0.35 i586)
X-Accept-Language: en
MIME-Version: 1.0
To: Robust-Open-Source List <open-source@csl.sri.com>
Subject: LWN - The Trojan Horse (Bruce Perens)
Content-Type: multipart/mixed;
 boundary="------------D3BCA76FD6E1F87806CB1AF8"
Sender: owner-open-source@csl.sri.com
Reply-To: open-source@csl.sri.com

This is a multi-part message in MIME format.
--------------D3BCA76FD6E1F87806CB1AF8
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This feature article on this week's "Linux Weekly News" raises the
potential problem of Trojan Horses inserted into the open source code
base.  Open source provides a 2 edged sword:

   * On the good side, you at least CAN inspect the source to look for
     trojans.  Bugs, too :-)
   * On the bad side, there are a vast army of contributors to a major
     distribution product like Red Hat.  Keeping track of them all is
     a daunting taks, which raises the risk of Trojans.
   * And lest we forget, Ken Thompson's neat little hack :-)

Anyone have any brilliant ideas on how to protect Open Source against
cyber-spoilers in the contributor pool?  It doesn't seem that likely
right now, because it would be seen as outrageously uncool ;-), but
what's to stop some jealous proprietary vendor from re-manifesting the
FUD-factor by deliberately injecting some trojans into the open source
community?  How might we protect our selves against that?

Peter has already mentioned cryptographic signatures for executables
and sources.  This works as long as you actually know who all the
contributors are, and can trust them all.  But how can we manage a
really large pool of developers to preserve trust-worthyness?  How
about a PGP-style key-ring of trust:  I trust this code because
<famous open source dudette> trusts <less famous open source dude> who
in turn trusts <author of the code>.

Crispin
-----
 Crispin Cowan, Research Assistant Professor of Computer Science, OGI
    NEW:  Protect Your Linux Host with StackGuard'd Programs  :FREE
       http://www.cse.ogi.edu/DISC/projects/immunix/StackGuard/

http://www.lwn.net/1998/1119/Trojan.html



--------------D3BCA76FD6E1F87806CB1AF8
Content-Type: text/html; charset=us-ascii;
 name="Trojan.html"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline;
 filename="Trojan.html"
Content-Base: "http://www.lwn.net/1998/1119/Trojan.ht
	ml"
Content-Location: "http://www.lwn.net/1998/1119/Trojan.ht
	ml"

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
<title>LWN - The Trojan Horse (Bruce Perens)</title>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Bruce Perens">
   <META NAME="GENERATOR" CONTENT="Mozilla/4.07C-SGI [en] (X11; I; IRIX64 6.5 IP28) [Netscape]">
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<center>
<A HREF="http://www2.burstnet.com/ads/ad538b-map.cgi/bp">
<IMG SRC="http://www2.burstnet.com/cgi-bin/ads/ad538b.cgi/bp" 
ISMAP BORDER=0 alt=" "></A>
</center>


<p align="center">
<a href="http://lwn.net/">
<img src="/images/lwn.banner.gif" alt="[LWN Logo]" height=70 width=450></a>
</p>

<H1>
The Trojan Horse</H1>

<ADDRESS>
Bruce Perens
&lt;bruce@hams.com&gt;
</ADDRESS>

<BR>
There's a problem that could very badly effect the public perception of
Linux and Open Source. I want people to think about this, and hopefully
&quot;head it off at the pass&quot; before it happens.
<p>
<P>Perhaps it's already on your system today:
a <I>trojan-horse</I> program. It might be a game, or more likely a system
utility. It's author uploaded it to an FTP archive, where it was then picked
up by your favorite Linux distribution, who wrote it onto the CD-ROM that
you bought. It works just fine, but hidden away in the program is a special
feature: a secret back-door past your system's security.
<P>Perhaps the author of this attack is tired of hearing about what great
hackers we are, and wants to take us down a notch. He's patient - he will
wait until his program is distributed to tens of thousands of Linux systems
before he says a word. But <I>say</I> is what he'll do - he's not really
interested in breaking into your system. What he wants is the publicity,
bad publicity for us, and lots of it. We've left the gates open for this
trojan horse. Let's talk about how to close them, and hope we have enough
time to solve this problem before our reputation is hurt.
<P>The Open Source model has a lot of advantages, and one disadvantage
we'd better work on. <I>Do you really know where your software came from?</I>
Many Linux distributions have taken some precautions, but none of them
can say they've solved the problem yet.
<table align="right" width=200 hspace=5 vspace=5>
<tr><td><font color="#336666" size=+1>
Are we sure we're reading
every line of every utility, every game, every application, and that we're
catching every back-door that's been planted in that software?
</font></td></tr></table>
We're confident that we can deal
with the problem because our source code is all publicized, and so many
people read the code. But are we really secure? Are we sure we're reading
every line of every utility, every game, every application, and that we're
catching every back-door that's been planted in that software? What about
those patch files? It's so helpful when someone else fixes a program and
submits a patch to the program's author, but can something sinister be
hiding in the patch?
<P>Let's use the <A HREF="http://www.debian.org/">Debian GNU/Linux</A>
distribution as an example of how to <I>start</I> solving this problem.
Although Debian developers are volunteers from all over the world, and
most of them have never met, every Debian developer has been <A HREF="http://www.debian.org/doc/packaging-manuals/developers-reference/ch-new-maintainer.html#s2.2">identified</A>
in some way before they've been given access to Debian's upload area. Either
another developer has vouched for them, or they've had someone look at
their identification, or a Debian developer has verified that they can
be reached at a given address or a listed phone number. Almost all of those
developers are set up to provide public-key signatures of their uploads
using <A HREF="http://www.d.shuttle.de/isil/gnupg/">GNU Privacy Guard</A>,
and the upload-processing software will delete their submissions if they
are uploaded using the wrong key. So, generally, the Debian folks can say
<I>yes, we do know who packaged your software.</I> Unfortunately, they
don't necessarily know who wrote the software, or who has submitted patches
and otherwise modified it. This isn't only true for Debian - you can say
the same thing for Red Hat. Although they digitally sign every RPM they
produce, Red Hat doesn't necessarily have reliable identification of the
person who uploaded it - for example, my <I>Electric Fence</I> package
is in Red Hat and most other Linux distributions, but they put it on their
CD before I met anyone at Red Hat, and I have not digitally signed the
upload or checked the version that is on their CDs. If someone has inserted
a pernicious change into my upload before Red Hat downloaded it, I wouldn't
know. The situation is similar for all other Linux distributions.
<P>Take a look at the <A HREF="ftp://sunsite.unc.edu/pub/Linux/HOW.TO.SUBMIT">submission
policy</A> for <A HREF="ftp://sunsite.unc.edu/pub/Linux/">SunSite.UNC.edu</A>,
one of the most popular Linux software archives, where software is often
picked up for packaging by Linux distributions. No security checks there.
Next, look at <A HREF="http://www.freshmeat.net/">FreshMeat</A>, a popular
online software catalog scanned by Linux distributions looking for new
material. FreshMeat does one security check before you can <A HREF="http://contrib.freshmeat.net/appindex/">add
to their catalog</A> - they verify that you actually do get their mail
at the e-mail address you supply. That's easy to defeat using any of the
free web-mail services.
<P>If you're lucky, the person who created the software you are using has
also posted a cryptographic checksum file with a digital signature, which
can be used to verify that the files you download actually do contain the
data that he uploaded. If he has a properly-signed public key, then you have
a good idea of who he is. If you're <I>real</I> lucky, he has carefully
reviewed all patches submitted to him, he's identified the submitters of
the patches, and he keeps a permanent archive of those patches for future
reference. These are things that we need <I>everyone</I> to do.
<P>So, here's how you can help:
<p>
<b>Expand the Web of Trust</b>.
Contact your local Linux Users Group, and have a knowledgable person instruct
members in public-key cryptography and run a public key cross-signing session
regularly at their meetings. <I>Every</I> Linux or Open Source convention,
where developers are likely to get together, should host some form of public-key
certification, and should announce that well in advance so that developers
bring the proper materials to the show. Conventions should also run tutorials
on how to use GNU Privacy Guard and how to properly handle and sign cryptographic
keys. Through key-signings, developers can join <I>the web of trust,</I>
which is a method of identifying people whom you haven't met by checking
their public keys for cryptographic signatures made by people you 
<I>have</I>
met. Then, we'll have a way to identify our developers.
<p>
<b>Reliably Identify Uploaded Files</b>.
Uploaded files should come with a list of cryptographic checksums for those
files. That list should be cryptographicaly signed. Only then can you be
sure that the file you are downloading is the file that the developer uploaded.
The original uploaded files and their checksums should be preserved in
source packages, so that a user can verify the integrity of the files in
their Linux distribution, and trace them all the way back to the original
developer.
<p>
<b>Carefully Review Patches, and Identify Their Submitters</b>.
Don't assume that every patch file is innocent. Carefully review their
contents. Ask the people who send you patches to use a cryptographic signature
in their email, so that you can verify who they are.
<p>
<b>Keep More Than Just a Change Log</b>.
Keep copies of the emails containing patches for later reference. Keep
your software in RCS or CVS, so that you have automatic identification
of the date and circumstances of every change. If a trojan-horse does make
it into your software, you can identify when the change was inserted, and
by whom.
<p>
<b>Hope This is Soon Enough</b>.
It would be just terrible if a widespread, deliberately-inserted trojan-horse
in Linux was revealed. Such a thing could be used in the press to discredit
the Open Source paradigm that made it possible. Thus, let's get to work
today to assure this won't happen.
</BODY>
</HTML>

--------------D3BCA76FD6E1F87806CB1AF8--


28-Dec-1998  9:58:25-GMT,4240;000000000001
Received: from localhost (daemon@localhost)
	by csla.csl.sri.com (8.9.1/8.9.1) with SMTP id BAA23337;
	Thu, 19 Nov 1998 01:56:08 -0800 (PST)
Received: by csla.csl.sri.com (bulk_mailer v1.5); Thu, 19 Nov 1998 01:56:08 -0800
Received: (from server@localhost)
	by csla.csl.sri.com (8.9.1/8.9.1) id BAA23330
	for open-source-outgoing; Thu, 19 Nov 1998 01:56:07 -0800 (PST)
X-Authentication-Warning: csla.csl.sri.com: server set sender to owner-open-source using -f
Received: from cheviot.ncl.ac.uk (cheviot.ncl.ac.uk [128.240.233.51])
	by csla.csl.sri.com (8.9.1/8.9.1) with ESMTP id BAA23324
	for <open-source@csl.sri.com>; Thu, 19 Nov 1998 01:56:02 -0800 (PST)
From: Lindsay.Marshall@newcastle.ac.uk
Received: from catless.ncl.ac.uk by cheviot.ncl.ac.uk id <JAA24732@cheviot.ncl.ac.uk>
  (8.7.6/ for ncl.ac.uk) with ESMTP; Thu, 19 Nov 1998 09:55:47 GMT
Message-Id: <199811190955.JAA24732@cheviot.ncl.ac.uk>
Date: Thu, 19 Nov 1998 09:56:46 +0000 (GMT)
Subject: Re: LWN - The Trojan Horse (Bruce Perens)
To: open-source@csl.sri.com
cc: crispin@cse.ogi.edu
In-Reply-To: <3653C570.5AF7AE98@cse.ogi.edu>
MIME-Version: 1.0
Content-Type: TEXT/plain; CHARSET=US-ASCII
Sender: owner-open-source@csl.sri.com
Reply-To: open-source@csl.sri.com

On 19 Nov, Crispin Cowan wrote:
> This feature article on this week's "Linux Weekly News" raises the
> potential problem of Trojan Horses inserted into the open source code
> base.  Open source provides a 2 edged sword:

Why are trojans mroe of a problem with Open SOurce than Proprietary
code? Look at all the Easter eggs that exist in commercial software.
Who knows what else is lurking!

> Anyone have any brilliant ideas on how to protect Open Source against
> cyber-spoilers in the contributor pool?  It doesn't seem that likely
> right now, because it would be seen as outrageously uncool ;-), but
> what's to stop some jealous proprietary vendor from re-manifesting the
> FUD-factor by deliberately injecting some trojans into the open source
> community?  How might we protect our selves against that?
> 
> Peter has already mentioned cryptographic signatures for executables
> and sources.  This works as long as you actually know who all the
> contributors are, and can trust them all.  But how can we manage a
> really large pool of developers to preserve trust-worthyness?  How
> about a PGP-style key-ring of trust:  I trust this code because
> <famous open source dudette> trusts <less famous open source dude> who
> in turn trusts <author of the code>.

It seems to me that the only way to deal with this is by using a
structured filtering/approval process which is what happens with Linux
releases (I think). When you change the source you have to submit your
change which is then considered by more than one, randomly chosen,
people from a group of "approvers" who then sign the code if they think
it meets whatever requirements are set down for the project. It can
then be passed up a level and the process repeated as many times as
necessary until it reaches the required level to be included in the
"official" release. Lets's face it this is what happens when you apply
for a job - you answer the ad and send a CV, someone looks at it and
you get an interview, then you might get a second interview etc. Same
process but with digital signatures added :-)

But...this really only works with small, incremental changes to the
code - bug fixes really. If I come along with my spiffy new
Fortran-to-Java translator which is really rather a large program, doing
the code inspection that is required is a lot of work. The approval
could be split up but then lot of context is lost and it multiplies the
effort needed so the amount of trust needed in the lower level approvers
is increased.

The other question to raise is whether or not we would recognise a
trojan horse if we saw it. (Never look a trojan horse in the mouth?)
I can envisage trojans that are highly targetted that might be very
hard to see. Does anyone have any idea how easy it is to spot the
(possibly legendary) code that is added to compilers that recognises
specific benchmarks and dumps special code? This is (I think) a trojan
horse and *ought* to be highly visible, but is it?

L.
-- 
http://catless.ncl.ac.uk/Lindsay


28-Dec-1998 12:30:27-GMT,4316;000000000001
Received: from localhost (daemon@localhost)
	by csla.csl.sri.com (8.9.1/8.9.1) with SMTP id EAA24133;
	Thu, 19 Nov 1998 04:23:15 -0800 (PST)
Received: by csla.csl.sri.com (bulk_mailer v1.5); Thu, 19 Nov 1998 04:23:15 -0800
Received: (from server@localhost)
	by csla.csl.sri.com (8.9.1/8.9.1) id EAA24126
	for open-source-outgoing; Thu, 19 Nov 1998 04:23:14 -0800 (PST)
X-Authentication-Warning: csla.csl.sri.com: server set sender to owner-open-source using -f
Received: from post.mail.demon.net (post-11.mail.demon.net [194.217.242.40])
	by csla.csl.sri.com (8.9.1/8.9.1) with ESMTP id EAA24121
	for <open-source@csl.sri.com>; Thu, 19 Nov 1998 04:23:09 -0800 (PST)
Received: from [194.222.106.150] (helo=FortyTwo)
	by post.mail.demon.net with smtp (Exim 2.053 #1)
	id 0zgT6q-0003oo-00
	for open-source@csl.sri.com; Thu, 19 Nov 1998 12:22:53 +0000
Message-ID: <004601be13b7$37de21c0$966adec2@FortyTwo>
From: "Brian Gladman" <gladman@seven77.demon.co.uk>
To: <open-source@csl.sri.com>
Subject: Re: LWN - The Trojan Horse (Bruce Perens)
Date: Thu, 19 Nov 1998 11:38:59 -0000
MIME-Version: 1.0
Content-Type: text/plain;
	charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
X-Priority: 3
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook Express 4.72.3110.1
X-MimeOLE: Produced By Microsoft MimeOLE V4.72.3110.3
Sender: owner-open-source@csl.sri.com
Reply-To: open-source@csl.sri.com

    >-----Original Message-----
    >From: Crispin Cowan <crispin@cse.ogi.edu>
    >To: Robust-Open-Source List <open-source@csl.sri.com>
    >Date: 19 November 1998 07:17
    >Subject: LWN - The Trojan Horse (Bruce Perens)


    >This feature article on this week's "Linux Weekly News" raises the
    >potential problem of Trojan Horses inserted into the open source code
    >base.  Open source provides a 2 edged sword:

    >   * On the good side, you at least CAN inspect the source to look for
    >     trojans.  Bugs, too :-)
    >   * On the bad side, there are a vast army of contributors to a major
    >     distribution product like Red Hat.  Keeping track of them all is
    >     a daunting taks, which raises the risk of Trojans.
    >   * And lest we forget, Ken Thompson's neat little hack :-)

    This is a critical issue for all code, not just open source code.  While
it is possible that criminal or even terrorist elements might be more able
to do this through open source development processes, other groupings that
have this in mind will find closed develpment processes much easier to
influence.
    In the cryptography field for example it is going to be governments who
seek to put Trojan horses into products and here it is software from closed
sources that is more suspect than that developed through open source
processes.  And while we might theorise about Trojan horses in open source
software, I believe this to be a real and existing problem in closed source
software.
    Of course cryptographic code is a particular example but it does suggest
that this is a general issue, not one that is particular to open source.
    Further than this, however, the open source process is potentially much
more suitable for meeting the needs of independent critical review processes
and this suggests that this model may in fact be much better than the closed
source model for safety and security critical applications.  If we consider
a piece of code with unintended or deliberate backdoors in it, it seems to
me that the prospects that these will be discovered is in a general sense
proportional to the number of people who independently test or review the
code involved.  Even closed source suppliers have come to understand the
benefits of a widespread testing environment (beta releases of software are
often now the norm) but in open source we can take this further and have
independent design reviews as well.
    Of course the key issue for open source is that of finding people who
are prepared to devote the effort to the independent review proccess.  For
obviously critical code (e.g. cryptographic algorithm code) this is not a
problem but in a more general area of dependence it may not be so easy to
achieve this.
    In summary, however, when it comes to information security I fear
governments more than I fear criminals so I will vote for open source all
the way!
        Brian Gladman



28-Dec-1998 13:21:22-GMT,2185;000000000001
Received: from localhost by csla.csl.sri.com (8.9.1/8.9.1) with SMTP id FAA24383;
	Thu, 19 Nov 1998 05:14:24 -0800 (PST)
Received: by csla.csl.sri.com (bulk_mailer v1.5); Thu, 19 Nov 1998 05:14:23 -0800
Received: by csla.csl.sri.com (8.9.1/8.9.1) id FAA24376
	for open-source-outgoing; Thu, 19 Nov 1998 05:14:22 -0800 (PST)
X-Authentication-Warning: csla.csl.sri.com: server set sender to owner-open-source using -f
Received: from assurance.rstcorp.com ([206.29.49.3])
	by csla.csl.sri.com (8.9.1/8.9.1) with ESMTP id FAA24371
	for <open-source@csl.sri.com>; Thu, 19 Nov 1998 05:14:18 -0800 (PST)
Received: (from uucp@localhost)
	by assurance.rstcorp.com (8.8.8/8.8.8) id IAA22928;
	Thu, 19 Nov 1998 08:13:45 -0500
Received: from sandbox.rstcorp.com(206.29.49.63) by assurance.rstcorp.com via smap (V2.0)
	id xma022920; Thu, 19 Nov 98 08:13:00 -0500
Received: from violation.rstcorp.com (violation [206.29.49.16])
	by sandbox.rstcorp.com (8.8.8/8.8.8) with ESMTP id IAA11866;
	Thu, 19 Nov 1998 08:12:59 -0500 (EST)
From: Gary McGraw <gem@rstcorp.com>
Received: (from gem@localhost)
	by violation.rstcorp.com (8.8.8/8.8.8) id IAA09073;
	Thu, 19 Nov 1998 08:12:47 -0500 (EST)
Date: Thu, 19 Nov 1998 08:12:47 -0500 (EST)
Message-Id: <199811191312.IAA09073@violation.rstcorp.com>
To: open-source@csl.sri.com
Subject: Re: LWN - The Trojan Horse (Bruce Perens)
Cc: crispin@cse.ogi.edu
Sender: owner-open-source@csl.sri.com
Reply-To: open-source@csl.sri.com

At Reliable Software Technologies we're working on the problem
of Trojan and Easter Egg detection in executable code.  I'm
personally not worried about the issue being raised by malicious
no-source-for-you vendors, because their products fall under the
same suspicion only consumers (including corporations and governments)
have even less of a beachhead for attacking the problem since
source is not available.  So if vendors begin to spread FUD, one
approach is to fight fire with fire and raise the COTS bugaboo.

To say this problem is hard is a serious understatement!  It's
impossible in theory.  But that doesn't mean we can't address the
largest risks or dink around looking for good ideas.

gem

http://www.rstcorp.com/~gem

30-Dec-1998 21:48:51-GMT,5041;000000000001
Received: from localhost (daemon@localhost)
	by csla.csl.sri.com (8.9.1/8.9.1) with SMTP id NAA17283;
	Sat, 21 Nov 1998 13:46:26 -0800 (PST)
Received: by csla.csl.sri.com (bulk_mailer v1.5); Sat, 21 Nov 1998 13:46:25 -0800
Received: (from server@localhost)
	by csla.csl.sri.com (8.9.1/8.9.1) id NAA17276
	for open-source-outgoing; Sat, 21 Nov 1998 13:46:25 -0800 (PST)
X-Authentication-Warning: csla.csl.sri.com: server set sender to owner-open-source using -f
Received: from fh102.infi.net (fh102.infi.net [208.131.160.101])
	by csla.csl.sri.com (8.9.1/8.9.1) with ESMTP id NAA17271
	for <open-source@csl.sri.com>; Sat, 21 Nov 1998 13:46:20 -0800 (PST)
Received: from cct.infi.net (pm2-96.w54.infi.net [206.98.227.96])
	by fh102.infi.net (8.8.8/8.8.8) with ESMTP id QAA28258
	for <open-source@csl.sri.com>; Sat, 21 Nov 1998 16:46:17 -0500 (EST)
Message-ID: <36573CFD.6A38849E@cct.infi.net>
Date: Sat, 21 Nov 1998 17:21:50 -0500
From: Blaine Burnham <bla@cct.infi.net>
Organization: InfiNet
X-Mailer: Mozilla 4.5 [en] (Win95; I)
X-Accept-Language: en
MIME-Version: 1.0
To: open-source@csl.sri.com
Subject: Re: LWN - The Trojan Horse (Bruce Perens)
References: <004601be13b7$37de21c0$966adec2@FortyTwo>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Sender: owner-open-source@csl.sri.com
Reply-To: open-source@csl.sri.com


Folks,

This is a thoughtful analysis of the problem.  In general we will likely be
better off risking the potential of malicious code in an open rather than closed
arena.  Yes there are many more potential bad guys but there a LOT more good
guys to watch.  Also in the open source arena, there will be a tendency to
improve on marginal implementations of just about everything.  It will be a
challenge for even the organized bad guy(s) to keep their malicious code in
place and functioning and not detected.  However, we will have to encourage
circumspection.  The Ken Thompson lesson should not have to be retaught.

Best Regards,

Blaine


Brian Gladman wrote:

>     >-----Original Message-----
>     >From: Crispin Cowan <crispin@cse.ogi.edu>
>     >To: Robust-Open-Source List <open-source@csl.sri.com>
>     >Date: 19 November 1998 07:17
>     >Subject: LWN - The Trojan Horse (Bruce Perens)
>
>     >This feature article on this week's "Linux Weekly News" raises the
>     >potential problem of Trojan Horses inserted into the open source code
>     >base.  Open source provides a 2 edged sword:
>
>     >   * On the good side, you at least CAN inspect the source to look for
>     >     trojans.  Bugs, too :-)
>     >   * On the bad side, there are a vast army of contributors to a major
>     >     distribution product like Red Hat.  Keeping track of them all is
>     >     a daunting taks, which raises the risk of Trojans.
>     >   * And lest we forget, Ken Thompson's neat little hack :-)
>
>     This is a critical issue for all code, not just open source code.  While
> it is possible that criminal or even terrorist elements might be more able
> to do this through open source development processes, other groupings that
> have this in mind will find closed develpment processes much easier to
> influence.
>     In the cryptography field for example it is going to be governments who
> seek to put Trojan horses into products and here it is software from closed
> sources that is more suspect than that developed through open source
> processes.  And while we might theorise about Trojan horses in open source
> software, I believe this to be a real and existing problem in closed source
> software.
>     Of course cryptographic code is a particular example but it does suggest
> that this is a general issue, not one that is particular to open source.
>     Further than this, however, the open source process is potentially much
> more suitable for meeting the needs of independent critical review processes
> and this suggests that this model may in fact be much better than the closed
> source model for safety and security critical applications.  If we consider
> a piece of code with unintended or deliberate backdoors in it, it seems to
> me that the prospects that these will be discovered is in a general sense
> proportional to the number of people who independently test or review the
> code involved.  Even closed source suppliers have come to understand the
> benefits of a widespread testing environment (beta releases of software are
> often now the norm) but in open source we can take this further and have
> independent design reviews as well.
>     Of course the key issue for open source is that of finding people who
> are prepared to devote the effort to the independent review proccess.  For
> obviously critical code (e.g. cryptographic algorithm code) this is not a
> problem but in a more general area of dependence it may not be so easy to
> achieve this.
>     In summary, however, when it comes to information security I fear
> governments more than I fear criminals so I will vote for open source all
> the way!
>         Brian Gladman


 1-Jan-1999  5:28:54-GMT,2627;000000000000
Received: from localhost by csla.csl.sri.com (8.9.1/8.9.1) with SMTP id VAA26044;
	Sun, 22 Nov 1998 21:25:53 -0800 (PST)
Received: by csla.csl.sri.com (bulk_mailer v1.5); Sun, 22 Nov 1998 21:25:52 -0800
Received: (from server@localhost)
	by csla.csl.sri.com (8.9.1/8.9.1) id VAA26037
	for open-source-outgoing; Sun, 22 Nov 1998 21:25:52 -0800 (PST)
X-Authentication-Warning: csla.csl.sri.com: server set sender to owner-open-source using -f
Received: from chiron.csl.sri.com (chiron.csl.sri.com [130.107.15.73])
	by csla.csl.sri.com (8.9.1/8.9.1) with ESMTP id VAA26032
	for <open-source@CSL.sri.com>; Sun, 22 Nov 1998 21:25:48 -0800 (PST)
Received: (from neumann@localhost) by chiron.csl.sri.com (8.7.3/8.7.3) id VAA28951 for open-source@CSL.sri.com; Sun, 22 Nov 1998 21:22:15 -0800 (PST)
Date: Sun, 22 Nov 98 21:22:15 PST
From: "Peter G. Neumann" <neumann@csl.sri.com>
To: open-source@csl.sri.com
Subject: ROS: Survivable systems and networks, further motivation
Message-ID: <CMM.0.90.1.911798535.neumann@chiron.csl.sri.com>
Sender: owner-open-source@csl.sri.com
Reply-To: open-source@csl.sri.com

In case some of you are wondering what I might be driving at by suggesting
that you should participate in Yet Another Discussion Agenda (YADA?), you
might check out the current draft of an emerging report (currently 161
pages) that I am writing for Paul Walczak and Tony Barnes at the Army
Research Lab in Adelphi MD, devoted to the creation of highly survivable
systems and networks:

  http://www.csl.sri.com/~neumann/private/arldraft.ps or .pdf

I expect to complete this first-phase report in about a month or so, but the
current draft already gives a good idea of what might be necessary to
achieve meaningfully survivable systems and networks -- which necessarily
must be reliable, secure, available, etc.  (The ARL project will continue
for a second year throughout 1999.)

I seriously hope that somehow the Robust Open-Source discussion group will
help inspire each of you to contribute in your own way to the development of
seriously robust open-source components that can be readily composed into
even more robust systems and networks.  There is considerable diversity
among the people initially on the list, and I believe that such a diversity
of viewpoints will be absolutely essential.  I also believe that the ROS
cause is an exceptionally worthy one, and -- in particular -- worthy of YOUR
participation.

I obviously do not want any of us to be swamped with irrelevant e-mail, and
hope we can keep it right on the mark.  (Please don't send messages intended
to be out-of-band to the open-source address.)

PGN

 1-Jan-1999 15:12:23-GMT,2227;000000000011
Received: from localhost by csla.csl.sri.com (8.9.1/8.9.1) with SMTP id HAA29099;
	Mon, 23 Nov 1998 07:02:59 -0800 (PST)
Received: by csla.csl.sri.com (bulk_mailer v1.5); Mon, 23 Nov 1998 07:02:59 -0800
Received: by csla.csl.sri.com (8.9.1/8.9.1) id HAA29092
	for open-source-outgoing; Mon, 23 Nov 1998 07:02:58 -0800 (PST)
X-Authentication-Warning: csla.csl.sri.com: server set sender to owner-open-source using -f
Received: from csmes.ncsl.nist.gov (csmes.ncsl.nist.gov [129.6.54.2])
	by csla.csl.sri.com (8.9.1/8.9.1) with SMTP id HAA29087
	for <open-source@csl.sri.com>; Mon, 23 Nov 1998 07:02:53 -0800 (PST)
Received: from cspa29.ncsl.nist.gov (cspa29.ncsl.nist.gov [129.6.54.212]) by csmes.ncsl.nist.gov (8.6.12/8.6.4jck0) with SMTP id KAA10836 for <open-source@csl.sri.com>; Mon, 23 Nov 1998 10:02:30 -0500
Message-Id: <3.0.5.32.19981123100054.007e89b0@csmes.ncsl.nist.gov>
X-Sender: stoneburner@csmes.ncsl.nist.gov
X-Mailer: QUALCOMM Windows Eudora Pro Version 3.0.5 (32)
Date: Mon, 23 Nov 1998 10:00:54 -0500
To: open-source@csl.sri.com
From: Gary Stoneburner <gary.stoneburner@nist.gov>
Subject: Re: LWN - The Trojan Horse (Bruce Perens)
In-Reply-To: <36573CFD.6A38849E@cct.infi.net>
References: <004601be13b7$37de21c0$966adec2@FortyTwo>
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Sender: owner-open-source@csl.sri.com
Reply-To: open-source@csl.sri.com

At 05:21 PM 11/21/98 -0500, Blaine Burnham wrote:
> The Ken Thompson lesson should not have to be retaught.

I strongly suspect that a majority of the security practicioners and the
vast majority of coders have no idea what Blaine is referring to :-)

Cheers,
Gary

***********************************************************************
* NOTE new Address (haven't moved, but address has :-)                *
* Gary Stoneburner                                                    *
* National Institute of Standards and Technology (NIST)               *
* Computer Security Division, Systems and Network Security Group      *
* 100 Bureau Dr, Stop 8930, Gaithersburg, MD 20899-8930               *
* Phone: 301-975-5394, FAX: 301-948-0279, Email: Stoneburner@nist.gov *
***********************************************************************

 1-Jan-1999 16:41:35-GMT,2018;000000000001
Received: from localhost by csla.csl.sri.com (8.9.1/8.9.1) with SMTP id IAA29854;
	Mon, 23 Nov 1998 08:31:44 -0800 (PST)
Received: by csla.csl.sri.com (bulk_mailer v1.5); Mon, 23 Nov 1998 08:31:44 -0800
Received: (from server@localhost)
	by csla.csl.sri.com (8.9.1/8.9.1) id IAA29847
	for open-source-outgoing; Mon, 23 Nov 1998 08:31:43 -0800 (PST)
X-Authentication-Warning: csla.csl.sri.com: server set sender to owner-open-source using -f
Received: from chiron.csl.sri.com (chiron.csl.sri.com [130.107.15.73])
	by csla.csl.sri.com (8.9.1/8.9.1) with ESMTP id IAA29842
	for <open-source@csl.sri.com>; Mon, 23 Nov 1998 08:31:38 -0800 (PST)
Received: (from neumann@localhost) by chiron.csl.sri.com (8.7.3/8.7.3) id IAA29088 for open-source@csl.sri.com; Mon, 23 Nov 1998 08:28:05 -0800 (PST)
Date: Mon, 23 Nov 98 8:28:04 PST
From: "Peter G. Neumann" <neumann@csl.sri.com>
To: open-source@csl.sri.com
Subject: Re: LWN - The Trojan Horse (Bruce Perens)
In-Reply-To: Your message of Mon, 23 Nov 1998 10:00:54 -0500
Message-ID: <CMM.0.90.1.911838484.neumann@chiron.csl.sri.com>
Sender: owner-open-source@csl.sri.com
Reply-To: open-source@csl.sri.com

Gary, I suspect you are correct.  But Blaine's point is very important.  I
suspect that EVERYONE on the ROS distribution knows this paper well.  More
generally, it is a shame that the classics of the field are not more widely
taught and understood.  PGN

Just in case someone missed it or disremembered it, Ken showed that a Trojan
horse in the OBJECT code of the C compiler (with no change in the source of
the C compiler) can create a Trapdoor in the next recompilation of the login
routine (with no change to the source of the login routine), and can be
persistent.  This suggests something like crypto checksums on object code
as well as source...

@Article{Thompson84,
   Key={Thompson}, Author={K. Thompson}, Journal={Communications of the ACM},
   Title={Reflections on Trusting Trust}, Year={1984},
   Month={August}, Pages={761--763}, Volume={27}, Number={8}   }

 1-Jan-1999 19:44:02-GMT,2482;000000000001
Received: from localhost by csla.csl.sri.com (8.9.1/8.9.1) with SMTP id LAA02077;
	Mon, 23 Nov 1998 11:34:59 -0800 (PST)
Received: by csla.csl.sri.com (bulk_mailer v1.5); Mon, 23 Nov 1998 11:34:59 -0800
Received: by csla.csl.sri.com (8.9.1/8.9.1) id LAA02070
	for open-source-outgoing; Mon, 23 Nov 1998 11:34:58 -0800 (PST)
X-Authentication-Warning: csla.csl.sri.com: server set sender to owner-open-source using -f
Received: from ptolemy.arca.com (ptolemy.arca.com [208.232.193.133])
	by csla.csl.sri.com (8.9.1/8.9.1) with ESMTP id LAA02065
	for <open-source@csl.sri.com>; Mon, 23 Nov 1998 11:34:53 -0800 (PST)
Received: from newton.arca.com (newton.arca.com [208.232.193.132])
	by ptolemy.arca.com (8.9.0/8.9.0) with ESMTP id LAA14741
	for <open-source@csl.sri.com>; Mon, 23 Nov 1998 11:48:00 -0800
To: open-source@csl.sri.com
From: Gary_Grossman@arca.com (Gary Grossman)
Date: Mon, 23 Nov 1998 15:27:11 -0400
Subject: Re: LWN - The Trojan Horse (Bruce Perens)
Message-ID: <2608984062.1196608@arca.com>
In-Reply-To: <CMM.0.90.1.911838484.neumann@chiron.csl.sri.com>dYour message of Mon
References: <CMM.0.90.1.911838484.neumann@chiron.csl.sri.com>dYour message of
 Mon  23 Nov 1998 10:00:54 -0500
Organization: Arca Systems, Inc.
X-Gateway: FirstClass Gateway for SMTP/NNTP (MacPPC) version 1.02
MIME-Version: 1.0
Content-type: text/enriched; charset=us-ascii
Content-transfer-encoding: Quoted-printable
Sender: owner-open-source@csl.sri.com
Reply-To: open-source@csl.sri.com

1. The Trojan horse also survived recompilation of the C compiler by insert=
ing itself in the object code thereof.


2. In this case, checksums on object code would not have helped, as=20

  a. Ken was the originator of the TH-bearing object code in question, and =
could have checksummed it for distirubution, and

  b. the compiler would insert the Trapdoor in the object code of the login=
 routine before it would be checksummed.


Gary Grossman

Arca Systems, Inc.<bold><x-fontname><param>arial</param>


open-source=40csl.sri.com,Internet writes:

</bold><x-quoted>Ken showed that a Trojan

horse in the OBJECT code of the C compiler (with no change in the source of=


the C compiler) can create a Trapdoor in the next recompilation of the logi=
n

routine (with no change to the source of the login routine), and can be

persistent.  This suggests something like crypto checksums on object code

as well as source...</x-quoted>

</x-fontname><x-fontname><param>Geneva</param>

</x-fontname>


 1-Jan-1999 20:09:59-GMT,2262;000000000001
Received: from localhost by csla.csl.sri.com (8.9.1/8.9.1) with SMTP id MAA02429;
	Mon, 23 Nov 1998 12:02:15 -0800 (PST)
Received: by csla.csl.sri.com (bulk_mailer v1.5); Mon, 23 Nov 1998 12:02:14 -0800
Received: by csla.csl.sri.com (8.9.1/8.9.1) id MAA02422
	for open-source-outgoing; Mon, 23 Nov 1998 12:02:13 -0800 (PST)
X-Authentication-Warning: csla.csl.sri.com: server set sender to owner-open-source using -f
Received: from mbunix.mitre.org (mbunix.mitre.org [129.83.20.100])
	by csla.csl.sri.com (8.9.1/8.9.1) with ESMTP id MAA02413
	for <open-source@csl.sri.com>; Mon, 23 Nov 1998 12:02:06 -0800 (PST)
Received: from MM60310-pc.mitre.org (abrams-pc.mitre.org [128.29.162.90])
	by mbunix.mitre.org (8.8.8/8.8.8/mitre.0) with SMTP id PAA29798
	for <open-source@csl.sri.com>; Mon, 23 Nov 1998 15:02:03 -0500 (EST)
Message-Id: <3.0.5.32.19981123145458.00a89890@mail92.mitre.org>
X-Sender: abrams@mail92.mitre.org
X-Mailer: QUALCOMM Windows Eudora Pro Version 3.0.5 (32)
Date: Mon, 23 Nov 1998 14:54:58 -0500
To: open-source@csl.sri.com
From: Marshall D Abrams <abrams@mitre.org>
Subject: Elements of good practice (was The Trojan Horse )
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Sender: owner-open-source@csl.sri.com
Reply-To: open-source@csl.sri.com

Not withstanding several attempts to capture good practice for the
educational process, such as NIST SP 800-14 and the History of Computer
Security project, I suggest that one project ROS might take on would be
compilation of a list of good practices. The objective might be to define
due diligence for support of actions at law. I've come to the conclusion
that such actions are probably one of the best ways to encourage the
development of quality products and systems.

>From: "Peter G. Neumann" <neumann@csl.sri.com>
>
>Gary, I suspect you are correct.  But Blaine's point is very important.  I
>suspect that EVERYONE on the ROS distribution knows this paper [Thompson]
well.  More
>generally, it is a shame that the classics of the field are not more widely
>taught and understood.  PGN
>

Sincerely,
  Marshall D. Abrams    The MITRE Corporation
  phone 703-883-6938    Mail Stop W422
  fax   703-883-1397    1820 Dolley Madison Blvd
                        McLean, VA  22102

 1-Jan-1999 20:44:59-GMT,3687;000000000001
Received: from localhost (daemon@localhost)
	by csla.csl.sri.com (8.9.1/8.9.1) with SMTP id MAA02748;
	Mon, 23 Nov 1998 12:31:59 -0800 (PST)
Received: by csla.csl.sri.com (bulk_mailer v1.5); Mon, 23 Nov 1998 12:31:59 -0800
Received: (from server@localhost)
	by csla.csl.sri.com (8.9.1/8.9.1) id MAA02741
	for open-source-outgoing; Mon, 23 Nov 1998 12:31:58 -0800 (PST)
X-Authentication-Warning: csla.csl.sri.com: server set sender to owner-open-source using -f
Received: from spsystems.net (spsystems.net [209.47.149.227])
	by csla.csl.sri.com (8.9.1/8.9.1) with ESMTP id MAA02734
	for <open-source@csl.sri.com>; Mon, 23 Nov 1998 12:31:47 -0800 (PST)
Received: (from henry@localhost) by spsystems.net (8.8.5/8.7.3) id PAA17277; Mon, 23 Nov 1998 15:31:05 -0500 (EST)
Date: Mon, 23 Nov 1998 15:31:05 -0500 (EST)
From: Henry Spencer <henry@spsystems.net>
To: open-source@csl.sri.com
Subject: Re: LWN - The Trojan Horse (Bruce Perens)
In-Reply-To: <2608984062.1196608@arca.com>
Message-ID: <Pine.BSI.3.91.981123145426.15203C-100000@spsystems.net>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Sender: owner-open-source@csl.sri.com
Reply-To: open-source@csl.sri.com

On Mon, 23 Nov 1998, Gary Grossman wrote:
> 2. In this case, checksums on object code would not have helped, as 
>   a. Ken was the originator of the TH-bearing object code in question, 
>      and could have checksummed it for distirubution...

For binaries in general, one can avoid this sort of thing either by always
building from sources, or by having multiple binary-distribution sites
which do the compile, compute the checksum, and compare checksums with
each other.  Much of the problem lies in trusting a single supplier of
binaries. 

The *compiler*, however, is a special case, and a particularly difficult
one:  short of hand-verifying the binary -- which has been done, for small
and particularly critical aerospace applications, but is impractical in
general -- it's hard to tell whether compilation has been honest.  Trying
to maintain rigorous control over the compilers at trusted-compilation
sites is helpful, but it's easy to slip up (note the occasional instance
of viruses distributed with commercial binary-only software).  It would
be better to have a way of *detecting* self-replicating Trojan Horses in
compilers.

One cannot just compile the compiler using a different compiler and then
compare to the self-compiled code, because two different compilers -- even
two versions of the same compiler -- typically compile different code for
a given input.  However, one can apply a further level of indirection.

Compile the compiler using both itself and a different compiler, yielding
two binaries.  These are supposedly the same machinery -- they came from
the same blueprints -- although they can't be directly compared because
the two different manufacturers have painted them different colors.  Now,
use both those binaries to compile the compiler source again, giving two
outputs.  Since the binaries are the same machinery, the outputs should be
identical.  Any difference indicates either a major bug somewhere, or an
infection in one of the original compilers.

This process does require a second compiler with different origins,
preferably as different as possible.  Note, though, that the second
compiler need not generate *good* code; it won't be used for building
production binaries.  It could even be an interpreter, if it's not
impossibly slow.

                                                          Henry Spencer
                                                       henry@spsystems.net
                                                     (henry@zoo.toronto.edu)

 1-Jan-1999 21:57:57-GMT,4620;000000000001
Received: from localhost (daemon@localhost)
	by csla.csl.sri.com (8.9.1/8.9.1) with SMTP id NAA03737;
	Mon, 23 Nov 1998 13:53:54 -0800 (PST)
Received: by csla.csl.sri.com (bulk_mailer v1.5); Mon, 23 Nov 1998 13:53:53 -0800
Received: (from server@localhost)
	by csla.csl.sri.com (8.9.1/8.9.1) id NAA03730
	for open-source-outgoing; Mon, 23 Nov 1998 13:53:52 -0800 (PST)
X-Authentication-Warning: csla.csl.sri.com: server set sender to owner-open-source using -f
Received: from maple.csl.sri.com (maple.csl.sri.com [192.12.33.35])
	by csla.csl.sri.com (8.9.1/8.9.1) with ESMTP id NAA03725
	for <open-source@csl.sri.com>; Mon, 23 Nov 1998 13:53:48 -0800 (PST)
Received: (from lincoln@localhost)
	by maple.csl.sri.com (8.8.7/8.8.7) id NAA00422;
	Mon, 23 Nov 1998 13:57:52 -0800 (PST)
Date: Mon, 23 Nov 1998 13:57:52 -0800 (PST)
Message-Id: <199811232157.NAA00422@maple.csl.sri.com>
From: Pat Lincoln <lincoln@csl.sri.com>
To: open-source@csl.sri.com
In-reply-to: <Pine.BSI.3.91.981123145426.15203C-100000@spsystems.net> (message
	from Henry Spencer on Mon, 23 Nov 1998 15:31:05 -0500 (EST))
Subject: Re: LWN - The Trojan Horse (Bruce Perens)
Sender: owner-open-source@csl.sri.com
Reply-To: open-source@csl.sri.com


> From: Henry Spencer <henry@spsystems.net>
> ...
> The *compiler*, however, is a special case, and a particularly difficult
> one:  short of hand-verifying the binary -- which has been done, for small
> and particularly critical aerospace applications, but is impractical in
> general -- it's hard to tell whether compilation has been honest.

Right.

> ...It would
> be better to have a way of *detecting* self-replicating Trojan Horses in
> compilers. ...

Right.

> Compile the compiler using both itself and a different compiler, yielding
> two binaries.  These are supposedly the same machinery -- they came from
> the same blueprints -- although they can't be directly compared because
> the two different manufacturers have painted them different colors.  Now,
> use both those binaries to compile the compiler source again, giving two
> outputs.  Since the binaries are the same machinery, the outputs should be
> identical.  Any difference indicates either a major bug somewhere, or an
> infection in one of the original compilers.

Good idea.

> This process does require a second compiler with different origins,
> preferably as different as possible.  Note, though, that the second
> compiler need not generate *good* code; it won't be used for building
> production binaries.  It could even be an interpreter, if it's not
> impossibly slow.

But there are a lot of heuristics in compilers, and pseudo-random
algorithms, etc.  Little differences in how compiler2 compiles the
original compiler may result in different final outputs: more or less
calls to pseudo-random number generators from the same seed will result in
different paths taken though the 'same' algorithm.  One could require a
certain "functional" behavior of compilers to help make sure this scheme
would work.  However, there is another way.  Formal methods.

Have the compiler generate a proof of correctness of its output along with
the output. (This is not proving for all input the compiler produces
correct output.  Instead, this is the compiler generating a proof that it
is correct for this one input.  This is much easier, since each stage of a
compiler does (hopefully) semantic-preserving transformations on the code,
so all the compiler need do is record what steps it is taking and why that
choice was made.)  Again, given input source code, the compiler generates
a binary and a proof that the binary has certain properties, and certain
mappings exist to parts of the source code.  This isn't as far-fetched as
it may seem.  In his dissertation, George Necula built such a compiler for
a large subset of C (able to compile portions of standard routines like
parts of the xv tool).  His compiler only tried to output proofs that the
resulting binaries preserved types, obeyed array bounds, and other little
things, but one can easily imagine how to beef it up to provide proofs of
more interesting properties.  His compiler is available to play with from
his web page. 

Have such a compiler compile login.  Now the proof given can be checked.
To avoid detection, the Trojan Horse would need to exist both in the
compiler, and in one of the verification condition generator, the
underlying OS kernel, or the proof checker.  The proof checker in George's
work is very short and easily verified by humans or other proof tools.  In
any case, the burden on the Trojans is now rather larger to avoid
detection.  

pdl.

 1-Jan-1999 22:46:36-GMT,2848;000000000001
Received: from localhost by csla.csl.sri.com (8.9.1/8.9.1) with SMTP id OAA04357;
	Mon, 23 Nov 1998 14:42:53 -0800 (PST)
Received: by csla.csl.sri.com (bulk_mailer v1.5); Mon, 23 Nov 1998 14:42:52 -0800
Received: (from server@localhost)
	by csla.csl.sri.com (8.9.1/8.9.1) id OAA04350
	for open-source-outgoing; Mon, 23 Nov 1998 14:42:51 -0800 (PST)
X-Authentication-Warning: csla.csl.sri.com: server set sender to owner-open-source using -f
Received: from spsystems.net (spsystems.net [209.47.149.227])
	by csla.csl.sri.com (8.9.1/8.9.1) with ESMTP id OAA04344
	for <open-source@csl.sri.com>; Mon, 23 Nov 1998 14:42:37 -0800 (PST)
Received: (from henry@localhost) by spsystems.net (8.8.5/8.7.3) id RAA18789; Mon, 23 Nov 1998 17:41:56 -0500 (EST)
Date: Mon, 23 Nov 1998 17:41:56 -0500 (EST)
From: Henry Spencer <henry@spsystems.net>
To: open-source@csl.sri.com
Subject: Re: LWN - The Trojan Horse (Bruce Perens)
In-Reply-To: <199811232157.NAA00422@maple.csl.sri.com>
Message-ID: <Pine.BSI.3.91.981123172907.15203E-100000@spsystems.net>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Sender: owner-open-source@csl.sri.com
Reply-To: open-source@csl.sri.com

On Mon, 23 Nov 1998, Pat Lincoln wrote:
> But there are a lot of heuristics in compilers, and pseudo-random
> algorithms, etc.  Little differences in how compiler2 compiles the
> original compiler may result in different final outputs...

Ah, but any pseudo-random processes should be only *pseudo*random.  That
is, presented with the same input, the compiler should always give the
same output; this is an important property, which compiler users as well
as security people already rely on.  And in the absence of bugs and
infections, this means that how the compiler itself was compiled should
not affect its input->output mapping.  How the compiler was compiled may
affect how quickly it runs, but should not affect the functioning of its
algorithms. 

> ...However, there is another way.  Formal methods.
> Have the compiler generate a proof of correctness of its output...

The problem with this is that it requires significant changes to existing
compilers, especially the optimizing ones.  My indirect-comparison test
can be done on existing compilers, unchanged.  (I'm unaware of any
production compilers which exhibit random, as opposed to pseudo-random,
behavior... and I would report it as a bug if I encountered one.)

Of course, being able to do both tests would be even better.

> ...In his dissertation, George Necula built such a compiler for
> a large subset of C...  His compiler is available to play with from
> his web page. 

URL?

                                                          Henry Spencer
                                                       henry@spsystems.net
                                                     (henry@zoo.toronto.edu)


 1-Jan-1999 23:22:55-GMT,3524;000000000001
Received: from localhost (daemon@localhost)
	by csla.csl.sri.com (8.9.1/8.9.1) with SMTP id PAA04748;
	Mon, 23 Nov 1998 15:18:16 -0800 (PST)
Received: by csla.csl.sri.com (bulk_mailer v1.5); Mon, 23 Nov 1998 15:18:16 -0800
Received: by csla.csl.sri.com (8.9.1/8.9.1) id PAA04741
	for open-source-outgoing; Mon, 23 Nov 1998 15:18:15 -0800 (PST)
X-Authentication-Warning: csla.csl.sri.com: server set sender to owner-open-source using -f
Received: from netscape.com (h-205-217-237-46.netscape.com [205.217.237.46])
	by csla.csl.sri.com (8.9.1/8.9.1) with ESMTP id PAA04735
	for <open-source@csl.sri.com>; Mon, 23 Nov 1998 15:18:07 -0800 (PST)
Received: from dredd.mcom.com (dredd.mcom.com [205.217.237.54])
	by netscape.com (8.8.5/8.8.5) with ESMTP id PAA29924
	for <open-source@csl.sri.com>; Mon, 23 Nov 1998 15:17:23 -0800 (PST)
Received: from netscape.com ([206.222.233.142]) by
          dredd.mcom.com (Netscape Messaging Server 4.0) with ESMTP id
          F2WE0Z01.5QV for <open-source@csl.sri.com>; Mon, 23 Nov 1998
          15:17:23 -0800 
Message-ID: <3659EAB7.2CE4F492@netscape.com>
Date: Mon, 23 Nov 1998 15:07:44 -0800
From: Jim Roskind <jar@netscape.com>
Organization: Netscape Communications
X-Mailer: Mozilla 4.5 [en] (Win98; U)
X-Accept-Language: en
MIME-Version: 1.0
To: open-source@csl.sri.com
Subject: Re: LWN - The Trojan Horse (Bruce Perens)
References: <Pine.BSI.3.91.981123172907.15203E-100000@spsystems.net>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Sender: owner-open-source@csl.sri.com
Reply-To: open-source@csl.sri.com

Henry Spencer wrote:

> I'm unaware of any
> production compilers which exhibit random, as opposed to pseudo-random,
> behavior... and I would report it as a bug if I encountered one.

JavaSoft's javac compiler is (or at least was, for as long as I interacted with
it) fairly random in terms of its output as a function of input.  The
fundamental variation appeared in the "constant pool" (which had implications on
a lot of the byte code).  The "feature" was a result of failing to order the
items in the constant pool, and simply dumping a hash table in its pseudo-random
order.  The full randomness (which I'll grossly define to be "difficult to
reproduce the results with any consistency") resulted from an underlying
implementation which (as I recall) used actual binary object addresses as part
of the hashing... which meant where you loaded had an impact on the hash table
ordering.

The difference was especially noticeable when running the compiler on not only
distinct versions of an OS, but fully distinct platforms.  This made it very
hard to validate javac as we ported it :-(.

I've always felt this was a bug (as you suggest), but I would note that this is
at least one example of a compiler that had a fair amount of dependence on the
exact time/place of building.  I'd guess that the most common problem of this
sort would appear when generated code included build time/date/etc., but I bet
other "production" systems have some randomness that make using this *very* cool
trick harder than would be hoped.

...but I'd also be more than willing to call such behavior a bug ;-).

Jim


-- My views are mine, not Netscape's --
Jim Roskind                             fax:                  650.428.4058
jar@netscape.com                      voice: 650.Java.Jim  or 650.528.2546
--------------------------------------------------------------------------
PGP 2.6.2 Key fingerprint=0E 2A B2 35 01 9B 5C 58  2D 52 05 9A 3D 9B 84 DB



 2-Jan-1999  3:08:55-GMT,2643;000000000001
Received: from localhost by csla.csl.sri.com (8.9.1/8.9.1) with SMTP id TAA06913;
	Mon, 23 Nov 1998 19:06:26 -0800 (PST)
Received: by csla.csl.sri.com (bulk_mailer v1.5); Mon, 23 Nov 1998 19:06:25 -0800
Received: by csla.csl.sri.com (8.9.1/8.9.1) id TAA06906
	for open-source-outgoing; Mon, 23 Nov 1998 19:06:24 -0800 (PST)
X-Authentication-Warning: csla.csl.sri.com: server set sender to owner-open-source using -f
Received: from fh102.infi.net (fh102.infi.net [208.131.160.101])
	by csla.csl.sri.com (8.9.1/8.9.1) with ESMTP id TAA06901
	for <open-source@csl.sri.com>; Mon, 23 Nov 1998 19:06:18 -0800 (PST)
Received: from cct.infi.net (pm1-56.w54.infi.net [206.98.227.56])
	by fh102.infi.net (8.8.8/8.8.8) with ESMTP id WAA23277
	for <open-source@csl.sri.com>; Mon, 23 Nov 1998 22:06:06 -0500 (EST)
Message-ID: <365A2D24.D7FB97F7@cct.infi.net>
Date: Mon, 23 Nov 1998 22:51:00 -0500
From: Blaine Burnham <bla@cct.infi.net>
Organization: InfiNet
X-Mailer: Mozilla 4.5 [en] (Win95; I)
X-Accept-Language: en
MIME-Version: 1.0
To: open-source@csl.sri.com
Subject: Re: LWN - The Trojan Horse (Bruce Perens)
References: <CMM.0.90.1.911838484.neumann@chiron.csl.sri.com>dYour message of
	 Mon  23 Nov 1998 10:00:54 -0500 <2608984062.1196608@arca.com>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Sender: owner-open-source@csl.sri.com
Reply-To: open-source@csl.sri.com

Folks,

The KT TH is one of the more disquieting considerations for any  open
source approach.  A partial counter argument is that in open source two
forces come to bear that MAY make a difference.  The first of these is
the benefits gained from many different, very talented, people looking
at the source.  This source may have to include the compilers and other
of the meta code that is fundamental to the creation of the application
(even thought that code tends to be not too visible to the user).
Another example is/will be ORBs.  So the question becomes are there
sufficiently robust (I hate to say it) configuration management tools
available to the open-source community that some worthwhile assurance
argument about the open source code could be considered.  The second
force is the replacement rate of the elements of the open source code.
It will take a clever and committed bad guy to keep his malicious code
smoothly integrated into target routines that are being overhauled by
the community of collaborators.  The more frequently the overhaul the
harder.  This difficulty places more emphasis on the KT approach which
may be contained with the CM tools on the more stable parts of the
"system"

Just thinking.

Best Regards,

Blaine



 2-Jan-1999  3:20:40-GMT,5022;000000000001
Received: from localhost (daemon@localhost)
	by csla.csl.sri.com (8.9.1/8.9.1) with SMTP id TAA07011;
	Mon, 23 Nov 1998 19:18:18 -0800 (PST)
Received: by csla.csl.sri.com (bulk_mailer v1.5); Mon, 23 Nov 1998 19:18:17 -0800
Received: (from server@localhost)
	by csla.csl.sri.com (8.9.1/8.9.1) id TAA07004
	for open-source-outgoing; Mon, 23 Nov 1998 19:18:17 -0800 (PST)
X-Authentication-Warning: csla.csl.sri.com: server set sender to owner-open-source using -f
Received: from fh102.infi.net (fh102.infi.net [208.131.160.101])
	by csla.csl.sri.com (8.9.1/8.9.1) with ESMTP id TAA06999
	for <open-source@csl.sri.com>; Mon, 23 Nov 1998 19:18:12 -0800 (PST)
Received: from cct.infi.net (pm1-56.w54.infi.net [206.98.227.56])
	by fh102.infi.net (8.8.8/8.8.8) with ESMTP id WAA02815
	for <open-source@csl.sri.com>; Mon, 23 Nov 1998 22:18:08 -0500 (EST)
Message-ID: <365A300A.C8F76F09@cct.infi.net>
Date: Mon, 23 Nov 1998 23:03:23 -0500
From: Blaine Burnham <bla@cct.infi.net>
Organization: InfiNet
X-Mailer: Mozilla 4.5 [en] (Win95; I)
X-Accept-Language: en
MIME-Version: 1.0
To: open-source@csl.sri.com
Subject: Re: LWN - The Trojan Horse (Bruce Perens)
References: <199811232157.NAA00422@maple.csl.sri.com>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Sender: owner-open-source@csl.sri.com
Reply-To: open-source@csl.sri.com

Folks,

This might actually work.  The scope is about right and something like LINIX may
not be too big.

Regards,

Blaine

Pat Lincoln wrote:

> > From: Henry Spencer <henry@spsystems.net>
> > ...
> > The *compiler*, however, is a special case, and a particularly difficult
> > one:  short of hand-verifying the binary -- which has been done, for small
> > and particularly critical aerospace applications, but is impractical in
> > general -- it's hard to tell whether compilation has been honest.
>
> Right.
>
> > ...It would
> > be better to have a way of *detecting* self-replicating Trojan Horses in
> > compilers. ...
>
> Right.
>
> > Compile the compiler using both itself and a different compiler, yielding
> > two binaries.  These are supposedly the same machinery -- they came from
> > the same blueprints -- although they can't be directly compared because
> > the two different manufacturers have painted them different colors.  Now,
> > use both those binaries to compile the compiler source again, giving two
> > outputs.  Since the binaries are the same machinery, the outputs should be
> > identical.  Any difference indicates either a major bug somewhere, or an
> > infection in one of the original compilers.
>
> Good idea.
>
> > This process does require a second compiler with different origins,
> > preferably as different as possible.  Note, though, that the second
> > compiler need not generate *good* code; it won't be used for building
> > production binaries.  It could even be an interpreter, if it's not
> > impossibly slow.
>
> But there are a lot of heuristics in compilers, and pseudo-random
> algorithms, etc.  Little differences in how compiler2 compiles the
> original compiler may result in different final outputs: more or less
> calls to pseudo-random number generators from the same seed will result in
> different paths taken though the 'same' algorithm.  One could require a
> certain "functional" behavior of compilers to help make sure this scheme
> would work.  However, there is another way.  Formal methods.
>
> Have the compiler generate a proof of correctness of its output along with
> the output. (This is not proving for all input the compiler produces
> correct output.  Instead, this is the compiler generating a proof that it
> is correct for this one input.  This is much easier, since each stage of a
> compiler does (hopefully) semantic-preserving transformations on the code,
> so all the compiler need do is record what steps it is taking and why that
> choice was made.)  Again, given input source code, the compiler generates
> a binary and a proof that the binary has certain properties, and certain
> mappings exist to parts of the source code.  This isn't as far-fetched as
> it may seem.  In his dissertation, George Necula built such a compiler for
> a large subset of C (able to compile portions of standard routines like
> parts of the xv tool).  His compiler only tried to output proofs that the
> resulting binaries preserved types, obeyed array bounds, and other little
> things, but one can easily imagine how to beef it up to provide proofs of
> more interesting properties.  His compiler is available to play with from
> his web page.
>
> Have such a compiler compile login.  Now the proof given can be checked.
> To avoid detection, the Trojan Horse would need to exist both in the
> compiler, and in one of the verification condition generator, the
> underlying OS kernel, or the proof checker.  The proof checker in George's
> work is very short and easily verified by humans or other proof tools.  In
> any case, the burden on the Trojans is now rather larger to avoid
> detection.
>
> pdl.


 2-Jan-1999  3:50:36-GMT,5345;000000000001
Received: from localhost (daemon@localhost)
	by csla.csl.sri.com (8.9.1/8.9.1) with SMTP id TAA07146;
	Mon, 23 Nov 1998 19:48:11 -0800 (PST)
Received: by csla.csl.sri.com (bulk_mailer v1.5); Mon, 23 Nov 1998 19:48:11 -0800
Received: (from server@localhost)
	by csla.csl.sri.com (8.9.1/8.9.1) id TAA07139
	for open-source-outgoing; Mon, 23 Nov 1998 19:48:10 -0800 (PST)
X-Authentication-Warning: csla.csl.sri.com: server set sender to owner-open-source using -f
Received: from maple.csl.sri.com (maple.csl.sri.com [192.12.33.35])
	by csla.csl.sri.com (8.9.1/8.9.1) with ESMTP id TAA07134
	for <open-source@csl.sri.com>; Mon, 23 Nov 1998 19:48:06 -0800 (PST)
Received: (from lincoln@localhost)
	by maple.csl.sri.com (8.8.7/8.8.7) id TAA00696;
	Mon, 23 Nov 1998 19:52:10 -0800 (PST)
Date: Mon, 23 Nov 1998 19:52:10 -0800 (PST)
Message-Id: <199811240352.TAA00696@maple.csl.sri.com>
From: Pat Lincoln <lincoln@csl.sri.com>
To: open-source@csl.sri.com
In-reply-to: <Pine.BSI.3.91.981123172907.15203E-100000@spsystems.net> (message
	from Henry Spencer on Mon, 23 Nov 1998 17:41:56 -0500 (EST))
Subject: Re: LWN - The Trojan Horse (Bruce Perens)
Sender: owner-open-source@csl.sri.com
Reply-To: open-source@csl.sri.com


> On Mon, 23 Nov 1998, Pat Lincoln wrote:
> > But there are a lot of heuristics in compilers, and pseudo-random
> > algorithms, etc.  Little differences in how compiler2 compiles the
> > original compiler may result in different final outputs...

From: Henry Spencer <henry@spsystems.net>
> Ah, but any pseudo-random processes should be only *pseudo*random.  That
> is, presented with the same input, the compiler should always give the
> same output; this is an important property, which compiler users as well
> as security people already rely on.  

By "pseudo random" I meant not truly random, but depending on hidden
inputs.  You are right that if those inputs (time, other processes in the
system, values in uninitialized memory, exact address of newly allocated
heap, etc.) are set to exactly the same values, then the compiler should
behave as we need it to.  However, in cases where these seed values that
matter to the particular compiler aren't set the same, we cannot depend on
functional behavior of the compiler.  As a more concrete example, if the
compiler depends on exact binary addresses, then if compiler2 does some
allocations itself, it may alter the behavior of compiler1.  This isn't
truly random behavior, but for the purposes of your idea, it might as well
be.  You suggest this nonfunctional behavior of compilers (you call
randomness) is a bug.  Let's agree to call all such nonfunctional compiler
behavior buggy.

> > ...However, there is another way.  Formal methods.
> > Have the compiler generate a proof of correctness of its output...
> 
> The problem with this is that it requires significant changes to existing
> compilers, especially the optimizing ones.  My indirect-comparison test
> can be done on existing compilers, unchanged.  

And that's why your idea is so cool.

To defend the Touchstone compiler approach, counting on the correctness
checks generated by the prover frees the compiler writer from worrying
about correctness of nasty tight optimizations (so, you might say,
how does this differentiate this approach from any other C compiler
project?).  George claims extremely good performance for his compiler,
and blames that on extremely aggressive use of optimizations, only reigned
in by the proof machinery where necessary.  He says if he wrote his compiler
without the proof machinery he would have had to be more conservative and
would have gotten much worse performance.

To your point that this formal approach requires changes to existing
compilers, this approach could theoretically be applied by a post-pass
proof-insertion process, but that's practically hopeless right now.  So we
do require folks to retrofit their compilers with this formal machinery,
essentially leaving traces of all optimizations in a datastructure we can
turn into formal proofs.  That doesn't sound like bad programming practice
anyway, and from extremely brief contact with gcc and g++ and descendents,
it seems to me most of the key data is stored by the compiler, but then
discarded.  So the changes to support this approach need not be so costly.

> (I'm unaware of any
> production compilers which exhibit random, as opposed to pseudo-random,
> behavior... and I would report it as a bug if I encountered one.)

By your definition of random (that is, depending on difficult-to-control
system parameters), what production compiler would you cite as a good
example of a nonrandom compiler?  I was disturbed when I discovered
Lucid's Common Lisp compiler gave different code the first and second
times you compiled some functions, gave different code depending on hidden
internal state (an undocumented array of weak pointers the system kept
around).  Depending on when the garbage collector ran, you would get
different outputs from the compiler.  As Jim Roskind points out, JavaSoft's
javac exhibits this misfeature.  

> > ...In his dissertation, George Necula built such a compiler for
> > a large subset of C...  His compiler is available to play with from
> > his web page. 
> 
> URL?

Sorry, I meant to include the URL first time around.
 
http://fried.fox.cs.cmu.edu/pccdemo.html

pdl.

 2-Jan-1999  5:56:07-GMT,2821;000000000001
Received: from localhost by csla.csl.sri.com (8.9.1/8.9.1) with SMTP id VAA07897;
	Mon, 23 Nov 1998 21:53:13 -0800 (PST)
Received: by csla.csl.sri.com (bulk_mailer v1.5); Mon, 23 Nov 1998 21:53:13 -0800
Received: (from server@localhost)
	by csla.csl.sri.com (8.9.1/8.9.1) id VAA07890
	for open-source-outgoing; Mon, 23 Nov 1998 21:53:12 -0800 (PST)
X-Authentication-Warning: csla.csl.sri.com: server set sender to owner-open-source using -f
Received: from church.cse.ogi.edu (root@cse.ogi.edu [129.95.20.2])
	by csla.csl.sri.com (8.9.1/8.9.1) with ESMTP id VAA07885
	for <open-source@csl.sri.com>; Mon, 23 Nov 1998 21:53:07 -0800 (PST)
Received: from cse.ogi.edu (crispin@dialup-12.cse.ogi.edu [129.95.49.12])
	by church.cse.ogi.edu (8.8.6/8.8.6) with ESMTP id VAA12308
	for <open-source@csl.sri.com>; Mon, 23 Nov 1998 21:53:04 -0800 (PST)
Message-ID: <365A49AF.4C39F21C@cse.ogi.edu>
Date: Tue, 24 Nov 1998 05:52:48 +0000
From: Crispin Cowan <crispin@cse.ogi.edu>
Organization: Oregon Graduate Institute
X-Mailer: Mozilla 4.5b2 [en] (X11; I; Linux 2.0.35 i586)
X-Accept-Language: en
MIME-Version: 1.0
To: open-source@csl.sri.com
Subject: Re: LWN - The Trojan Horse (Bruce Perens)
References: <199811232157.NAA00422@maple.csl.sri.com> <365A300A.C8F76F09@cct.infi.net>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Sender: owner-open-source@csl.sri.com
Reply-To: open-source@csl.sri.com

Blaine Burnham wrote:

> Folks,
>
> This might actually work.  The scope is about right and something like LINIX may
> not be too big.

The cool thing about open source is that it empirically tests what works.  Since we
HAVE source code, we CAN apply both Henry's cool 2-compiler technique, and the
formal methods technique, and discover which works better.  Without source, you
basically can't do anything unless you're a vendor.  With source, anyone can try
these techniques and see if they produce beneficial results.

On the question of non-random compilers:  gcc just produced identical results for
me compiling a trivial program.  I believe that part of the gcc bootstrapping
process is that the compiler does the following:

  1. Compiles gcc with the system compiler, producing gcc1
  2. Compile gcc source again using gcc1, producing gcc2
  3. Compile gcc source again using gcc2, producing gcc3
  4. Compare gcc2 and gcc3:  if they are the same, bootstrap is declared successful

I may have one too many compiles in here.  But the basic idea is that gcc depends
on it's own behavior being deterministic to do its own validation.  Now we just
need a second compiler like that.

Crispin
-----
 Crispin Cowan, Research Assistant Professor of Computer Science, OGI
    NEW:  Protect Your Linux Host with StackGuard'd Programs  :FREE
       http://www.cse.ogi.edu/DISC/projects/immunix/StackGuard/



 2-Jan-1999  9:32:48-GMT,2015;000000000001
Received: from localhost (daemon@localhost)
	by csla.csl.sri.com (8.9.1/8.9.1) with SMTP id BAA09281;
	Tue, 24 Nov 1998 01:30:02 -0800 (PST)
Received: by csla.csl.sri.com (bulk_mailer v1.5); Tue, 24 Nov 1998 01:30:02 -0800
Received: by csla.csl.sri.com (8.9.1/8.9.1) id BAA09274
	for open-source-outgoing; Tue, 24 Nov 1998 01:30:01 -0800 (PST)
X-Authentication-Warning: csla.csl.sri.com: server set sender to owner-open-source using -f
Received: from cheviot.ncl.ac.uk (cheviot.ncl.ac.uk [128.240.233.51])
	by csla.csl.sri.com (8.9.1/8.9.1) with ESMTP id BAA09269
	for <open-source@csl.sri.com>; Tue, 24 Nov 1998 01:29:56 -0800 (PST)
From: Lindsay.Marshall@newcastle.ac.uk
Received: from catless.ncl.ac.uk by cheviot.ncl.ac.uk id <JAA13203@cheviot.ncl.ac.uk>
  (8.7.6/ for ncl.ac.uk) with ESMTP; Tue, 24 Nov 1998 09:29:50 GMT
Message-Id: <199811240929.JAA13203@cheviot.ncl.ac.uk>
Date: Tue, 24 Nov 1998 09:30:55 +0000 (GMT)
Subject: Re: LWN - The Trojan Horse (Bruce Perens)
To: open-source@csl.sri.com
cc: henry@spsystems.net
In-Reply-To: <Pine.BSI.3.91.981123145426.15203C-100000@spsystems.net>
MIME-Version: 1.0
Content-Type: TEXT/plain; CHARSET=US-ASCII
Sender: owner-open-source@csl.sri.com
Reply-To: open-source@csl.sri.com


> Compile the compiler using both itself and a different compiler, yielding
> two binaries.  These are supposedly the same machinery -- they came from
> the same blueprints -- although they can't be directly compared because
> the two different manufacturers have painted them different colors.  Now,
> use both those binaries to compile the compiler source again, giving two
> outputs.  Since the binaries are the same machinery, the outputs should be
> identical.  Any difference indicates either a major bug somewhere, or an
> infection in one of the original compilers.

Remembering at all times that everything must be statically linked or
else all the compilers couuld be picking up strange things from
mutually shared libraries.....

L.
-- 
http://catless.ncl.ac.uk/Lindsay


 2-Jan-1999 22:41:49-GMT,2440;000000000001
Received: from localhost by csla.csl.sri.com (8.9.1/8.9.1) with SMTP id OAA17413;
	Tue, 24 Nov 1998 14:38:07 -0800 (PST)
Received: by csla.csl.sri.com (bulk_mailer v1.5); Tue, 24 Nov 1998 14:38:06 -0800
Received: (from server@localhost)
	by csla.csl.sri.com (8.9.1/8.9.1) id OAA17404
	for open-source-outgoing; Tue, 24 Nov 1998 14:38:05 -0800 (PST)
X-Authentication-Warning: csla.csl.sri.com: server set sender to owner-open-source using -f
Received: from rumor.research.att.com (rumor.research.att.com [192.20.225.9])
	by csla.csl.sri.com (8.9.1/8.9.1) with SMTP id OAA17398
	for <open-source@csl.sri.com>; Tue, 24 Nov 1998 14:37:57 -0800 (PST)
Received: from research.att.com ([135.207.30.100]) by rumor; Tue Nov 24 17:31:14 EST 1998
Received: from postal.research.att.com ([135.207.23.30]) by research; Tue Nov 24 17:36:57 EST 1998
Received: from postal.research.att.com (localhost [127.0.0.1])
	by postal.research.att.com (8.8.7/8.8.7) with ESMTP id RAA20491
	for <open-source@csl.sri.com>; Tue, 24 Nov 1998 17:36:56 -0500 (EST)
Message-Id: <199811242236.RAA20491@postal.research.att.com>
From: Steve Bellovin <smb+lists@research.att.com>
To: open-source@csl.sri.com
Subject: Re: LWN - The Trojan Horse (Bruce Perens) 
Date: Tue, 24 Nov 1998 17:36:56 -0500
Sender: owner-open-source@csl.sri.com
Reply-To: open-source@csl.sri.com

> Just in case someone missed it or disremembered it, Ken showed that a Trojan
> horse in the OBJECT code of the C compiler (with no change in the source of
> the C compiler) can create a Trapdoor in the next recompilation of the login
> routine (with no change to the source of the login routine), and can be
> persistent.  This suggests something like crypto checksums on object code
> as well as source...
> 

I'm not sure what you mean by "crypto checksums on object code".  We
already have that, in things like ActiveX, signed Java applets, etc.
The problem is that by the time you have the output of the compiler to
sign, you're already in trouble.  The real issue is the mismatch
between the semantics of the object code versus the semantics of the
source code; to be safe, you need to verify that they match,
independent of the compiler's view of the matter.  Ironically enough,
one of the oldest works on that is my own doctoral dissertation, lo
these many years ago -- I say "ironic", because I wasn't working on
security back then, and the connection didn't occurr to me until fairly
recently.

 2-Jan-1999 23:42:53-GMT,4078;000000000001
Received: from localhost (daemon@localhost)
	by csla.csl.sri.com (8.9.1/8.9.1) with SMTP id PAA18237;
	Tue, 24 Nov 1998 15:38:30 -0800 (PST)
Received: by csla.csl.sri.com (bulk_mailer v1.5); Tue, 24 Nov 1998 15:38:29 -0800
Received: (from server@localhost)
	by csla.csl.sri.com (8.9.1/8.9.1) id PAA18230
	for open-source-outgoing; Tue, 24 Nov 1998 15:38:29 -0800 (PST)
X-Authentication-Warning: csla.csl.sri.com: server set sender to owner-open-source using -f
Received: from ares.cs.Virginia.EDU (ares.cs.Virginia.EDU [128.143.137.19])
	by csla.csl.sri.com (8.9.1/8.9.1) with ESMTP id PAA18225
	for <open-source@csl.sri.com>; Tue, 24 Nov 1998 15:38:18 -0800 (PST)
Received: from labrador.cs.virginia.edu (nr@labrador.cs.Virginia.EDU [128.143.137.55])
	by ares.cs.Virginia.EDU (8.8.5/8.8.5) with ESMTP id SAA01947
	for <open-source@csl.sri.com>; Tue, 24 Nov 1998 18:38:10 -0500 (EST)
Message-Id: <199811242338.SAA01947@ares.cs.Virginia.EDU>
To: open-source@csl.sri.com
Subject: Re: LWN - The Trojan Horse (Bruce Perens) 
In-reply-to: Your message of "Thu, 19 Nov 1998 07:14:57 GMT."
             <3653C570.5AF7AE98@cse.ogi.edu> 
Date: Tue, 24 Nov 1998 18:38:09 -0500
From: Norman Ramsey <nr@cs.virginia.edu>
Sender: owner-open-source@csl.sri.com
Reply-To: open-source@csl.sri.com

I love some of the wilder, more ambitious ideas being discussed for
fighting Trojan Horses, but it struck me that Bruce Perens has
recommended some less ambitious (but perhaps more easily realizable)
approaches.  As an open-source developer of long standing
(http://www.cs.virginia.edu/~nr/noweb/), I'm not excited by the agenda
above---particularly those parts that are quoted below:

>			       The Trojan Horse
>				       
>  
>   Bruce Perens <bruce@hams.com>
>  
>  If you're lucky, the person who created the software you are using has
>  also posted a cryptographic checksum file with a digital signature,
>  which can be used to verify that the files you download actually do
>  contain the data that he uploaded. If he has a properly-signed public
>  key, then you have a good idea of who he is. If you're _real_ lucky,
>  he has carefully reviewed all patches submitted to him, he's
>  identified the submitters of the patches, and he keeps a permanent
>  archive of those patches for future reference. These are things that
>  we need _everyone_ to do.
>  
>  So, here's how you can help:
>  
>  _Carefully Review Patches, and Identify Their Submitters_...
>  _Keep More Than Just a Change Log_... 

I have no problem with these items --- perhaps because I do this already :-)

>  _Expand the Web of Trust_ (key signings etc)....
>  
>  _Reliably Identify Uploaded Files_. Uploaded files should come with a
>  list of cryptographic checksums for those files. That list should be
>  cryptographicaly signed. Only then can you be sure...

Here, I'm unconvinced.  If you have not distributed software to a wide
audience, it might astonish you how difficult it is to put together a
clean distribution that can easily be installed on a variety of
platforms, let alone one that is digitally authenticated.  Every time
I ask my security-minded colleagues about PGP, I get the same answer:
``great stuff, too hard to install.''  As a developer, I don't see a
significant payoff in mastering this stuff.  In my particular
situation, I am much better off investing my limited cycles in
  - easier installation of my software
  - easier porting to the ubiquitous Microsoft platforms
  - improved features or performance
then in digitally signing my work.  At least, that's the way I
perceive it.

What might change my mind is:

  1) Make it dead easy for me to digitally sign a complex software
     distribution (one that can be downloaded in its entirety or in
     pieces, and one that includes both sources and a variety of
     binaries).

  2) Convince me that my users will benefit.  This means (at least)
     making it dead easy for them to convince themselves that what
     they have is what I signed.  I'm not sure that's possible, but
     I'm willing to hear arguments.


Norman



 3-Jan-1999  1:08:00-GMT,1960;000000000001
Received: from localhost by csla.csl.sri.com (8.9.1/8.9.1) with SMTP id RAA19307;
	Tue, 24 Nov 1998 17:04:14 -0800 (PST)
Received: by csla.csl.sri.com (bulk_mailer v1.5); Tue, 24 Nov 1998 17:04:14 -0800
Received: by csla.csl.sri.com (8.9.1/8.9.1) id RAA19300
	for open-source-outgoing; Tue, 24 Nov 1998 17:04:13 -0800 (PST)
X-Authentication-Warning: csla.csl.sri.com: server set sender to owner-open-source using -f
Received: from rumor.research.att.com (rumor.research.att.com [192.20.225.9])
	by csla.csl.sri.com (8.9.1/8.9.1) with SMTP id RAA19294
	for <open-source@csl.sri.com>; Tue, 24 Nov 1998 17:04:02 -0800 (PST)
Received: from research.att.com ([135.207.30.100]) by rumor; Tue Nov 24 19:57:13 EST 1998
Received: from postal.research.att.com ([135.207.23.30]) by research; Tue Nov 24 20:02:18 EST 1998
Received: from smb.research.att.com (aksecure.research.att.com [135.205.51.3])
	by postal.research.att.com (8.8.7/8.8.7) with ESMTP id UAA22524
	for <open-source@csl.sri.com>; Tue, 24 Nov 1998 20:02:14 -0500 (EST)
Received: from smb.research.att.com (smb@localhost)
	by smb.research.att.com (8.8.5/8.8.5) with ESMTP id UAA04799
	for <open-source@csl.sri.com>; Tue, 24 Nov 1998 20:02:06 -0500 (EST)
Message-Id: <199811250102.UAA04799@smb.research.att.com>
X-Mailer: exmh version 1.6.9 8/22/96
To: open-source@csl.sri.com
Subject: Re: PLEASE post an exact complete reference 
From: Steve Bellovin <smb+lists@research.att.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Date: Tue, 24 Nov 1998 20:02:05 -0500
Sender: owner-open-source@csl.sri.com
Reply-To: open-source@csl.sri.com

I was asked for the precise citation to my dissertation.  It's "Verifiably 
Correct Code Generation Using Predicate Transformers", Dept. of Computer 
Science, University of North Carolina at Chapel Hill, December 1982.  You can 
find the abstract at http://www.research.att.com/~smb/dissabstract.html.
I don't think machine-readable exists any longer.


 3-Jan-1999 11:23:43-GMT,4474;000000000001
Received: from localhost (daemon@localhost)
	by csla.csl.sri.com (8.9.1/8.9.1) with SMTP id DAA23171;
	Wed, 25 Nov 1998 03:07:46 -0800 (PST)
Received: by csla.csl.sri.com (bulk_mailer v1.5); Wed, 25 Nov 1998 03:07:46 -0800
Received: (from server@localhost)
	by csla.csl.sri.com (8.9.1/8.9.1) id DAA23164
	for open-source-outgoing; Wed, 25 Nov 1998 03:07:45 -0800 (PST)
X-Authentication-Warning: csla.csl.sri.com: server set sender to owner-open-source using -f
Received: from post.mail.demon.net (post-12.mail.demon.net [194.217.242.41])
	by csla.csl.sri.com (8.9.1/8.9.1) with ESMTP id DAA23159
	for <open-source@csl.sri.com>; Wed, 25 Nov 1998 03:07:40 -0800 (PST)
Received: from [194.222.106.150] (helo=FortyTwo)
	by post.mail.demon.net with smtp (Exim 2.053 #1)
	id 0zicnB-0005i3-00
	for open-source@csl.sri.com; Wed, 25 Nov 1998 11:07:29 +0000
Message-ID: <003901be1863$a9506600$966adec2@FortyTwo>
From: "Brian Gladman" <gladman@seven77.demon.co.uk>
To: <open-source@csl.sri.com>
Subject: Re: LWN - The Trojan Horse (Bruce Perens) 
Date: Wed, 25 Nov 1998 11:06:06 -0000
MIME-Version: 1.0
Content-Type: text/plain;
	charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
X-Priority: 3
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook Express 4.72.3110.1
X-MimeOle: Produced By Microsoft MimeOLE V4.72.3110.3
Sender: owner-open-source@csl.sri.com
Reply-To: open-source@csl.sri.com

From: Norman Ramsey <nr@cs.virginia.edu>
To: open-source@csl.sri.com <open-source@csl.sri.com>
Date: 24 November 1998 23:41
Subject: Re: LWN - The Trojan Horse (Bruce Perens)

[snip]

>>  _Expand the Web of Trust_ (key signings etc)....
>>
>>  _Reliably Identify Uploaded Files_. Uploaded files should come with a
>>  list of cryptographic checksums for those files. That list should be
>>  cryptographicaly signed. Only then can you be sure...
>
>Here, I'm unconvinced.  If you have not distributed software to a wide
>audience, it might astonish you how difficult it is to put together a
>clean distribution that can easily be installed on a variety of
>platforms, let alone one that is digitally authenticated.  Every time
>I ask my security-minded colleagues about PGP, I get the same answer:
>``great stuff, too hard to install.''  As a developer, I don't see a
>significant payoff in mastering this stuff.  In my particular
>situation, I am much better off investing my limited cycles in
>  - easier installation of my software
>  - easier porting to the ubiquitous Microsoft platforms
>  - improved features or performance
>then in digitally signing my work.  At least, that's the way I
>perceive it.
>
>What might change my mind is:
>
>  1) Make it dead easy for me to digitally sign a complex software
>     distribution (one that can be downloaded in its entirety or in
>     pieces, and one that includes both sources and a variety of
>     binaries).
>
>  2) Convince me that my users will benefit.  This means (at least)
>     making it dead easy for them to convince themselves that what
>     they have is what I signed.  I'm not sure that's possible, but
>     I'm willing to hear arguments.
>


This is an interesting thread that I would be happy to pursue either in the
group or outside it.  It seems possible that the issue raised here is a
fairly normal one of two rather different communities each not fully
understanding the needs and perceptions of the other.

I would be intersted to know what (1) above means in practice.  I guess it
means:

1. Having the signing process automatically invoked as a part of each build
and aware of the formats it needs to use for each target configuration.

2.  Automatically signing root objects (files?) and signing some description
of their relationships and the objects that represent these relationships
(directory trees?).

3. Compiling a driver 'script' that the user can invoke to generate a
'signature log' for the ditributed code.

But, since I have not distributed multi-platform code I guess that there may
be much more as well.

As Norman indicates, the issue here is really that of identifying what would
make this easy from a developer's point of view and what would make it
desirable from a user prespective.

In my view this is a potentially valuable approach that might combat a
number of risks in open source distribution (e.g. deception - code alleged
to be authentic but not in fact coming from the announced source) and it is
hence worth the effort of understanding what is involved.

     Brian Gladman



 6-Jan-1999 23:21:00-GMT,9828;000000000000
Received: from localhost (daemon@localhost)
	by csla.csl.sri.com (8.9.1/8.9.1) with SMTP id PAA22432;
	Sat, 28 Nov 1998 15:17:04 -0800 (PST)
Received: by csla.csl.sri.com (bulk_mailer v1.5); Sat, 28 Nov 1998 15:17:04 -0800
Received: (from server@localhost)
	by csla.csl.sri.com (8.9.1/8.9.1) id PAA22425
	for open-source-outgoing; Sat, 28 Nov 1998 15:17:03 -0800 (PST)
X-Authentication-Warning: csla.csl.sri.com: server set sender to owner-open-source using -f
Received: from chiron.csl.sri.com (chiron.csl.sri.com [130.107.15.73])
	by csla.csl.sri.com (8.9.1/8.9.1) with ESMTP id PAA22419
	for <open-source@CSL.sri.com>; Sat, 28 Nov 1998 15:16:58 -0800 (PST)
Received: (from neumann@localhost) by chiron.csl.sri.com (8.7.3/8.7.3) id PAA02258 for open-source@CSL.sri.com; Sat, 28 Nov 1998 15:13:18 -0800 (PST)
Date: Sat, 28 Nov 98 15:13:18 PST
From: "Peter G. Neumann" <neumann@csl.sri.com>
To: open-source@csl.sri.com
Subject: [RRE: open source organizing
Message-ID: <CMM.0.90.1.912294798.neumann@chiron.csl.sri.com>
Sender: owner-open-source@csl.sri.com
Reply-To: open-source@csl.sri.com

FYI.  Some of you have undoubtedly already seen this.  I thought
it would be interesting for the rest of you.

                ---------------

Date: Fri, 27 Nov 1998 12:02:23 -0800 (PST)
From: Phil Agre <pagre@alpha.oac.ucla.edu>
To: "Red Rock Eater News Service" <rre@lists.gseis.ucla.edu>
Subject: [RRE]open source organizing

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
This message was forwarded through the Red Rock Eater News Service (RRE).
Send any replies to the original author, listed in the From: field below.
You are welcome to send the message along to others but please do not use
the "redirect" command.  For information on RRE, including instructions
for (un)subscribing, see http://dlis.gseis.ucla.edu/people/pagre/rre.html
or send a message to requests@lists.gseis.ucla.edu with Subject: info rre
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=





--------------040209010806060502000609--



