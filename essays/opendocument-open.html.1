<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Is OpenDocument an Open Standard? Yes!</title>
<meta name="description" content="An explanation on why OpenDocument is an open standard">
<meta name="keywords" content="OpenDocument, open standard, standard, David, Wheeler, David A. Wheeler, David Wheeler, office, office documents, OpenOffice.org, KOffice, KDE, Sun, Microsoft, Corel, Microsoft Office, open source software, Massachusetts">
<meta name="generator" content="vim">
</head>
<body>

<h1>Is OpenDocument an Open Standard? Yes!</h1>

by <a href="http://www.dwheeler.com">David A. Wheeler</a>, 2005-02-08

<p>
Ever since the OpenDocument standard was ratified by OASIS in May 2005,
it&#8217;s been gathering steam.
Massachusetts continues to plan to switch to it
in spite of some nasty politics, and all evidence suggests increasing
use worldwide.
KOffice is completing a switch to OpenDocument as their <i>native</i>
format (OpenOffice.org did this long before), and more implementations are
being announced each month.

<p>
But is OpenDocument really an open standard, or not?
For example, can <i>anyone</i> implement it?
Was its development process completely controlled by a single party
(which would not be open), or is there evidence that
it&#8217;s a consensus result by many?
It&#8217;s generally accepted that OpenDocument is an open standard, but recently
I&#8217;ve been told that some people are claiming otherwise.
So let&#8217;s figure out what the criteria are for an open standard, and then see
if OpenDocument meets those criteria.

<h1>What&#8217;s an Open Standard?</h1>

There&#8217;s no single definition of the term &#8220;open standard&#8221;.
That&#8217;s true for most words and phrases, actually.
But lots of documents hint at what it means, for example:
<ul>
<li>
<a href="http://europa.eu.int/idabc/servlets/Doc?id=17982">
Europe&#8217;s &#8220;Valoris report&#8221;</a>
defines an open standard this way:
&#8220;The minimum requirements for an open standard are that the document format is completely described in publicly accessible documents, that this description may be distributed freely and that the document format may be implemented in programs without restrictions, royalty-free, and with no legal bindings.&#8221;
<li>
In
<a href="http://www.groklaw.net/article.php?story=20051029212458555">an
earlier paper</a> I noted that,
&#8220;When you think &#8216;open&#8217;, think &#8216;open competition&#8217; or &#8216;open market.&#8217; An open standard should allow competition based on merit, instead of limiting customers&#8217; suppliers to one particular supplier or a subset of suppliers based on their business model, development model, licensing model, and so on. You should be able to replace one product that does the same function for another, as long as they meet the same open standard, and achieve at least the same basic function provided by the standard (though some may perform better or have additional features -- think of plug-replaceable components).&#8221;
</ul>

<p>
Let&#8217;s first look at the two definitions of
&#8220;open standard&#8221; that seem to be the most widely used.
The first is by Bruce Perens; the second is by
Ken Krechmer (Fellow of the International Center for Standards Research).
These two are so widely used that when I did a Google search on
&#8220;open standards&#8221; these were the second and fourth results
respectively (the
first and third were OASIS and the W3C, two standards bodies that
create open standards).
We&#8217;ll then look at the European Commission&#8217;s definition
of open standards, which is a formally approved definition of
the term (and one that European governments use).

<p>
Then, after we&#8217;ve looked at these three definitions,
we&#8217;ll create a merged definition that includes <i>all</i> of their
requirements (from all three sources).
That way, if the specification meets this merged set of requirements, we
can be very confident that we have an open standard; such a specification
would meet <i>all three</i> definitions.


<h2>Perens</h2>

<p>
A very popular definition of the term &#8220;open standards&#8221; -- according
to Google the most popular -- is
<a href="http://perens.com/OpenStandards/Definition.html">
Bruce Perens&#8217; &#8220;Open Standards: Principles and Practice&#8221;</a>.
You&#8217;re best off reading the actual paper for its full content, of course.
Let me summarize it by quoting its list of principles that it states
a specification must meet to be an open standard:
<ol>
<li>Availability: Open Standards are available for all to read and implement.
<li>Maximize End-User Choice: Open Standards create a fair, competitive market for implementations of the standard. They do not lock the customer in to a particular vendor or group.
<li>No Royalty: Open Standards are free for all to implement, with no royalty or fee. Certification of compliance by the standards organization may involve a fee.
<li>No Discrimination: Open Standards and the organizations that administer them do not favor one implementor over another for any reason other than the technical standards compliance of a vendor&#8217;s implementation. Certification organizations must provide a path for low and zero-cost implementations to be validated, but may also provide enhanced certification services.
<li>Extension or Subset: Implementations of Open Standards may be extended, or offered in subset form. However, certification organizations may decline to certify subset implementations, and may place requirements upon extensions (see Predatory Practices).
<li>Predatory Practices: Open Standards may employ license terms that protect against subversion of the standard by embrace-and-extend tactics. The licenses attached to the standard may require the publication of reference information for extensions, and a license for all others to create, distribute, and sell software that is compatible with the extensions. An Open Standard may not otherwise prohibit extensions.
</ol>

<h2>Krechmer</h2>

<p>
Another popular definition is the set of
<a href="http://www.csrstds.com/openstds.html">
requirements for open standards created by
Ken Krechmer</a>, Fellow of the International Center for Standards Research
(University of Colorado).
He&#8217;s published several versions; here I&#8217;ll summarize the
February 7, 2005 version of &#8220;Open Standards Requirements&#8221;.
He looked at standards from the viewpoint of
recognized standards-setting organizations, implementors, and users,
and tried to find some middle ground merging their desires.
He claims that an open standard must meet the following requirements:
<ol>
<li>Open Meeting - all may participate in the standards development process.
<li>Consensus - all interests are discussed and agreement found, no domination.
<li>Due Process - balloting and an appeals process may be used to find resolution.
<li>Open Intellectual Property Rights (IPR) - how holders of IPR related to the standard make available their IPR.
<li>One World - same standard for the same capability, world-wide.
<li>Open Change - all changes are presented and agreed in a forum supporting the five requirements above.
<li>Open Documents - committee drafts and completed standards documents are easily available for implementation and use.
<li>Open Interface - supports proprietary advantage (implementation); each interface is not hidden or controlled (implementation); each interface of the implementation supports migration (use).
<li>Open Access - objective conformance mechanisms for implementation testing and user evaluation.
<li>On-going Support - standards are supported until user interest ceases rather than when implementer interest declines.
</ol>

<p>
Clearly, these definitions have a <i>lot</i> in common.
Ken Krechmer wrote his paper after Perens, and compares his list to Perens&#8217;.
He identifies each of Perens&#8217; 6 points, and maps them to his own list of ten
as follows:

<table border="1">
<tr><th>Perens</th><th>Krechmer</th></tr>
<tr><td>Availability</td><td>Open Documents</td></tr>
<tr><td>Maximum end-user choice</td><td>Open Access</td></tr>
<tr><td>No royalty</td><td>Open IPR</td></tr>
<tr><td>No discrimination</td><td>Open Meeting, Consensus and Due Process</td></tr>
<tr><td>Ability to create extension or subset</td><td>Open Interface</td></tr>
<tr><td>Ability to prevent predatory practices</td><td>Open Change</td></tr>
</table>
Krechmer in particular notes that Perens doesn&#8217;t include any requirement
about wanting &#8220;One World&#8221; or ongoing support.

<p>
However, Krechmer&#8217;s list has its own problems.
In particular, Krechmer&#8217;s list omits one of the most important factors
of all: the ability of <i>anyone</i> to implement the standard.
The <i>whole point</i> of open standards is to allow anyone to implement
the standard, and to allow any user to have unfettered selection and
switching between many implementations.
Krechmer&#8217;s list notes the importance of
patents and copyright (&#8220;IPR&#8221;),
but his definition allows &#8220;open standards&#8221;
to forbid competitors from implementing the standard.
This is a fundamental flaw in his definition;
defining &#8220;open standard&#8221; as &#8220;a standard
that some competitors are
forbidden from implementing&#8221; is nonsense.
It certainly conflicts many other works.
Perens&#8217; definition <i>explicitly</i> forbids this,
as does the
<a href="http://europa.eu.int/idabc/servlets/Doc?id=17982">
Valoris report</a>,
which required as a <i>minimum</i> that the format
&#8220;may be implemented in programs without restrictions, royalty-free, and with no legal bindings.&#8221;
It also conflicts with the European Commission&#8217;s definition of open
standards, which also required royalty-free use (we&#8217;ll get
to that definition in a moment).
<p>
The most economically obvious example of this conflict is
open source software (OSS).
Today, in a vast number of software markets, the dominant or #2 program
is OSS, including web servers, web browsers, mail servers, and DNS servers.
Yet OSS are legally forbidden from using royalty-bearing patented works,
so obviously specifications requiring royalty-bearing patents or other
legal restrictions preventing OSS or proprietary implementations
are obviously not open standards.
A standard cannot be &#8220;open&#8221; if it is illegal for the
dominant or #2 supplier to implement it.
<p>
This conflict between patents and open standards
only makes sense, when you think about it.
The purpose of patents are to <i>prevent</i>
competition, while the purpose of open standards is to <i>enable</i>
open competition.
The purposes of patents and open standards are fundamentally in conflict.
Open standards are <i>not</i> the same as open source software;
you can choose open standards and use only proprietary software.
But selecting open standards lets you choose between implementations,
including OSS, and lets you switch to another implementation later.

<h2>European Commission</h2>

The European Commission (EC) has defined the term
&#8220;open standards&#8221; as part of the final version 1.0 of the
<a href="http://europa.eu.int/idabc/en/document/3761">
European Interoperability Framework</a>.
<a href="http://trends.newsforge.com/article.pl?sid=04/11/19/148236">Newsforge
ran a short article</a> about it.
The EC declared that &#8220;to attain interoperability in the context of
pan-European eGovernment services, guidance needs to focus on
open standards&#8221; -- in other words, the EC views
the use of open standards as a significant policy issue.
They define the following as &#8220;the minimal characteristics that a
specification and its attendant documents must have in order
to be considered an open standard&#8221;, and I quote them here:
<ul>
<li>
The standard is adopted and will be maintained by a not-for-profit organisation, and its ongoing development occurs on the basis of an open decision-making procedure available to all interested parties (consensus or majority decision etc.).
<li>
The standard has been published and the standard specification document is available either freely or at a nominal charge. It must be permissible to all to copy, distribute and use it for no fee or at a nominal fee.
<li>
The intellectual property -- i.e. patents possibly present -- of (parts of) the standard is made irrevocably available on a royalty-free basis.
<li>
There are no constraints on the re-use of the standard.
</ul>
<p>
The document also suggests that open source software (OSS) compliments
open standards.
It says: &#8220;Open Source Software (OSS) tends to use
and help define open standards and publicly
available specifications.
OSS products are, by their nature, publicly available specifications,
and the availability of their source code promotes open,
democratic debate around the specifications, making them both more
robust and interoperable.
As such, OSS corresponds to the objectives of this Framework
and should be assessed and considered favourably alongside proprietary
alternatives.&#8221;
Both the definition and explanatory text make it clear that
the intent was that any open standard must be implementable by both
OSS and proprietary programs,
especially given the requirements for
royalty-free use and lack of constraints on re-use.

<!--
There are many other possible sources for a definition of open standard.
One interesting one is
http://www.oio.dk/files/040622_Definition_of_open_standards.pdf
Denmark's National IT and Telecom Agency, which defines a
"completely open standard" as:
A completely open standard has the following properties:
- It is accessible and free of charge to all
- It remains accessible and free of charge
- It is accessible free of charge and documented in all its details
But this was back in June 2004; I suspect this has been superceded
by the EC definition which came afterwards.
Thus, no point in describing THIS one too; the document is long enough.
-->

<h2>Merging the definitions</h2>

<p>
So let&#8217;s use a definition of &#8220;open standard&#8221; merging
the best of each, and so that a specification would meet <i>all</i>
of these definitions to qualify.
Comparing Krechmer&#8217;s list to Perens&#8217;, 
Perens&#8217; list is shorter, clearer, and doesn&#8217;t have the
serious defect
of forbidding open competition.
We&#8217;ll then add the two points of &#8220;One World&#8221; and &#8220;Ongoing support&#8221;
stated by Krechmer as important issues.

<p>
Most of the EC&#8217;s requirements also map well to Perens&#8217;, except that
the requirement for a free or nominal-cost specification isn&#8217;t explicit:
<table border="1">
<tr><th>Perens</th><th>European Commission</th></tr>
<tr><td>No discrimination (though doesn&#8217;t <i>explicitly</i> require not-for-profit)</td>
<td>
The standard is adopted and will be maintained by a not-for-profit organisation, and its ongoing development occurs on the basis of an open decision-making procedure available to all interested parties (consensus or majority decision etc.).
</td></tr>
<tr><td>(No match)</td>
<td>
The standard has been published and the standard specification document is available either freely or at a nominal charge. It must be permissible to all to copy, distribute and use it for no fee or at a nominal fee.
<tr><td>No Royalty</td>
<td>
The intellectual property -- i.e. patents possibly present -- of (parts of) the standard is made irrevocably available on a royalty-free basis.
</td></tr>
<tr><td>Availability</td>
<td>
There are no constraints on the re-use of the standard.
</td></tr>
</table>
So again, let&#8217;s add &#8220;No or nominal cost for specification&#8221;.
Perens doesn&#8217;t explicitly say that a standards maintainer has to be
not-for-profit, but he <i>does</i> require no discrimination, with
essentially the same notion; we&#8217;ll add that as an implicit requirement
to no discrimination.
<p>
The result is a slightly stricter definition of &#8220;open standard&#8221;
than any of the three definitions by themselves.
Thus, so if any specification meets this merged definition,
then it&#8217;s <i>clearly</i> an open standard.

<h1>Is OpenDocument an Open Standard?</h1>

So, is OpenDocument an open standard?
Let&#8217;s walk through the list of requirements.

<ol>
<li><i>Availability: Open Standards are available for all to read and implement.</i>
This one is easy.  You can
<a href="http://www.oasis-open.org/committees/office/">download
the OpenDocument specification for free from OASIS</a>.
Absolutely anyone can implement OpenDocument; if you look at the IPR
statements, they clearly state that absolutely <i>anyone</i> can implement it,
and there are no limits at all.
<li><i>Maximize End-User Choice: Open Standards create a fair, competitive market for implementations of the standard. They do not lock the customer in to a particular vendor or group.</i>
The fundamental question here is, is this designed to permit
multiple interoperable implementations?
The most obvious way to determine if this is true is to
determine if there multiple implementations available on
multiple different platforms.
The answer to the latter question is emphatically <i>yes</i>;
there are already multiple implementations of OpenDocument, with many
more in progress.
OpenOffice.org/StarOffice and KOffice are office suite applications
that support reading and writing OpenDocument, and are completely independent
implementations.
There are also many specialized products that implement
their relevant portions, for example,
AbiWord and Writely are word processors that can read and write
the word processing portion of OpenDocument;
Gnumeric is a spreadsheet application whose implementation of the
spreadsheet portion of OpenDocument is in development.
(<a href="http://en.wikipedia.org/wiki/List_of_applications_supporting_OpenDocument">Wikipedia
has a list of applications supporting OpenDocument</a>.)
You can also look at other evidence to help gain more confidence in this:
<ol>
<li>Were multiple implementors involved in its specification to
help prevent lock-in? Yes; Sun, KDE, Corel (vendor of Word Perfect), IBM (vendor of IBM Workplace and Lotus SmartSuite), and others.
I&#8217;ll discuss more about the participants later, but that&#8217;s enough to
prove the point.
<li>Does the specification maximally reuse <i>other</i> open standards
(otherwise it may end up creating unnecessary dependencies on
nonstandard components)?
Yes; other standards OpenDocument reuses include
SVG, SMIL, XSL, XForms, MathML, XLink and the Dublin Core Meta Initiative.
</ol>
<li><i>No Royalty: Open Standards are free for all to implement, with no royalty or fee. Certification of compliance by the standards organization may involve a fee.</i>
There&#8217;s no royalty or fee to implement OpenDocument, so this is met 100%.
<li><i>No Discrimination: Open Standards and the organizations that administer them do not favor one implementor over another for any reason other than the technical standards compliance of a vendor&#8217;s implementation. Certification organizations must provide a path for low and zero-cost implementations to be validated, but may also provide enhanced certification services.</i>
I believe this one is also a clear &#8220;yes&#8221;, however, it&#8217;s
more difficult
to measure this than most other points.
We&#8217;ll explore this one further in a moment, to see why I believe this
is &#8220;yes&#8221; as well.
<li><i>Extension or Subset: Implementations of Open Standards may be extended, or offered in subset form. However, certification organizations may decline to certify subset implementations, and may place requirements upon extensions (see Predatory Practices).</i>
Implementors may implement subsets or supersets of OpenDocument, without
any special requirements, so this is clearly met too.
<li><i>Predatory Practices: Open Standards may employ license terms that protect against subversion of the standard by embrace-and-extend tactics. The licenses attached to the standard may require the publication of reference information for extensions, and a license for all others to create, distribute, and sell software that is compatible with the extensions. An Open Standard may not otherwise prohibit extensions.</i>
The OpenDocument developers chose to not embed any protective
measures against subversion by external parties.
However, all the members of the technical committee that created the
standard were required to grant royalty-free licenses to implement it.
This prevented anyone from quietly inserting a requirement in the standard
and after ratification announce that they would extort payments from
implementors.
Thus, this requirement is easily met.
<li><i>One World: Same standard for the same capability, world-wide.</i>
The OpenDocument specification was specifically designed to be used
worldwide, and <i>not</i> limited to any region.
It includes capabilities to support
arbitrary locales and arbitrary languages, and in fact was developed by
representatives from many different countries.
For example, OpenDocument supports Unicode/ISO 10646 characters
(whose purpose is to support the characters of all languages),
Ruby text (important in supporting
some Asian languages), and text written from
right to left (important in supporting Arabic and Hebrew).
Reusing many open standards helps this, too.
Also, by working to avoid patented techniques, the developers
of OpenDocument made it more likely that
<i>everyone</i> in the world could use the standard (otherwise the
standard might only be usable in countries
that don&#8217;t tolerate software patents).
We&#8217;ll discuss more about patents in a moment, because patents fundamentally
conflict with the previously-noted requirement for no discrimination.
<li><i>On-going Support: Standards are supported until user interest ceases rather than when implementer interest declines.</i>
The OpenDocument standard is supported by OASIS, a standards body, rather
than any one particular vendor.  Thus, as long as there are users who
wish to support the standard, they can work with OASIS to continue its
support.
There&#8217;s absolutely no indication that this is a problem anyway; there
is a <i>massive</i> amount of interest in OpenDocument.
<li<i>No or nominal cost for specification.</i>
OASIS posts the specification at no charge on their website, clearly
meeting this requirement.
</ol>

<p>
In short, we get &#8220;yes&#8221; answers for all of these points.
All but one of them are trivially answered as &#8220;yes&#8221;.
One point, however, is harder to measure - the &#8220;No discrimination&#8221; point.
This isn&#8217;t because there&#8217;s a <i>problem</i> with OpenDocument on this point;
the challenge is that &#8220;no discrimination&#8221; is harder to measure for
<i>any</i> standard.
So let&#8217;s drill into the &#8220;no discrimination&#8221; point to see if OpenDocument
meets this requirement -- if it does, then it is
<i>clearly and unambiguously</i> an open standard.

<h1>No Discrimination</h1>

Perens requires that open standards have &#8220;no discrimination&#8221;,
that is, that
&#8220;Open Standards and the organizations that administer them do not favor one implementor over another for any reason other than the technical standards compliance of a vendor&#8217;s implementation. Certification organizations must provide a path for low and zero-cost implementations to be validated, but may also provide enhanced certification services.&#8221;
There&#8217;s no certification issue, so we don&#8217;t have to deal with that.
<p>
The European Commission had an explicit requirement that the administering
organization must be a not-for-profit, which is easy to show in this case:
OASIS is a non-profit!
<!-- OpenDocument FAQ -->
But there&#8217;s more to preventing discrimination than simply creating
a specification via a not-for-profit organization.
<p>
What about the whole first part of Perens&#8217; requirements?
<p>
Krechmer maps this single requirement to three requirements:
<ul>
<li>Open Meeting - all may participate in the standards development process.
<li>Consensus - all interests are discussed and agreement found, no domination.
<li>Due Process - balloting and an appeals process may be used to find resolution.
</ul>

<p>
We can deal with &#8220;due process&#8221; easily enough.
OpenDocument was developed in OASIS, which has clear balloting
and appeals process, so that&#8217;s clearly met.

<p>
The &#8220;open meeting&#8221; requirement that &#8220;all may participate in
the standards development&#8221; is a little more interesting, but it seems to be
met, too:
<ul>
<li>Note that this does <i>not</i> mean that <i>everyone</i> has to
participate -- sometimes organizations who <i>should</i> participate
don&#8217;t do so.
In 2004, Europe formally asked in very strong language that
Microsoft participate in OpenDocument development;
while it was an observer on the technical committee for a long while,
and is part of OASIS, Microsoft
never chose to become actively involved with this standard.
The definition doesn&#8217;t require that all parties get involved, merely that
they are given the opportunity.

<li>Like many old standards bodies, OASIS typically requires payments from
organizations interested in developing the standard.
The problem is that some people who have a legitimate interest in a
standard may not be part of an organization willing to make these payments.
If there were no recourse, this would cause the OASIS group to fail to
meet this requirement.
However, OASIS has worked hard to make sure that there are mechanisms to
allow such organizations to be represented through non-profit organizations;
as a result, this requirement is met too.
</ul>

<p>
But that leaves us a mixture of requirements:
&#8220;do not favor one implementor over another,&#8221;
and &#8220;Consensus - all interests are discussed and agreement found,
no domination.&#8221;
If there&#8217;s a single vendor who controls all real decisions, then
clearly we have a problem.
Thankfully, I think we have good evidence that there wasn&#8217;t
domination in the case of OpenDocument.
If there was no domination, then OpenDocument is an open standard
without question.
So let&#8217;s look at the evidence, shall we?

<h1>No Domination</h1>

<p>
How can you tell if there&#8217;s domination by a vendor in a
standards body?
There are several signs that if present give strong evidence of vendor
domination. For example, vendor domination
is very likely if the rules or processes
controlling the standards&#8217; development
strongly limit the range of technical changes,
forbid changes that would affect only one particular vendor,
or give one particular vendor a sole veto power.
The OpenDocument development process had no such problem; the rules
in placed allowed anyone to propose changes, even if they forced any or all
vendors to change their implementations.
But there can be unstated rules that
effectively limit others&#8217; participation, even if there&#8217;s no
obvious written rule enforcing it.
What we need is direct evidence that there was no domination in
the development of OpenDocument.

<p>
One easy way is to see if there&#8217;s only one party making essentially
all the changes, or if in fact others are making proposals that cause
<i>technical changes to the specification that affect implementors</i>.
Particularly telling are changes that cause all implementors
to make significant changes to their products.
If all implementors are changing their product
to meet the specification, then clearly no one implementor is
calling all the shots.

<p>
So let&#8217;s start by looking at who proposed the original base
document, and who proposed changes that were accepted.
The original base document was contributed by Sun and the OpenOffice.org
group, so clearly they were involved.
Their base document was based on actual experience of using the format
as their <i>primary</i> format, which is absolutely perfect... here
we have a base document based on <i>actual experience</i>.

<p>
But did Sun and OpenOffice.org control everything,
or were changes made to the specification by others?
Sun and OpenOffice.org did contribute the original document, as
well as some later changes, but I asked a number of TC members
and they easily showed that
<i>many</i> other organizations made substantive changes to the specification.
In some cases it&#8217;s hard to tell who was the proposer or
proponent, but there&#8217;s more than enough evidence to show that
many others were involved.
Even in the cases were I have not identified the
proposer or proponent, it&#8217;s obvious that changes were
made that caused implementors to change their implementations.
<p>
Below is a long list of examples of the many changes made to the
original base document contributed by Sun/OpenOffice.org
on the way to its becoming OpenDocument.
You don&#8217;t need to read this information in detail;
the very point is that it&#8217;s
a <i>long</i> set.  Anyway, here&#8217;s a table showing
some of the changes:

<table border="1">
<tr><th>Change</th><th>Proposer/Proponent</th></tr>
<tr><td>
Modified to allow multiple metadata fields.
The original specification did not allow list, e.g.,
there could only be one author for a document.
At the first face to face meeting,
strongly urged that this
be changed, and the first OASIS draft included this change.
<!--
Durusau:
the change to the metadata and some other changes are documented in the minutes for the face to face, 17-18 February 2003. (Has it really been that long?)
-->
</td>
<td>
Patrick Durusau (Society of Biblical Literature)
</td></tr>

<tr><td>
Added SVG to support vector graphics using an already-existing standard,
and worked to resolve issues involving SVG use.
</td>
<td>
Paul Langille (Corel)
<!-- Info from Gary Edwards -->
</td></tr>

<!-- Found this, but uncertain it really was done as proposed... often
hard to track through changes:
<tr><td>
Change to "text-underline-style" that references
a style name at all times. Any number (such as used in CSS3) would be
discovered by looking at either: a default "style sheet", or within the
document itself.
Number format(s), and aspects relating to 'automatic font-size matching'
should be held specifically in the underline style description
specifically.
</td>
<td>
http://lists.oasis-open.org/archives/office/200308/msg00033.html
"Paul Langille" Paul.Langille@corel.com
27 August 2003
</td></tr>
-->

<tr><td>
Set of requirements for business charts.
</td>
<td>
Paul Langille (Corel)
<!-- http://lists.oasis-open.org/archives/office/200308/msg00009.html -->
</td></tr>

<tr><td>
Embedded support for a subset of the XForms standard was added.
XForms add the capabilities typically desired for custom schemas,
which were requested by Europe,
but without the horrific interoperability problems that uncontrolled
custom schemas can cause.
Gary Edwards reports, &#8220;It turns out that XForms is an elegant
solution to the &#8216;custom defined schema&#8217; problem,
able to address both the &#8220;collaborate with yourself&#8221; ... model, and,
the infinitely more important shared business process schema model.
The binding model in XForms is extraordinary...
we were quite unaware of this potential [at first]...
[but once we began to understand it] oh what a treasure we found.&#8221;
In particular, its approach manages to be portable among many different
systems, and not tied to any one.
XForms is also a standard in its own right,
which is a good thing; it&#8217;s generally
a very good sign if a standard tries to reuse existing standards instead of
recreating its own incompatible components.
</td><td>
European Commission requested support for &#8220;custom schemas&#8221;;
Daniel Vogelheim (Sun) recommended adding XForms.
<!-- Daniel Carrera -->
<!-- http://lists.oasis-open.org/archives/office/200408/msg00031.html -->
</td></tr>

<tr><td>
Attribute
<a href="http://lists.oasis-open.org/archives/office/200408/msg00018.html">
fo:margin was added</a>; this improved margin handling.
</td><td>
David Faure (KDE)
<!-- Info from J. David Eisenberg http://catcode.com/ -->
</td></tr>
<tr><td>
<a href="http://lists.oasis-open.org/archives/office/200503/msg00010.html">
Table anchoring was implemented</a>, which was
&#8220;A small change
in the spec, but surely a much bigger change in layouting algorithms :/&#8221;.
In other words, the specification text didn&#8217;t change much, but
implementors had to do a lot of work to implement this change...
yet it was accepted anyway, because they wanted the best
possible specification.
</td><td>
David Faure (KDE)
<!-- J. David Eisenberg http://catcode.com/ -->
</td></tr>

<tr><td>
<a href="http://lists.oasis-open.org/archives/office/200409/msg00006.html">
Numbered paragraphs/headings without number</a>
and the text:numbered-paragraph element (an alternative to &lt;text:list&gt;)
added more flexibility, for example,
numbered-paragraph is better suited for independently numbered paragraphs.
</td><td>
David Faure (KDE)
<!-- J. David Eisenberg http://catcode.com/ -->
<!-- the numbered-paragraph element from Faure -->
</td></tr>


<tr><td>
Table templates were added; this makes it easier to control
and modify the appearance of tables.
</td><td>
David Faure (KDE)
<!-- Faure -->
</td></tr>

<tr><td>
A &#8220;sequence of page styles&#8221; and support for copy-frames
was added, a new wrapping mode was added for graphics, and a
desktop publishing mode was added (using the draw:page element).
All of this improved support for desktop-publishing-based layout.
</td><td>
David Faure (KDE)
<!-- Identified by Daniel Vogelheim and David Faure-->
</td></tr>

<tr><td>
Hyphenation became a boolean character property, for more control
over hyphenation.
</td><td>
David Faure (KDE)
<!-- Faure -->
</td></tr>

<tr><td>
Diagonal lines in table cells were added, providing another helpful option.
</td><td>
David Faure (KDE)
<!-- Faure -->
</td></tr>

<tr><td>
Added a line style for the footnote separator.
</td><td>
David Faure (KDE)
<!-- Faure -->
</td></tr>

<tr><td>
Added a number:denominator for fractions with a fixed denominator.
</td><td>
David Faure (KDE)
<!-- Faure -->
<!-- http://lists.oasis-open.org/archives/office/200411/msg00132.html -->
</td></tr>


<tr><td>
Added a new date formatting option
(number: month number: possessive-form=&#8221;true&#8221;),
</td><td>
David Faure (KDE)
<!-- Faure -->
<!-- http://lists.oasis-open.org/archives/office/200411/msg00136.html -->
</td></tr>


<tr><td>
Added draw:regular-polygon, improving the shape-drawing capabilities.
</td><td>
David Faure (KDE)
<!-- Faure -->
</td></tr>


<tr><td>
Added more document statistics (sentence-count and syllable-count).
</td><td>
David Faure (KDE)
<!-- Faure -->
<!-- http://lists.oasis-open.org/archives/office/200411/msg00113.html -->
</td></tr>

<tr><td>
The original specification&#8217;s ordered-list and unordered-lists were
replaced by a single list element, with ordered/unordered information
conveyed entirely through styles. This made the specification simpler,
and also made it easier to switch a list from one form to another.
</td><td>
-
<!-- Identified by Daniel Vogelheim AND David Faure -->
</td></tr>

<tr><td>
A per-paragraph list wrapper element
</td><td>
Phil Boutros (Stellent)
<!-- Identified by Daniel Vogelheim -->
</td></tr>

<tr><td>
Support for the SMIL standard was added as well, even though Sun and
OpenOffice.org&#8217;s implementations didn&#8217;t support it.
These aren&#8217;t the sort of things you add if you just wanted a rubber stamp.
</td><td>
-
<!-- Daniel Carrera -->
</td></tr>

<tr><td>
OpenDocument changed the older OpenOffice.org format in how style:properties
were handled.
Originally there was a single properties element,
which contained a mix of all style properties.
OpenDocument has properties per style family (paragraph-properties, etc.),
which allows for a cleaner separation of properties and better handles
dependencies within style families
</td><td>
Proposed by Phil Boutros (Stellent)
<!-- Identified by Daniel Vogelheim -->
</td></tr>


<tr><td>
A style:display-name attribute was added and a rule that
style names had to be XML tokens was added.
</td><td>
Supporters included
Phil Boutros (Stellent) and Paul Grosso (ArborText).
<!-- Identified by Daniel Vogelheim -->
</td></tr>

<tr><td>
The structure of documents was changed
so that the type of document (word processing, spreadsheet, etc.) could
be trivially determined without looking at the filename ending.
This wasn&#8217;t in the original base document, and required a structural
change, but it was added.
<!--
Phil wanted a way to quickly
recognize which type of application a document represents. (In the OOo
format, at least in theory the format for all applications are
identical, so you cannot tell without looking at the file ending
whether something is a word processor or a spreadsheet file.) Thus,
ODF introduces a child under <office:body> to clearly distinguish the
application types.
-->
</td><td>
Phil (Stellent) recommended this.
<!-- Identified by Daniel Vogelheim -->
</td></tr>

<tr><td>
The original format had only footnotes and endnotes; this was
generalized to notes with a general note-class value, which
makes it much easier to support additional type of notes.
</td><td>
-
<!-- Identified by Daniel Vogelheim -->
</td></tr>


<tr><td>
The original format had several different frame-like elements
(e.g. images or text-boxes) that shared certain attributes.
This was generalized to support a single
draw:frame element which would then contain the actual frame content
(textbox, image, etc.) plus an optional replacement image.
This eliminated unnecessary complexity (by eliminating duplication)
and would make it much simpler to implement consistent
user interfaces.
</td><td>
-
<!-- Identified by Daniel Vogelheim and David Faure -->
</td></tr>


<tr><td>
Frames were changed so that they could
list a sequence of different format options
(e.g., a vector drawing and a bitmapped drawing)
so the viewer/processor can choose the &#8216;best&#8217; format that it can support.
</td><td>
-
<!-- Identified by Daniel Vogelheim -->
</td></tr>


<tr><td>
OpenDocument formulas now use a
&#8220;namespace prefix&#8221; to identify the formula language used.
This makes it much less likely that the wrong meaning would be
applied to a given formula.
</td><td>
-
<!-- Identified by Daniel Vogelheim -->
</td></tr>

<tr><td>
Lots of other small changes.
The style:default-outline-level attribute for heading styles was added,
making it easier for users to use templates.
The original style:properties was refined into
style:paragraph-properties, style:text-properties, and so on.
Also, page-master was renamed to page-layout for clarity
(and to avoid mixing with master-page).
</td><td>
-
(David Faure thinks that he commented that the
name page-master was confusing, and that Michael Brauer (Sun) then
offered to rename it.)
<!-- Identified by David Faure -->
</td></tr>
</table>

<!--
Faure contributions:
* (after 1.0) border around a word or any run of text
* (after 1.0) style:join-border (default: true, but a way to set it to false to avoid the joining).
-->
<p>
I am sure that there are many other changes not listed above,
but I think I have enough listed here to make the point: this
specification was a work of many, not a specification controlled
by any one vendor.

<p>
Various other changes were made to the document to improve it
as a document, too.
A big change was that the schema definition language changed to
RELAX-NG, a standard specification language
which is more powerful than the older DTD language yet is
very easy to understand.
One advantage of this additional power is that automated validation tests of
OpenDocument files using the specification can be
<i>much</i> more rigorous.
It&#8217;s also more likely to result in interoperability; RELAX-NG can be
much more specific about the permitted values in constructs,
eliminating many potential misunderstandings by implementors.

<p>
Clearly, there were many changes made after the initial submission
of the base document, due to interaction of all the members.
The first draft of the original specification was about 108 pages and
its schema was 69K.
The final version is about 723 pages and its schema is 529K.
This growth to a full standard happened through careful review by a large
number of experts from different backgrounds.

<!-- Durusau:
I would note that the first draft of the spec was approx. 108 pages so yes, I would say some changes were made after the submission. And the schema was 69K (earliest version) and it is now OpenDocument-schema-v1.0-os.rng <http://www.oasis-open.org/committees/download.php/12571/OpenDocument-schema-v1.0-os.rng>, 529K.
-->

<p>
A risk of making many changes to a specification is that the result
may be too hard to implement.
The OpenDocument process avoided this problem by having implementors actually
implement the changes as they went, and in particular
used multiple open source reference implementations as proving grounds.
One participant commented,
"it was clear that the proprietary [vendors] had gone into
the source code or at the least downloaded [OpenOffice.org],
and were studying the implementation and methods.
... Explanations, rationale, and techniques were exchanged in ways
that would be impossible if not for a common reference application
and code base everyone had access to."


<h1>Another Tack: Look at the Participants</h1>

I stated above that the most important measure was to see if there
were changes made from many different sources, and I think I&#8217;ve
proven that very conclusively.
But for some additional evidence, let&#8217;s look at the participants themselves --
do we see the multiple implementors and diversity of views that
we&#8217;d expect to see from a standard not dominated by any one organization?

<p>
Once again, I think the answer is &#8220;yes&#8221;.
The OASIS website gives lots of details;
<a href="http://en.wikipedia.org/wiki/Standardization_of_OpenDocument">Wikipedia
summarizes the people involved in creating the OpenDocument standard</a>.

<p>
First, a quick background.
Version 1.0 of the OpenDocument specification was
developed after lengthy development and discussion by multiple
organizations.
The first official OASIS meeting to discuss the standard
was 2002-12-16; OASIS approved OpenDocument as an OASIS standard
on 2005-05-01.  This is about two and a half years of hard work;
it&#8217;s not easy to create a good specification.

<p>
The standardization process included the developers of many
office suites or related document systems, including (in alphabetical order):
<ul>
<li>Adobe (Framemaker, Distiller)
<li>Arbortext (Arbortext Enterprise Publishing System)
<li>Corel (WordPerfect)
<li>IBM (Lotus 1-2-3, Workplace)
<li>KDE (KOffice)
<li>SpeedLegal (SmartPrecedent enterprise document assembly system); both product and company later changed names to Exari.
<li>Sun Microsystems / OpenOffice.org (StarOffice/OpenOffice.org)
</ul>

<p>
That&#8217;s a lot of implementors, some of whom are direct competitors,
and they represent a very broad range of concerns.
That&#8217;s a very good sign, when competing implementors work together on
a standard.

<p>
Another good sign is that there were users with specific issues
who were involved:
<ul>
<li>Boeing (complex large documents)
<li>CSW Informatics
<li>Drake Certivo
<li>Intel (complex large documents; they are developing sample documents as a test suite)
<li>National Archives of Australia (retrieve documents long after development)
<li>New York State Office of the Attorney General (complex large documents retrieved long after development)
<li>Novell
<li>Society of Biblical Literature (large multilingual documents, long-term retrieval)
<li>Sony
<li>Stellent
</ul>

<p>
My personal favorite is the &#8220;Society of Biblical Literature&#8221;,
because they&#8217;re so unexpected --
I would never have thought to invite them!
Yet this group worries about dealing with
large multilingual documents in any living language as well as many
long-dead ones, and they worry about long-term retrieval
issues in terms of millenia.
The National Archives of Australia was represented, too.
If their needs are met for
internationalization and long-term retrieval, then
my needs will be met too.

<p>
Another way to show that they really had diversity is to see the
different goals of different groups all getting met.
Michael Brauer, chair, insists that the only objective of the
group was to support &#8220;Desktop Office Suite work&#8221;.
Others, such as Gary Edwards, believe OpenDocument really covers
three areas:
<ul>
<li>Desktop Productivity Environment:  desktop file format
<li>Service-oriented architecture (SOA):  universal transformation layer bridging desktops into SOA XML information flows
<li>Open Internet:  ODF as the successor to HTML/XHTML language
</ul>

<p>
Gary Edwards has claimed that Boeing was actually primarily interested
in the second area (SOAs), for example.
Interestingly enough, there&#8217;s no need to declare which set of
goals is &#8220;right&#8221;.
Different organizations joined the group because they had different
goals, unsurprisingly, yet in the end all believed their (different)
goals had been achieved.  That is <i>very</i> good news!
A standard that can meet the different goals of different organizations
tends to be a good standard as long as it&#8217;s implementable... and since
it&#8217;s been implemented, there&#8217;s no question there.

<p>
Also, the fact that Boeing wanted the specification to be so
good that it could be a &#8220;universal transformation layer&#8221;
is excellent
evidence of OpenDocument&#8217;s capabilities.
To fulfill this role, OpenDocument has to be so expressive that it&#8217;s able
to capture the information from <i>many</i> different document formats,
not just Microsoft Office or any other single format.
The result is a more general and flexible standard.

<p>
Although it's not part of the definition of
"open standard" I can't help but be impressed by the expertise of
many of the participants.
Tom Magliery (Corel/XMetal) was on the original W3C XML 1.0 working group
(as well as the original NCSA Mosaic browser team).
Phil Boutros (Stellant) is an expert on Microsoft's file formats.
Paul Grosso (founder, ArborText) was chairman of the XSL:FO effort.
Doug Alberg (Boeing) well-understood the needs for enterprise publication
and content management software systems.
Patrick Durusau is a well-known SGML expert.
And so on.
<!-- Gary Edwards, Feb 6, 2006 4:12AM -->
This is why it's a good idea to create standards through an
open process -- by
gathering the experts together, in a way that lets them truly
fix problems they find, a group of experts can develop a very good result.

<h1>Conclusions</h1>

Without doubt, OpenDocument is an open standard.
It meets every requirement of a rigorous (merged) definition of
&#8220;open standard,&#8221; with <i>lots</i> of evidence.
In particular, there is <i>significant</i> evidence that it was not
controlled by any single vendor.
<p>
And that&#8217;s a good thing.
When I send a pure text file, nobody asks
&#8220;did you create that using WordPad, vim, or emacs?&#8221;
When I send a bitmapped PNG file, nobody asks
&#8220;did you create that using the GIMP or Paint Shop Pro?&#8221;
Why? Because it doesn&#8217;t matter.
Data formats that are fully open standards can be
implemented and understood by all. By using them, I&#8217;m free
to use whatever tool I want.
<p>
Governments have started to realize how important open standards are:
<ol>
<li>EU Commissioner Erkki Liikanen said, &#8220;Open standards are important to
help create interoperable and affordable solutions for everybody. They
also promote competition by setting up a technical playing field that is
level to all market players. This means lower costs for enterprises and,
ultimately, the consumer.&#8221;
<li><a href="http://europa.eu.int/idabc/en/document/2592/5588">
Europe&#8217;s Telematics between Administrations Committee (TAC)</a> said:
&#8220;Because of its specific role in society, the public sector must
avoid that a specific product is forced on anyone interacting with it
electronically. Conversely, any document format that does not discriminate
against market actors and that can be implemented across platforms should
be encouraged. Likewise, the public sector should avoid any format that
does not safeguard equal opportunities to market actors to implement
format-processing applications, especially where this might impose
product selection on the side of citizens or businesses. In this respect
standardization initiatives will ensure not only a fair and competitive
market but will also help safeguard the interoperability of implementing
solutions whilst preserving competition and innovation.&#8221;
</ol>
<p>
In short, open standards create freedom from control by another.
That&#8217;s a freedom all users want to experience.

<p>
<font size="-2">My thanks to the many people who helped me find the
information in this paper, including
Daniel Carrera,
Patrick Durusau,
Gary Edwards,
J. David Eisenberg,
David Faure,
and
Daniel Vogelheim.
</font>

<p>
<font size="-2">
This article released under the
<a href="http://creativecommons.org/licenses/by-nc/2.0/">
Creative Commons "Attribution-NonCommercial 2.0" license.</a>
You can find this article on
<a href="http://www.groklaw.net/">Groklaw</a>;
<a href="http://www.dwheeler.com/essays/opendocument-open.html">
this article is also available on David A. Wheeler's web site</a>.
</font>

<!--
Sources:
many private emails.
List of reused standards from Michael Brauer's "History of ODF", aka
 "FROM OPEN SOURCE TO OPEN STANDARD: THE OASIS OPENDOCUMENT FORMAT"
 http://www.idealliance.org/proceedings/xtech05/slides/brauer/xtech2005-opendocument.pdf 
Some info from OASIS FAQ:
 http://www.oasis-open.org/committees/office/faq.php
-->

</body>
</html>

