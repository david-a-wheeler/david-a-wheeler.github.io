x
;                 => x
substring("Hello" 3 4)
;                 => (substring "Hello" 3 4)
define(x 5)
;                => (define x 5)
(3 + 4)
;                 => (+ 3 4)
(pi)
;                 => (pi)
pi()
;                 => (pi)
 (pi)
;                 => (pi)
 pi()
;                 => (pi)
 z
  a
  b c
  (d)
  e
  f
    g
;                  => (z a (b c) (d) e (f g))
 z '()
;                  => (z '())  => (z (quote ()))
 z ()
;                  => (z ())
(f 1 2 3)
;                 => (f 1 2 3)
(3 + 4)
;                 => (+ 3 4)
(3 ++ 4)
;                 => (++ 3 4)
define as(++) 5
;                 => (define ++ 5)
(3 as(+) 4)
;                 => (3 + 4)
'(3 + 4)
;                 => (quote (+ 3 4))
' (3 + 4)
;                 => (quote (+ 3 4))
' (3 as(+) 4)
;                 => (quote (3 + 4))
 x '.
;                 => (x (quote .))
(2 + (3 * (10 / (3 - 1))))
;                 => (+ 2 (* 3 (/ 10 (- 3 1))))
 defun factorial (n)
   if (n <= 1)
       1
       n * factorial(n - 1)
;       =>  (defun factorial (n) (if (<= n 1) 1 (* n (factorial (- n 1)))))
 define (factorial n)
   if (n <= 1)
       1
       n * factorial(n - 1)
;        => (define (factorial n) (if (<= n 1) 1 (* n (factorial (- n 1)))))
 (define (factorial n)
     (if (<= n 1)
         1
         (* n (factorial (- n 1)))))
;        => (define (factorial n) (if (<= n 1) 1 (* n (factorial (- n 1)))))
 do
   group
     x 1 (x + 1)
     y 1 (y * 2)
   group
     x > 5
     y
   print y
;                 => (do ((x 1 (+ x 1)) (y 1 (* y 2))) ((> x 5) y) (print y))
(do ((x 1 (+ x 1))
       (y 1 (* y 2)))
      ((> x 5) y)
    (print y))
;                 => (do ((x 1 (+ x 1)) (y 1 (* y 2))) ((> x 5) y) (print y))
f()
;                 => (f)
f(a)
;                 => (f a)
f(a b)
;                 => (f a b)
f(a b c)
;                 => (f a b c)
f(a b c d)
;                 => (f a b c d)
f(3 + 4)
;                 => (f (+ 3 4))
(3 + 4 + 5)
;                 => (+ 3 4 5)
 define sum3(a b c)
   a + b + c
; => (define (sum3 a b c) (+ a b c))
sum3(1 2 3)
; => (sum3 1 2 3)
sum3((1 + 2) 2 3)
; => (sum3 (+ 1 2) 2 3)
sum3((* 2 2) 1 2)
; => (sum3 (* 2 2) 1 2)
*(2 3)
; => (* 2 3)
-(2)
; => (- 2)
f((2 + (3 * 5)) + (5 * 7))
; =>  (f (+ (+ 2 (* 3 5)) (* 5 7)))
f(2 + 5 + 7)
; => (f (+ 2 5 7))
 define move-n-turn(angle)
   tortoise-move(100)
   tortoise-turn(angle)
; (define (move-n-turn angle) (tortoise-move 100) (tortoise-turn angle))
 define polygon(n)
   do
     group
       i n (i - 1)
     group
       zero?(i)
     move-n-turn(360 / n)
; => (define (polygon n) (do ((i n (- i 1))) ((zero? i)) (move-n-turn (/ 360 n))))
define(&& and)
; => (define && and)
define(++ *)
; => (define ++ *)
define(++ * +)
; => (define ++ * +)
a
 b
  c
; => (a (b c))
a
 b ; I'm a comment
   c
; => (a (b c))
