
; Here are a few examples of Sweet-expressions; you can run them through
; sweet-filter < examples
; These are all in Scheme, so you can send them to Scheme after processing.
; Sweet-expressions are NOT limited to Scheme - see the documentation.


define fibfast(n)  ; Typical function notation
  if {n < 2}       ; Indentation, infix {...}
    n              ; Single expr = no new list
    fibup(n 2 1 0) ; Simple function calls

define fibup(max count n-1 n-2)
  if {max = count}
    {n-1 + n-2}
    fibup(max {count + 1} {n-1 + n-2} n-1)

define factorial(n)
  if {n <= 1}
    1
    {n * factorial{n - 1}} ; f{...} => f({...})

define add-if-all-numbers(lst)
 call/cc
  lambda (exit)
    let loop ((lst lst) (sum 0))
      if null?(lst)
        sum
        if not(number?(car(lst)))
          exit(#f)
          {car(lst) + loop(cdr(lst))}


define mat-mat-mul
   lambda [m1 m2]
      let*
        group
          nr1 matrix-rows(m1)
          nr2 matrix-rows(m2)
          nc2 matrix-columns(m2)
          r   make-matrix(nr1 nc2)
        if not{matrix-columns(m1) = nr2} ; f{infix} = f({infix}).
          match-error(m1 m2)
        do
          group
            i 0 {i + 1}
          group
            {i = nr1} r
          do
            group
              j 0 {j + 1}
            group
              {j = nc2}
            do
             group
               k 0 {k + 1}
               a 0 {a + {matrix-ref(m1 i k) * matrix-ref(m2 k j)}}
             group
               {k = nr2}
               matrix-set!(r i j a)


