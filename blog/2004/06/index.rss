<?xml version="1.0"?>
<!-- name="generator" content="blosxom/2.0" -->

<rss version="2.0">
  <channel>
    <title>David A. Wheeler's Blog   </title>
    <link>http://www.dwheeler.com/blog</link>
    <description>David A. Wheeler's weblog.</description>
    <language>en</language>

  <item>
    <title>Apple should release Apple ][ code</title>
    <link>http://www.dwheeler.com/blog/2004/06/16#appleii-pd</link>
    <pubDate>Wed, 16 Jun 2004 13:15 GMT</pubDate>
    <!-- date: 2004-06-16 -->
    <description>
I&amp;#8217;d like to convince you, gentle reader, to add your voice to mine, and
ask Apple Computer to release the code for the Apple ][ line.
&lt;p&gt;
Many years ago, the Apple ][ line was one of the most popular
computer lines, but it&amp;#8217;s now completely obsolete.
You can see &lt;a href=&quot;http://www.apple-history.nl&quot;&gt;Apple history&lt;/a&gt;
for more information,
The Apple ][ (also spelled Apple II, later Apple //, and sometimes Apple 2)
was an 8-bit computer
first built in 1977, and ran at 1MHz with 4K to 64K of memory.
The last of the Apple ][ line was the
&lt;a href=&quot;http://www.apple-history.nl/support_files/quickgallery.html?where=aIIgs.html&quot;&gt;Apple //gs&lt;/a&gt;,
announced in September 1986, and
discontinued in December of 1992.
It ran at 2.8 or 1 MHz (with upgrades up to 18MHz),
and could expand to up to 8 MB of RAM.
Compared to todays&amp;#8217; machines that run at 1000 MHz and much more,
and routinely come with 512MB and more of RAM,
these machines are completely obsolete.
&lt;p&gt;
Still, there are hobbyists and nostalgia buffs who&amp;#8217;d like to be able
to run these old machines (either directly or by emulation).
&lt;p&gt;
So I ask Apple, as a gesture of goodwill, to release the code
for the Apple ][ line, say to the public domain or under some sort of
open source software license, so that hobbyists can keep
these old systems running.
That includes the Apple ][, ][+, //e, //c, and //gs ROMs, the
disk ROMs, and the operating systems
(at least DOS 3.2, DOS 3.3, and ProDOS).
Apple may not be able to release the Applesoft BASIC stuff
(I believe Microsoft owns that copyright), but Apple can at least
release the rest of it, and we can ask Microsoft to release Applesoft BASIC
separately.
The original Apple ][ ROMs didn&amp;#8217;t include Applesoft BASIC, and yet for many
circumstances that ROM is enough to run many Apple ][ programs, so even
without Applesoft such a grant would be very helpful.
&lt;p&gt;
Apple, you aren&amp;#8217;t going to make money on these things.
But current copyright law doesn&amp;#8217;t acknowledge that
obsolete things should be automatically released to the public.
By releasing obsolete items that no longer have real
market value, you allow others to maintain and use these old systems
(through hardware or emulation) in future generations.
&lt;p&gt;
Others have released obsolete systems to the public.
The &lt;a href=&quot;http://www.cs.vu.nl/~ast/minix.html&quot;&gt;Minix operating system&lt;/a&gt;,
developed long after the Apple ][ line began, originally required a fee,
but it&amp;#8217;s since been released under a BSD license.
&lt;a href=&quot;http://www.cpm.z80.de/&quot;&gt;CP/M binaries and source code&lt;/a&gt;
have been released to the public at no charge, and that 8-bit
operating system comes from the same timeframe.
</description>
   </item>
  <item>
    <title>Flawfinder version 1.26 released!</title>
    <link>http://www.dwheeler.com/blog/2004/06/15#flawfinder-1.26</link>
    <pubDate>Tue, 15 Jun 2004 20:34 GMT</pubDate>
    <!-- date: 2004-06-15 -->
    <description>
I&amp;#8217;ve released yet another new version of
&lt;a href=&quot;http://www.dwheeler.com/flawfinder&quot;&gt;flawfinder&lt;/a&gt; - now
it&amp;#8217;s version 1.26.
Flawfinder is a simple program that examines C/C++ source code and
reports on likely security flaws in the program, ranked by risk level.
When I announced
&lt;a href=&quot;http://www.dwheeler.com/blog/2004/05/31#flawfinder-1.25&quot;&gt;
flawfinder version 1.25&lt;/a&gt;, people responded with a flurry of useful
improvements, so I thought I&amp;#8217;d incorporate those right away for all
to enjoy.
&lt;p&gt;
You can view the
&lt;a href=&quot;http://www.dwheeler.com/flawfinder/ChangeLog&quot;&gt;Flawfinder
ChangeLog&lt;/a&gt; for the details.
Here are some of the highlights:
&lt;ol&gt;
&lt;li&gt;
Added code to better support Microsoft&amp;#8217;s approach to internationalization,
based in large part on work by Jared Robinson (thanks!!).
This adds many more functions:
_getts(), vswprintf(), _stprintf(), _vstprintf(), vwprintf(),
vfwprintf(), _vtprintf(), _ftprintf(), _vftprintf(), _sntprintf(),
_vsntprintf(), _ftscanf(), and _gettc().
The macros _T() and _TEXT() are treated like gettext(), to eliminate
spurious warnings.
&lt;li&gt;
Added two new rules for GLib functions,
&amp;#8220;g_get_home_dir&amp;#8221; and &amp;#8220;g_get_tmp_dir&amp;#8221;, per a suggestion by
Steve Kemp.
This closes the wishlist item in
&lt;a href=&quot;http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=250432&quot;&gt;
Debian bug report #250432&lt;/a&gt;.
Contributors - please email wishlist items to me;
I can&amp;#8217;t monitor every distribution&amp;#8217;s local bug tracking system.
PLEASE tell upstream developers when there&amp;#8217;s a bug/wishlist
item, we can&amp;#8217;t fix it if we don&amp;#8217;t know.
&lt;li&gt;
I added rules, e.g., for curl_getenv()
(another getenv-like function),
as well as more rules for input functions:
recv, recvfrom, recvmsg, fread, and readv.
&lt;li&gt;
I tightened the false positive test slightly; if a name is
followed by = or - or + it&amp;#8217;s unlikely to be a function call,
so it&amp;#8217;ll be quietly discarded.
&lt;li&gt;
I modified the summary report format slightly, to make it nicer.
&lt;li&gt;
I modified the getpass text to remove an extraneous character,
thanks to a bug report from Joerg Beyer (thanks!).
&lt;li&gt;
I modified the installation instructions to clarify how to set
INSTALL_DIR at run-time so it installs elsewhere.
Flawfinder uses the standard GNU conventions, but not everyone
knows about them. By default, flawfinder installs in /usr/local.
Just use normal make overrides to change that, e.g.,
make INSTALL_DIR=/usr INSTALL_DIR_MAN=/usr/share/man install
I do NOT use the ?= macro-setting commands in the makefile,
because that&amp;#8217;s not standard (e.g., it&amp;#8217;s not in SUSv3), so
while that would work in GNU make, it wouldn&amp;#8217;t work in others.
I did this to answer some questions about installation - the flexibility
has always been there, but now it&amp;#8217;s documented in a clearer way.
&lt;/ol&gt;
&lt;p&gt;
&lt;b&gt;NOTE:&lt;/b&gt;
Due to an error on my part, the tar file
for version 1.25 on my website was for a short period
(between 2004-06-05 and 2004-06-15) actually a functional equivalent of
version 1.26 (without some stuff that only affects me),
incorrectly labelled as 1.25.
This wasn&amp;#8217;t true for the RPM packages (the 1.25s stayed as 1.25), so
suspicious people could look inside the RPM packages to see if the tar file
within was correct.
In some sense this wasn&amp;#8217;t a serious problem - tar users got the latest
version of flawfinder a little sooner than I intended.
But I really want version numbers to mean what they say, and I know others
do too; for those folks, my sincere apologies!!
Please upgrade to 1.26, since that way you&amp;#8217;ll be SURE to get the right version.
If you want to check, here are the md5sum&amp;#8217;s of various correct files:
&lt;pre&gt;
dcdd0a7a5b9dc8d0ffc85c1a5833bc43  flawfinder-1.25-1.noarch.rpm
744f0cc317c583de6d295860db3c7cbe  flawfinder-1.25-1.src.rpm
fa5b644e00aa4862de5b790f0e1a3ad7  flawfinder-1.25.tar.gz (the real 1.25)
530b11016c52d473ebb7bc9639d4338b  flawfinder-1.26-1.noarch.rpm
cbc61513620bc7b17bcc29f8eb50fb9f  flawfinder-1.26-1.src.rpm
242a90ecf2f21a709a2425c8771ef38e  flawfinder-1.26.tar.gz
&lt;/pre&gt;

Here&amp;#8217;s the md5sum of the file that was briefly labelled as
flawfinder-1.25.tar.gz, but was actually a functional equivalent of 1.26:
&lt;pre&gt;
e1fa5fcb540b91d27c3ae427595a182e  flawfinder-1.25.tar.gz-actually1.26
&lt;/pre&gt;

&lt;p&gt;
Just go to the 
&lt;a href=&quot;http://www.dwheeler.com/flawfinder&quot;&gt;flawfinder home page&lt;/a&gt;
to get the latest version.
</description>
   </item>
  <item>
    <title>Democracy Requires Verified Voting</title>
    <link>http://www.dwheeler.com/blog/2004/06/14#verifiedvoting</link>
    <pubDate>Mon, 14 Jun 2004 10:37 GMT</pubDate>
    <!-- date: 2004-06-14 -->
    <description>
I&amp;#8217;m a strong advocate of democracy, but democracy
only works if a small group of people can&amp;#8217;t
rig the outcome.
Sadly, that&amp;#8217;s no longer true;
many counties have unwisely begun installing
computerized voting systems that cannot be verified,
and in fact are &lt;i&gt;untrustworthy&lt;/i&gt;.
&lt;p&gt;
That means a &lt;i&gt;single person&lt;/i&gt; could determine who wins or
loses a given election, by simply modifying the reports
from unverifiable computers.
By adding just a few lines of code to a voting program, or breaking
into one (experts have generally reported them to be easy to break into),
you could make an unverifiable voting system say whatever you wanted it to say.
That&amp;#8217;s nonsense.
&lt;p&gt;
The paperless electronic voting systems have already demonstrated
that they can never be trusted;
&lt;a href=&quot;http://edition.cnn.com/2004/TECH/06/11/league.electronicvoti.ap/&quot;&gt;
here are a few examples from CNN&lt;/a&gt;:
&lt;ol&gt;
&lt;li&gt;
&amp;#8220;In a January special election for a Florida state house seat, 134 people using
paperless voting terminals in Broward County failed to cast votes for any
candidate. The race was decided by a margin of 12 votes. It&amp;#8217;s unclear why some
voters didn&amp;#8217;t select candidates; and without a paper trail, poll workers
couldn&amp;#8217;t figure out voters&amp;#8217; intentions.
&lt;li&gt;
In North Carolina&amp;#8217;s 2002 general election, a software bug deleted 436
electronic ballots from six paperless machines in two counties. Election
Systems &amp; Software Inc., which built the terminals, determined that the
machines erroneously thought their memories were full and stopped counting
votes, even though voters kept casting ballots.
&lt;li&gt;
Earlier this year, California Secretary of State Kevin Shelley banned the use
of a paperless system made by Diebold Inc. after he found uncertified software
and other problems that &amp;#8220;jeopardized&amp;#8221; the outcome of elections in several
counties. At least 20 states have introduced legislation requiring a paper
record of every vote cast.&amp;#8221;
&lt;/ol&gt;
&lt;p&gt;
As noted in the article
&lt;a href=&quot;http://www.nytimes.com/2004/06/13/opinion/13SUN1.html&quot;&gt;
Gambling on Voting&lt;/a&gt; (NY Times, June 13, 2004),
gambling equipment is &lt;i&gt;far&lt;/i&gt; more trustworthy than voting machines.
For example, the state has access to all gambling software
(electronic voting machine makers say their software is a trade secret),
and the machines are spot-checked to make sure that the software running
is what&amp;#8217;s registered.


&lt;p&gt;
What&amp;#8217;s needed, as a bare minimum, is
&lt;a href=&quot;http://www.verifiedvoting.org&quot;&gt;verified voting&lt;/a&gt;.
The VerifiedVoting.org folks wisely advocate
the use of voter-verified paper ballots (VVPBs)
for all elections in the United States, so voters
can inspect individual permanent records of their ballots before they
are cast and so meaningful recounts may be conducted.
They also insist that electronic voting equipment and software
be open to public scrutiny and that random, surprise recounts be
conducted on a regular basis to audit election equipment.
Without these simple safeguards, we&amp;#8217;ll all be forced to say that
&lt;a href=&quot;http://www.truemajority.org/voting.cfm&quot;&gt;the computer ate my vote&lt;/a&gt;.
&lt;p&gt;
I urge anyone in a democratic country to ensure that these
minimal requirements of verified voting (by paper ballot) are met.
</description>
   </item>
  <item>
    <title>UPDATE: Why OSS/FS? Look at the Numbers!</title>
    <link>http://www.dwheeler.com/blog/2004/06/08#oss-why-20040608</link>
    <pubDate>Tue, 08 Jun 2004 19:04 GMT</pubDate>
    <!-- date: 2004-06-08 -->
    <description>
After about half a year, I&amp;#8217;ve now made a big new release
of my paper
&lt;a href=&quot;http://www.dwheeler.com/oss_fs_why.html&quot;&gt;Why
Open Source Software / Free Software (OSS/FS)? Look at the Numbers!&lt;/a&gt;
This large paper lists various statistics I&amp;#8217;ve found justifying
why anyone should consider OSS/FS.
&lt;p&gt;
In theory, this shouldn&amp;#8217;t be as needed, because much of the IT
industry has figured that out already.
Look at IBM&amp;#8217;s Linux ads,
the continuing dominance of Apache and bind in their markets,
the take-up by many organizations of Mozilla and Open Office, and so on.
&lt;p&gt;
Yet I still encounter far too many software users who never
consider their alternatives (even if the alternatives might be much better),
and organizations that still
create acquisition processes that unnecessarily exclude OSS/FS.
These decisions aren&amp;#8217;t good for the users and organizations;
without considering their options,
they&amp;#8217;re unlikely to always make the best choices.
But worse still,
Adam Smith&amp;#8217;s invisible hand cannot work without competition.
If too many users fail to consider their alternatives, they can
encourage vendors and projects to stop working to get better
(since the users won&amp;#8217;t change anyway).
&lt;p&gt;
There&amp;#8217;s a certain large software vendor who has paid for a
number of reports to &amp;#8220;prove&amp;#8221; that their proprietary stuff is better, with
an implication that their proprietary products are always better.
As I
&lt;a href=&quot;http://software.newsforge.com/software/04/04/02/179211.shtml&quot;&gt;
mentioned in my interview with NewsForge&lt;/a&gt;,
you should consider suspect any study of a vendor that&amp;#8217;s funded by that vendor.
Organizations self-fund public studies to give them good press,
not necessarily to give customers a full understanding.
I&amp;#8217;m actually not out to get the vendor, but it does bug me when people
use vendor-funded studies as though they were really independent research.
Yet if you don&amp;#8217;t know about alternative analyses, it&amp;#8217;s hard to
respond to the vendor-funded analyses.
My paper is a useful antidote.
&lt;p&gt;
So&amp;#8230;
what&amp;#8217;s in the updated paper? A lot of little improvements and new references
to studies.
In market share, I&amp;#8217;ve updated the Netcraft and Security Space surveys
of web servers (Apache still dominates),
and added a new DNS survey showing (in yet another way)
OSS/FS&amp;#8217;s massive dominance in that market.
In security, I noted that SuSE and Red Hat have
received Common Criteria evaluations, and noted some of the serious security
problems that seem unique to proprietary operating systems
(91% of broadband users have spyware; 80% of spam is now sent from
infected Windows machines).
For reliability, I&amp;#8217;ve added the May 2004 Netcraft survey of reliable
servers (80% of the top ten most reliable hosting providers are OSS/FS based),
and an IBM study showing that Linux is quite reliable under continuous
high stress for 30 and 60 days.
For scaleability, I added a reference to &amp;#8220;Thunder&amp;#8221;, the fastest computer
in North America (it runs on Linux).
I added a lot of text noting that OSS/FS isn&amp;#8217;t just pirated source code
(a new claim being heard occasionally, though so far only from people
who appear to be paid to say it).
I added much more text about SCO and ADTI, including some of Tanenbaum&amp;#8217;s
statements and a Minux/Linux code study refuting ADTI&amp;#8217;s claims.
In the discussion about forking, I noted the XFree86 vs. X.org fork
to show that forking can be about licensing, not just about project speed.
Various typos fixed, too; my thanks to the many who sent suggestions.
&lt;p&gt;
Overall, this should be an even better starting point for those of you
who need specific quantitative data on OSS/FS, and don&amp;#8217;t know where to start.
It won&amp;#8217;t prove OSS/FS is always better &amp;#8212; I use proprietary software myself &amp;#8212;
but shows that OSS/FS needs to be considered.
</description>
   </item>
  </channel>
</rss>