<?xml version="1.0"?>
<!-- name="generator" content="blosxom/2.0" -->

<rss version="2.0">
  <channel>
    <title>David A. Wheeler's Blog   </title>
    <link>http://www.dwheeler.com/blog</link>
    <description>David A. Wheeler's weblog.</description>
    <language>en</language>

  <item>
    <title>New Security Article on Race Conditions</title>
    <link>http://www.dwheeler.com/blog/2004/10/08#race-conditions</link>
    <pubDate>Fri, 08 Oct 2004 01:07 GMT</pubDate>
    <!-- date: 2004-10-08 -->
    <description>
Well, I&amp;#8217;m happy to announce that another one
of my developerworks article on secure development is
now out for the public.
Go take a look at
&lt;a href=&quot;http://www-128.ibm.com/developerworks/library-combined/l-sprace.html&quot;&gt;
Secure programmer: Preventing Race Conditions&lt;/a&gt;.
&lt;p&gt;
This was a trickier article to write, because race conditions are
harder to describe in a simple way.
No matter what, they always involve subtle timing interactions, and
that makes them hard to describe.
Even the conventional definitions are too complicated and don&amp;#8217;t really
help explain the issue.
So, I ended up writing my own definition:
A &amp;#8220;race condition&amp;#8221; occurs when a program doesn&amp;#8217;t work as it&amp;#8217;s supposed to
because of an unexpected ordering of events that produces contention over the
same resource. Notice that a race condition doesn&amp;#8217;t need to involve contention
between two parts of the same program; many security problems occur if an
outside attacker can interfere with a program in unexpected ways. 
&lt;p&gt;
And from there, it shows some of those big surprises.
A whole bunch of race conditions have been found over the last few
months, so this is certainly still a serious problem.
</description>
   </item>
  <item>
    <title>End of September 2004 release of &amp;#8220;Why OSS/FS? Look at the Numbers!&amp;#8221;</title>
    <link>http://www.dwheeler.com/blog/2004/10/08#oss-why-20040930</link>
    <pubDate>Fri, 08 Oct 2004 01:05 GMT</pubDate>
    <!-- date: 2004-10-08 -->
    <description>
I&amp;#8217;ve made another release of my paper
&lt;a href=&quot;http://www.dwheeler.com/oss_fs_why.html&quot;&gt;&amp;#8220;Why Open Source Software /
Free Software (OSS/FS)? Look at the Numbers!&amp;#8221;&lt;/a&gt;
Here are some highlights:
&lt;ol&gt;
&lt;li&gt;
Possibly most important long-term, I added a lot of
&lt;a href=&quot;http://www.dwheeler.com/oss_fs_why.html#definitions&quot;&gt;material
to appendix A to help people identify what is really OSS/FS&lt;/a&gt;.
In particular, I added information about Debian&amp;#8217;s tests, which are
thought experiments they use to examine licenses.
These are the &amp;#8220;desert island&amp;#8221;, &amp;#8220;dissident&amp;#8221;, and &amp;#8220;tentacles of evil&amp;#8221; tests.
I added this information after reading
&lt;a href=&quot;http://www.imc.org/ietf-mxcomp/mail-archive/msg03514.html&quot;&gt;
Mark Shewmaker&amp;#8217;s August 2004 examination of the
Microsoft Royalty Free Sender ID Patent License&lt;/a&gt;.
That analysis proved to me that a non-lawyer can carefully
analyze and rationally argue about licensing and legal issues,
especially when they&amp;#8217;re given tools like these thought experiments
to help them.
&lt;li&gt;
I added a reference to the article
&amp;#8220;Open Source Software Development Should Strive for Even Greater
Code Maintainability&amp;#8221; by
Ioannis Samoladas, Ioannis Stamelos, Lefteris Angelis,
and Apostolos Oikonomou.
It&amp;#8217;s published by the
highly-respected &amp;#8220;Communications of the ACM&amp;#8221; (CACM) in
October 2004 (pp. 83-87).
They studied almost 6 million lines of code, tracking several programs
over time, using the maintainability index
(chosen by the Software Engineering Institute as the most suitable tool
for measuring the maintainability of systems).
Using their measurements,
they concluded that
OSS/FS &amp;#8220;code quality appears to be at least equal and sometimes better
than the quality of [closed source software] code implementing
the same functionality.&amp;#8221;
They conjectured that this
&amp;#8220;may be due to the motivation of skilled OSS programmers&amp;#8230;&amp;#8221;

&lt;li&gt;
Added more information about security evaluations performed
or being performed for OSS/FS, esp. Common Criteria and FIPS 140,
in the security section.  Novell SuSE, Red Hat, MandrakeSoft,
Trusted Computer Solutions&amp;#8217; Secure Linux, and OpenSSL
(2 different projects!).
These are really important to some organizations.
Although there&amp;#8217;s a lot of information about this,
there doesn&amp;#8217;t seem to be any one place with it pulled together.
Well, now there is.
&lt;a href=&quot;http://www.dwheeler.com/oss_fs_why.html#security-evaluations&quot;&gt;See
my paper for more about formal security evaluations of OSS/FS products.&lt;/a&gt;

&lt;li&gt;
Added a reference to CSC&amp;#8217;s new report
&lt;a href=&quot;http://www.csc.com/features/2004/uploads/LEF_OPENSOURCE.pdf&quot;&gt;
&amp;#8220;Open Source: Open for Business&amp;#8221;&lt;/a&gt;.
In particular, they discuss some TCO issues which I added to
the TCO section.

&lt;/ol&gt;
</description>
   </item>
  </channel>
</rss>