<?xml version="1.0"?>
<!-- name="generator" content="blosxom/2.0" -->

<rss version="2.0">
  <channel>
    <title>David A. Wheeler's Blog   </title>
    <link>http://www.dwheeler.com/blog</link>
    <description>David A. Wheeler's weblog.</description>
    <language>en</language>

  <item>
    <title>YEARFRAC Incompatibilities between Excel 2007 and OOXML (OXML)</title>
    <link>http://www.dwheeler.com/blog/2008/05/19#excel-oxml-yearfrac</link>
    <pubDate>Mon, 19 May 2008 08:21 GMT</pubDate>
    <!-- date: 2008-05-19 -->
    <description>
&lt;p&gt;
In theory, the OOXML (OXML) specification is supposed to define
what Excel 2007 reads and writes.
In practice, it&amp;#8217;s not true at all;
the latest public drafts of OOXML are
unable to represent many actual Excel 2007 files.
&lt;/p&gt;
&lt;p&gt;
For example,
at least 26 Excel financial functions depend on a parameter called &amp;#8220;Basis&amp;#8221;,
which controls how the calendar is interpreted.
The YEARFRAC function is a good example of this; it returns the
fraction of years between two dates, given a &amp;#8220;basis&amp;#8221; for interpreting
the calendar.
Errors in these functions can have large financial stakes.
&lt;/p&gt;
&lt;p&gt;
I&amp;#8217;ve posted a new document,
&lt;a href=&quot;http://www.dwheeler.com/yearfrac/excel-ooxml-yearfrac.pdf&quot;&gt;YEARFRAC Incompatibilities between Excel 2007 and OOXML (OXML), and the Definitions Actually Used by Excel 2007&lt;/a&gt;
(&lt;a href=&quot;http://www.dwheeler.com/yearfrac/excel-ooxml-yearfrac.odt&quot;&gt;[OpenDocument version]&lt;/a&gt;), which shows that
the definitions of OOXML and Excel 2007 aren&amp;#8217;t the same at all.
&amp;#8220;This document identifies incompatibilities between the YEARFRAC function, as implemented by Microsoft Excel 2007, compared to how it is defined in the Office Open Extensible Mark-up Language (OOXML), final draft ISO/IEC 29500-1:2008(E) as of 2008-05-01 (aka OXML).  It also identifies the apparent definitions used by Excel 2007 for YEARFRAC, which to the author’s knowledge have never been fully documented anywhere.  They are not defined in the OOXML specification, because OOXML’s definitions are incompatible with the apparent definition used by Excel 2007.&amp;#8221;
&lt;/p&gt;
&lt;p&gt;
&amp;#8220;This incompatibility means that, given OOXML’s current definition,  OOXML cannot represent any Excel spreadsheet that uses financial functions using “basis” date calculations, such as YEARFRAC, if they use common “basis” values (omitted, 0, 1, or 4).   Excel functions that depend upon &amp;#8220;basis&amp;#8221; date calculations include:  ACCRINT, ACCRINTM, AMORDEGRC, AMORLINC, COUPDAYBS, COUPDAYS, COUPDAYSNC, COUPNCD, COUPNUM, COUPPCD, DISC, DURATION, INTRATE, MDURATION, ODDFPRICE, ODDFYIELD, ODDLPRICE, ODDLYIELD, PRICE, PRICEDISC, PRICEMAT, RECEIVED, YEARFRAC, YIELD, YIELDDISC, and YIELDMAT (26 functions).&amp;#8221;
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&quot;http://www.dwheeler.com/yearfrac&quot;&gt;I have much more information
about YEARFRAC if you want it.&lt;/a&gt;
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Oracle letter to Universities: Educate software developers on security/assurance!</title>
    <link>http://www.dwheeler.com/blog/2008/05/15#oracle-letter</link>
    <pubDate>Thu, 15 May 2008 12:08 GMT</pubDate>
    <!-- date: 2008-05-15 -->
    <description>
&lt;p&gt;
I am &lt;i&gt;delighted&lt;/i&gt; to point out a
&lt;a href=&quot;http://www.oracle.com/security/docs/mary-ann-letter.pdf&quot;&gt;
really interesting letter to Universities by
Mary Ann Davidson, the Chief Security Officer of Oracle Corporation&lt;/a&gt;.
It basically tells colleges and universities to stop ignoring security, and
to instead include software security principles
in their computer science curricula.
I&amp;#8217;m so delighted to see this letter, which has just been released to
the public (it had been privately sent to many colleges and universities).
Let me point out and comment on some great points in this letter, because
I think this letter is really important.
&lt;/p&gt;
&lt;p&gt;
In this letter, she notes that
&amp;#8220;many security vulnerabilities can be traced to a relatively few types
of common coding errors&amp;#8221;.
&lt;a href=&quot;http://www.dwheeler.com/secure-programs&quot;&gt;
I&amp;#8217;ve noted that myself, by the way&lt;/a&gt;; simply educating developers on
what the common (past) mistakes are goes a &lt;i&gt;long&lt;/i&gt; way towards
eliminating vulnerabilities.
She then notes,
&amp;#8220;most developers we hire have not been
adequately trained in basic secure coding principles
in their undergraduate or graduate computer science programs.&amp;#8221;
I agree and think it&amp;#8217;s horrific; more on that in a moment.
She clarifies that this is a really important problem:
&amp;#8220;Security flaws are widely recognized as a threat to national security
and to the privacy and financial well being of individual citizens,
in addition to the costs they impose on us and our customers.&amp;#8221;
They haven&amp;#8217;t just let this be; as they note,
&amp;#8220;We have therefore had to develop and roll out our own in-house security
training program at significant time and expense.&amp;#8221;
Kudos to Oracle for doing such training, by the way; far too many
organizations don&amp;#8217;t do that, which explains why software continues
to have the same old vulnerabilities as it did 30 years ago.
But clearly Oracle cannot train the world, nor it is reasonable to expect
that they do so.
&lt;/p&gt;
&lt;p&gt;
She also states that
&amp;#8220;We believe that the ability to recognize and avoid common errors that can
result in catastrophic security failures should be a core part of computer
science curricula and that the above measures will foster such change.
We strongly recommend that universities adopt secure coding practices as
part of their computer science curricula, to improve the security of all
commercial software, and ensure that their graduates remain competitive
in the job market.&amp;#8221;
To that I say, Amen.
&lt;/p&gt;
&lt;p&gt;
By itself, that&amp;#8217;s &lt;i&gt;great&lt;/i&gt;, but here&amp;#8217;s the kicker:
&amp;#8220;In the future, Oracle plans to give &lt;i&gt;&lt;b&gt;hiring preference&lt;/b&gt;&lt;/i&gt;
to students who have received such training and can demonstrate competence
in software security principles.&amp;#8221;
Do you see this?
Students at colleges and universities that fail
to properly prepare them will be at a competitive disadvantage!
&lt;/p&gt;
&lt;p&gt;
Today, almost all computer science and software engineering
graduates will develop software that
connects to a network, or must take data from a network&amp;#8230;
yet almost all are absolutely clueless about how to do so.
Not because they don&amp;#8217;t know what a &amp;#8220;socket&amp;#8221; is, but because they don&amp;#8217;t
know how to counter attacks.
And if you&amp;#8217;re hooked to a network, or take data from one, you
&lt;i&gt;will&lt;/i&gt; get attacked.
&lt;/p&gt;
&lt;p&gt;
Yet the education community (with a few wonderful exceptions) still
completely ignores the need to educate software developers on how to develop
secure software.
&amp;#8220;It&amp;#8217;s not my job&amp;#8221; is not just wrong; it&amp;#8217;s almost criminal.
Society is &lt;i&gt;depending&lt;/i&gt; on the educational community to educate students
in the fundamentals of what they need to know.
Society depends on software, and
essentially &lt;i&gt;every&lt;/i&gt; student in a software-related field
will, after they graduate, write software that will be attacked.
Attacks are no longer a surprise - they are a guarantee.
Yet the educational system that&amp;#8217;s supposed to prepare our developers
fundamentally fails to do so.
Since attacks are guaranteed, and the
students are guaranteed to &lt;i&gt;not&lt;/i&gt;
know how to counter them, what other results would you expect?
The basics of developing secure software should be a &lt;b&gt;mandatory&lt;/b&gt;
part of computer science and software engineering undergraduate curricula.
The vulnerabilities that the students &lt;i&gt;will&lt;/i&gt; embed in software,
if they do not get this education, will
lead to great loss of life and the loss of billions of dollars.
Sure, schools already have a lot of material to cover,
but practically nothing in a computer science curricula is
as important as how to develop secure software;
I can think of no other omissions in the CS curricula that
cause so much damage.
Don&amp;#8217;t tell me that you only teach the &amp;#8220;fundamentals&amp;#8221;; programming languages
change, but the need for security will &lt;i&gt;never&lt;/i&gt; go away; it
&lt;i&gt;is&lt;/i&gt; fundamental.
I think
computer science and software engineering departments that do not explain
the basics of developing secure software
to all of their undergraduate and graduate students should be
shut down, as a menace to society, until they change their ways.
&lt;/p&gt;
&lt;p&gt;
Oh, if you want to see more about this letter,
&lt;a href=&quot;http://blogs.oracle.com/maryanndavidson/2008/04/08#a286&quot;&gt;
see Mary Ann Davidson&amp;#8217;s blog article about it,
&amp;#8220;The Supply Chain Problem&amp;#8221;&lt;/a&gt;, where
she talks about what led up to the letter, and the
follow-on from it:
&amp;#8220;Last year, I got fed up enough with Oracle having to train otherwise bright
and capable CS grads in secure coding 101 that I sent letters to the top 10 or
so universities we recruit from (my boss came up with the idea and someone on
my team executed on it - teamwork is a wonderful thing)&amp;#8230;
I am sorry to state that only one of those universities we wrote to responded
to my letter&amp;#8230;
We need a revolution - an upending of the way we think about security -and
that means upsetting the supply chain of software developers&amp;#8230;
To universities, I cannot but contrast the education of engineers with that of
computer science majors. Engineers know that their work product must above all
be safe, secure and reliable. They are trained to think this way (not pawn off
&amp;#8216;safety&amp;#8217; on &amp;#8216;testers&amp;#8217;) and their curricula builds and reinforces the
techniques and mindset of safe, secure and reliable product. (A civil engineer
who ignores the principles of basic structures - a core course - in an upper
level class is not going to graduate, and can&amp;#8217;t dismiss structures as a
&amp;#8216;legacy problem.&amp;#8217;)&amp;#8221;
&lt;/p&gt;
&lt;p&gt;
I would &lt;i&gt;love&lt;/i&gt; to see many organizations banding together to sign
a letter like this one.
If enough organizations band together, I think many universities and
colleges will finally get the message.
I would expand it beyond computer science, to any curricula with a significant
amount of software development (such as software engineering, MIS, and so on),
but that&amp;#8217;s a quibble.
My goal is not to shut down any departments (I hope that&amp;#8217;s clear);
it&amp;#8217;s to repair a serious omission in our educational system.
Kudos to Mary Ann Davidson, for writing the letter and sending it to
a number of Universities.
When I learned of it, I begged her to please post it publicly.
To her &lt;i&gt;great&lt;/i&gt; credit, she&amp;#8217;s now done so.
Thanks, from the bottom of my heart!
Now colleges and universities have even fewer reasons to claim the nonsense,
&amp;#8220;well, no one wants information on developing secure software.&amp;#8221;
The companies that will hire your students know otherwise.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Defining &amp;#8220;open standards&amp;#8221;: The Digital Standards Organization (digistan.org)</title>
    <link>http://www.dwheeler.com/blog/2008/05/14#open-standards-digistan</link>
    <pubDate>Wed, 14 May 2008 17:54 GMT</pubDate>
    <!-- date: 2008-05-14 -->
    <description>
&lt;p&gt;
Lots of people agree that we need &amp;#8220;open standards&amp;#8221; in information
technology.
The problem is, there are a lot of snake-oil salesmen
who are trying to (re)define that term
to mean &amp;#8220;whatever proprietary product I&amp;#8217;m selling&amp;#8221;.
&lt;/p&gt;
&lt;p&gt;
Will we be able to choose what products we use?
Will we even be able to exercise our rights (as citizens) at all?
These are important questions about our future.
The answers to those questions
depends on whether or not we have &lt;i&gt;real&lt;/i&gt; open standards in place
for critical areas of our lives.
A vendor who controls critical standards could easily decide that something
that is manifestly &lt;i&gt;not&lt;/i&gt; in our interest could be in theirs, and
force us to submit to their malevolent actions.
This is already a concern, and through globalization it will only get worse.
We are dependent on information systems, and those who
control their standards control those systems&amp;#8230; and thus, us.
It&amp;#8217;s about power; should we have any?
This means that
understanding what &lt;i&gt;real&lt;/i&gt; open standards are about is vital.
&lt;/p&gt;
&lt;p&gt;
In my essay
&lt;a href=&quot;http://www.dwheeler.com/essays/opendocument-open.html&quot;&gt;
&amp;#8220;Is OpenDocument an Open Standard? Yes!&amp;#8221;&lt;/a&gt;,
I addressed this problem of multiple different definitions
by finding three widely-used definitions
(Perens&amp;#8217;, Krechmer&amp;#8217;s, and the European Commission&amp;#8217;s) and merging them.
After all, if a specification meets all three definitions of
&amp;#8220;open standard&amp;#8221;, then it&amp;#8217;s far more likely to be a true open standard.
Problem is, with all those trees, it&amp;#8217;s hard to see the forest.
&lt;/p&gt;
&lt;p&gt;
So I&amp;#8217;m delighted to have discovered the
&lt;a href=&quot;http://www.digistan.org/&quot;&gt;Digital Standards Organization
(digistan.org)&lt;/a&gt;.
They have a wonderfully brief definition of &amp;#8220;open standard&amp;#8221;:
&amp;#8220;a published specification that is immune to vendor capture at all
stages in its life-cycle&amp;#8221;.
That can be a little mystifying, so they also provide a
&lt;a href=&quot;http://www.digistan.org/open-standard&quot;&gt;
slightly longer definition of &amp;#8220;open standard&amp;#8221; that clarifies what
that means&lt;/a&gt;:
&lt;ul&gt;
&lt;li&gt;&amp;#8220;The standard is adopted and will be maintained by a not-for-profit organization, and its ongoing development occurs on the basis of an open decision-making procedure available to all interested parties.&lt;/li&gt;
&lt;li&gt;The standard has been published and the standard specification document is available freely. It must be permissible to all to copy, distribute, and use it freely.&lt;/li&gt;
&lt;li&gt;The patents possibly present on (parts of) the standard are made irrevocably available on a royalty-free basis.&lt;/li&gt;
&lt;li&gt;There are no constraints on the re-use of the standard.&lt;/li&gt;
&lt;/ul&gt;
A key defining property is that an open standard is immune to vendor capture at all stages in its life-cycle. Immunity from vendor capture makes it possible to improve upon, trust, and extend an open standard over time.&amp;#8221;
&lt;/p&gt;
&lt;p&gt;
That&amp;#8217;s a remarkably clear and simple definition, and good definitions are hard!
Even better, they have posted a
&lt;a href=&quot;http://www.digistan.org/rationale&quot;&gt;rationale for this definition&lt;/a&gt;
that cuts through all the noise and nonsense, and instead gets to the heart
of the matter.
For example, it explains the real goals of open standards:
&amp;#8220;An open standard must be aimed at creating unrestricted competition between
vendors and unrestricted choice for users. Any barrier - including RAND,
FRAND, and variants - to vendor competition or user choice is incompatible
with the needs of the market at large.&amp;#8221;
Here&amp;#8217;s a quote from the rationale&amp;#8217;s
abstract, which I think makes a lot of sense:
&lt;blockquote&gt;&lt;i&gt;
&amp;#8220;Many groups and individuals have provided definitions for &amp;#8216;open standard&amp;#8217; that reflect their economic interests in the standards process. We see that the fundamental conflict is between vendors who seek to capture markets and raise costs, and the market at large, which seeks freedom and lower costs.
There are thus only two types of standard: franchise standards, and open standards. Vendors work hard to turn open standards into franchise standards. They work to change the statutory language so they can cloak franchise standards in the sheep&amp;#8217;s clothing of &amp;#8216;open standard&amp;#8217;.
Our canonical definition of open standard derives from the conclusion that this conflict lies at the heart of the matter. We define an open standard as &amp;#8216;a published specification that is immune to vendor capture at all stages in its life-cycle&amp;#8217;.
A full definition of &amp;#8216;open standard&amp;#8217; must take into account the direct economic conflict between vendors and the market at large. Such conflicts do not end when a standard is published, so an open standard must also be immune from attack long after it has been widely implemented.&amp;#8221;
&lt;/i&gt;&lt;/blockquote&gt;
&lt;/p&gt;
&lt;p&gt;
Digistan is currently asking people to sign
&lt;a href=&quot;http://www.digistan.org/hague-declaration&quot;&gt;
&amp;#8220;The Hague Declaration&amp;#8221;&lt;/a&gt; by 2008-05-21.
This one states why open standards are important to human liberty,
in ways that non-technical people can understand.
&lt;a href=&quot;
http://www.freesoftwaremagazine.com/columns/open_letter_standards_professionals_developers_and_activists&quot;&gt;
As Pieter Hintjens argues in his
&amp;#8220;Open letter to Standards Professionals, Developers, and Activists&amp;#8221;&lt;/a&gt;,
&amp;#8220;The Hague Declaration argues that international law and national
constitutions of most democracies oblige governments to adopt open standards.&amp;#8221;
If the text of this letter looks a little like
&lt;a href=&quot;http://www.gesmer.com/attorneys/updegrove.php&quot;&gt;Andrew Updegrove&lt;/a&gt;&amp;#8217;s
&lt;a href=&quot;http://consortiuminfo.org/bulletins/pdf/feb08/feb08.pdf&quot;&gt;
A Proposal to Recognize the Special Status of
&amp;#8220;Civil ICT Standards&amp;#8221;&lt;/a&gt; or his
&lt;a href=&quot;http://consortiuminfo.org/standardsblog/article.php?story=20080409110045256&quot;&gt;testimony in Texas&lt;/a&gt;, that&amp;#8217;s no accident;
&lt;a href=&quot;http://www.digistan.org/about&quot;&gt;
Andrew Updegrove is one of Digistan&amp;#8217;s founders&lt;/a&gt;.

&lt;/p&gt;
&lt;p&gt;
Standards are vitally important.
If we allow individual companies to control standards, then we have ensured
that they will control us - and what we may do - through them.
Being a non-profit helps, but even a non-profit&amp;#8217;s no guarantee; is the
organization interested in maximizing implementation and
competition between potential suppliers,
or does it have some other motivation (such as maximizing publication revenue)?
&lt;/p&gt;
&lt;p&gt;
I think making standards available at no-charge is no longer a nicety; it
is a necessity for a specification to be a truly open standard.
When there were only a few standards, and all products were developed by
large big-budget corporations, a $100 standard was not a big deal.
But today there are a vast array of standards; simply buying
&amp;#8220;all relevant standards&amp;#8221; is becoming prohibitive even for
large companies with massive budgets.
And those big budgets are increasingly rare; suppliers are often
small organizations or individuals collaborating together, or are
in countries where those kinds of funds are unavailable.
Because the world now includes so many new suppliers, anything that
prevents those suppliers from using standards is simply unacceptable.
Don&amp;#8217;t give me the nonsense that the money is needed to help
develop standards; it&amp;#8217;s not true.
I&amp;#8217;ve helped to develop many standards, and I never received a penny from the
publication royalties.
The IETF, W3C, OASIS, and many other organizations manage to publish their
standards, and have for years.
The world has changed.
In today&amp;#8217;s world, &amp;#8220;publish&amp;#8221; means &amp;#8220;freely available over the Internet without
having to register for it&amp;#8221;; if you can&amp;#8217;t Google it, it doesn&amp;#8217;t exist.
The cost of putting a specification on a public web server is essentially
petty cash, and &lt;i&gt;not&lt;/i&gt; doing so means that many (if not most) of
the specification&amp;#8217;s potential users cannot use it.
&lt;/p&gt;
&lt;p&gt;
Open standards and
&lt;a href=&quot;http://www.dwheeler.com/oss_fs_why.html&quot;&gt;free-libre / open source software (FLOSS)&lt;/a&gt;
are not the same thing - not at all!
There are some similarities, though.
From a customer&amp;#8217;s point of view, both open standards and FLOSS
are strategies for enabling supplier switching (by preventing lock-in).
In addition, customers often don&amp;#8217;t switch to a FLOSS product,
even it&amp;#8217;s technologically superior or has lower total costs, solely
because the customer is locked into an existing product due to
proprietary standards (in data formats, APIs, and so on).
You can choose to use open standards and not use FLOSS products, but
if you use an open standard, it &lt;i&gt;enables&lt;/i&gt; you to select a FLOSS product
(now or later).
&lt;/p&gt;
&lt;p&gt;
I believe, very much, in the power of competition to produce
lower-cost, higher-quality, and innovative components.
But competition is easily stymied through lock-in via &amp;#8220;franchise&amp;#8221; standards.
Open standards are necessary to eliminate lock-in and bring to everyone
the advantages of competition:
lower cost, higher quality, and greater innovation.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Bilski: Information is physical!?</title>
    <link>http://www.dwheeler.com/blog/2008/05/09#bilski-information-is-physical</link>
    <pubDate>Fri, 09 May 2008 10:53 GMT</pubDate>
    <!-- date: 2008-05-09 -->
    <description>
&lt;p&gt;
The
&lt;a href=&quot;http://www.groklaw.net/article.php?story=20080508231813484&quot;&gt;
US Court of Appeals for the Federal Circuit in Washington, DC just
heard arguments in the &lt;i&gt;Bilski&lt;/i&gt; case&lt;/a&gt;,
where the appellant (Bilski) is arguing that a completely mental
process should get a patent.
The fact that this was even entertained demonstrates why
the patent system has truly descended into new levels of madness.
At least the PTO rejected the application; the problem is that the PTO
now allows business method patents and software patents.
Once they allowed them, there&amp;#8217;s no rational way to say
&amp;#8220;stop! That&amp;#8217;s rediculous!&amp;#8221; without being arbitrary.
&lt;/p&gt;
&lt;p&gt;
Mr. David Hanson (Webb Law Firm) argued for the appellant (Bilski), and
got peppered with questions.
&amp;#8220;Is a curve ball patentable?&amp;#8221;, for example.
At the end, he finally asked the court to think of
&amp;#8220;information as physical&amp;#8221;; it is therefore tangible and can be transformed.
&lt;/p&gt;

&lt;p&gt;
That is complete lunacy, and it clearly demonstrates why
the patent office is in real trouble.
&lt;/p&gt;
&lt;p&gt;
Information is &lt;b&gt;not&lt;/b&gt; physical, it is fundamentally different,
and that difference has been understood for centuries.
If I give you my car, I no longer have that car.
If I give you some information, I still have the information.
That is a &lt;i&gt;fundamental&lt;/i&gt; difference in information, and always
has been.
The fact that Bilski&amp;#8217;s lawyer can&amp;#8217;t understand this difference shows
why our patent office is so messed up.
&lt;/p&gt;
&lt;p&gt;
This fundamental difference between information and physical objects
was well-understood by the U.S. founding fathers. Here&amp;#8217;s what Thomas
Jefferson said: &amp;#8220;That ideas should freely spread from one to another over
the globe, for the moral and mutual instruction of man, and improvement
of his condition, seems to have been peculiarly and benevolently designed
by nature, when she made them, like fire, expansible over all space,
without lessening their density at any point, and like the air in which
we breath, move, and have our physical being, incapable of confinement
or exclusive appropriation. Inventions then cannot, in nature, be a
subject of property.&amp;#8221; Thomas Jefferson was a founder, and an inventor.
No, they didn&amp;#8217;t have computers then, but computers merely automate
the processing of information; the &lt;i&gt;essential difference&lt;/i&gt; between
information and physical/tangible objects was quite clear then.
&lt;/p&gt;
&lt;p&gt;
Our laws need to distinguish between information and physical objects,
because they have fundamentally different characteristics.
&lt;/p&gt;
&lt;p&gt;
Basically, by failing to understand the differences, the PTO let in
software patents and business method patents, which have been
grossly harmful to the United States.
&lt;/p&gt;
&lt;p&gt;
Even if you thought they were merely &amp;#8220;neutral&amp;#8221;, that&amp;#8217;s not enough.
There&amp;#8217;s a famous English speech about the trade-offs of copyright law,
whose principles also apply here: &amp;#8220;It is good that authors should be
remunerated; and the least exceptionable way of remunerating them is by
a monopoly. Yet monopoly is an evil. For the sake of the good we must
submit to the evil; but the evil ought not to last a day longer than is
necessary for the purpose of securing the good.&amp;#8221; -
&lt;a href=&quot;http://www.apig.org.uk/index/APIG_DRM_Report-final.pdf&quot;&gt;
Thomas Babbington
Macaulay, speech to the House of Commons, February 5, 1841&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
I believe that software patents need to be abolished, pronto.
&lt;a href=&quot;http://www.dwheeler.com/innovation/innovation.html#patents&quot;&gt;
As I&amp;#8217;ve discussed elsewhere, software patents harm software innovation&lt;/a&gt;,
not help it.
&lt;/p&gt;
&lt;p&gt;
But here in the Bilski case we see
why some some people have managed to sneak software patents into
the patent process.
In short, too many people do not understand the fundamental differences
between information and physical objects.
People whose thinking is &lt;i&gt;that&lt;/i&gt; fuzzy are easily duped.
Though clearly many people aren&amp;#8217;t as confused as Bilski&amp;#8217;s lawyer,
I think too many people in the patent process have become so
confused about the difference between physical objects and
information that they don&amp;#8217;t understand why software patents
are a serious problem.
Patents should only apply to processes that directly change physical
objects, and their scope should only cover the specifics of those changes.
I add that latter part because yes, changing the number on a display does
change something physical, but that is irrelevant.
If you have a wholly new process for making displays (say, using a new
chemical compound), that could be patentable, but changing a &amp;#8220;5&amp;#8221; to a &amp;#8220;6&amp;#8221;
should not be patentable because &amp;#8220;changing a 5 to a 6&amp;#8221; is not fundamentally
a change in nature.
Taking something unpatentable and adding the phrase &amp;#8220;doing it with a computer&amp;#8221;
should not change an unpatentable invention
into a patentable one; the Supreme Court
understood that, but the PTO still fails to understand that.
&lt;/p&gt;
&lt;p&gt;
I think pharmaceutical companies are afraid of any patent reform laws,
because they&amp;#8217;re afraid that a change in the patent system might hurt them.
But if the patent system isn&amp;#8217;t fixed - by eliminating business method
patents and software patents - the entire patent system might become
too overwhelmed to function, and thus eventually scrapped.
I don&amp;#8217;t know if pharma patents are more help than hinderance; I&amp;#8217;m not
an expert in that area.
But I make my living with software, and
it&amp;#8217;s obvious to me (and most other software practitioners)
that software patents and business patents are becoming
a massive drag on innovation.
If we can&amp;#8217;t fix the patent system, we&amp;#8217;ll have to abolish the
patent system completely.
A lot of lawyers will be unhappy if the patent system is
eliminated, but there are more non-lawyers than lawyers.
If the pharma companies want to have a working patent system,
then they&amp;#8217;ll need to help reign in patents in other areas,
or the whole system may collapse.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Open Source Computer Emergency Response Team (oCERT)</title>
    <link>http://www.dwheeler.com/blog/2008/05/08#ocert.org</link>
    <pubDate>Thu, 08 May 2008 11:01 GMT</pubDate>
    <!-- date: 2008-05-08 -->
    <description>
&lt;p&gt;
Here&amp;#8217;s something new and interesting: the
&lt;a href=&quot;http://ocert.org/&quot;&gt;Open Source Computer Emergency Response Team
(oCERT)&lt;/a&gt;.
Here&amp;#8217;s how they describe themselves:
&amp;#8220;The oCERT project is a public effort providing security handling
support to Open Source projects affected by
security incidents or vulnerabilities&amp;#8230;&amp;#8221;.
&lt;/p&gt;

&lt;p&gt;
They promise to keep things moving.
They do permit embargo periods (where vulnerabilities are not publicly
disclosing, giving time for developers to fix the problem first).
More importantly, though, they have a maximum embargo time of two months;
I think that&amp;#8217;s great, and important, because a lot of suppliers have
abused embargo periods and failed to fix critical vulnerabilities
as long as they&amp;#8217;re embargoed.
These abuses often resulted in customers being exploited through mechanisms
that the supplier knew about, but refused to fix in a timely manner.
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;http://googleonlinesecurity.blogspot.com/2008/05/contributing-to-open-source-software.html&quot;&gt;Google is backing oCERT&lt;/a&gt;, which is certainly
encouraging.
Google even mentions my &amp;#8220;three conditions&amp;#8221; for securing software (thanks!):
&lt;ol&gt;
&lt;li&gt;people need to actually review the code&lt;/li&gt;
&lt;li&gt;developers/reviewers need to know how to write secure code&lt;/li&gt;
&lt;li&gt;once found, security problems need to be fixed quickly, and their fixes distributed quickly&lt;/li&gt;
&lt;/ol&gt;
Clearly, something like oCERT could help with these.
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;http://www.computerworld.com/action/article.do?command=viewArticleBasic&amp;articleId=9083458&amp;intsrc=news_ts_head&quot;&gt;This ComputerWorld article on
oCERT&lt;/a&gt; makes some interesting points.
One minor point: They worry that oCERT is using the term &amp;#8220;CERT&amp;#8221; without
permission, but oCERT reports that they do indeed have that permission.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Securing Open Source Software (OSS)</title>
    <link>http://www.dwheeler.com/blog/2008/05/06#securing-oss-2008</link>
    <pubDate>Tue, 06 May 2008 21:17 GMT</pubDate>
    <!-- date: 2008-05-06 -->
    <description>
&lt;p&gt;
I&amp;#8217;ve just posted my
&lt;a href=&quot;http://www.dwheeler.com/essays/securing-oss.pdf&quot;&gt;
presentation titled &amp;#8220;Securing Open Source Software (OSS or FLOSS)&lt;/a&gt;,
which is to be presented at the
&lt;a href=&quot;http://www.bowheadevents.com/swaforum2008/index.cfm&quot;&gt;
8th Semi-Annual Software Assurance Forum, May 6-8, 2008,
Sheraton Premiere, Tyson&amp;#8217;s Corner in Vienna, Virginia.&lt;/a&gt;
In it, I discuss how to improve the security of an OSS component
by modifying its environment, as
well as securing the OSS component itself (by selecting a secure
component, building a secure component from scratch, or
modifying an existing component).
I include a number of examples; they&amp;#8217;re necessarily incomplete, but
I hope it will help people who are developing or deploying systems.
(Here is &lt;a href=&quot;http://www.dwheeler.com/essays/securing-oss.odp&quot;&gt;
&amp;#8220;Securing Open Source Software (OSS or FLOSS)&amp;#8221; in OpenDocument format&lt;/a&gt;.)
Enjoy!
&lt;/p&gt;
</description>
   </item>
  </channel>
</rss>