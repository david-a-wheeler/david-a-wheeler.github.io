<?xml version="1.0"?>
<!-- name="generator" content="blosxom/2.0" -->

<rss version="2.0">
  <channel>
    <title>David A. Wheeler's Blog   </title>
    <link>http://www.dwheeler.com/blog</link>
    <description>David A. Wheeler's weblog.</description>
    <language>en</language>

  <item>
    <title>CSIS Cybersecurity Report</title>
    <link>http://www.dwheeler.com/blog/2008/12/09#csis-2008</link>
    <pubDate>Tue, 09 Dec 2008 23:11 GMT</pubDate>
    <!-- date: 2008-12-09 -->
    <description>
&lt;p&gt;
The Center for Strategic and International Studies (CSIS) has
just released an interesting new report titled
&lt;a href=&quot;http://www.csis.org/media/csis/pubs/081208_securingcyberspace_44.pdf&quot;&gt;
&amp;#8220;Securing Cyberspace for the 44th Presidency:
A Report of the CSIS Commission on Cybersecurity for the 44th Presidency&amp;#8221;&lt;/a&gt;.
The project was co-chaired by Representative James R. Langevin,
Representative Michael T. McCaul, Scott Charney, and
Lt. General Harry Raduege, USAF (Ret).
If you&amp;#8217;re interested in getting our computer infrastructure
more secure, I think this is worth looking at.
&lt;/p&gt;
&lt;p&gt;
The three major findings were:
(1) cybersecurity is now a major national security
problem for the United States,
(2) decisions and actions must respect privacy and
civil liberties, and
(3) only a comprehensive national secuirty strategy
that embraces both the domestic and international
aspects of cybersecurity will make us more secure.
&lt;/p&gt;
&lt;p&gt;
Among their recommendations, they suggest
&amp;#8220;Regulate cyberspace.  Voluntary action is not enough.
The U.S. must &amp;#8230; set minimum standards in order to
ensure that the delivery of critical services in
cyberspace continues if the U.S. is attacked&amp;#8230;
[avoid] prescriptive mandates [and] overreliance on
market forces, which are ill-equipped to meet national
security and public safety requirements&amp;#8221;.
I agree that market forces, without any help, aren&amp;#8217;t
well-equipped to deliver security, but the challenge
is in the details&amp;#8230; it&amp;#8217;s difficult to strike that
balance well.
&lt;/p&gt;
&lt;p&gt;
They recommend conducting research and development for cybersecurity -
I&amp;#8217;m glad they do, that&amp;#8217;s vitally important.
(I just saw the video
&lt;a href=&quot;http://www.youtube.com/watch?v=_lLDNosedHk&quot;&gt;The Science of
Victory&lt;/a&gt;, which briefly discusses the importance of research to U.S.
national defense.)
CSIS also recommends &lt;b&gt;not&lt;/b&gt; starting over -
instead, they recommend building on and refining the
existing &amp;#8220;Comprehensive National Cybersecurity Initiative&amp;#8221;.
&lt;/p&gt;
&lt;p&gt;
In any case, computers and computer networks are no
longer interesting toys, they are vital services.
We need to improve how we protect them.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Use &amp;#8220;FLOSS&amp;#8221; instead of &amp;#8220;FOSS&amp;#8221; or &amp;#8220;OSS/FS&amp;#8221; as Universal term for Open Source Software / Free Software</title>
    <link>http://www.dwheeler.com/blog/2008/12/08#use-floss-not-foss-ossfs</link>
    <pubDate>Mon, 08 Dec 2008 17:19 GMT</pubDate>
    <!-- date: 2008-12-08 -->
    <description>
&lt;p&gt;
Below is my brief attempt to untangle some terminology.
In short, I suggest using &amp;#8220;FLOSS&amp;#8221; instead of &amp;#8220;FOSS&amp;#8221; or &amp;#8220;OSS/FS&amp;#8221;
for software which meets the 
&lt;a href=&quot;http://www.gnu.org/philosophy/free-sw.html&quot;&gt;Free Software Definition&lt;/a&gt; and
&lt;a href=&quot;http://www.opensource.org/docs/definition.php&quot;&gt;Open Source Definition&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
There are many alternative terms for &amp;#8220;Free software&amp;#8221; in the sense of the
&lt;a href=&quot;http://www.gnu.org/philosophy/free-sw.html&quot;&gt;Free Software Definition&lt;/a&gt;.
Examples of such alternatives are
&amp;#8220;open source software&amp;#8221;, &amp;#8220;libre software&amp;#8221;,
&amp;#8220;FOSS&amp;#8221; or &amp;#8220;F/OSS&amp;#8221; (free/open-source software&amp;#8221;),
OSS/FS (open source software / free software), &amp;#8220;freed software&amp;#8221;, and
&amp;#8220;unfettered software&amp;#8221;.
&lt;a href=&quot;http://en.wikipedia.org/wiki/Alternative_terms_for_free_software&quot;&gt;
Wikipedia&amp;#8217;s article on alternative terms for free software&lt;/a&gt;
discusses alternative terminology further.
&lt;/p&gt;
&lt;p&gt;
For someone (like me) who tries to &lt;i&gt;write&lt;/i&gt; about software under
these kinds of licenses, having multiple different names is annoying.
What&amp;#8217;s worse, the term &amp;#8220;Free software&amp;#8221; (the original term) is
really misleading; people who hear that term presume that you mean &amp;#8220;no cost&amp;#8221;,
which is not related to the intended meaning of &amp;#8220;freedom&amp;#8221;.
Yes, I know that the &amp;#8220;Free&amp;#8221; means &amp;#8220;freedom&amp;#8221; (aka &amp;#8220;Free as in speech&amp;#8221; or
&amp;#8220;Free market&amp;#8221;), and I&amp;#8217;m well aware that you can charge
and pay for Free software.
But you have to re-teach
everyone who knows English, &lt;i&gt;and&lt;/i&gt; you&amp;#8217;re fighting a losing battle
against search engines (which will mix results together
when you search for a phrase with two common meanings).
&lt;a href=&quot;http://www.gnu.org/philosophy/open-source-misses-the-point.html&quot;&gt;Even
the FSF admits that the term &amp;#8220;Free software&amp;#8221; is widely misunderstood&lt;/a&gt;.
Years ago I suggested to Richard Stallman that he use the term
&amp;#8220;freed software&amp;#8221; instead of &amp;#8220;free software&amp;#8221;, so that the term would be
different but the acronyms could stay the same;
obviously he didn&amp;#8217;t accept that suggestion.
&lt;/p&gt;
&lt;p&gt;
The term &amp;#8220;open source software&amp;#8221; is the most widely used term
in English, and the term&amp;#8217;s creators intentionally tried to include
everyone regardless of their motivations.
I&amp;#8217;m happy to use the term &amp;#8220;open source software&amp;#8221;;
I think it&amp;#8217;s a reasonable term and it&amp;#8217;s widely accepted.
So, in groups which already use that term, I&amp;#8217;ll gladly use
&amp;#8220;open source software&amp;#8221; as the &amp;#8220;universal&amp;#8221; term
that covers all such software, regardless of the motivations of the developers.
&lt;/p&gt;
&lt;p&gt;
Unfortunately,
&lt;a href=&quot;http://www.gnu.org/philosophy/open-source-misses-the-point.html&quot;&gt;
many of the developers of such software strongly
object to the term &amp;#8220;open source software&amp;#8221;&lt;/a&gt; as the universal term.
Their objection is that many people who use the term
&amp;#8220;open source software&amp;#8221; only emphasize engineering or business advantages,
while the FSF emphasizes freedom for end-users and objects to a term
that doesn&amp;#8217;t note that possibility somehow.
&lt;/p&gt;
&lt;p&gt;
This objection causes problems for people like me.
I&amp;#8217;m usually &lt;i&gt;not&lt;/i&gt; trying to exclude those who object to
the term &amp;#8220;open source software&amp;#8221;.
Instead,
I often want an &lt;i&gt;inclusive&lt;/i&gt; term to describe such software, regardless
of the motivations of its developers.
Different developers often have different motivations - and even the
same developer may have different motivations over time or on different
projects.
So, is there some term that most can accept?
&lt;/p&gt;
&lt;p&gt;
One inclusive term is &amp;#8220;OSS/FS&amp;#8221;, which you can blame me for.
I starting writing about open source software / free software (OSS/FS)
many years ago, when such writings were much less common.
So for example, look at the title of my massive paper
&lt;a href=&quot;http://www.dwheeler.com/oss_fs_why.html&quot;&gt;&amp;#8220;Why open source software /
free software (OSS/FS)? Look at the Numbers!&amp;#8221;&lt;/a&gt;
At the time, there wasn&amp;#8217;t an obvious &amp;#8220;universal&amp;#8221; term, so I chose to use
&amp;#8220;OSS/FS&amp;#8221;, which was an obvious way to combine the two most common terms.
&amp;#8220;OSS/FS&amp;#8221; takes too long to pronounce, though, so it hasn&amp;#8217;t really caught on.
&lt;/p&gt;
&lt;p&gt;
Among the other terms, &amp;#8220;FLOSS&amp;#8221; (Free/Libre/Open-Source Software)
seems to have won the popularity contest
as a &amp;#8220;universal&amp;#8221; English term that nearly all can accept.
Google reports the approximate number of pages a phrase will return, so
it&amp;#8217;s a reasonable way to determine how popular a phrase is.
A quick search on Google (using English on 2008-12-08) shows these
popularity figures:
&amp;#8220;FLOSS software&amp;#8221; gets 1,570,000 hits,
&amp;#8220;Libre software&amp;#8221; gets 596,000 hits,
&amp;#8220;FOSS software&amp;#8221; gets 595,000 hits,
&amp;#8220;OSS/FS&amp;#8221; gets 193,000 hits, and
&amp;#8220;F/OSS software&amp;#8221; gets 66,200 hits.
Note that FLOSS adds the term &amp;#8220;libre&amp;#8221;; &amp;#8220;libre software&amp;#8221; or &amp;#8220;livre software&amp;#8221;
is widely used as the universal term in Romance
languages, so adding it helps clarify &lt;i&gt;which&lt;/i&gt; sense of &amp;#8220;free&amp;#8221; is meant.
The term &amp;#8220;FLOSS&amp;#8221; also hides the fact that some people prefer the original
spelling &amp;#8220;open source software&amp;#8221;, while others prefer to hyphenate it as
&amp;#8220;open-source software&amp;#8221;.
In context, &amp;#8220;FLOSS&amp;#8221; is unlikely to be confused with dental floss.
If you&amp;#8217;re an advocate who objects to that similarity,
just imagine that &amp;#8220;FLOSS cleans the gunk out&amp;#8221; :-).
&lt;/p&gt;
&lt;p&gt;
So, when speaking to a group that already uses &amp;#8220;open source software&amp;#8221; as
the universal term for such software, I&amp;#8217;ll use &amp;#8220;open source software&amp;#8221;.
I have no objection to &amp;#8220;open source software&amp;#8221; as the universal term;
it&amp;#8217;s a reasonable term, and my primary goal is understanding by my hearers.
I don&amp;#8217;t see a problem with using separate terms to describe people&amp;#8217;s
motivations, as opposed to terms for the software that they (co-)develop.
Thus, I can glibly say &amp;#8220;open source software is co-developed
by people and organizations who often have different motivations to do so;
those who develop it to promote freedom for end-users typically
term their members the &amp;#8216;Free Software Movement&amp;#8217;,
and those who develop it for engineering and business (cost-saving)
reasons may be referred to as the &amp;#8216;Open Source Movement&amp;#8217;&amp;#8221;.
I think that&amp;#8217;s perfectly acceptable as terminology; it&amp;#8217;s certainly
clear that different people and organizations can have different motivations
and yet can work together.
Many, many people use &amp;#8220;open source software&amp;#8221; as the universal term
for such software.
&lt;/p&gt;
&lt;p&gt;
But not all groups accept the term &amp;#8220;open source software&amp;#8221; as the
universal term for such software, and my writings on my website
cater to a variety of people.
You can&amp;#8217;t please everyone, but I&amp;#8217;d like to avoid unnecessarily
alienating people.
At the least, I&amp;#8217;d rather people object to the substance of my writing
instead of my word choice :-).
&lt;/p&gt;
&lt;p&gt;
So:
&lt;b&gt;I suggest using &lt;i&gt;&amp;#8220;FLOSS&amp;#8221;&lt;/i&gt; (Free/Libre/Open-source software)
instead of &amp;#8220;FOSS&amp;#8221; or &amp;#8220;F/OSS&amp;#8221; or &amp;#8220;OSS/FS&amp;#8221;&lt;/b&gt;
as the universal term for such software (in English).
It&amp;#8217;s easy to say, inclusive, and it seems to be the most popular of
those alternatives.
Many people use &amp;#8220;open source software&amp;#8221; or &amp;#8220;Free software&amp;#8221;
(with the funny capitalization)
as the universal term for such software, and that&amp;#8217;s fine by me.
But for material on my website, I intend to slowly migrate towards FLOSS
instead of my older term OSS/FS.
I&amp;#8217;ll leave OSS/FS in a few places (including titles)
so that people searching for it will
still find it, but at this point, I think the OSS/FS acronym is a fossil.
I&amp;#8217;ll tend to leave &amp;#8220;open source software&amp;#8221; where I use that term; typically
those are written for audiences where it&amp;#8217;s established practice to
use that term.
&lt;/p&gt;
&lt;p&gt;
Strictly speaking, &amp;#8220;Free software&amp;#8221; in the FSF sense is defined by the
&lt;a href=&quot;http://www.gnu.org/philosophy/free-sw.html&quot;&gt;Free Software Definition (FSD)&lt;/a&gt;,
and &amp;#8220;open source software&amp;#8221; is defined by the
&lt;a href=&quot;http://www.opensource.org/docs/definition.php&quot;&gt;Open Source Definition (OSD)&lt;/a&gt;.
In practice, a software license will typically either meet, or fail
to meet, both definitions.
This is hardly surprising; different dictionaries have different descriptions
of much simpler words.
The &lt;a href=&quot;http://www.gnu.org/philosophy/free-sw.html&quot;&gt;Free Software Definition&lt;/a&gt;
is &lt;b&gt;much&lt;/b&gt; simpler and easier to understand, and it gives a better
understanding of &lt;i&gt;why&lt;/i&gt; an end-user might want such a license.
So when describing what FLOSS is, I generally prefer to use the
simpler and clearer Free Software Definition.
If I&amp;#8217;m doing a technical analysis of a software license, I
require that &lt;i&gt;both&lt;/i&gt; definitions be met.
The FSD is better at explaining the overall concept, but the OSD 
has additional information that helps clarify it.
In other words, a software license must meet
&lt;i&gt;both&lt;/i&gt; definitions, or it&amp;#8217;s not a FLOSS license.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Tell the FTC: Eliminate software patents</title>
    <link>http://www.dwheeler.com/blog/2008/12/01#ftc-software-patent</link>
    <pubDate>Mon, 01 Dec 2008 17:27 GMT</pubDate>
    <!-- date: 2008-12-01 -->
    <description>
&lt;p&gt;
The
&lt;a href=&quot;http://www.ftc.gov/opa/2008/11/ipmarketplace.shtm&quot;&gt;U.S.
Federal Trade Commission (FTC) has announced the first of a possible series
of public hearings to &amp;#8220;explore the evolving market for intellectual
property (IP)&amp;#8221;&lt;/a&gt;. They&amp;#8217;ll begin December 5, 2008, in Washington, DC.
&lt;/p&gt;

&lt;p&gt;
Please let the FTC know that the U.S. should
&lt;a href=&quot;http://www.dwheeler.com/essays/software-patents.html&quot;&gt;&lt;b&gt;eliminate software patents!&lt;/b&gt;&lt;/a&gt;
The U.S. courts made the mistake of rewriting the laws to permit
software patents and business method patents, resulting in a
stifling of both competition and innovation.
Certainly, software patents have been harming
&lt;a href=&quot;http://www.dwheeler.com/oss_fs_why.html&quot;&gt;free/libre/open-source software (FLOSS)&lt;/a&gt;, but they&amp;#8217;ve
been harmful to proprietary software development too.
The
&lt;a href=&quot;http://www.ftc.gov/bc/workshops/ipmarketplace/&quot;&gt;
U.S. government is asking for comments&lt;/a&gt; - so please let them know about
the problems software patents cause, so that we can get rid of them!
&lt;/p&gt;

&lt;p&gt;
To help, I&amp;#8217;ve posted a web page titled
&lt;a href=&quot;http://www.dwheeler.com/essays/software-patents.html&quot;&gt;Eliminate Software Patents!&lt;/a&gt;.
This page points to many existing
papers and organizations that explain &lt;i&gt;why&lt;/i&gt; software patents should
be eliminated.
And it also lists some ways that, if they can&amp;#8217;t
eliminate the mistake, to at least reduce the damage of the mistake.
&lt;/p&gt;

&lt;p&gt;
I think such comments would be very much in line with their series.
They state that
&amp;#8220;The patent system has experienced significant change since the
&lt;a href=&quot;http://www.ftc.gov/os/2003/10/innovationrpt.pdf&quot;&gt;FTC
released its first IP Report in October 2003&lt;/a&gt;,
and more changes are under consideration&amp;#8230;
[changes include] decisions
on injunctive relief, patentability, and licensing issues&amp;#8230; [and]
there is new learning regarding the operation of the patent
system and its contribution to innovation and competition.&amp;#8221;
Even the FTC&amp;#8217;s original 2003 report noted how many people were opposed
to software patents.
&lt;/p&gt;

&lt;p&gt;
Please contact the FTC, and let them know that software patents should
be eliminated&amp;#8230;
and feel free to use any of these resources if you do contact them.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Kudos and Kritiques: &amp;#8216;Automated Code Review Tools for Security&amp;#8217; - and OSS</title>
    <link>http://www.dwheeler.com/blog/2008/11/04#automated-code-reviews-security</link>
    <pubDate>Tue, 04 Nov 2008 18:02 GMT</pubDate>
    <!-- date: 2008-11-04 -->
    <description>
&lt;p&gt;
The article
&lt;a href=&quot;http://www.cigital.com/papers/download/dec08-static-software-gem.pdf&quot;&gt;
&amp;#8220;Automated Code Review Tools for Security&amp;#8221; (by Gary McGraw)&lt;/a&gt;
has just been released to the web.
Officially, it will be published in &lt;i&gt;IEEE Computer&lt;/i&gt;&amp;#8217;s
December 2008 edition (though increasingly this kind of reference feels
like an anachronism!).
The article is basically a brief introduction to automated code review.
Here are a few kudos and kritiques (sic) of it, including a long
discussion about the meaning of &amp;#8220;open source software&amp;#8221; (OSS) that I think is
important to add.
&lt;/p&gt;
&lt;p&gt;
First, a few kudos.
The most important thing about this article is that it exists at all.
I believe that software developers need to increasingly use
static analysis tools to find security vulnerabilities,
and articles like this are needed to get the word out.
Yes, the current automated review tools for security have all sorts of problems.
These tools typically have many
false positives (reports that aren&amp;#8217;t really vulnerabilities),
they have many false negatives (they fail to report vulnerabilities
they should), they are sometimes
difficult to use, and their results are sometimes difficult to understand.
But static analysis tools are still necessary.
Software is getting larger, not smaller, because people keep increasing
their expectations for software functionality.
Security is becoming more important to software, not less, as more
critical functions depend on the software and most attackers focus on them.
Manual review is often too costly to apply (especially on
pre-existing software and in proprietary development),
and even when done it can miss &amp;#8216;obvious&amp;#8217; problems.
So in spite of current static analysis
tools&amp;#8217; problems, the rising size and development speed
of software will force many developers to use static analysis tools.
There isn&amp;#8217;t much of a practical alternative - so let&amp;#8217;s face that!
Some organizations (such as
&lt;a href=&quot;http://www.safecode.org/&quot;&gt;Safecode.org&lt;/a&gt;) don&amp;#8217;t adequately
emphasize this need for static analysis tools,
so I&amp;#8217;m glad to see the need for static analysis tools
is being emphasized here and elsewhere.
&lt;/p&gt;
&lt;p&gt;
I&amp;#8217;m especially glad for some of the points he makes.
He notes that &amp;#8220;security is not yet a standard part of the security
curriculum&amp;#8221;, and that &amp;#8220;most programming languages were not
designed with security in mind.. [leading to] common and often
exploited vulnerabilities.&amp;#8221;
Absolutely true, and I&amp;#8217;m glad he notes it.
&lt;/p&gt;
&lt;p&gt;
There are a number of issues and details the article doesn&amp;#8217;t cover.
For example, he mentions that &amp;#8220;major vendors in this space include
&lt;a href=&quot;http://www.coverity.com&quot;&gt;Coverity&lt;/a&gt;,
&lt;a href=&quot;http://www.fortify.com&quot;&gt;Fortify&lt;/a&gt;, and
&lt;a href=&quot;http://www.ouncelabs.com&quot;&gt;Ounce Labs&lt;/a&gt;&amp;#8221;;
I would have also included
&lt;a href=&quot;http://www.klockwork.com&quot;&gt;Klocwork&lt;/a&gt; (for
&lt;a href=&quot;http://www.klockwork.com/products/insight.asp&quot;&gt;Insight&lt;/a&gt;),
and I would have also noted at least the open source software program
&lt;a href=&quot;http://www.splint.org&quot;&gt;splint&lt;/a&gt;.
(Proprietary tools can analyze and improve OSS programs, by the way;
&lt;a href=&quot;http://scan.coverity.com/&quot;&gt;Coverity&amp;#8217;s &amp;#8216;open source quality&amp;#8217;&lt;/a&gt;,
and
&lt;a href=&quot;https://opensource.fortify.com&quot;&gt;Fortify&amp;#8217;s &amp;#8216;Java open review&amp;#8217;&lt;/a&gt;
projects specifically work to review many OSS programs.)
But since this is a simple introductory article, he has to omit much,
so such omissions are understandable.
I believe the article&amp;#8217;s main point was to explain briefly what static
analysis tools were, to encourage people to look into them;
from that vantage point, it does the job.
If you already understand these tools, you already know what&amp;#8217;s
in the article;
this is an article for people who are &lt;i&gt;not&lt;/i&gt; familiar with them.
&lt;/p&gt;
&lt;p&gt;
Now, a few kritiques. (The standard spelling is &amp;#8220;critiques&amp;#8221;, but I
can&amp;#8217;t resist using a funny spelling to match &amp;#8220;kudos&amp;#8221;.)
First, the article conflates &amp;#8220;static analysis&amp;#8221; with &amp;#8220;source code analysis&amp;#8221;,
a problem also noted on
&lt;a href=&quot;http://lambda-the-ultimate.org/node/3072&quot;&gt;Lambda the ultimate&lt;/a&gt;.
The text says &amp;#8220;static analysis tools - also called source code analyzers&amp;#8221; -
but this is not true.
There are two kinds of static analysis tools:
(1) Source analysis tools, and (2) binary/bytecode analysis tools.
There are already several static analysis tools that work on
binary or bytecode, and I expect to see more in the future.
Later in the text he notes that binary analysis is possible &amp;#8220;theoretically&amp;#8221;,
but it&amp;#8217;s not theoretical - people do that, right now.
Yes, it&amp;#8217;s true that source code analysis is more mature/common,
but don&amp;#8217;t ignore binary analysis.
Binary analysis can be useful; sometimes you don&amp;#8217;t have the source code,
and even when you do, it can be very useful to directly analyze the binary
(because it&amp;#8217;s the binary, not the source, that is actually run).
It&amp;#8217;s unfortunate that this key distinction was muddied.
So, be aware that &amp;#8220;static analysis tools&amp;#8221; covers the analysis of both
source and binary/byte code - and there are advantages of analyzing each.
&lt;/p&gt;
&lt;p&gt;
Second, McGraw says that this is a &amp;#8220;relatively young&amp;#8221; discipline.
That&amp;#8217;s sort-of correct in a broad sense, but it&amp;#8217;s more complicated than that,
and it&amp;#8217;s too bad that was glossed over.
The basic principles of secure software development are actually
quite old; one key paper was
&lt;a href=&quot;http://web.mit.edu/Saltzer/www/publications/protection/&quot;&gt;
Saltzer and Schroeder&amp;#8217;s 1975 paper&lt;/a&gt; which identified key
design principles for security.
Unfortunately, while security experts often knew how to develop
secure software, they tended to not write that information in a form that
ordinary application software developers could use.
To the best of my knowledge, my book
&lt;a href=&quot;http://www.dwheeler.com/secure-programs/&quot;&gt;Secure Programming for Linux and Unix HOWTO&lt;/a&gt; (1999-2003)
was the &lt;i&gt;first&lt;/i&gt; book for software developers
(not attackers or security specialists) on how to develop
application software that can resist attack.
And unfortunately, this information is still not taught in high school
(when many software developers learn how to write software),
nor is it taught in most undergraduate schools.
&lt;/p&gt;
&lt;p&gt;
Third, I would like to correct an error in the article:
&lt;b&gt;ITS4 has never been released as open source&lt;/b&gt;, even
though the article claims it was.
The article claims that &amp;#8220;When we released ITS4 as an open source tool,
our hope was that the world would participate in helping to
gather and improve the rule set.  Although more than 15,000 people
downloaded ITS4 in its first year, we never received even one rule to add
to its knowledge base&amp;#8221;.
Is it really true, that open source software doesn&amp;#8217;t get significant help?
Well, we need to know what &amp;#8220;open source&amp;#8221; means.
&lt;/p&gt;
&lt;p&gt;
What is &amp;#8220;open source software&amp;#8221;?
It&amp;#8217;s easy to show that the Open Source Initiative (OSI)&amp;#8217;s
&lt;a href=&quot;http://www.opensource.org/docs/osd&quot;&gt;Open Source Definition&lt;/a&gt;,
or the Free Software Foundation&amp;#8217;s simpler
&lt;a href=&quot;http://www.gnu.org/philosophy/free-sw.html&quot;&gt;Free
Software Definition&lt;/a&gt;, are the usual meanings
for the term &amp;#8220;open source software&amp;#8221;.
Just search for &amp;#8220;open source software&amp;#8221; on Google - after all, a Google
search will rank how many people point to the site with that term,
and how trusted they are.
The top ten sites for this term
include SourceForge, the Open Source Initiative (including their definition),
the Open Source Software Institute, and (surprise!) me
(due to my paper &lt;a href=&quot;http://www.dwheeler.com/oss_fs_why.html&quot;&gt;Why Open Source Software / Free Software (OSS/FS, FLOSS, or FOSS)? Look at the Numbers!&lt;/a&gt;).
The top sites tend to agree on the definition of &amp;#8220;open source software&amp;#8221;, e.g.,
SourceForge specifically requires that licenses meet the OSI&amp;#8217;s
open source definition.
I tend to use the Free Software Definition, because it&amp;#8217;s simpler, but
I would also argue that any open source software license would need
to meet &lt;i&gt;both&lt;/i&gt; definitions to be generally acceptable.
Other major sites that are universally acknowledged as
supporting open source software all agree on this basic definition.
For example, the
&lt;a href=&quot;http://www.debian.org/social_contract&quot;&gt;Debian
Free Software Guidelines&lt;/a&gt;
were the basis of the Open Source Definition, and
&lt;a href=&quot;http://fedoraproject.org/wiki/Licensing&quot;&gt;Fedora&amp;#8217;s licensing&lt;/a&gt; and
&lt;a href=&quot;http://fedoraproject.org/wiki/Packaging/LicensingGuidelines&quot;&gt;licensing guidelines&lt;/a&gt; reference both OSI and FSF
(and make clear that open source software must be licensed
in a way that lets anyone use them).
&lt;a href=&quot;http://code.google.com/hosting/&quot;&gt;Google Code&lt;/a&gt;
accepts only a limited number of licenses, all of which meet these criteria.
The
&lt;a href=&quot;http://iase.disa.mil/policy-guidance/oss-in-dodmemo.pdf&quot;&gt;
U.S. Department of Defense&amp;#8217;s 2003 policy latter, &amp;#8220;Open Source Software
in the DoD&amp;#8221;&lt;/a&gt; essentially uses the Free Software Definition to define the
term; it says open source software
&amp;#8220;provides everyone the rights to use, modify, and
redistribute the source code of the software&amp;#8221;.
In short, the phrase &amp;#8220;open source software&amp;#8221; has a widely-accepted
and specific meaning.
&lt;/p&gt;
&lt;p&gt;
So let&amp;#8217;s look at ITS4&amp;#8217;s license.
As of November 3, 2008, the
&lt;a href=&quot;http://www.cigital.com/its4/download.php&quot;&gt;ITS4 download site&lt;/a&gt;&amp;#8217;s
license hasn&amp;#8217;t changed from its original Feb 17, 2000 license.
It turns out that the ITS4 license clearly &lt;b&gt;forbids&lt;/b&gt; many commercial uses.
In fact, their license is clearly labelled a &amp;#8220;NON-COMMERCIAL LICENSE&amp;#8221;,
and it states that Cigital has &amp;#8220;exclusive licensing rights
for the technology for commercial purposes.&amp;#8221;
That&amp;#8217;s a tip-off that there is a problem; as I&amp;#8217;ve explained elsewhere,
&lt;a href=&quot;http://www.dwheeler.com/essays/commercial-floss.html&quot;&gt;open source
software is commercial software&lt;/a&gt;.
License section 1(b) says
&amp;#8220;You may not use the program for commercial purposes under some circumstances.  Primarily, the program must not be sold commercially as a separate product, as part of a bigger product or project, or used in third party work-for-hire situations&amp;#8230;  Companies are permitted to use this program as long as it is not used for revenue-generating purposes&amp;#8230;.&amp;#8221;.
In section 2,
&amp;#8220;(a) Distribution of the Program or any work based on the Program by a commercial organization to any third party is prohibited if any payment is made in connection with such distribution, whether directly&amp;#8230; or indirectly&amp;#8230;&amp;#8221;.
Cigital has a legal right to release software in just about
any way it wants to; that&amp;#8217;s not what I&amp;#8217;m trying to point out.
What I&amp;#8217;m trying to make clear is that
there are significant limitations on use and distribution of ITS4, due
to its license.
&lt;/p&gt;
&lt;p&gt;
This means that ITS4 is clearly &lt;b&gt;not&lt;/b&gt; open source software.
The
&lt;a href=&quot;http://www.opensource.org/docs/osd&quot;&gt;Open Source Definition&lt;/a&gt;
requires that an open source software license have
(#5) No Discrimination Against Persons or Groups, and
(#6) No Discrimination Against Fields of Endeavor.
The detailed text for #6 even says:
&amp;#8220;The license must not restrict anyone from making use of the program in a specific field of endeavor. For example, it may not restrict the program from being used in a business, or from being used for genetic research.&amp;#8221;
Similarly, the
&lt;a href=&quot;http://www.gnu.org/philosophy/free-sw.html&quot;&gt;
Free Software Definition&lt;/a&gt;
requires the &amp;#8220;freedom to run the program, for any purpose&amp;#8221; (freedom 0).
ITS4 might be described as a &amp;#8220;source available&amp;#8221;, &amp;#8220;shared source&amp;#8221;, or
&amp;#8220;open box&amp;#8221; program - but it&amp;#8217;s not open source.
&lt;a href=&quot;http://www.dwheeler.com/essays/commercial-floss.html&quot;&gt;Real open source software licenses permit arbitrary commercial use&lt;/a&gt;;
they are designed to &lt;i&gt;include&lt;/i&gt; commercial users, not exclude them.
&lt;/p&gt;
&lt;p&gt;
It&amp;#8217;s &lt;b&gt;absurd to complain&lt;/b&gt;
that &amp;#8220;no one helped this open source project&amp;#8221;
&lt;b&gt;when the project was never an open source project&lt;/b&gt;.
Indeed, even if you release software with an OSS license, there
is no guarantee that you&amp;#8217;ll get support (through collaboration).
No one is &lt;i&gt;obligated&lt;/i&gt; to collaborate with you if you release OSS -
you have to convince others that they should collaborate.
And conversely, you have every legal right to &lt;b&gt;not&lt;/b&gt; release
under an OSS license.
But OSS licenses are typically designed to encourage collaboration;
having a license that is &lt;b&gt;not&lt;/b&gt; an OSS license unsurprisingly
discourages such collaboration.
As I point out in my essay
&lt;a href=&quot;http://www.dwheeler.com/essays/gpl-compatible.html&quot;&gt;&amp;#8220;Make Your Open Source Software GPL-Compatible. Or Else&amp;#8221;&lt;/a&gt;, if you want OSS collaboration
you really need to pick from one of the few standard GPL-compatible licenses,
for reasons I explain further in that essay.
&lt;/p&gt;
&lt;p&gt;
This matters.
My tool &lt;a href=&quot;http://www.dwheeler.com/flawfinder&quot;&gt;flawfinder&lt;/a&gt;
does a similar task to ITS4, but it is
open source software (released under
the world&amp;#8217;s most popular OSS license, the GPL).
And I &lt;b&gt;did&lt;/b&gt; get a lot of collaborative help in developing flawfinder,
as you can tell from the
&lt;a href=&quot;http://www.dwheeler.com/flawfinder/ChangeLog&quot;&gt;Flawfinder ChangeLog&lt;/a&gt;.
Thus, it &lt;b&gt;is&lt;/b&gt; possible to have OSS projects that
analyze programs and receive many contributions.
Here&amp;#8217;s a partial list of flawfinder contributors:
Jon Nelson,
Marius Tomaschewski,
Dave Aitel,
Adam Lazur,
Agustin.Lopez,
Andrew Dalgleish,
Joerg Beyer,
Jose Pedro Oliveira,
Jukka A. Ukkonen,
Scott Renfro,
Sascha Nitsch,
Sebastien Tandel,
Steve Kemp (lead of the Debian Security Auditing Project),
Jared Robinson,
Stefan Kost,
and
Mike Ruscher.
That&amp;#8217;s at least 17 people co-developing the software!
Not all of these contributors added to the vulnerability database,
but I know that at least Dave Aitel and Jaren Robinson added new rules,
Stefan Kost suggested specific new rules
(though I don&amp;#8217;t think he wrote the code for it),
and that Agustin Lopez and Christian Biere
caused changes in the vulnerability database&amp;#8217;s reporting information.
There may have been more; in a collaborative process, it&amp;#8217;s sometimes difficult
to fully give credit to everyone who deserves it, and I
don&amp;#8217;t have time to go through all of the records to determine the minutia.
It&amp;#8217;d be a mistake to think that only database improvements matter, anyway;
other user-contributed improvements were useful!
These include changes that enabled
analysis of patch files
(so you can limit reporting to the lines that have changed),
made the reports clearer, packaged the software (for easy installation),
and fixed various bugs.
&lt;/p&gt;
&lt;p&gt;
Obviously, releasing under a true OSS license helped &lt;i&gt;immensely&lt;/i&gt; in
getting contributions - especially if ITS4 is our point of comparison.
For example, since flawfinder is an OSS program, it was easily incorporated
into a variety of OSS Linux distributions, making it easier to use.
I also suspect that
some of the people most interested in using this kind of
program were people paid to evaluate programs - but many of these uses
were forbidden by the default ITS4 license.
&lt;/p&gt;
&lt;p&gt;
In short, a non-OSS program didn&amp;#8217;t have much collaborative help, while
a similar OSS program got &lt;i&gt;lots&lt;/i&gt; of collaborative help&amp;#8230; and
&lt;b&gt;that&lt;/b&gt; is an important lesson.
There is a difference between &amp;#8220;really being open source software&amp;#8221; and
&amp;#8220;sort of openish but not really&amp;#8221;.
If you look at ITS4 version 1.1.1, its CHANGES file does list a few external
contributions, but they are primarily trivial tweaks or
portability changes (to get it to work at all).
McGraw himself admits that ITS4 didn&amp;#8217;t get any new
new rules in its first year.
In contrast, OSS flawfinder added user-created rules
within 6 months of its initial release, and over time the OSS program
had lots of functionality provided by other co-developers.
I don&amp;#8217;t want McGraw&amp;#8217;s incorrect comment about &amp;#8220;open source&amp;#8221;
go unchallenged, when there&amp;#8217;s an important lesson to be learned instead.
&lt;/p&gt;
&lt;p&gt;
That said, my thanks to McGraw for noting flawfinder (and RATS), as
well as ITS4.
Indeed, my thanks to John Viega, McGraw, and others for developing ITS4
and the corresponding ACSAC paper - I think ITS4 was an important
step in getting people to use and develop static analysis tools for security.
I also agree with McGraw that deeper analysis of programs is the
way of the future.
Tools that focus on simple lexical analysis (like ITS4, flawfinder, and RATS)
have their uses, but there is much that they cannot do, which is why
tool developers are now focusing on deeper analysis approaches.
Static analysis tools that examine a program in more detail
(like &lt;a href=&quot;http://www.splint.org&quot;&gt;splint&lt;/a&gt;)
can do much that simple tools (based on lexical analysis) cannot.
&lt;/p&gt;
&lt;p&gt;
Most importantly, McGraw and I agree on the conclusion:
&amp;#8220;Static analysis for security should be applied regularly as part
of any modern software development process.&amp;#8221;
We need to get that word out to where software is really developed.
Static analysis not the &lt;i&gt;only&lt;/i&gt; thing that people need to do, but it&amp;#8217;s
an important part.
Yes, static analysis tools aren&amp;#8217;t perfect.
But static analysis tools can significantly help
develop software that has real security.
&lt;!-- My thanks to Marty Stytz, who reviewed this commentary for me. --&gt;
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Internet Wishlist</title>
    <link>http://www.dwheeler.com/blog/2008/10/29#internet-2008</link>
    <pubDate>Wed, 29 Oct 2008 19:24 GMT</pubDate>
    <!-- date: 2008-10-29 -->
    <description>
&lt;p&gt;
It&amp;#8217;s election season in the United States, a fact that&amp;#8217;s rather
hard to miss in Northern Virginia (where I live).
&lt;a href=&quot;http://www.popsci.com/scitech/article/2008-10/dear-mr-president&quot;&gt;
Popular Science is running a letter by Daniel Engber (of Slate Magazine)&lt;/a&gt;
in which he offers the US Presidential nominees advice on using
the full potential of the Internet upon their election into office.
&lt;a href=&quot;http://politics.slashdot.org/article.pl?sid=08/10/28/2325222&quot;&gt;
This letter is being discussed in Slashdot&lt;/a&gt;.
&lt;a href=&quot;http://www.internetevolution.com/author.asp?doc_id=166888&amp;f_src=securitysentinel&quot;&gt;Terry Sweeney believes that issues related to the
Internet Won&amp;#8217;t Matter&lt;/a&gt;
in this election, and unfortunately, I think he&amp;#8217;s right.
But still, we can hope, can&amp;#8217;t we?
&lt;/p&gt;
&lt;p&gt;
In any case, election season is a good excuse to think of helpful things
that the U.S. government could do
relating to the Internet and related IT technology.
Engber&amp;#8217;s letter certainly got me thinking that direction.
I think it&amp;#8217;s useful to try to think of such things, because by examining
and discussing them, some of them might come to pass.
So in that spirit, here&amp;#8217;s my candidate list:
&lt;ol&gt;
&lt;li&gt;&lt;b&gt;Make spam illegal&lt;/b&gt;. Make sending unsolicited bulk email (spam) illegal, and in particular, require that people OPT-IN to receive messages sent in bulk. The current &amp;#8216;opt-out&amp;#8217; system in the U.S. is silly, and always was. &lt;a href=&quot;http://www.uic.edu/depts/accc/newsletter/adn29/spam.html&quot;&gt;As essentially all information about spam notes&lt;/a&gt;, &amp;#8220;Never Reply To Spam&amp;#8221;.  &amp;#8220;Don&amp;#8217;t [reply] to the spam message or [try] to send email to an email address given in the body of the spam and asking to be removed from the mailing list&amp;#8230;  spammers are much too sophisticated now for replies to affect them at all. And the From: addresses in spam messages are usually faked anyway.&amp;#8221; Responding &amp;#8220;just identifies you as a real person who read their message&amp;#8221;. Europeans have the more sensible opt-in system. Laws do make a differenace; far more spam is U.S. than European in origin, due to the U.S.&amp;#8217;s lax laws. It&amp;#8217;s not that spam hard to define; if more than 1000 people (say) receive it, and they didn&amp;#8217;t sign up for it (e.g., by signing up for a mailing list), it&amp;#8217;s spam. A law will &lt;i&gt;not&lt;/i&gt; solve everything, but it would help; technical measures can only go so far, and need laws to help make them work.  The U.S. currently protects fax machines from spam, and that &lt;i&gt;has&lt;/i&gt; worked!  The current &lt;a href=&quot;http://www.cybertelecom.org/spam/&quot;&gt;CAN-SPAM&lt;/a&gt; law legalizes spam - and thus is a sick joke. It&amp;#8217;s time to make it illegal, to protect all of our inboxes.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Require public access (free via web) to federally-funded research&lt;/b&gt;. Put &lt;i&gt;all&lt;/i&gt; federally-funded unclassified research papers on the web, with no fees or sign-ins, so that a Google search can find it. NIH is already doing this; see the &lt;a href=&quot;http://publicaccess.nih.gov/&quot;&gt;NIH public access policy&lt;/a&gt;.  NIH isn&amp;#8217;t perfect; their &amp;#8220;12 month&amp;#8221; period is silly (the web publication should occur immediately).  Still, it&amp;#8217;s an improvement, and it&amp;#8217;s absurd that this is limited to NIH; federally-funded research should be published government-wide, no matter what arm it came from.  Why should the public pay for research, then pay again to read it? Just imagine how much faster research could go if &lt;i&gt;anyone&lt;/i&gt; could quickly click and review the latest research.  Just imagine how much better the public could be informed if they could easily read U.S. research on a topic&amp;#8230; instead of only having the flim-flam artists.  I think I could make a good case that in academic research, the word &amp;#8220;published&amp;#8221; is increasingly meaning &amp;#8220;accessible via Google&amp;#8221;; anything Google can&amp;#8217;t find doesn&amp;#8217;t exist to many people.  It&amp;#8217;s shameful how certain publishers effectively steal U.S. research for private gain through monopolistic publishing contracts - they do not pay for the research, and typically they don&amp;#8217;t even pay the researchers or reviewers! If you want exclusive rights to publish research, then you should pay all the costs of performing the research. I can see a case where the publisher footed 50% of the research bill (not just the paper-writing costs) and got a one-year publication delay, but the &amp;#8220;owning&amp;#8221; of research papers is indefensible.  If you accept government money - and the government is of the people, by the people, and for the people - then the people should be receiving the research results. Let&amp;#8217;s get rid of the unnecessary intermediaries and &amp;#8220;poll taxes&amp;#8221; on U.S. funded research.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Federally-developed unclassified software: Open source software by default&lt;/b&gt;. By default, if the government funds unclassified software development (e.g., via research), that software should be released as open source software (under some common license). That way, anyone can use it, modify, and redistribute it (in modified or unmodified form).  Again, why should the public pay for software, then pay again to use it? Currently, if researcher B wants to continue work of researcher A, both of which were paid via government funds, researcher B typically has to re-implement what researcher A did - and that can stop the research before it begins.  This even applies to the government itself; often the government pays for re-development of the same software, because there&amp;#8217;s no public information on software the government has already paid to develop.  If the funds are mixed, try to break it down into pieces; if that won&amp;#8217;t work, release the mixed-funding software after some fixed time (the U.S. DoD has a 5-year clock, starting at contract signing, for when the DoD &lt;i&gt;could&lt;/i&gt; release some mixed-funding software as open source).  If you are starting a proprietary software company, and want exclusive rights to developed software, then go to the bank or a venture capitalist (VC). The government is &lt;i&gt;not&lt;/i&gt; a VC, so don&amp;#8217;t expect it to be one.  Exceptions will be needed&amp;#8230; but they should be exceptions, not the rule.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Increase funding on computer security&lt;/b&gt;. Some is done now, of course, but it pales compared to the problem. I guess this could be construed as being self-serving; after all, I try to improve computer security as a living.  But the reason I do it is because I believe in it.  There are many tools that enhance our muscles (cars, jackhammers, etc.), but essentially only one tool that enhances our mind: Computers.  Which is one reason why computers are everywhere. Yet their very ubiquity is a problem, because they were generally not designed to be secure against determined attackers.  I believe governments should not try to do all things; there are a lot of things government just isn&amp;#8217;t good at.  But defense is an area that is hard to do on an individual or business-by-business basis, yet we need it collectively - and it&amp;#8217;s those kinds of problems that governments can help with.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Increase formal methods research&lt;/b&gt;.  The world is globalizing, and we increasingly depend on software.  Testing is not a good way to make (or verify) high quality software; you can&amp;#8217;t even fully test the trivial program &amp;#8220;add 3 64-bit numbers&amp;#8221; in less time than the age of the universe.  In the long run, if we want really high levels of quality for software, we need better approaches, and there&amp;#8217;s one obvious one: Formal methods.  Formal methods apply mathematical approaches to software development. There are a lot of reasons people don&amp;#8217;t use them today in typical software development projects, though.  We need research to help turn those reasons into the past tense for most projects.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Drop the DMCA&amp;#8217;s anti-circumvention measures&lt;/b&gt;. The anti-circumvention stuff is just nonsense; they don&amp;#8217;t fight piracy, but they do try to inhibit legal activities - and thus encourage lawlessness.  &lt;a href=&quot;http://xkcd.com/488/&quot;&gt;XKCD&amp;#8217;s &amp;#8220;Steal this comic&amp;#8221;&lt;/a&gt; shows the nonsense that Digital Restrictions Management (DRM) schemes bring, ones that the DMCA is absurdly trying to prop up.  As far as I can tell, people are still making music and movies, even though the DRM schemes (and the anti-circumvention measures that prop them up) are a failure. Anti-circumvention measures make obviously lawful uses illegal (e.g., viewing DVDs on a Linux machine or putting your DVDs on your hard drive) - encouraging everyone to break the law.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Drop software patents&lt;/b&gt;.  Software patents have been a massive unjustified government intervention in the market.  There is still no evidence that they are an improvement, and a &lt;i&gt;lot&lt;/i&gt; of evidence that they are causing serious market failures.  Save massive amounts of government money by getting rid of the whole useless bureaucracy.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Fix copyright laws so that they make sense to normal people&lt;/b&gt;.  I believe that the current copyright laws were written under the assumption that only large publishers, with reams of lawyers, needed to understand them.  Now 9-year-olds need to understand them&amp;#8230; except that they&amp;#8217;re completely nonsensical.  &amp;#8220;Normal&amp;#8221; people expect that short extractions aren&amp;#8217;t copyright infringements, yet current U.S. law and court cases endorse such nonsensical interpretations (e.g., Bridgeport Music Inc. v. Dimension Films, 410 F.3d 792 (6th Cir. 2005) seems to say that even 3 notes can be an infringment).  Strictly speaking, many Youtube videos break the law, even when a normal person would expect that the use would be okay.  The term lengths of copyright far exceed the minimum necessary to obtain such works (which should be the criteria), and &amp;#8220;fair use&amp;#8221; needs to be clearer and more expansive. The penalties are also absurd; I disapprove of illegal copying, but the current penalties ($750 for a $1 song??) are so disproportionate that they probably violate the U.S. Constitution&amp;#8217;s 8th amendment (&amp;#8220;Excessive bail shall not be required, nor excessive fines imposed, nor cruel and unusual punishments inflicted.&amp;#8221;).  I believe that copyright law is in principle a good idea, but it sure isn&amp;#8217;t working in practice like it&amp;#8217;s supposed to.  See &lt;a href=&quot;http://www.law.duke.edu/cspd/comics/&quot;&gt;Tales from the Public Domain: Bound by Law&lt;/a&gt; for an interesting perspective on this. For a specific example, I think that anything &lt;i&gt;not&lt;/i&gt; marked by its author as copyrighted should be in the public domain; currently every jot and tiddle on the Internet is &amp;#8220;copyrighted&amp;#8221; by someone, making it nigh-impossible to keep track of all the claims over rights.  It used to be that way - there&amp;#8217;s no reason it couldn&amp;#8217;t be again.  A much shorter copyright term would be helpful, too - something &lt;i&gt;within&lt;/i&gt; people&amp;#8217;s lifetimes.  In the past, publishers got disproportionate control over the process of modifying the copyright laws. We need to fix these laws so that they &lt;i&gt;balance&lt;/i&gt; the needs of creators, publishers/distributors, and recipients. They need to be very simple, clear, and fair, because with the Internet, 9-year-olds &lt;i&gt;can and do&lt;/i&gt; become publishers.&lt;/li&gt; 
&lt;/ol&gt;
&lt;/p&gt;
&lt;p&gt;
So, there&amp;#8217;s my Christmas list.
Some of them don&amp;#8217;t even cost money; they simply remove bad laws, and
actually &lt;i&gt;save&lt;/i&gt; money.
This is my &lt;i&gt;personal&lt;/i&gt; list, not influenced by my employer, my pets,
and so on.
Perhaps this list (and others like it) will start the ball rolling.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Solved: Why is ESC so big?</title>
    <link>http://www.dwheeler.com/blog/2008/10/23#why-is-esc-big</link>
    <pubDate>Thu, 23 Oct 2008 18:40 GMT</pubDate>
    <!-- date: 2008-10-23 -->
    <description>
&lt;p&gt;
In my post
&lt;a href=&quot;http://www.dwheeler.com/blog/2008/10/22/#development-cost-linux-2008&quot;&gt;
Estimating the Total Development Cost of a Linux Distribution&lt;/a&gt;,
I noted that one of Fedora 9&amp;#8217;s largest components was
Enterprise Security Client (ESC), and wondered why
ESC would be so big.
After all, a security client should be small - not large.
&lt;/p&gt;
&lt;p&gt;
I just got the answer from Rahul Sundaram of the Fedora project,
who asked internally.
It turns out that ESC currently includes its own copy of
&lt;a href=&quot;https://developer.mozilla.org/en/XULRunner&quot;&gt;XULRunner&lt;/a&gt;.
XULRunner essentially provides a library and infrastructure for running
&amp;#8220;XUL+XPCOM&amp;#8221; applications such as Firefox, Thunderbird, and ESC.
You can
&lt;a href=&quot;http://www.redhat.com/docs/manuals/cert-system/7.3/html/Enterprise_Security_Client_Guide/Enterprise_Security_Client_Configuration-Enterprise_Security_Client_File_Locations.html&quot;&gt;confirm this using the on-line ESC documentation&lt;/a&gt;.
This is clearly not optimal; as I noted in a previous blog entry,
&lt;a href=&quot;http://www.dwheeler.com/blog/2008/09/19/#use-system-libraries&quot;&gt;
developers should use system libraries, and not create their own local
copies&lt;/a&gt;.
Rahul says that the
&amp;#8220;the developers are currently working on making it use the system
copy[,] which should drop down the size considerably&amp;#8221;.
&lt;/p&gt;
&lt;p&gt;
So ESC isn&amp;#8217;t really that big - it&amp;#8217;s just that ESC creates its own
local copy of a massive infrastructure.
This is obviously not great for security,
since there&amp;#8217;s a higher risk that bugs fixed in the real XULRunner
would not be fixed in ESC&amp;#8217;s local copy.
But this appears to be a temporary issue; once Fedora&amp;#8217;s version of
ESC switches to the system XULRunner, the problem will disappear.
&lt;/p&gt;
&lt;p&gt;
By the way, if you&amp;#8217;re interested in the whole &amp;#8220;measuring Linux&amp;#8217;s size&amp;#8221; thing,
you should definitely take a look at the past measurements of Debian.
&lt;a href=&quot;http://www.dwheeler.com/sloc/&quot;&gt;My page on counting Source
Lines of Code (SLOC)&lt;/a&gt; includes links and summaries of that work.
It&amp;#8217;s neat stuff!
My thanks to
Jesús M. González-Barahona, Miguel A. Ortuño Pérez, Pedro de las Heras Quirós,
José Centeno González, Vicente Matellán Olivera,
Juan-José Amor-Iglesias, Gregorio Robles-Martínez, and Israel Herráiz-Tabernero
for doing that.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Estimating the Total Development Cost of a Linux Distribution</title>
    <link>http://www.dwheeler.com/blog/2008/10/22#development-cost-linux-2008</link>
    <pubDate>Wed, 22 Oct 2008 19:47 GMT</pubDate>
    <!-- date: 2008-10-22 -->
    <description>
&lt;p&gt;
There&amp;#8217;s a new and interesting paper from the Linux Foundation that
estimates the total development cost of a Linux distro.
Before looking at it, some background would help&amp;#8230;
&lt;/p&gt;

&lt;p&gt;
In 2000 and 2001 I published the first estimates of a GNU/Linux distribution&amp;#8217;s
development costs.
The second study (released in 2001, lightly revised in 2002) was titled
&lt;a href=&quot;http://www.dwheeler.com/sloc/redhat71-v1/redhat71sloc.html&quot;&gt;More than a Gigabuck&lt;/a&gt;.
That study
analyzed Red Hat Linux 7.1 as a representative GNU/Linux distribution,
and found that it would cost over $1 billion (over a Gigabuck)
to develop this GNU/Linux distribution by conventional proprietary means
in the U.S. (in year 2000 U.S. dollars).
It included over 30 million physical source lines of code (SLOC),
and had it been developed using conventional proprietary means, it would
have taken 8,000 person-years of development time to create.
My later paper
&lt;a href=&quot;http://www.dwheeler.com/essays/linux-kernel-cost.html&quot;&gt;
Linux Kernel 2.6: It&amp;#8217;s Worth More!&lt;/a&gt; focused on how to estimate the
development costs for just the Linux kernel
(this was picked up by &lt;a href=&quot;http://www.groklaw.net/article.php?story=20041012233246869&quot;&gt;Groklaw&lt;/a&gt;).
&lt;/p&gt;

&lt;p&gt;
The Linux Foundation has just re-performed this analysis with Fedora 9,
and released it as
&lt;a href=&quot;http://www.linuxfoundation.org/publications/estimatinglinux.php&quot;&gt;
&amp;#8220;Estimating the Total Development Cost of a Linux Distribution&amp;#8221;&lt;/a&gt;.
&lt;a href=&quot;http://linux-foundation.org/weblogs/press/2008/10/21/linux-foundation-publishes-study-estimating-the-value-of-linux/&quot;&gt;
Here&amp;#8217;s their press release&lt;/a&gt;.
I&amp;#8217;d like to thank the authors (Amanda McPherson, Brian Proffitt,
and Ron Hale-Evans), because they&amp;#8217;ve reported a lot of interesting
information.
&lt;/p&gt;

&lt;p&gt;
For example, they found that it would take approximately 
$10.8 billion to rebuild the Fedora 9 distribution in today&amp;#8217;s dollars;
it would take $1.4 billion to develop just the Linux kernel alone.
This isn&amp;#8217;t the &lt;i&gt;value&lt;/i&gt; of the distribution;
typically people won&amp;#8217;t write software unless the software had more
value to them than what it cost them (in time and effort) to write it.
They state that quite clearly in the paper;
they note that these numbers estimate
&amp;#8220;how much it would cost to develop the software in a Linux distribution today,
from scratch. It’s important to note that this estimates the cost but not
the value to the greater ecosystem&amp;#8230;&amp;#8221;.
To emphasize that point, the authors reference a 2008 IDC study
(&amp;#8220;The Role of Linux Commercial Servers and Workloads&amp;#8221;) which claims
that Linux represents a $25 billion ecosystem.
I think IDC&amp;#8217;s figure is (in fact) a gross underestimation of
the ecosystem &lt;i&gt;value&lt;/i&gt;, understandably so (ecosystem value
is very hard to measure).
Still, the cost to &lt;i&gt;redevelop&lt;/i&gt; a system is a plausible lower bound
for the value of something (as long as people keep using it).
More importantly, it clearly proves that very large and sophisticated systems
can be developed as free-libre / open source software (FLOSS).
&lt;/p&gt;

&lt;p&gt;
They make a statement about me that I&amp;#8217;d like to expand on:
&amp;#8220;[Wheeler] concluded—as we did—that Software Lines of Code is
the most practical method to determine open source software value
since it focuses on the end result and not on per-company or
per-developer estimates.&amp;#8221;
That statement is quite true, but please let me explain why.
Directly measuring the amount of time and money spent in development would
be, by far, the best way of finding those numbers.
But few developers would respond to a survey requesting that information,
so direct measurement is completely impractical.
Thus, using well-known industry models is the best &lt;i&gt;practical&lt;/i&gt;
approach to doing so, in spite of their limitations.
&lt;/p&gt;

&lt;p&gt;
I was delighted with their section on the
&amp;#8220;Limitations and Advantages to this Study&amp;#8217;s Approach&amp;#8221;.
All studies have limitations, and I think it&amp;#8217;s much better to
acknowledge them than hide them.
They note several reasons why this approach grossly
underestimates the &lt;i&gt;real&lt;/i&gt; effort in developing a distribution,
and I quite agree with them.
In particular: (1) collaboration often takes additional time
(though it often produces better results because you see all sides);
(2) deletions are work yet they are not counted;
(3) &amp;#8220;bake-offs&amp;#8221; to determine the
best approach (where only the winner is included) produce great results
but the additional efforts for the alternatives aren&amp;#8217;t included in the
estimates.
(I noted the bake-off problem in my
&lt;a href=&quot;http://www.dwheeler.com/essays/linux-kernel-cost.html&quot;&gt;paper on
the Linux kernel&lt;/a&gt;.)
They note that some drivers aren&amp;#8217;t often used, but I don&amp;#8217;t see that as
a problem; after all, it still took effort to develop them, so it&amp;#8217;s valid
to include them in an effort estimate.
Besides, one challenge to creating an operating system is this very issue -
to become useful to many, you must develop a large number of drivers - even
though many of the drivers have a relatively small set of users.
&lt;/p&gt;

&lt;p&gt;
This is &lt;i&gt;not&lt;/i&gt; a study of &amp;#8220;all FLOSS&amp;#8221;; many
FLOSS programs are not included in Fedora (as they note in their limitations).
Others have examined Debian and the Perl CPAN library using my approach
(see &lt;a href=&quot;http://www.dwheeler.com/sloc/&quot;&gt;my page on SLOC&lt;/a&gt;), and
hopefully someday someone will actually try to measure &amp;#8220;all FLOSS&amp;#8221;
(good luck!!).
However, since the Linux Foundation measured a
descendent of what I used for my original analysis,
it&amp;#8217;s valid to examine what&amp;#8217;s happened to the size
of this single distribution over time.
That&amp;#8217;s really interesting, because that lets us examine overall trends.
So let&amp;#8217;s take advantage of that!
In terms of physical source lines of code (SLOC) we have:
&lt;pre&gt;
Distribution         Year   SLOC(million)
Red Hat Linux 6.2    2001    17
Red Hat Linux 7.1    2002    30
Fedora 9             2008   204
&lt;/pre&gt;
If Fedora was growing linearly, the first two points estimate a rate of
13MSLOC/year, and Fedora 9 would have 108 MSLOC (30+6*13).
Fedora 9 is almost twice that size, which shows clearly that there&amp;#8217;s
exponential growth.
Even if you factored in the month of release (which I haven&amp;#8217;t done), I
believe you&amp;#8217;d still have clear evidence of exponential growth.
This observation is consistent with
&lt;a href=&quot;http://www.riehle.org/publications/2008/the-total-growth-of-open-source/&quot;&gt;&amp;#8220;The Total Growth of Open Source&amp;#8221; by Amit Deshpande and Dirk Riehle&lt;/a&gt;
(2008), which found that 
&amp;#8220;both the growth rate as well as the absolute amount of source
code is best explained using an exponential model&amp;#8221;.
&lt;/p&gt;

&lt;p&gt;
Another interesting point:
&lt;a href=&quot;http://www.informationweek.com/blog/main/archives/2007/10/linux_will_be_w.html&quot;&gt;
Charles Babcock predicted, in Oct. 19, 2007, that the Linux kernel
would be worth $1 billion in the first 100 days of 2009&lt;/a&gt;.
He correctly predicted that it would pass $1 billion, but it
happened somewhat earlier than he thought: by Oct. 2008 it&amp;#8217;s already happened,
instead of waiting for 2009.
I think the reason it happened slightly earlier is that Charles Babcock&amp;#8217;s
rough estimate was based on a linear approximation
(&amp;#8220;adding 2,000 lines of code a day&amp;#8221;).
But these studies all seem to indicate that mature
FLOSS programs - including the Linux kernel - are currently
growing &lt;i&gt;exponentially&lt;/i&gt;, not linearly.
Since the rate is also increasing, the date of arrival at $1 billion
was sooner than Babcock&amp;#8217;s rough estimate.
Babcock&amp;#8217;s fundamental point - that the Linux kernel keeps adding value
at a tremendous pace - is still absolutely correct.
&lt;/p&gt;

&lt;p&gt;
I took a look at some of the detailed data, and some very interesting
factors were revealed.
By lines of code, here were the largest programs in Fedora 9
(biggest first):
&lt;pre&gt;
  kernel-2.6.25i686
  OpenOffice.org
  Gcc-4.3.0-2 0080428
  Enterprise Security Client 1.0.1
  eclipse-3.3.2
  Mono-1.9.1
  firefox-3.0
  bigloo3.0b
  gcc-3.4.6-20060404
  ParaView3.2.1
&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;
The Linux kernel is no surprise; as I noted in the past, it&amp;#8217;s &lt;i&gt;full&lt;/i&gt;
of drivers, and there&amp;#8217;s a continuous stream of new hardware that
need drivers.
The Linux Foundation decided to count both gcc3 and gcc4; since there
was a radical change in approach between gcc3 and gcc4, I think that&amp;#8217;s fair
in terms of effort estimation.
(My tool ignores duplicate files, which helps counter double-counting
of effort.)
Firefox wasn&amp;#8217;t included by name in the Gigabuck study, but Mozilla was,
and Firefox is essentially its descendent.
It&amp;#8217;s unsurprising that Firefox is big; it does a lot of things, and
trying to make things &amp;#8220;look&amp;#8221; simple often takes more code (and effort).
&lt;/p&gt;
&lt;p&gt;
What&amp;#8217;s remarkable is that many of the largest programs in Fedora 9
were not even &lt;i&gt;included&lt;/i&gt; in the &amp;#8220;Gigabuck&amp;#8221; study - these are whole
new applications that were added to Fedora since that time.
These largest programs not in the Gigabuck study are:
OpenOffice.org (an office suite, aka word processor,
spreadsheet, presentation, and so on),
Enterprise Security Client, eclipse (a development environment), Mono
(an implementation of the C# programming language and its underlying
&amp;#8220;.NET&amp;#8221; environment), bigloo (an implementation of the Scheme programming
language), and paraview (a data analysis and visualization application for
large datasets).
OpenOffice.org&amp;#8217;s size is no surprise; it does a lot.
I&amp;#8217;m a little concerned that &amp;#8220;Enterprise Security Client&amp;#8221; is so huge -
a security client should be &lt;i&gt;small&lt;/i&gt;, not big, so that you can analyze
it thoroughly for trustworthiness.
Perhaps someone will analyze that program further to see why this is so,
and if that&amp;#8217;s a reason to be concerned.
&lt;/p&gt;

&lt;p&gt;
Anyway, take a look at
&lt;a href=&quot;http://www.linuxfoundation.org/publications/estimatinglinux.php&quot;&gt;
&amp;#8220;Estimating the Total Development Cost of a Linux Distribution&amp;#8221;&lt;/a&gt;.
It conclusively shows that large and useful systems can be developed as FLOSS.
&lt;/p&gt;

&lt;p&gt;
An interesting coincidence: Someone else (Heise) almost simultaneously
released a study of just the Linux kernel, again using SLOCCount.
&lt;a href=&quot;http://www.heise-online.co.uk/open/Kernel-Log-More-than-10-million-lines-of-Linux-source-files--/news/111759&quot;&gt;
Kernel Log: More than 10 million lines of Linux source files&lt;/a&gt;
notes that the Linux kernel version 2.6.27 has 6,399,191 SLOC.
&amp;#8220;More than half of the lines are part of hardware drivers; the second largest
chunk is the arch/ directory which contains the source code of the various
architectures supported by Linux.&amp;#8221;
In that code,
&amp;#8220;96.4 per cent of the code is written in C and 3.3 percent in Assembler&amp;#8221;.
They didn&amp;#8217;t apply the corrective factors specific to Linux kernels
that I discussed in
&lt;a href=&quot;http://www.dwheeler.com/essays/linux-kernel-cost.html&quot;&gt;
Linux Kernel 2.6: It&amp;#8217;s Worth More!&lt;/a&gt;, but it&amp;#8217;s still interesting to see.
And their conclusion is inarguable:
&amp;#8220;There is no end in sight for kernel growth which has been ongoing in the Linux
2.6 series for several years - with every new version, the kernel hackers
extend the Linux kernel further to include new functions and drivers,
improving the hardware support or making it more flexible, better or faster.&amp;#8221;
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Play Ogg (Vorbis and Theora)!</title>
    <link>http://www.dwheeler.com/blog/2008/10/02#play-ogg-vorbis-theora</link>
    <pubDate>Thu, 02 Oct 2008 18:36 GMT</pubDate>
    <!-- date: 2008-10-02 -->
    <description>
&lt;p&gt;
The good news: There&amp;#8217;s lots of digital audio and video available through
the Internet (some free, some pay-for).
The bad news: Lots of audio and video
is locked up in formats that aren&amp;#8217;t open standards.
This makes it impractical for people to use them on arbitrary devices, shift
the media between devices, and so on.
This hurts product developers too; they&amp;#8217;ve become vulnerable to
massive lawsuits.
Even though the MPEG standards are ratified by ISO and
are often used - MP3 is particularly common for audio -
they are not &lt;a href=&quot;http://www.digistan.org/&quot;&gt;open standards&lt;/a&gt;.
In particular,
they are subject to a raft of patents, which prevent arbitrary use
(e.g., by free-libre / open source software).
Things are even worse if you use a format with DRM (aka
&amp;#8220;Digital Restrictions Management&amp;#8221;).
DRM tries to arbitrarily restrict how you can use the media you&amp;#8217;ve paid for;
when the company decides to abandon support for that DRM format,
you&amp;#8217;ve effectively lost all the money you spent on the audio and video media
(&lt;a href=&quot;http://en.wikipedia.org/wiki/Digital_rights_management#Obsolescence&quot;&gt;examples of DRM abandonment&lt;/a&gt; include Microsoft&amp;#8217;s MSN Music,
Microsoft&amp;#8217;s PlaysForSure which is not supported by Microsoft Zune,
Yahoo! Music Store, and Walmart&amp;#8217;s DRM-encumbered music).
&lt;p&gt;
Thankfully, there&amp;#8217;s a solution, and that&amp;#8217;s
&lt;a href=&quot;http://xiph.org/&quot;&gt;Ogg&lt;/a&gt; (as maintained by the Xiph.org foundation).
Ogg is a &amp;#8220;container format&amp;#8221; that can contain audio, video, and
related material.
Audio and video can be encoded inside Ogg using one of several encodings,
but usually audio is encoded with &amp;#8220;Vorbis&amp;#8221; and video is encoded with &amp;#8220;Theora&amp;#8221;.
For perfect sound reproduction, you can use &amp;#8220;FLAC&amp;#8221; instead of Vorbis
(but for most circumstances, Vorbis is the better choice).
&lt;/p&gt;
&lt;p&gt;
I encourage you to use Ogg, and I&amp;#8217;m not the only one.
&lt;a href=&quot;http://en.wikipedia.org/wiki/Wikipedia:Creation_and_usage_of_media_files&quot;&gt;Wikipedia &lt;b&gt;requires&lt;/b&gt; that audio and video be in Ogg Vorbis and Ogg Theora format (respectively)&lt;/a&gt;;
according to Alexa,
&lt;a href=&quot;http://www.alexa.com/site/ds/top_sites?cc=US&amp;ts_mode=country&amp;lang=none&quot;&gt;Wikipedia is the 8th most popular website in the U.S.&lt;/a&gt;
(as of Oct 2, 2008).
The &lt;a href=&quot;http://www.fsf.org/resources/formats/playogg&quot;&gt;
Free Software Foundation (FSF)&amp;#8217;s &amp;#8220;Play Ogg&amp;#8221; campaign&lt;/a&gt; is
encouraging the use of Ogg, too.
&lt;a href=&quot;http://www.xiph.org/press/2007/w3c/#5&quot;&gt;Xiph.org&amp;#8217;s 2007 press release&lt;/a&gt;
and
&lt;a href=&quot;http://www.xiph.org/about/&quot;&gt;about Xiph&lt;/a&gt;
explain some of the reasons for preferring Ogg.
&lt;/p&gt;
&lt;p&gt;
So, please seek out and create Ogg files!
Their file extensions are easily recognized:
&lt;a href=&quot;http://wiki.xiph.org/index.php/MIME_Types_and_File_Extensions&quot;&gt;
&amp;#8220;.ogg&amp;#8221; (Ogg Vorbis sound), &amp;#8220;.oga&amp;#8221; (Ogg audio using other codecs like
FLAC), and &amp;#8220;.ogv&amp;#8221; (Ogg video, typically Theora plus Vorbis)&lt;/a&gt;.
If you need to download software to play Ogg files,
&lt;a href=&quot;http://www.fsf.org/resources/formats/playogg/how&quot;&gt;FSF Ogg&amp;#8217;s &amp;#8220;how&amp;#8221; page&lt;/a&gt;
or
&lt;a href=&quot;http://xiph.org&quot;&gt;Xiph.org&amp;#8217;s home page&lt;/a&gt; will explain how
to download and install software to play Ogg files (they&amp;#8217;re free,
in all senses!).
Many video players can play Ogg already; among them,
&lt;a href=&quot;http://www.videolan.org/&quot;&gt;VLC (from VideoLAN)&lt;/a&gt; is
often recommended as a player.
&lt;/p&gt;
&lt;p&gt;
Probably the big news is that the
&lt;a href=&quot;http://www.0xdeadbeef.com/weblog/?p=492&quot;&gt;next
version of Mozilla&amp;#8217;s Firefox will include Ogg - built in&lt;/a&gt;!
So soon, you can just install Firefox, and you&amp;#8217;ll have Ogg support.
That should encourage even more use of Ogg, because there will be
so many more people who have Ogg (or can get install it easily), as well
as lots of reasons to install such software.
&lt;/p&gt;
&lt;p&gt;
If you want more technical details, you can see the
&lt;a href=&quot;http://en.wikipedia.org/wiki/Ogg&quot;&gt;Wikipedia article on Ogg&lt;/a&gt;.
You can also see
&lt;a href=&quot;http://www.ietf.org/rfc/rfc5334.txt&quot;&gt;Internet standard
RFC 5334&lt;/a&gt;, which discusses the basic file extensions
and MIME types, as well as pointing to other technical documents.
&lt;/p&gt;
&lt;p&gt;
Currently there is a babel of formats out there, and most of the more
common ones are not open standards.
I have no illusions that this babel will instantly disappear, with
everyone using Ogg by tomorrow.
Getting a new audio or video format used is a
difficult chicken-and-egg problem: People don&amp;#8217;t want to release
audio or video until everyone can play them, and people don&amp;#8217;t want to
install format players until there&amp;#8217;s something to play.
&lt;/p&gt;
&lt;p&gt;
But with Wikipedia, Firefox, and many others all working to encourage the Ogg
format, I think the chicken-and-egg problem has been overcome.
I&amp;#8217;m now discovering all sorts of organizations support Ogg, such as
&lt;a href=&quot;http://metavid.org/wiki/Help:FAQ&quot;&gt;Metavid,
(who provide video footage from the U.S. Congress in Ogg Theora format)&lt;/a&gt;.
&lt;a href=&quot;http://www.groklaw.net/article.php?story=20080821100600851&quot;&gt;Groklaw
interviewed Richard Hulse of Radio New Zealand, who explained why
they recently added support for Ogg Vorbis&lt;/a&gt;.
Many other radio stations support Ogg; I&amp;#8217;ve confirmed support by the
&lt;a href=&quot;http://www.cbc.ca/listen/index.html&quot;&gt;Canadian Broadcasting
Corporation (CBC) (Radio feeds 1 and 2)&lt;/a&gt;,
&lt;a href=&quot;http://theclassicalstation.org/&quot;&gt;WPCE&lt;/a&gt;, and
&lt;a href=&quot;http://www.wbur.org/&quot;&gt;WBUR&lt;/a&gt;
(&lt;a href=&quot;http://wiki.xiph.org/index.php/VorbisStreams&quot;&gt;Xiph.org has
a much longer list of stations supporting Ogg&lt;/a&gt;).
Ogg is widely used in games;
there&amp;#8217;s Ogg support in the engines for
Doom 3, Unreal Tournament 2004, Halo: Combat Evolved, Myst IV:
Revelation, Serious Sam: The Second Encounter, Lineage 2, Vendetta Online, and
the Grand Theft Auto engines
(&lt;a href=&quot;http://wiki.xiph.org/index.php/Games_that_use_Vorbis&quot;&gt;Xiph.org
has a longer list of games&lt;/a&gt;).
In short,
there are now enough Ogg players, and Ogg media, to get the ball rolling.
&lt;/p&gt;
&lt;p&gt;
In particular: Don&amp;#8217;t buy a portable audio (music) player
unless it can play Ogg Vorbis.
&lt;a href=&quot;http://wiki.xiph.org/index.php/PortablePlayers&quot;&gt;Xiph has
a list of audio players that support Ogg Vorbis&lt;/a&gt; (read the details
for the player you&amp;#8217;re considering!).
If a manufacturer doesn&amp;#8217;t support Ogg,
complain to them until they fix the problem.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Developers: Use System Libraries!</title>
    <link>http://www.dwheeler.com/blog/2008/09/19#use-system-libraries</link>
    <pubDate>Fri, 19 Sep 2008 17:28 GMT</pubDate>
    <!-- date: 2008-09-19 -->
    <description>
&lt;p&gt;
The packagers from a variety of GNU/Linux distributions
are informally uniting to tell software developers a simple story:
&amp;#8220;Use system libraries - don&amp;#8217;t create local copies of libraries!&amp;#8221;
&lt;/p&gt;
&lt;p&gt;
The latest push came from
&lt;a href=&quot;http://lists.freedesktop.org/archives/distributions/2008-September/000226.html&quot;&gt;Toshio Kuratomi&amp;#8217;s email
&amp;#8220;Uniting to get upstreams to use system libraries&amp;#8221;&lt;/a&gt;.
Fedora, like most distributions, has a guideline that
&amp;#8220;a package should not link against a local copy of a library&amp;#8230;
libraries should be included in the system and applications
should link against that [instead]&amp;#8221;.
Toshio lists two reasons why this guideline exists (I know there are
other reasons too):
&lt;ol&gt;
&lt;li&gt;Doing otherwise is a &amp;#8220;losing proposition&amp;#8221; when trying to
fix security issues in a library.&lt;/li&gt;
&lt;li&gt;&amp;#8220;applications that
include their own copies of libraries are often tempted to apply their
own bugfixes and feature enhancements to the library.  That makes it
harder to port the application to new versions of the library and runs
counter to the open source philosophy of helping to improve the library
for everyone.&amp;#8221;&lt;/li&gt;
&lt;/ol&gt;
&lt;/p&gt;
&lt;p&gt;
I&amp;#8217;m big on security, so reason #1 is a good-enough reason to me.
The
&lt;a href=&quot;http://fedoraproject.org/wiki/Packaging/Guidelines#Duplication_of_system_libraries&quot;&gt;Fedora packaging rules&lt;/a&gt; note that the fixes aren&amp;#8217;t actually
limited to security issues; not duplicating system libraries
&amp;#8220;prevents old bugs and security holes from living on after the core system
libraries have been fixed.&amp;#8221;
But I think the more important reason is hinted at in
the last part of reason #2.
No one - not even a big FLOSS project - has infinite resources.
Different people will find different problems when they use a library.
If the many different applications that use a library report
problems back to the library maintainers,
the library maintainers can fix the problem.
Then, the fix will benefit &lt;i&gt;everyone&lt;/i&gt; who depends on the library.
If every application has their own local variant of a library, then
each one will have defects that were fixed in other variants.
&lt;/p&gt;
&lt;p&gt;
Toshio then notes:
&amp;#8220;In the world of C applications and libraries, we don&amp;#8217;t often run into
this problem anymore.  Most C application developers have learned the
same lessons we have.  However, in the java, mono/.net, and web
application worlds, this [duplication of libraries is still]
a common practice.  Sometimes our packagers
find themselves trying to convince upstream to change what they do
without success &amp;#8212; upstream is convinced that they need to include these
local copies.&amp;#8221;
In some cases (particularly for Java), there were historical reasons that they
had to do this due to licensing.
But as those reasons have diminished, the practices haven&amp;#8217;t gone away.
&lt;/p&gt;
&lt;p&gt;
Fedora, Debian, openSUSE, Gentoo, and Mandriva
all have policies/guidelines specifically recommending or requiring that
packages not have their own special copies of libraries.
All of these distributions clearly explain that applications
should use normal libraries instead.
Unfortunately,
software developers for non-C programs don&amp;#8217;t seem to be hearing the message.
That makes it really hard to package those programs for use by end-users.
As a result, applications are often harder to install, or the easily-installed
versions are much delayed, because of unnecessary difficulties in
packaging the program for end-users.
&lt;/p&gt;
&lt;p&gt;
Yes, in a few cases a special copy of a library may be necessary.
Granted.
But it&amp;#8217;s often unnecessary, and it should be the exception, not the rule.
At the very least, it should be trivial to build a FLOSS application
from source code so that it uses the system&amp;#8217;s libraries
instead of some local copy of the libraries.
&lt;/p&gt;
&lt;p&gt;
So developers, please, try to work with the standard libraries instead
of creating your own modified copy.
Packagers - and users - around the world will thank you.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Challenges for securing closed source software</title>
    <link>http://www.dwheeler.com/blog/2008/08/21#closed-source-security</link>
    <pubDate>Thu, 21 Aug 2008 15:48 GMT</pubDate>
    <!-- date: 2008-08-21 -->
    <description>
&lt;p&gt;
I&amp;#8217;ve just learned of a really interesting article by
&lt;a href=&quot;http://blogs.techrepublic.com.com/security/?p=549&quot;&gt;
Chad Perrin, &amp;#8220;10 security challenges facing closed source software&amp;#8221;&lt;/a&gt;.
He starts with my
&lt;a href=&quot;http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/&quot;&gt;
Secure Programming for Linux and Unix HOWTO&lt;/a&gt; book&amp;#8217;s list of
&amp;#8220;core requirements for developing secure software&amp;#8221;, which was
part of the section on developing secure open source software.
My list was really simple:
&lt;ul&gt;
&lt;li&gt;First, people have to actually review the code.&lt;/li&gt;
&lt;li&gt;Second, at least some of the people developing and reviewing the code must know how to write secure programs.&lt;/li&gt;
&lt;li&gt;Third, once found, problems need to be fixed quickly and their fixes distributed.&lt;/li&gt;
&lt;/ul&gt;
Lots of people have cited that list (and the book!), including
&lt;a href=&quot;http://googleonlinesecurity.blogspot.com/2008/05/contributing-to-open-source-software.html&quot;&gt;
Google&amp;#8217;s &amp;#8220;Contributing To Open Source Software Security&amp;#8221;&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
At the time I made that list, I was primarily
thinking about that list as requirements for
open source software.
Chad Perrin had the interesting insight that the list applies to
closed source software too&amp;#8230; and then examined what the challenges are.
It&amp;#8217;s a really interesting list, I suggest taking a look at it!
He closes with a very interesting claim:
&amp;#8220;None of these disadvantages for closed source software are inflexible
or absolute. There’s no reason closed source software developed by a
corporate vendor can’t be as secure as an open source equivalent. It
should be pretty obvious that, all else being equal, the trend is for
circumstances to favor the security of open source software — at least
as far as these principles of software security are concerned.&amp;#8221;
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>FLOSS License Proliferation: Still a problem</title>
    <link>http://www.dwheeler.com/blog/2008/08/20#license-proliferation</link>
    <pubDate>Wed, 20 Aug 2008 16:19 GMT</pubDate>
    <!-- date: 2008-08-20 -->
    <description>
&lt;p&gt;
License proliferation in
free-libre / open source software (FLOSS) licenses is less than it
used to be, but it&amp;#8217;s still a serious problem.
There are, thankfully, some interesting rumblings to try to make things better.
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&quot;http://www.crynwr.com/cgi-bin/ezmlm-cgi?3:mss:15914:200808:nbobhajnkkgafccgdpco&quot;&gt;Russ Nelson at the Open Source Initiative (OSI)&lt;/a&gt;
wants to restart a FLOSS license anti-proliferation committee
to address the problem that there are too many FLOSS licenses.
He wants to set up a process to establish
two tiers, &amp;#8220;recommended&amp;#8221; and &amp;#8220;compliant&amp;#8221;.
There&amp;#8217;s no telling if the work will be successful, but the basic
concept sounds very reasonable to me.
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&quot;http://news.cnet.com/8301-13505_3-10007321-16.html?hhTest=1&quot;&gt;
Matt Asay counters&lt;/a&gt; that
&amp;#8220;Someone needs to tell the Open Source Initiative,
Google, and others who fret about license proliferation
that the market has already cut down the number of actively
used licenses to just a small handful:
L/GPL, BSD/Apache, MPL, and a few others (EPL, CPL)&amp;#8230;
It&amp;#8217;s a worthy cause, but one that has already been effectively fought
and settled by the free market. I would hazard a guess that upwards of
95 percent of all open-source projects are licensed under less than 5
percent of open-source licenses. (The last time I checked, 88 percent
of Sourceforge projects were L/GPL or BSD. It&amp;#8217;s been a non-issue for
many years.)
There is no open-source proliferation problem. Do we have a lot of
open-source licenses? Yes, just as we have a lot of proprietary licenses
(in fact, we have many more of those). But we don&amp;#8217;t have a license
proliferation problem, because very few open-source licenses actually
get used on a regular basis.
This is a phantom. It seems scary, but it&amp;#8217;s not real.
&lt;/p&gt;
&lt;p&gt;
Asay is right that &amp;#8220;the market&amp;#8221; has mostly settled the issue, but I think
Asay is quite wrong that there is no problem.
I quite agree with Asay that
there is a very short list of standard FLOSS licenses&amp;#8230; but there&amp;#8217;s
still a lot of people who, even in 2008, keep creating new incompatible
FLOSS (or intended to be FLOSS) licenses for their newly-released programs.
And although it&amp;#8217;s true that &amp;#8220;very few actually get used on a regular basis&amp;#8221;,
it&amp;#8217;s also true that a large number of people are still creating new,
one-off FLOSS licenses that are incompatible with many widely-used licenses.
Why?
I think the problem is that there are still a &lt;i&gt;lot&lt;/i&gt; of lawyers and
developers who &amp;#8220;didn&amp;#8217;t get the memo&amp;#8221; from users and potential co-developers
that new FLOSS licenses are decidedly unwelcome.
As a result,
new programs are still being released under new non-standard licenses.
&lt;/p&gt;
&lt;p&gt;
I can even speculate why there are so many people still creating
incompatible licenses, even though users and distributors don&amp;#8217;t want them.
A lot of new programs are developed by people who know a lot
about their technical specialty, but very little about copyright law,
and also very little about FLOSS norms (both in licensing and
community development processes).
So they go to lawyers of their organizations. As far as I can tell, many
lawyers think it&amp;#8217;s fun to create new licenses and have absolutely no clue that
using a nonstandard FLOSS-like license will relegate the program to oblivion.
(The primary thing that matters to a lawyer is if they or
their organization can be sued; if the license causes the program to be
useless, well, too bad, the lawyer still gets paid.)
Indeed, many lawyers still don&amp;#8217;t even know what the requirements for FLOSS
licenses are - never mind that there are license vetting procedures, or that
using non-standard FLOSS licenses is widely considered harmful.
So we have developers, who know they want to collaborate but don&amp;#8217;t realize
that they need to follow community standards to make that work,
and we have lawyers, who often don&amp;#8217;t realize that there &lt;i&gt;are&lt;/i&gt; community
standards for the licenses (and their non-selection will affect their clients).
&lt;/p&gt;
&lt;p&gt;
Let me give some specific examples from recent work I&amp;#8217;m doing, to
show that this is still a problem.
Right now I&amp;#8217;m trying to get some software packaged to more rigorously prove
that software does (or doesn&amp;#8217;t) do something important.
I tried to get CVC3 packaged; it has &amp;#8220;almost a BSD license&amp;#8221;, and I believe
the developer intended for it to be FLOSS.
Problem is, somebody thought it&amp;#8217;d be fun to add some new nonstandard clauses.
The worst clause - and I&amp;#8217;m highly paraphrasing here - could be interpreted as,
&amp;#8220;If we developers did lots of illegal activities in creating the software,
you&amp;#8217;re required to pay for our legal expenses to defend our illegal activities,
even if the only thing that you did is provide copies of this software
to other people, or used it incidentally.&amp;#8221;
Certainly that&amp;#8217;s how I interpret it, though I&amp;#8217;m no lawyer.
When I brought this license text to Fedora legal, let&amp;#8217;s just say that
they were less than enthused about endorsing this license or including
the program in the distribution.
Indeed, CVC3&amp;#8217;s license may make it too dangerous for anyone to use.
After all, how could I possibly determine the risk that you (the developer)
did something illegal?
CVC3 also has another annoying incompatible license addition (compared to
the BSD-new license), a &amp;#8220;must change name if you change the code&amp;#8221; type clause.
Of course, it won&amp;#8217;t compile as-is;
the only way to compile it is to change the code :-).
Here&amp;#8217;s hoping that they fix this by switching to a standard license.
CVC3 is not the only offender, either, there are legions of them.
I examined Alt-Ergo, a somewhat similar program.
It uses a FLOSS license, but it uses the
remarkably weird and non-standard CeCILL-C license (this is even
less well known than its cousin the CeCILL; according to Fedora it&amp;#8217;s
FLOSS but GPL-incompatible, and a GPL-incompatible FLOSS license is a
remarkably bad choice).
Third example - over this weekend
I had a private email conversation with a developer who&amp;#8217;s about to
release their software with a license; the developer intended to
create (as a &lt;i&gt;non-lawyer!&lt;/i&gt;) yet another license with incompatible
non-FLOSS terms.
Which would have been a big mistake.
&lt;/p&gt;
&lt;p&gt;
Frankly, I think Asay is being excessively generous in his list of
acceptable licenses.
The standard FLOSS licenses are, I believe,
simply MIT, revised BSD (BSD-new),
LGPL (versions 2.1 and 3), and GPL (versions 2 and 3),
and possibly the Apache 2.0 license.
All of these licenses have a very large set of projects that use them,
are widely understood, have been deeply analyzed by legal experts, and yet
are comprehensible to both developers and users.
An especially important property of this set, as you can see from
&lt;a href=&quot;http://www.dwheeler.com/essays/floss-license-slide.html&quot;&gt;
my FLOSS license slide&lt;/a&gt;, is that they are generally compatible
(with the problem that Apache 2.0 and GPLv2 aren&amp;#8217;t compatible).
Compatibility is critical; if you want to use FLOSS to build serious
applications, you often need to combine them in novel ways, and license
incompatibilities often prevent that.
As I note in
&lt;a href=&quot;http://www.dwheeler.com/essays/gpl-compatible.html&quot;&gt;
Make Your Open Source Software GPL-Compatible. Or Else&lt;/a&gt;,
the GPL is by far the most popular FLOSS license; &lt;i&gt;most&lt;/i&gt; FLOSS
software is under the GPL.
So choosing a GPL-incompatible license is, in most cases, foolish.
Which is a key reason I don&amp;#8217;t include the MPL in that set;
not only do these licenses have vanishingly small market share
compared to the set above, but their incompatibilities make their use foolish.
Even Mozilla, the original creator of the MPL, essentially no longer uses the
MPL (they tri-license with the GPL/LGPL/MPL, because GPL-incompatibility
was a bad idea).
&lt;/p&gt;
&lt;p&gt;
Having a short &amp;#8220;OSI recommended&amp;#8221; or &amp;#8220;FSF recommended&amp;#8221; list of licenses
is unlikely to completely solve the problem of license proliferation.
But having a semi-formal, more obviously endorsed, and easy-to-reference
site that identified the short list of recommended licenses, and
explained why license proliferation is bad, would help.
While those well-versed in FLOSS understand things, the problem is those
others who are just starting out to develop a FLOSS project.
After all, the license is chosen at the very beginning of a project,
when the lead developer may have the &lt;i&gt;least&lt;/i&gt; experience with FLOSS.
Anyone beginning a new project is likely to make mistakes, but there&amp;#8217;s
a difference; just about any other mistake in starting
a FLOSS project can be fixed fairly easily.
Don&amp;#8217;t like the CM system? Switch!
Don&amp;#8217;t like your hosting environment? Move!
But a bad license is often extremely difficult to change; it may require
agreement by a vast army of people, or those (e.g., organizational lawyers)
who have no incentive to cooperate later.
Yes, projects like vim and Python have done it,
but only with tremendous effort.
&lt;/p&gt;
&lt;p&gt;
The license mistakes of one project can even hurt other projects.
&lt;a href=&quot;http://www.squeak.org/&quot;&gt;Squeak&lt;/a&gt; is
still trying to transition from early licensing mistakes, and it&amp;#8217;s still
not done even though it&amp;#8217;s been working on it for years.
These has impeded the packaging and wider use of nice programs like
&lt;a href=&quot;http://scratch.mit.edu/&quot;&gt;Scratch&lt;/a&gt;, which depend on Squeak.
&lt;a href=&quot;http://www.gnu.org/philosophy/java-trap.html&quot;&gt;The Java Trap&lt;/a&gt;
discusses some of the challenges when FLOSS &lt;i&gt;requires&lt;/i&gt; proprietary
software to run; when the FLOSS licenses are incompatible, many of the
same problems apply.
In short, when FLOSS licenses are incompatible,
they cause problems for everyone.
And when there are more than a few FLOSS licenses,
it also becomes very hard to understand, keep track of, and comply with them.
&lt;/p&gt;
&lt;p&gt;
Asay and Nelson have no trouble understanding the license proliferation
issues; they&amp;#8217;ve been analyzing FLOSS for years.
But they are not the ones who need this information, anyway.
It&amp;#8217;s the newcomers - the innovators coming up with the new software ideas,
but who don&amp;#8217;t fully understand collaborative development and how
FLOSS licensing enables it - who need this information.
I don&amp;#8217;t really mean to pick on Asay in this article; it&amp;#8217;s just in this case,
I think Asay knows too much, and has forgotten how many people &lt;i&gt;don&amp;#8217;t&lt;/i&gt;
yet understand FLOSS.
&lt;/p&gt;
&lt;p&gt;
Documenting a short list of the &amp;#8220;recommended licenses&amp;#8221; would be a great boon,
because it would help those innovative newcomers to FLOSS approaches
avoid one of the costliest mistakes of all: Using a nonstandard license.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Free-Libre/Open Source Software (FLOSS) licenses legally enforceable - and more</title>
    <link>http://www.dwheeler.com/blog/2008/08/14#licenses-enforceable</link>
    <pubDate>Thu, 14 Aug 2008 17:33 GMT</pubDate>
    <!-- date: 2008-08-14 -->
    <description>
&lt;p&gt;
The
&lt;a href=&quot;http://www.cafc.uscourts.gov/opinions/08-1001.pdf&quot;&gt;
U.S. Court of Appeals for the Federal Circuit
has ruled in Jacobsen v. Katzer&lt;/a&gt; (August 13, 2008)
that Free-Libre/Open Source Software (FLOSS)
licenses are legally enforceable.
Specifically, it determined that in the U.S.
disobeying a FLOSS license is copyright infringement
(unless there are other arrangements),
and not just a contract violation.
This makes it &lt;i&gt;much&lt;/i&gt; easier to enforce FLOSS licenses in the
United States.
It has some other very interesting things to say, too,
as I show below.
&lt;/p&gt;
&lt;p&gt;
Frankly, I thought this was a very obvious ruling;
I find it bizarre that some people thought
there was another possibility (and that this had to be appealed).
After all, U.S. copyright law clearly
says that the copyright holder can determine the conditions for
(most) copying, and doing anything else (unless specially permitted
by law) is copyright infringement.  This ruling simply states
that the law is what it says it is, and that FLOSS licenses are a
perfectly valid set of conditions.  This eliminates, in one stroke,
the argument &amp;#8220;is a license a contract or a license?&amp;#8221; silliness.
A license is, well, a license!
I&amp;#8217;ve thought it was quite obvious that a license is not a contract;
&lt;a href=&quot;http://www.gnu.org/philosophy/enforcing-gpl.html&quot;&gt;Eben Moglen&lt;/a&gt;
and
&lt;a href=&quot;http://www.groklaw.net/article.php?story=20031214210634851&quot;&gt;Groklaw&lt;/a&gt;
have both written articles on this that I find extremely persuasive.
In some countries, this distinction
may make no difference, but in the U.S. there is a big difference.
&lt;a href=&quot;http://www.pcworld.com/businesscenter/article/149796/open_source_advocates_hail_appeals_court_ruling.html&quot;&gt;As Andy Updegrove noted&lt;/a&gt;,
&amp;#8220;Under contract law, the remedy is monetary
damages, which aren&amp;#8217;t likely to amount to anything involving open-source
software that is given away&amp;#8230;&amp;#8221;, but statutory damages (money awarded for
a violation of law) &amp;#8220;can be awarded for copyright infringement without
requiring proof of monetary damages&amp;#8230; people can recover attorney fees
for copyright infringement cases&amp;#8230; [and] most importantly for licenses
such as the [GNU General Public License], it means that your rights to
use the copyrighted work at all disappear&amp;#8221;.
&lt;/p&gt;
&lt;p&gt;
You can find more about the legal implications in
&lt;a href=&quot;http://www.groklaw.net/article.php?story=2008081313212422&quot;&gt;
Groklaw&amp;#8217;s article on Jacobsen v. Katzer&lt;/a&gt;,
&lt;a href=&quot;http://sourceforge.net/mailarchive/forum.php?thread_name=p06240807c4c943180289%40[10.0.1.191]&amp;amp;forum_name=jmri-legal-announce&quot;&gt;the announcement on Jmri-legal-announce&lt;/a&gt;, and
&lt;a href=&quot;http://www.linuxinsider.com/story/Open-Source-Wins-Landmark-Legal-Validation-64164.html&quot;&gt;LinuxInsider&lt;/a&gt;.
&lt;a href=&quot;http://jmri.sourceforge.net/k/news.html#CAFCruling1&quot;&gt;JMRI has
a set of links to related articles&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
The court also had many very interesting things to say about FLOSS.
I suspect many will quote it because it&amp;#8217;s an official U.S. court ruling
that cuts to the essense of FLOSS licensing and why it is the way it is.
Let me pull out a few interesting quotes;
I have bolded some particularly interesting points:
&lt;/p&gt;
&lt;p&gt;
&amp;#8220;We consider here the ability of a copyright holder to dedicate certain
work to free public use and yet enforce an &amp;#8216;open source&amp;#8217; copyright license
to control the future distribution and modification of that work&amp;#8230;
Public licenses, often referred to as &amp;#8216;open source&amp;#8217; licenses, are used
by artists, authors, educators, software developers, and scientists who
wish to create collaborative projects and to dedicate certain works
to the public. Several types of public licenses have been designed
to provide creators of copyrighted materials a means to protect and
control their copyrights. Creative Commons, one of the amici curiae,
provides free copyright licenses to allow parties to dedicate their
works to the public or to license certain uses of their works while
keeping some rights reserved.&amp;#8221;
&lt;/p&gt;
&lt;p&gt;
&amp;#8220;&lt;b&gt;Open source licensing has become a widely used method of creative
collaboration that serves to advance the arts and sciences in a manner
and at a pace that few could have imagined just a few decades ago&lt;/b&gt;. For
example, the Massachusetts Institute of Technology (&amp;#8216;MIT&amp;#8217;) uses a Creative
Commons public license for an OpenCourseWare project that licenses all
1800 MIT courses. Other public licenses support the GNU/Linux operating
system, the Perl programming language, the Apache web server programs,
the Firefox web browser, and a collaborative web-based encyclopedia
called Wikipedia.  Creative Commons notes that, by some estimates, there
are close to 100,000,000 works licensed under various Creative Commons
licenses. The Wikimedia Foundation, another of the amici curiae, estimates
that the Wikipedia website has more than 75,000 active contributors
working on some 9,000,000 articles in more than 250 languages.&amp;#8221;
&lt;/p&gt;
&lt;p&gt;
&amp;#8220;Open Source software projects invite computer programmers from around
the world to view software code and make changes and improvements to it.
&lt;b&gt;Through such collaboration, software programs can often be written
and debugged faster and at lower cost than if the copyright holder
were required to do all of the work independently.  In exchange and
in consideration for this collaborative work, the copyright holder
permits users to copy, modify and distribute the software code subject
to conditions that serve to protect downstream users and to keep the code
accessible&lt;/b&gt;.  By requiring that users copy and restate the license and
attribution information, a copyright holder can ensure that recipients of
the redistributed computer code know the identity of the owner as well
as the scope of the license granted by the original owner. The Artistic
License in this case also requires that changes to the computer code be
tracked so that downstream users know what part of the computer code is
the original code created by the copyright holder and what part has been
newly added or altered by another collaborator.
&lt;/p&gt;
&lt;p&gt;
&amp;#8220;Traditionally, copyright owners sold their copyrighted material in
exchange for money. &lt;b&gt;The lack of money changing hands in open source
licensing should not be presumed to mean that there is no economic
consideration, however.&lt;/b&gt; There are substantial benefits, including
economic benefits, to the creation and distribution of copyrighted works
under public licenses that range far beyond traditional license royalties.
For example, program creators may generate market share for their
programs by providing certain components free of charge. Similarly,
a programmer or company may increase its national or international
reputation by incubating open source projects. Improvement to a product
can come rapidly and free of charge from an expert not even known to the
copyright holder. The Eleventh Circuit has recognized the economic motives
inherent in public licenses, even where profit is not immediate&amp;#8230;.
(Program creator &amp;#8216;derived value from the distribution [under a public
license] because he was able to improve his Software based on suggestions
sent by end-users&amp;#8230; . It is logical that as the Software improved,
more end-users used his Software, thereby increasing [the programmer&amp;#8217;s]
recognition in his profession and the likelihood that the Software would
be improved even further.&amp;#8217;).&amp;#8221;
&lt;/p&gt;
&lt;p&gt;
&amp;#8220;&amp;#8230; The conditions set forth in the Artistic License are vital to enable
the copyright holder to retain the ability to benefit from the work of
downstream users. By requiring that users who modify or distribute the
copyrighted material retain the reference to the original source files,
downstream users are directed to Jacobsen=s website. Thus, downstream
users know about the collaborative effort to improve and expand the
SourceForge project once they learn of the &amp;#8216;upstream&amp;#8217; project from a
&amp;#8216;downstream&amp;#8217; distribution, and they may join in that effort.&amp;#8221;
&lt;/p&gt;
&lt;p&gt;
&amp;#8220;&amp;#8230; &lt;b&gt;Copyright holders who engage in open source licensing have the right
to control the modification and distribution of copyrighted material&lt;/b&gt;.
As the Second Circuit explained in Gilliam v. ABC, 538 F.2d 14, 21 (2d
Cir. 1976), the &amp;#8216;unauthorized editing of the underlying work, if proven,
would constitute an infringement of the copyright in that work similar
to any other use of a work that exceeded the license granted by the
proprietor of the copyright.&amp;#8217;  Copyright licenses are designed to support
the right to exclude; money damages alone do not support or enforce that
right. &lt;b&gt;The choice to exact consideration in the form of compliance with
the open source requirements of disclosure and explanation of changes,
rather than as a dollar-denominated fee, is entitled to no less legal
recognition. Indeed, because a calculation of damages is inherently
speculative, these types of license restrictions might well be rendered
meaningless absent the ability to enforce through injunctive relief.&lt;/b&gt;&amp;#8221;
&lt;/p&gt;
&lt;p&gt;
&amp;#8220;&amp;#8230; The clear language of the Artistic License creates conditions
to protect the economic rights at issue in the granting of a public
license. These conditions govern the rights to modify and distribute
the computer programs and files included in the downloadable software
package. The attribution and modification transparency requirements
directly serve to drive traffic to the open source incubation page and to
inform downstream users of the project, which is a significant economic
goal of the copyright holder that the law will enforce. Through this
controlled spread of information, the copyright holder gains creative
collaborators to the open source project; by requiring that changes made
by downstream users be visible to the copyright holder and others, the
copyright holder learns about the uses for his software and gains others&amp;#8217;
knowledge that can be used to advance future software releases.&amp;#8221;
&lt;/p&gt;
&lt;p&gt;
In short, this court ruling makes it clear that FLOSS
licenses really are legally enforceable&amp;#8230;
so it&amp;#8217;s safe for businesses to rely on them.
It also makes a number of clear statements that FLOSS really
does have economic value, even when money doesn&amp;#8217;t change hands -
a point I make in my article
&lt;a href=&quot;http://www.dwheeler.com/essays/commercial-floss.html&quot;&gt;&lt;i&gt;Free-Libre / Open Source Software (FLOSS) is Commercial Software&lt;/i&gt;&lt;/a&gt;.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Offset 2000 Version Numbers</title>
    <link>http://www.dwheeler.com/blog/2008/07/16#offset-2000-versioning</link>
    <pubDate>Wed, 16 Jul 2008 00:00 GMT</pubDate>
    <!-- date: 2008-07-16 -->
    <description>
&lt;p&gt;
Linus Torvalds is thinking about changing the Linux kernel
version numbering scheme
[&lt;a href=&quot;http://kerneltrap.org/Linux/Kernel_Release_Numbering_Redux&quot;&gt;Kernel Release Numbering Redux&lt;/a&gt;].
He said: &amp;#8220;I _am_ considering changing just the [version] numbering&amp;#8230;
because a constantly increasing minor number leads to big numbers.
I&amp;#8217;m not all that thrilled with &amp;#8216;26&amp;#8217; as a number: it&amp;#8217;s hard to remember&amp;#8230;
If the version were to be date-based, instead of releasing 2.6.26,
maybe we could have 2008.7 instead&amp;#8230;
I personally don&amp;#8217;t have any hugely strong opinions on the numbering.
I suspect others do, though, and I&amp;#8217;m almost certain that
this is an absolutely _perfect_ &amp;#8216;bikeshed-painting&amp;#8217; subject&amp;#8230;
let the
&lt;a href=&quot;http://producingoss.com/en/bikeshed-full.html&quot;&gt;
bike-shed-painting begin&lt;/a&gt;.&amp;#8221;
&lt;/p&gt;

&lt;p&gt;
Here&amp;#8217;s my proposal: &lt;b&gt;Offset 2000 version numbers&lt;/b&gt;, i.e.,
&amp;#8220;(y-2000).mm[.dd]&amp;#8221;.
The first number is the year minus 2000, followed by &amp;#8220;.&amp;#8221; and a two-digit month,
optionally followed by &amp;#8220;.&amp;#8221; and a two-digit day when there&amp;#8217;s more than
one release in a month.
So version 8.07 would be the first release in July 2008.
If you made a later release on July 17, that later release would be 8.07.17
(so if a project makes many releases in a month, you can again determine
how old a particular copy is).
&lt;/p&gt;

&lt;p&gt;
Date-based version numbers have a lot going for them, because at a glance
you know when it was released (and thus you can determine how old
something is).
If you choose the ISO order YYYY.MM.DD, the numbers sort very nicely;
&lt;a href=&quot;http://www.debian.org/doc/debian-policy/ch-binary.html#s3.2.1&quot;&gt;
Debian packages often use YYYYMMDD for versioning&lt;/a&gt;.
But there&amp;#8217;s a problem: full year numbers, or full dates in this format,
are annoyingly large.
For example, version numbers 2008.07.16 and 20080716 are
painfully long version numbers to remember.
&lt;/p&gt;

&lt;p&gt;
So, use dates, but shorten then.
Since nothing today can be released before 2000,
shorten it by subtracting 2000.
Note that this is &lt;i&gt;subtracting&lt;/i&gt; - there&amp;#8217;s no Y2K-like rollover problem,
because the year 2100 becomes 100 and the year 3000 becomes 1000.
The second number is the month; using a two-digit month means you
don&amp;#8217;t have the ambiguity of determining if &amp;#8220;2.2&amp;#8221; is earlier
or later than &amp;#8220;2.10&amp;#8221; (you would use &amp;#8220;2.02&amp;#8221; instead).
If you need to disambiguate day releases
(or you make additional releases in the same month),
add &amp;#8220;.&amp;#8221; and a two-digit day.
&lt;/p&gt;

&lt;p&gt;
These version numbers are short, they&amp;#8217;re easy to compare,
and they give you a clue about when it was released.
&lt;a href=&quot;http://www.ubuntu.com/aboutus/faq&quot;&gt;
Ubuntu already uses this scheme for the first two parts&lt;/a&gt;,
so this scheme is already in use and familiar
to many.
This works perfectly with
&amp;#8220;&lt;a href=&quot;http://sourcefrog.net/projects/natsort/&quot;&gt;natural sort&lt;/a&gt;&amp;#8221;
(e.g., with GNOME&amp;#8217;s Nautilus file manager or with GNU ls&amp;#8217;s &amp;#8220;-v&amp;#8221; option).
&lt;/p&gt;

&lt;p&gt;
If you use a time-based release system
(see &lt;a href=&quot;http://www.linux.com/articles/114247&quot;&gt;this summary&lt;/a&gt; of
&lt;a href=&quot;http://www.cyrius.com/publications/michlmayr-phd.html&quot;&gt;Martin Michlmayr&amp;#8217;s thesis&lt;/a&gt; for why you would),
using this version numbering scheme is easy,
and you can even talk about future releases the same way.
But what if you release software based on when the features are ready -
how, then, can you talk about the system under development?
In that case,
you can&amp;#8217;t easily call it by the version number, since you don&amp;#8217;t know it yet.
But that&amp;#8217;s not really a problem.
In many cases, you can just talk about the &amp;#8220;development&amp;#8221; branch or
give a special name to the development branch
(e.g., &amp;#8220;Rawhide&amp;#8221; for Fedora).
If you need to distinguish between multiple development
branches, just give each of them a name
(e.g., &amp;#8220;Hardy Heron&amp;#8221; for Ubuntu); on release you can announce
the version number of a named branch (e.g., &amp;#8220;Hardy Heron is 8.04&amp;#8221;).
This is more-or-less what many people do now, but if a lot of us
used the same system, version numbers would have more meaning than
they do now.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>YEARFRAC Incompatibilities between Excel 2007 and OOXML (OXML)</title>
    <link>http://www.dwheeler.com/blog/2008/05/19#excel-oxml-yearfrac</link>
    <pubDate>Mon, 19 May 2008 08:21 GMT</pubDate>
    <!-- date: 2008-05-19 -->
    <description>
&lt;p&gt;
In theory, the OOXML (OXML) specification is supposed to define
what Excel 2007 reads and writes.
In practice, it&amp;#8217;s not true at all;
the latest public drafts of OOXML are
unable to represent many actual Excel 2007 files.
&lt;/p&gt;
&lt;p&gt;
For example,
at least 26 Excel financial functions depend on a parameter called &amp;#8220;Basis&amp;#8221;,
which controls how the calendar is interpreted.
The YEARFRAC function is a good example of this; it returns the
fraction of years between two dates, given a &amp;#8220;basis&amp;#8221; for interpreting
the calendar.
Errors in these functions can have large financial stakes.
&lt;/p&gt;
&lt;p&gt;
I&amp;#8217;ve posted a new document,
&lt;a href=&quot;http://www.dwheeler.com/yearfrac/excel-ooxml-yearfrac.pdf&quot;&gt;YEARFRAC Incompatibilities between Excel 2007 and OOXML (OXML), and the Definitions Actually Used by Excel 2007&lt;/a&gt;
(&lt;a href=&quot;http://www.dwheeler.com/yearfrac/excel-ooxml-yearfrac.odt&quot;&gt;[OpenDocument version]&lt;/a&gt;), which shows that
the definitions of OOXML and Excel 2007 aren&amp;#8217;t the same at all.
&amp;#8220;This document identifies incompatibilities between the YEARFRAC function, as implemented by Microsoft Excel 2007, compared to how it is defined in the Office Open Extensible Mark-up Language (OOXML), final draft ISO/IEC 29500-1:2008(E) as of 2008-05-01 (aka OXML).  It also identifies the apparent definitions used by Excel 2007 for YEARFRAC, which to the author’s knowledge have never been fully documented anywhere.  They are not defined in the OOXML specification, because OOXML’s definitions are incompatible with the apparent definition used by Excel 2007.&amp;#8221;
&lt;/p&gt;
&lt;p&gt;
&amp;#8220;This incompatibility means that, given OOXML’s current definition,  OOXML cannot represent any Excel spreadsheet that uses financial functions using “basis” date calculations, such as YEARFRAC, if they use common “basis” values (omitted, 0, 1, or 4).   Excel functions that depend upon &amp;#8220;basis&amp;#8221; date calculations include:  ACCRINT, ACCRINTM, AMORDEGRC, AMORLINC, COUPDAYBS, COUPDAYS, COUPDAYSNC, COUPNCD, COUPNUM, COUPPCD, DISC, DURATION, INTRATE, MDURATION, ODDFPRICE, ODDFYIELD, ODDLPRICE, ODDLYIELD, PRICE, PRICEDISC, PRICEMAT, RECEIVED, YEARFRAC, YIELD, YIELDDISC, and YIELDMAT (26 functions).&amp;#8221;
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&quot;http://www.dwheeler.com/yearfrac&quot;&gt;I have much more information
about YEARFRAC if you want it.&lt;/a&gt;
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Oracle letter to Universities: Educate software developers on security/assurance!</title>
    <link>http://www.dwheeler.com/blog/2008/05/15#oracle-letter</link>
    <pubDate>Thu, 15 May 2008 12:08 GMT</pubDate>
    <!-- date: 2008-05-15 -->
    <description>
&lt;p&gt;
I am &lt;i&gt;delighted&lt;/i&gt; to point out a
&lt;a href=&quot;http://www.oracle.com/security/docs/mary-ann-letter.pdf&quot;&gt;
really interesting letter to Universities by
Mary Ann Davidson, the Chief Security Officer of Oracle Corporation&lt;/a&gt;.
It basically tells colleges and universities to stop ignoring security, and
to instead include software security principles
in their computer science curricula.
I&amp;#8217;m so delighted to see this letter, which has just been released to
the public (it had been privately sent to many colleges and universities).
Let me point out and comment on some great points in this letter, because
I think this letter is really important.
&lt;/p&gt;
&lt;p&gt;
In this letter, she notes that
&amp;#8220;many security vulnerabilities can be traced to a relatively few types
of common coding errors&amp;#8221;.
&lt;a href=&quot;http://www.dwheeler.com/secure-programs&quot;&gt;
I&amp;#8217;ve noted that myself, by the way&lt;/a&gt;; simply educating developers on
what the common (past) mistakes are goes a &lt;i&gt;long&lt;/i&gt; way towards
eliminating vulnerabilities.
She then notes,
&amp;#8220;most developers we hire have not been
adequately trained in basic secure coding principles
in their undergraduate or graduate computer science programs.&amp;#8221;
I agree and think it&amp;#8217;s horrific; more on that in a moment.
She clarifies that this is a really important problem:
&amp;#8220;Security flaws are widely recognized as a threat to national security
and to the privacy and financial well being of individual citizens,
in addition to the costs they impose on us and our customers.&amp;#8221;
They haven&amp;#8217;t just let this be; as they note,
&amp;#8220;We have therefore had to develop and roll out our own in-house security
training program at significant time and expense.&amp;#8221;
Kudos to Oracle for doing such training, by the way; far too many
organizations don&amp;#8217;t do that, which explains why software continues
to have the same old vulnerabilities as it did 30 years ago.
But clearly Oracle cannot train the world, nor it is reasonable to expect
that they do so.
&lt;/p&gt;
&lt;p&gt;
She also states that
&amp;#8220;We believe that the ability to recognize and avoid common errors that can
result in catastrophic security failures should be a core part of computer
science curricula and that the above measures will foster such change.
We strongly recommend that universities adopt secure coding practices as
part of their computer science curricula, to improve the security of all
commercial software, and ensure that their graduates remain competitive
in the job market.&amp;#8221;
To that I say, Amen.
&lt;/p&gt;
&lt;p&gt;
By itself, that&amp;#8217;s &lt;i&gt;great&lt;/i&gt;, but here&amp;#8217;s the kicker:
&amp;#8220;In the future, Oracle plans to give &lt;i&gt;&lt;b&gt;hiring preference&lt;/b&gt;&lt;/i&gt;
to students who have received such training and can demonstrate competence
in software security principles.&amp;#8221;
Do you see this?
Students at colleges and universities that fail
to properly prepare them will be at a competitive disadvantage!
&lt;/p&gt;
&lt;p&gt;
Today, almost all computer science and software engineering
graduates will develop software that
connects to a network, or must take data from a network&amp;#8230;
yet almost all are absolutely clueless about how to do so.
Not because they don&amp;#8217;t know what a &amp;#8220;socket&amp;#8221; is, but because they don&amp;#8217;t
know how to counter attacks.
And if you&amp;#8217;re hooked to a network, or take data from one, you
&lt;i&gt;will&lt;/i&gt; get attacked.
&lt;/p&gt;
&lt;p&gt;
Yet the education community (with a few wonderful exceptions) still
completely ignores the need to educate software developers on how to develop
secure software.
&amp;#8220;It&amp;#8217;s not my job&amp;#8221; is not just wrong; it&amp;#8217;s almost criminal.
Society is &lt;i&gt;depending&lt;/i&gt; on the educational community to educate students
in the fundamentals of what they need to know.
Society depends on software, and
essentially &lt;i&gt;every&lt;/i&gt; student in a software-related field
will, after they graduate, write software that will be attacked.
Attacks are no longer a surprise - they are a guarantee.
Yet the educational system that&amp;#8217;s supposed to prepare our developers
fundamentally fails to do so.
Since attacks are guaranteed, and the
students are guaranteed to &lt;i&gt;not&lt;/i&gt;
know how to counter them, what other results would you expect?
The basics of developing secure software should be a &lt;b&gt;mandatory&lt;/b&gt;
part of computer science and software engineering undergraduate curricula.
The vulnerabilities that the students &lt;i&gt;will&lt;/i&gt; embed in software,
if they do not get this education, will
lead to great loss of life and the loss of billions of dollars.
Sure, schools already have a lot of material to cover,
but practically nothing in a computer science curricula is
as important as how to develop secure software;
I can think of no other omissions in the CS curricula that
cause so much damage.
Don&amp;#8217;t tell me that you only teach the &amp;#8220;fundamentals&amp;#8221;; programming languages
change, but the need for security will &lt;i&gt;never&lt;/i&gt; go away; it
&lt;i&gt;is&lt;/i&gt; fundamental.
I think
computer science and software engineering departments that do not explain
the basics of developing secure software
to all of their undergraduate and graduate students should be
shut down, as a menace to society, until they change their ways.
&lt;/p&gt;
&lt;p&gt;
Oh, if you want to see more about this letter,
&lt;a href=&quot;http://blogs.oracle.com/maryanndavidson/2008/04/08#a286&quot;&gt;
see Mary Ann Davidson&amp;#8217;s blog article about it,
&amp;#8220;The Supply Chain Problem&amp;#8221;&lt;/a&gt;, where
she talks about what led up to the letter, and the
follow-on from it:
&amp;#8220;Last year, I got fed up enough with Oracle having to train otherwise bright
and capable CS grads in secure coding 101 that I sent letters to the top 10 or
so universities we recruit from (my boss came up with the idea and someone on
my team executed on it - teamwork is a wonderful thing)&amp;#8230;
I am sorry to state that only one of those universities we wrote to responded
to my letter&amp;#8230;
We need a revolution - an upending of the way we think about security -and
that means upsetting the supply chain of software developers&amp;#8230;
To universities, I cannot but contrast the education of engineers with that of
computer science majors. Engineers know that their work product must above all
be safe, secure and reliable. They are trained to think this way (not pawn off
&amp;#8216;safety&amp;#8217; on &amp;#8216;testers&amp;#8217;) and their curricula builds and reinforces the
techniques and mindset of safe, secure and reliable product. (A civil engineer
who ignores the principles of basic structures - a core course - in an upper
level class is not going to graduate, and can&amp;#8217;t dismiss structures as a
&amp;#8216;legacy problem.&amp;#8217;)&amp;#8221;
&lt;/p&gt;
&lt;p&gt;
I would &lt;i&gt;love&lt;/i&gt; to see many organizations banding together to sign
a letter like this one.
If enough organizations band together, I think many universities and
colleges will finally get the message.
I would expand it beyond computer science, to any curricula with a significant
amount of software development (such as software engineering, MIS, and so on),
but that&amp;#8217;s a quibble.
My goal is not to shut down any departments (I hope that&amp;#8217;s clear);
it&amp;#8217;s to repair a serious omission in our educational system.
Kudos to Mary Ann Davidson, for writing the letter and sending it to
a number of Universities.
When I learned of it, I begged her to please post it publicly.
To her &lt;i&gt;great&lt;/i&gt; credit, she&amp;#8217;s now done so.
Thanks, from the bottom of my heart!
Now colleges and universities have even fewer reasons to claim the nonsense,
&amp;#8220;well, no one wants information on developing secure software.&amp;#8221;
The companies that will hire your students know otherwise.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Defining &amp;#8220;open standards&amp;#8221;: The Digital Standards Organization (digistan.org)</title>
    <link>http://www.dwheeler.com/blog/2008/05/14#open-standards-digistan</link>
    <pubDate>Wed, 14 May 2008 17:54 GMT</pubDate>
    <!-- date: 2008-05-14 -->
    <description>
&lt;p&gt;
Lots of people agree that we need &amp;#8220;open standards&amp;#8221; in information
technology.
The problem is, there are a lot of snake-oil salesmen
who are trying to (re)define that term
to mean &amp;#8220;whatever proprietary product I&amp;#8217;m selling&amp;#8221;.
&lt;/p&gt;
&lt;p&gt;
Will we be able to choose what products we use?
Will we even be able to exercise our rights (as citizens) at all?
These are important questions about our future.
The answers to those questions
depends on whether or not we have &lt;i&gt;real&lt;/i&gt; open standards in place
for critical areas of our lives.
A vendor who controls critical standards could easily decide that something
that is manifestly &lt;i&gt;not&lt;/i&gt; in our interest could be in theirs, and
force us to submit to their malevolent actions.
This is already a concern, and through globalization it will only get worse.
We are dependent on information systems, and those who
control their standards control those systems&amp;#8230; and thus, us.
It&amp;#8217;s about power; should we have any?
This means that
understanding what &lt;i&gt;real&lt;/i&gt; open standards are about is vital.
&lt;/p&gt;
&lt;p&gt;
In my essay
&lt;a href=&quot;http://www.dwheeler.com/essays/opendocument-open.html&quot;&gt;
&amp;#8220;Is OpenDocument an Open Standard? Yes!&amp;#8221;&lt;/a&gt;,
I addressed this problem of multiple different definitions
by finding three widely-used definitions
(Perens&amp;#8217;, Krechmer&amp;#8217;s, and the European Commission&amp;#8217;s) and merging them.
After all, if a specification meets all three definitions of
&amp;#8220;open standard&amp;#8221;, then it&amp;#8217;s far more likely to be a true open standard.
Problem is, with all those trees, it&amp;#8217;s hard to see the forest.
&lt;/p&gt;
&lt;p&gt;
So I&amp;#8217;m delighted to have discovered the
&lt;a href=&quot;http://www.digistan.org/&quot;&gt;Digital Standards Organization
(digistan.org)&lt;/a&gt;.
They have a wonderfully brief definition of &amp;#8220;open standard&amp;#8221;:
&amp;#8220;a published specification that is immune to vendor capture at all
stages in its life-cycle&amp;#8221;.
That can be a little mystifying, so they also provide a
&lt;a href=&quot;http://www.digistan.org/open-standard&quot;&gt;
slightly longer definition of &amp;#8220;open standard&amp;#8221; that clarifies what
that means&lt;/a&gt;:
&lt;ul&gt;
&lt;li&gt;&amp;#8220;The standard is adopted and will be maintained by a not-for-profit organization, and its ongoing development occurs on the basis of an open decision-making procedure available to all interested parties.&lt;/li&gt;
&lt;li&gt;The standard has been published and the standard specification document is available freely. It must be permissible to all to copy, distribute, and use it freely.&lt;/li&gt;
&lt;li&gt;The patents possibly present on (parts of) the standard are made irrevocably available on a royalty-free basis.&lt;/li&gt;
&lt;li&gt;There are no constraints on the re-use of the standard.&lt;/li&gt;
&lt;/ul&gt;
A key defining property is that an open standard is immune to vendor capture at all stages in its life-cycle. Immunity from vendor capture makes it possible to improve upon, trust, and extend an open standard over time.&amp;#8221;
&lt;/p&gt;
&lt;p&gt;
That&amp;#8217;s a remarkably clear and simple definition, and good definitions are hard!
Even better, they have posted a
&lt;a href=&quot;http://www.digistan.org/rationale&quot;&gt;rationale for this definition&lt;/a&gt;
that cuts through all the noise and nonsense, and instead gets to the heart
of the matter.
For example, it explains the real goals of open standards:
&amp;#8220;An open standard must be aimed at creating unrestricted competition between
vendors and unrestricted choice for users. Any barrier - including RAND,
FRAND, and variants - to vendor competition or user choice is incompatible
with the needs of the market at large.&amp;#8221;
Here&amp;#8217;s a quote from the rationale&amp;#8217;s
abstract, which I think makes a lot of sense:
&lt;blockquote&gt;&lt;i&gt;
&amp;#8220;Many groups and individuals have provided definitions for &amp;#8216;open standard&amp;#8217; that reflect their economic interests in the standards process. We see that the fundamental conflict is between vendors who seek to capture markets and raise costs, and the market at large, which seeks freedom and lower costs.
There are thus only two types of standard: franchise standards, and open standards. Vendors work hard to turn open standards into franchise standards. They work to change the statutory language so they can cloak franchise standards in the sheep&amp;#8217;s clothing of &amp;#8216;open standard&amp;#8217;.
Our canonical definition of open standard derives from the conclusion that this conflict lies at the heart of the matter. We define an open standard as &amp;#8216;a published specification that is immune to vendor capture at all stages in its life-cycle&amp;#8217;.
A full definition of &amp;#8216;open standard&amp;#8217; must take into account the direct economic conflict between vendors and the market at large. Such conflicts do not end when a standard is published, so an open standard must also be immune from attack long after it has been widely implemented.&amp;#8221;
&lt;/i&gt;&lt;/blockquote&gt;
&lt;/p&gt;
&lt;p&gt;
Digistan is currently asking people to sign
&lt;a href=&quot;http://www.digistan.org/hague-declaration&quot;&gt;
&amp;#8220;The Hague Declaration&amp;#8221;&lt;/a&gt; by 2008-05-21.
This one states why open standards are important to human liberty,
in ways that non-technical people can understand.
&lt;a href=&quot;
http://www.freesoftwaremagazine.com/columns/open_letter_standards_professionals_developers_and_activists&quot;&gt;
As Pieter Hintjens argues in his
&amp;#8220;Open letter to Standards Professionals, Developers, and Activists&amp;#8221;&lt;/a&gt;,
&amp;#8220;The Hague Declaration argues that international law and national
constitutions of most democracies oblige governments to adopt open standards.&amp;#8221;
If the text of this letter looks a little like
&lt;a href=&quot;http://www.gesmer.com/attorneys/updegrove.php&quot;&gt;Andrew Updegrove&lt;/a&gt;&amp;#8217;s
&lt;a href=&quot;http://consortiuminfo.org/bulletins/pdf/feb08/feb08.pdf&quot;&gt;
A Proposal to Recognize the Special Status of
&amp;#8220;Civil ICT Standards&amp;#8221;&lt;/a&gt; or his
&lt;a href=&quot;http://consortiuminfo.org/standardsblog/article.php?story=20080409110045256&quot;&gt;testimony in Texas&lt;/a&gt;, that&amp;#8217;s no accident;
&lt;a href=&quot;http://www.digistan.org/about&quot;&gt;
Andrew Updegrove is one of Digistan&amp;#8217;s founders&lt;/a&gt;.

&lt;/p&gt;
&lt;p&gt;
Standards are vitally important.
If we allow individual companies to control standards, then we have ensured
that they will control us - and what we may do - through them.
Being a non-profit helps, but even a non-profit&amp;#8217;s no guarantee; is the
organization interested in maximizing implementation and
competition between potential suppliers,
or does it have some other motivation (such as maximizing publication revenue)?
&lt;/p&gt;
&lt;p&gt;
I think making standards available at no-charge is no longer a nicety; it
is a necessity for a specification to be a truly open standard.
When there were only a few standards, and all products were developed by
large big-budget corporations, a $100 standard was not a big deal.
But today there are a vast array of standards; simply buying
&amp;#8220;all relevant standards&amp;#8221; is becoming prohibitive even for
large companies with massive budgets.
And those big budgets are increasingly rare; suppliers are often
small organizations or individuals collaborating together, or are
in countries where those kinds of funds are unavailable.
Because the world now includes so many new suppliers, anything that
prevents those suppliers from using standards is simply unacceptable.
Don&amp;#8217;t give me the nonsense that the money is needed to help
develop standards; it&amp;#8217;s not true.
I&amp;#8217;ve helped to develop many standards, and I never received a penny from the
publication royalties.
The IETF, W3C, OASIS, and many other organizations manage to publish their
standards, and have for years.
The world has changed.
In today&amp;#8217;s world, &amp;#8220;publish&amp;#8221; means &amp;#8220;freely available over the Internet without
having to register for it&amp;#8221;; if you can&amp;#8217;t Google it, it doesn&amp;#8217;t exist.
The cost of putting a specification on a public web server is essentially
petty cash, and &lt;i&gt;not&lt;/i&gt; doing so means that many (if not most) of
the specification&amp;#8217;s potential users cannot use it.
&lt;/p&gt;
&lt;p&gt;
Open standards and
&lt;a href=&quot;http://www.dwheeler.com/oss_fs_why.html&quot;&gt;free-libre / open source software (FLOSS)&lt;/a&gt;
are not the same thing - not at all!
There are some similarities, though.
From a customer&amp;#8217;s point of view, both open standards and FLOSS
are strategies for enabling supplier switching (by preventing lock-in).
In addition, customers often don&amp;#8217;t switch to a FLOSS product,
even it&amp;#8217;s technologically superior or has lower total costs, solely
because the customer is locked into an existing product due to
proprietary standards (in data formats, APIs, and so on).
You can choose to use open standards and not use FLOSS products, but
if you use an open standard, it &lt;i&gt;enables&lt;/i&gt; you to select a FLOSS product
(now or later).
&lt;/p&gt;
&lt;p&gt;
I believe, very much, in the power of competition to produce
lower-cost, higher-quality, and innovative components.
But competition is easily stymied through lock-in via &amp;#8220;franchise&amp;#8221; standards.
Open standards are necessary to eliminate lock-in and bring to everyone
the advantages of competition:
lower cost, higher quality, and greater innovation.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Bilski: Information is physical!?</title>
    <link>http://www.dwheeler.com/blog/2008/05/09#bilski-information-is-physical</link>
    <pubDate>Fri, 09 May 2008 10:53 GMT</pubDate>
    <!-- date: 2008-05-09 -->
    <description>
&lt;p&gt;
The
&lt;a href=&quot;http://www.groklaw.net/article.php?story=20080508231813484&quot;&gt;
US Court of Appeals for the Federal Circuit in Washington, DC just
heard arguments in the &lt;i&gt;Bilski&lt;/i&gt; case&lt;/a&gt;,
where the appellant (Bilski) is arguing that a completely mental
process should get a patent.
The fact that this was even entertained demonstrates why
the patent system has truly descended into new levels of madness.
At least the PTO rejected the application; the problem is that the PTO
now allows business method patents and software patents.
Once they allowed them, there&amp;#8217;s no rational way to say
&amp;#8220;stop! That&amp;#8217;s rediculous!&amp;#8221; without being arbitrary.
&lt;/p&gt;
&lt;p&gt;
Mr. David Hanson (Webb Law Firm) argued for the appellant (Bilski), and
got peppered with questions.
&amp;#8220;Is a curve ball patentable?&amp;#8221;, for example.
At the end, he finally asked the court to think of
&amp;#8220;information as physical&amp;#8221;; it is therefore tangible and can be transformed.
&lt;/p&gt;

&lt;p&gt;
That is complete lunacy, and it clearly demonstrates why
the patent office is in real trouble.
&lt;/p&gt;
&lt;p&gt;
Information is &lt;b&gt;not&lt;/b&gt; physical, it is fundamentally different,
and that difference has been understood for centuries.
If I give you my car, I no longer have that car.
If I give you some information, I still have the information.
That is a &lt;i&gt;fundamental&lt;/i&gt; difference in information, and always
has been.
The fact that Bilski&amp;#8217;s lawyer can&amp;#8217;t understand this difference shows
why our patent office is so messed up.
&lt;/p&gt;
&lt;p&gt;
This fundamental difference between information and physical objects
was well-understood by the U.S. founding fathers. Here&amp;#8217;s what Thomas
Jefferson said: &amp;#8220;That ideas should freely spread from one to another over
the globe, for the moral and mutual instruction of man, and improvement
of his condition, seems to have been peculiarly and benevolently designed
by nature, when she made them, like fire, expansible over all space,
without lessening their density at any point, and like the air in which
we breath, move, and have our physical being, incapable of confinement
or exclusive appropriation. Inventions then cannot, in nature, be a
subject of property.&amp;#8221; Thomas Jefferson was a founder, and an inventor.
No, they didn&amp;#8217;t have computers then, but computers merely automate
the processing of information; the &lt;i&gt;essential difference&lt;/i&gt; between
information and physical/tangible objects was quite clear then.
&lt;/p&gt;
&lt;p&gt;
Our laws need to distinguish between information and physical objects,
because they have fundamentally different characteristics.
&lt;/p&gt;
&lt;p&gt;
Basically, by failing to understand the differences, the PTO let in
software patents and business method patents, which have been
grossly harmful to the United States.
&lt;/p&gt;
&lt;p&gt;
Even if you thought they were merely &amp;#8220;neutral&amp;#8221;, that&amp;#8217;s not enough.
There&amp;#8217;s a famous English speech about the trade-offs of copyright law,
whose principles also apply here: &amp;#8220;It is good that authors should be
remunerated; and the least exceptionable way of remunerating them is by
a monopoly. Yet monopoly is an evil. For the sake of the good we must
submit to the evil; but the evil ought not to last a day longer than is
necessary for the purpose of securing the good.&amp;#8221; -
&lt;a href=&quot;http://www.apig.org.uk/index/APIG_DRM_Report-final.pdf&quot;&gt;
Thomas Babbington
Macaulay, speech to the House of Commons, February 5, 1841&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
I believe that software patents need to be abolished, pronto.
&lt;a href=&quot;http://www.dwheeler.com/innovation/innovation.html#patents&quot;&gt;
As I&amp;#8217;ve discussed elsewhere, software patents harm software innovation&lt;/a&gt;,
not help it.
&lt;/p&gt;
&lt;p&gt;
But here in the Bilski case we see
why some some people have managed to sneak software patents into
the patent process.
In short, too many people do not understand the fundamental differences
between information and physical objects.
People whose thinking is &lt;i&gt;that&lt;/i&gt; fuzzy are easily duped.
Though clearly many people aren&amp;#8217;t as confused as Bilski&amp;#8217;s lawyer,
I think too many people in the patent process have become so
confused about the difference between physical objects and
information that they don&amp;#8217;t understand why software patents
are a serious problem.
Patents should only apply to processes that directly change physical
objects, and their scope should only cover the specifics of those changes.
I add that latter part because yes, changing the number on a display does
change something physical, but that is irrelevant.
If you have a wholly new process for making displays (say, using a new
chemical compound), that could be patentable, but changing a &amp;#8220;5&amp;#8221; to a &amp;#8220;6&amp;#8221;
should not be patentable because &amp;#8220;changing a 5 to a 6&amp;#8221; is not fundamentally
a change in nature.
Taking something unpatentable and adding the phrase &amp;#8220;doing it with a computer&amp;#8221;
should not change an unpatentable invention
into a patentable one; the Supreme Court
understood that, but the PTO still fails to understand that.
&lt;/p&gt;
&lt;p&gt;
I think pharmaceutical companies are afraid of any patent reform laws,
because they&amp;#8217;re afraid that a change in the patent system might hurt them.
But if the patent system isn&amp;#8217;t fixed - by eliminating business method
patents and software patents - the entire patent system might become
too overwhelmed to function, and thus eventually scrapped.
I don&amp;#8217;t know if pharma patents are more help than hinderance; I&amp;#8217;m not
an expert in that area.
But I make my living with software, and
it&amp;#8217;s obvious to me (and most other software practitioners)
that software patents and business patents are becoming
a massive drag on innovation.
If we can&amp;#8217;t fix the patent system, we&amp;#8217;ll have to abolish the
patent system completely.
A lot of lawyers will be unhappy if the patent system is
eliminated, but there are more non-lawyers than lawyers.
If the pharma companies want to have a working patent system,
then they&amp;#8217;ll need to help reign in patents in other areas,
or the whole system may collapse.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Open Source Computer Emergency Response Team (oCERT)</title>
    <link>http://www.dwheeler.com/blog/2008/05/08#ocert.org</link>
    <pubDate>Thu, 08 May 2008 11:01 GMT</pubDate>
    <!-- date: 2008-05-08 -->
    <description>
&lt;p&gt;
Here&amp;#8217;s something new and interesting: the
&lt;a href=&quot;http://ocert.org/&quot;&gt;Open Source Computer Emergency Response Team
(oCERT)&lt;/a&gt;.
Here&amp;#8217;s how they describe themselves:
&amp;#8220;The oCERT project is a public effort providing security handling
support to Open Source projects affected by
security incidents or vulnerabilities&amp;#8230;&amp;#8221;.
&lt;/p&gt;

&lt;p&gt;
They promise to keep things moving.
They do permit embargo periods (where vulnerabilities are not publicly
disclosing, giving time for developers to fix the problem first).
More importantly, though, they have a maximum embargo time of two months;
I think that&amp;#8217;s great, and important, because a lot of suppliers have
abused embargo periods and failed to fix critical vulnerabilities
as long as they&amp;#8217;re embargoed.
These abuses often resulted in customers being exploited through mechanisms
that the supplier knew about, but refused to fix in a timely manner.
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;http://googleonlinesecurity.blogspot.com/2008/05/contributing-to-open-source-software.html&quot;&gt;Google is backing oCERT&lt;/a&gt;, which is certainly
encouraging.
Google even mentions my &amp;#8220;three conditions&amp;#8221; for securing software (thanks!):
&lt;ol&gt;
&lt;li&gt;people need to actually review the code&lt;/li&gt;
&lt;li&gt;developers/reviewers need to know how to write secure code&lt;/li&gt;
&lt;li&gt;once found, security problems need to be fixed quickly, and their fixes distributed quickly&lt;/li&gt;
&lt;/ol&gt;
Clearly, something like oCERT could help with these.
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;http://www.computerworld.com/action/article.do?command=viewArticleBasic&amp;articleId=9083458&amp;intsrc=news_ts_head&quot;&gt;This ComputerWorld article on
oCERT&lt;/a&gt; makes some interesting points.
One minor point: They worry that oCERT is using the term &amp;#8220;CERT&amp;#8221; without
permission, but oCERT reports that they do indeed have that permission.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Securing Open Source Software (OSS)</title>
    <link>http://www.dwheeler.com/blog/2008/05/06#securing-oss-2008</link>
    <pubDate>Tue, 06 May 2008 21:17 GMT</pubDate>
    <!-- date: 2008-05-06 -->
    <description>
&lt;p&gt;
I&amp;#8217;ve just posted my
&lt;a href=&quot;http://www.dwheeler.com/essays/securing-oss.pdf&quot;&gt;
presentation titled &amp;#8220;Securing Open Source Software (OSS or FLOSS)&lt;/a&gt;,
which is to be presented at the
&lt;a href=&quot;http://www.bowheadevents.com/swaforum2008/index.cfm&quot;&gt;
8th Semi-Annual Software Assurance Forum, May 6-8, 2008,
Sheraton Premiere, Tyson&amp;#8217;s Corner in Vienna, Virginia.&lt;/a&gt;
In it, I discuss how to improve the security of an OSS component
by modifying its environment, as
well as securing the OSS component itself (by selecting a secure
component, building a secure component from scratch, or
modifying an existing component).
I include a number of examples; they&amp;#8217;re necessarily incomplete, but
I hope it will help people who are developing or deploying systems.
(Here is &lt;a href=&quot;http://www.dwheeler.com/essays/securing-oss.odp&quot;&gt;
&amp;#8220;Securing Open Source Software (OSS or FLOSS)&amp;#8221; in OpenDocument format&lt;/a&gt;.)
Enjoy!
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Microsoft Office XML (OOXML) massively defective</title>
    <link>http://www.dwheeler.com/blog/2008/03/21#ooxml-200803</link>
    <pubDate>Fri, 21 Mar 2008 18:48 GMT</pubDate>
    <!-- date: 2008-03-21 -->
    <description>
&lt;p&gt;
&lt;a href=&quot;http://www.robweir.com/blog/2008/03/how-many-defects-remain-in-ooxml.html&quot;&gt;Robert Weir has been analyzing Microsoft&amp;#8217;s Office XML spec
(aka OOXML) to determine how defective it is&lt;/a&gt;, with disturbing results.
&lt;/p&gt;
&lt;p&gt;
Most standards today are relatively small, build on other standards, and
are developed publicly over time with lots of opportunity for correction.
Not OOXML; Emca submitted Office Open XML
for &amp;#8220;Fast Track&amp;#8221; as a
&lt;a href=&quot;http://fussnotes.typepad.com/plexnex/2007/05/ooxml_more_than_1.html&quot;&gt;
massive 6,045 page specification&lt;/a&gt;, developed in an
absurdly rushed way, behind closed doors, using a process controlled
by a single vendor.
It&amp;#8217;s huge primarily because does everything in a non-standard way,
instead of referring to other standards where practical as standards are
&lt;i&gt;supposed&lt;/i&gt; to do (e.g., for mathematical equations they created their
own incompatible format instead of using the MathML standard).
All by itself, its failure to build on other standards should have
disqualified OOXML, but it was accepted for review anyway, and what
happened next was predictable.
&lt;/p&gt;
&lt;p&gt;
No one can seriously review such a massive document in a short time, though
ISO tried; ISO&amp;#8217;s process did find 3,522 defects.
It&amp;#8217;s not at all clear that the defects were fixed -
there&amp;#8217;s been no time to really check, because the process for reviewing
the standard simply wasn&amp;#8217;t designed to handle that many defects.
But even if they were fixed - a doubtful claim -
Robert Weir has asked another question, &amp;#8220;did they find nearly all of the
defects?&amp;#8221;.
The answer is: Almost all of the original defects &lt;i&gt;remain&lt;/i&gt;.
By sampling pages, he&amp;#8217;s found error after error, none of which were found by
the ISO process.
The statistics from the sample are very clear: practically all serious
errors have &lt;i&gt;not&lt;/i&gt; been found.
It&amp;#8217;s true that good standards sometimes have a few errors left in them,
after review, but this isn&amp;#8217;t &amp;#8220;just a few errors&amp;#8221;; these clearly show that
the specification is intensely defect-ridden.
Less than 2% of the defects have been found, by the data we have so far,
which suggests that there are over 172,000 important defects (49x3522)
left to find.
That&amp;#8217;s rediculous.
&lt;/p&gt;
&lt;p&gt;
Want more evidence that it&amp;#8217;s defect-ridden?
Look at
&lt;a
href=&quot;http://surguy.net/articles/ooxml-validation-and-technical-review.xml&quot;&gt;
Inigo Surguy&amp;#8217;s
&amp;#8220;Technical review of OOXML&amp;#8221;&lt;/a&gt;, where he examines
just the WordProcessingML section&amp;#8217;s 2300 XML examples.
He wrote code to check for well-formedness and validation errors,
and found that more than 10% (about 300) were in error even given this
trivial test.
Conclusion?
&amp;#8220;While a
certain number of errors is understandable in any large specification, the
sheer volume of errors indicates that the specification has not been through a
rigorous technical review before becoming an Ecma standard, and therefore may
not be suitable for the fast-track process to becoming an ISO standard.&amp;#8221;
This did not include the other document sections, and
this is a lower bound on accuracy (XML could validate and still be
in error).
(He also confirmed that Word 2007 does not implement
the extensibility requirements of the Ecma specification, so as a result it
would be hard to
&amp;#8220;write an interoperable word processor with Word&amp;#8221; using OOXML.)
&lt;/p&gt;
&lt;p&gt;
I think that all by itself, these vast number of errors in OOXML prove that the
&amp;#8220;Fast Track&amp;#8221; process is completely inappropriate for OOXML.
The &amp;#8220;Fast Track&amp;#8221; process was intended to be used when there was already
a widely-implemented, industry-accepted standard that had already had its
major problems addressed.
That&amp;#8217;s just not the case here.
&lt;/p&gt;
&lt;p&gt;
These huge error rates were predictable, too.
The committee for creating OOXML wasn&amp;#8217;t even &lt;i&gt;created&lt;/i&gt; until OpenDocument
was complete, so they
&lt;i&gt;had&lt;/i&gt; to do a massive rush job to produce &lt;i&gt;anything&lt;/i&gt;.
(&lt;a href=&quot;http://www.noooxml.org/forum/t-19484/microsoft-has-to-rush-to-keep-its-office-revenue-stream&quot;&gt;
Doug Mahugh admitted that
&amp;#8220;Microsoft&amp;#8230; had to rush this standard through.&amp;#8221;&lt;/a&gt;)
They didn&amp;#8217;t reuse existing mature standards, so they ended up creating
much more work for themselves.
Most developers (who could have helped find and fix the defects)
stayed away from the Ecma process in the first
place; its rules gave one vendor complete control over what was allowed,
and there was already a vendor-independent standard in place, which gave
most experts no reason to participate.
The Ecma process was also almost entirely closed-door
&lt;a href=&quot;http://www.robweir.com/blog/2006_07_01_robweir_archive.html&quot;&gt;
(OpenDocument&amp;#8217;s mailing lists are public, in contrast)&lt;/a&gt;,
which predictably increased the error rate too.
&lt;/p&gt;
&lt;p&gt;
The GNOME Foundation has been involved in OOXML&amp;#8217;s development, and here&amp;#8217;s what they say in the
&lt;a href=&quot;http://foundation.gnome.org/about/gnome_annual_report_2007.pdf&quot;&gt;
GNOME Foundation Annual Report 2007&lt;/a&gt;:
&amp;#8220;The GNOME Foundation’s involvement in ECMA TC45-M (OOXML) was the main discussion point during the last meeting&amp;#8230;. [the] Foundation does not support this file format as the main format or as a standard&amp;#8230;&amp;#8221;
I don&amp;#8217;t think this is as widely touted as it should be.
Here&amp;#8217;s an organization
&lt;i&gt;directly involved&lt;/i&gt; in OOXML development,
and it thinks OOXML should not be a standard at all.
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&quot;http://www.groklaw.net/article.php?story=20080320121533442&quot;&gt;
India has already voted &amp;#8220;no&amp;#8221; to OOXML&lt;/a&gt;.
I hope others do the same.
&lt;a href=&quot;http://www.groklaw.net/article.php?story=20080319130708601&quot;&gt;
Countries with the appropriate rights have until March 29 to decide.&lt;/a&gt;
It&amp;#8217;s quite plausiable that the final vote will be &amp;#8220;no&amp;#8221;, and indeed,
based on what&amp;#8217;s published, it &lt;i&gt;should&lt;/i&gt; be &amp;#8220;no&amp;#8221;.
&lt;a href=&quot;http://www.openmalaysiablog.com/2008/03/geneva-day-five.html&quot;&gt;
Open Malaysia&lt;/a&gt; reported on the March 2008 BRM meeting, for example.
It reports that everybody &amp;#8220;did their darnest to improve the spec&amp;#8230;
The final day was absolute mayhem. We had to submit decisions on over 500
items which we hadn&amp;#8217;t [had] the time to review. All the important issues which
have been worked on repeatedly happened to appear on this final day. So it was
non-stop important matters&amp;#8230;
It was a failure of the Fast Track process, and Ecma for choosing it. It
should have been obvious to the administrators that submitting a 6000+ page
document which failed the contradiction period, the 5 month ballot vote and
poor resolution dispositions, should be pulled from the process. It should
have been blatantly obvious that if you force National Bodies to contribute in
the BRM and end up not deliberating on over 80% of their concerns, you will
make a lot of people very unhappy&amp;#8230;
judging from the reactions from the National Bodies who
truly tried to contribute on a positive manner,
without having their concerns heard let alone resolved, they leave the
BRM with only one decision in their mind come March 29th.
The Fast Tracking process is NOT suitable for ISO/IEC DIS 29500. It will fail
yet again.  And this time it will be final.&amp;#8221;
&lt;/p&gt;
&lt;p&gt;
In my opinion, the OOXML specification should not become an international
standard, period.
I think it clearly doesn&amp;#8217;t meet the criteria for &amp;#8220;fast track&amp;#8221; - but
more importantly, it doesn&amp;#8217;t meet the needs for being a standard at all.
It completely contradicts the goal of
&lt;a href=&quot;http://www.iso.org/iso/pressrelease.htm?refid=Ref832&quot;&gt;
&amp;#8220;One standard, one test - Accepted everywhere&amp;#8221;&lt;/a&gt;, and it
simply is not an open standard.
&lt;a href=&quot;http://www.dwheeler.com/blog/2007/06/05/&quot;&gt;I&amp;#8217;ve blogged before
that having multiple standards for office documents is a terrible idea&lt;/a&gt;.
There&amp;#8217;s nothing wrong with a vendor publishing their internal format;
in fact,
&lt;a href=&quot;http://www.noooxml.org/open:rejectooxmlnow&quot;&gt;
ISO&amp;#8217;s &amp;#8220;type 2 technical report&amp;#8221; or &amp;#8220;ISO agreement&amp;#8221;
are pre-existing mechanisms for documenting the format of a
single vendor and product line specification&lt;/a&gt;.
But when important data is going to be exchanged between parties,
it should be exchanged using an open standard.
We already have an open standard for office documents that was developed
by consensus and implemented by multiple vendors: OpenDocument (ISO/IEC 26300).
For more clarification about what an open standard is, or
why OpenDocument is an open standard, see my essay
&lt;a href=&quot;http://www.dwheeler.com/essays/opendocument-open.html&quot;&gt;
&amp;#8220;Is OpenDocument an Open Standard? Yes!&amp;#8221;&lt;/a&gt;
OpenDocument works very well; I use it often.
In contrast, it seems clear that OOXML will never be
a specification that everyone can fully implement.
Its technical problems alone are serious, but even more importantly, the
&lt;a href=&quot;http://www.softwarefreedom.org/resources/2008/osp-gpl.html&quot;&gt;
Software Freedom Law Center&amp;#8217;s
&amp;#8220;Microsoft&amp;#8217;s Open Specification Promise: No Assurance for GPL&amp;#8221;&lt;/a&gt;
makes it clear that OOXML cannot be legally implemented by anyone
using any license.
And this matters greatly.
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&quot;http://consortiuminfo.org/standardsblog/article.php?story=20080224143425160&quot;&gt;
Andy Updegrove calls for recognition of &amp;#8220;Civil ICT Standards&amp;#8221;&lt;/a&gt;, which
I think helps puts this technical stuff into a broader and
more meaningful context.
He notes that in our new &amp;#8220;interconnected world,
virtually every civic, commercial, and expressive human activity
will be fully or partially exercisable only via the Internet,
the Web and the applications that are resident on, or interface
with, them.  And in the third world, the ability to accelerate one’s progress
to true equality of opportunity will be mightily dependent on whether one has
the financial and other means to lay hold of this great equalizer&amp;#8230;
[and thus] public policy relating to
information and communications technology (ICT) 
will become as important, if not more,
than existing policies that relate to freedom of travel (often now being
replaced by virtual experiences), freedom of speech (increasingly expressed on
line), freedom of access (affordable broadband or otherwise), and freedom to
create (open versus closed systems, the ability to create mashups under
Creative Commons licenses, and so on)&amp;#8230;
This is where standards enter the picture, because standards are where policy
and technology touch at the most intimate level.
Much as a constitution establishes and balances the basic rights of an
individual in civil society, standards codify the points where proprietary
technologies touch each other, and where the passage of information is
negotiated&amp;#8230;
what will life be like in the future if Civil ICT Rights are not recognized and
protected, as paper and other fixed media disappear, as information becomes
available exclusively on line, and as history itself becomes hostage to
technology?
I would submit that a vote to adopt OOXML would be a step away from, rather
than a way to advance towards, a future in which Civil ICT Rights are
guaranteed&amp;#8221;.
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&quot;http://www.raffee.co.za/post/29079077&quot;&gt;
Ms. Geraldine Fraser-Moleketi,
Minister of Public Service and Administration, South Africa, gave an
interesting presentation at the
Idlelo African Conference on FOSS and the Digital Commons&lt;/a&gt;.
She said,
&amp;#8220;The adoption of open standards by governments is a critical factor in
building interoperable information systems which are open, accessible,
fair and which reinforce democratic culture and good governance practices.
In South Africa we
have a guiding document produced by my department called the Minimum
Interoperability Standards for Information Systems in Government (MIOS). The
MIOS prescribes the use of open standards for all areas of information
interoperability, including, notably, the use of the Open Document Format
(ODF) for exchange of office documents&amp;#8230;
It is unfortunate that the leading vendor of office software, which enjoys
considerable dominance in the market, chose not to participate and support ODF
in its products, but rather to develop its own competing document standard
which is now also awaiting judgement in the ISO process. If it is successful,
it is difficult to see how consumers will benefit from these two overlapping
ISO standards&amp;#8230;  The proliferation of multiple standards in
this space is confusing and costly.&amp;#8221;
She also said,
&amp;#8220;One cannot be in Dakar without being painfully aware of the tragic history of
the slave trade&amp;#8230;
As we find ourselves today in this new era of the globalised Knowledge Economy
there are lessons we can and must draw from that earlier era. That a crime
against humanity of such monstrous proportions was justified by the need to
uphold the property rights of slave owners and traders should certainly make
us more than a little cautious about what should and should not be considered
suitable for protection as property.&amp;#8221;
&lt;/p&gt;
&lt;p&gt;
You can get more detail from the
&lt;a href=&quot;http://www.groklaw.net/staticpages/index.php?page=20051216153153504&quot;&gt;
Groklaw ODF-MSOOXML main page&lt;/a&gt;, but I think the point is clear.
The world doesn&amp;#8217;t need the confusion of a specification 
controlled by a single vendor being labelled as an international standard.
&lt;a href=&quot;http://www.noooxml.org/open:rejectooxmlnow&quot;&gt;NoOOXML has a list
of reasons to reject OOXML&lt;/a&gt;.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Twisted Mind of the Security Pro</title>
    <link>http://www.dwheeler.com/blog/2008/03/21#twisted-mind</link>
    <pubDate>Fri, 21 Mar 2008 10:08 GMT</pubDate>
    <!-- date: 2008-03-21 -->
    <description>
&lt;p&gt;
&lt;a href=&quot;http://www.wired.com/politics/security/commentary/securitymatters/2008/03/securitymatters_0320&quot;&gt;Bruce Schneier&amp;#8217;s
&amp;#8220;Inside the Twisted Mind of the Security Professional&amp;#8221;&lt;/a&gt;
is highly-recommended reading - he explains the different kind of thinking
required to be good at making things secure.
Security pros are able to see the bigger picture, and in particular, they are
able to see things from from an attacker&amp;#8217;s perspective.
&lt;/p&gt;
&lt;p&gt;
For example,
&amp;#8220;SmartWater is a liquid with a unique identifier linked to a particular
owner. &amp;#8216;The idea is for me to paint this stuff on my valuables as proof
of ownership,&amp;#8217; I wrote when I first learned about the idea. &amp;#8216;I think
a better idea would be for me to paint it on your valuables, and then
call the police.&amp;#8217;&amp;#8221;
Similarly, on opening up an ant farm, his friend was surprised that the
manufacturer would send you ants by mail; Bruce thought it was interesting that
&amp;#8220;these people will send a tube of live ants to anyone you tell them to.&amp;#8221;
&lt;/p&gt;
&lt;p&gt;
Being able to think like an attacker is so important that in my
&lt;a href=&quot;http://www.dwheeler.com/secure-programs/&quot;&gt;
book on writing secure programs&lt;/a&gt;,
I gave it its own heading:
&lt;a href=&quot;http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/paranoia.html&quot;&gt;paranoia is a virtue&lt;/a&gt;.
It&amp;#8217;s still true.
My thanks to Bruce Schneier for expressing this need so eloquently.
&lt;/p&gt;
&lt;p&gt;
We would live in a better world if &lt;i&gt;all&lt;/i&gt; of us could see the world
as attackers do - or at least make the effort to try.
In particular, we&amp;#8217;d stop doing many foolish things in the name of
&amp;#8220;security&amp;#8221;, and instead do things that actually secured our world.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>OSS and the U.S. DoD - Questions and Answers</title>
    <link>http://www.dwheeler.com/blog/2008/03/11#oss-dod-qa2008</link>
    <pubDate>Tue, 11 Mar 2008 20:19 GMT</pubDate>
    <!-- date: 2008-03-11 -->
    <description>
&lt;p&gt;
I&amp;#8217;ve just posted
&lt;a href=&quot;http://www.dwheeler.com/essays/dod-oss-qa.html&quot;&gt;
Questions and Answers for 2008 &amp;#8220;Open Source Software and DoD&amp;#8221; Webinar&lt;/a&gt;.
These are my attempts to answer the questions people sent me at my February
&lt;a href=&quot;http://www.dwheeler.com/oss-dod-webinar2008.html&quot;&gt;
&amp;#8220;Open Source Software (OSS) and the U.S. Department of Defense (DoD)&amp;#8221;&lt;/a&gt;
Some of the questions were easy to answer, but some were surprisingly
difficult.
In some cases, I asked lawyers and got conflicting answers.
But this is the best information that I could find on the topic.
&lt;/p&gt;

&lt;p&gt;
For example, I explain in detail why
In particular, it appears fairly clear that
both the government and government contractors can
release their results as open source software under the default
DoD contract terms for software development
(&lt;a href=&quot;http://www.acq.osd.mil/dpap/dars/dfars/html/current/252227.htm#252.227-7014&quot;&gt;DFARS contracting clause 252.227-7014&lt;/a&gt;):
&lt;ol&gt;
&lt;li&gt;The government can release software as OSS once it receives
&amp;#8220;unlimited rights&amp;#8221; to it.
Unless other arrangements are made,
the government has unlimited rights to software components when (1) it
pays entirely for their development, or (2) five years after
contract signature if it partly paid for their development.
Before award, a contractor may identify the components that will have more
restrictive rights (e.g., so the government can prefer proposals
that give the government more rights).
Where possible, software developed partly by government funds
should broken into a set of smaller components at the
&amp;#8220;lowest practicable level&amp;#8221;
so the rules can be applied separately to each one.
Of course, the software can only be released to the public as OSS
if other laws are also met
(such as classification, export control, patent law, and trademark law).
&lt;li&gt;
Normally a DoD contractor can release the software as OSS at any time,
since it holds the copyright.
This default can be overridden by the contract, e.g.,
&lt;a
href=&quot;http://www.acq.osd.mil/dpap/dars/dfars/html/current/252227.htm#252.227-7020&quot;&gt;DFARS
252.227-7020&lt;/a&gt;
assigns copyright to the government, and is included in some contracts.
Again, this release can only occur if other laws are also met
(such as classification, export control, patent law, and trademark law).
&lt;/ol&gt;
These are the usual defaults; negotiations can change things, so read
the contract to see if the contract changes these defaults.
For example, sometimes the government has copyright assigned to it,
in which case it can release the software simply because it has the copyright.
&lt;/p&gt;

&lt;p&gt;
I also point out that even when the government isn&amp;#8217;t the copyright holder,
if it releases software under an OSS license it can still enforce its license.
That&amp;#8217;s because, even when it&amp;#8217;s not the copyright holder, it can still enforce
the license&amp;#8230; and because the doctrine of unclean hands will impact
those who refuse to obey the license.
&lt;/p&gt;

&lt;p&gt;
Several people had questions about software developed by a government
employee (which can&amp;#8217;t be copyrighted in the U.S.) and how that impacts OSS.
The short impact is that there&amp;#8217;s no problem; government employees can
still contribute to OSS projects, for example.
I also discuss some of the export control issues (especially ITAR), and
how to address them.
&lt;/p&gt;

&lt;p&gt;
If there are mistakes, please let me know. Thanks!
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>OSS and the U.S. DoD - Webinar</title>
    <link>http://www.dwheeler.com/blog/2008/01/28#oss-dod-webinar2008</link>
    <pubDate>Mon, 28 Jan 2008 17:59 GMT</pubDate>
    <!-- date: 2008-01-28 -->
    <description>
&lt;p&gt;
I&amp;#8217;m going to present a webinar on
&lt;a href=&quot;http://www.dwheeler.com/oss-dod-webinar2008.html&quot;&gt;
&amp;#8220;Open Source Software (OSS) and the U.S. Department of Defense (DoD)&amp;#8221;
&lt;/a&gt;
on Feb 11, 2008, 3:00-4:30pm EST.
It is open to the public, at no charge.
To find out how to sign up, see
&lt;a href=&quot;http://www.dwheeler.com/oss-dod-webinar2008.html&quot;&gt;
http://www.dwheeler.com/oss-dod-webinar2008.html&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Here&amp;#8217;s the summary:
&amp;#8220;Open source software (OSS) has become widespread, but there are many
misconceptions about it - resulting in numerous missed opportunities.
This presentation will clarify what OSS is (and isn&amp;#8217;t),
rebut common misunderstandings about OSS, discuss the relationship
of OSS and security, discuss how to find and evaluate OSS,
and explain OSS licensing (including how to
combine products and select a license).
It will show why nearly all extant OSS is COTS software, and
thus why it&amp;#8217;s illegal (as well as foolish) to ignore OSS options.&amp;#8221;
&lt;/p&gt;

&lt;p&gt;
This presentation is hosted by the
&lt;a href=&quot;https://www.thedacs.com/&quot;&gt;Data &amp;amp; Analysis Center for Software
(DACS)&lt;/a&gt;, which
is technically managed by the
Air Force Research Laboratory - Information Directorate (AFRL/IF). 
&lt;/p&gt;

&lt;p&gt;
Please sign up quickly, if you&amp;#8217;re interested.
There were 45 registrants in the first half hour of its announcement.
&lt;/p&gt;
</description>
   </item>
  </channel>
</rss>