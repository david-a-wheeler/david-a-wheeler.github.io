<?xml version="1.0"?>
<!-- name="generator" content="blosxom/2.0" -->

<rss version="2.0">
  <channel>
    <title>David A. Wheeler's Blog   </title>
    <link>http://www.dwheeler.com/blog</link>
    <description>David A. Wheeler's weblog.</description>
    <language>en</language>

  <item>
    <title>Estimating the Total Development Cost of a Linux Distribution</title>
    <link>http://www.dwheeler.com/blog/2008/10/22#development-cost-linux-2008</link>
    <pubDate>Wed, 22 Oct 2008 19:47 GMT</pubDate>
    <!-- date: 2008-10-22 -->
    <description>
&lt;p&gt;
There&amp;#8217;s a new and interesting paper from the Linux Foundation that
estimates the total development cost of a Linux distro.
Before looking at it, some background would help&amp;#8230;
&lt;/p&gt;

&lt;p&gt;
In 2000 and 2001 I published the first estimates of a GNU/Linux distribution&amp;#8217;s
development costs.
The second study (released in 2001, lightly revised in 2002) was titled
&lt;a href=&quot;http://www.dwheeler.com/sloc/redhat71-v1/redhat71sloc.html&quot;&gt;More than a Gigabuck&lt;/a&gt;.
That study
analyzed Red Hat Linux 7.1 as a representative GNU/Linux distribution,
and found that it would cost over $1 billion (over a Gigabuck)
to develop this GNU/Linux distribution by conventional proprietary means
in the U.S. (in year 2000 U.S. dollars).
It included over 30 million physical source lines of code (SLOC),
and had it been developed using conventional proprietary means, it would
have taken 8,000 person-years of development time to create.
My later paper
&lt;a href=&quot;http://www.dwheeler.com/essays/linux-kernel-cost.html&quot;&gt;
Linux Kernel 2.6: It&amp;#8217;s Worth More!&lt;/a&gt; focused on how to estimate the
development costs for just the Linux kernel
(this was picked up by &lt;a href=&quot;http://www.groklaw.net/article.php?story=20041012233246869&quot;&gt;Groklaw&lt;/a&gt;).
&lt;/p&gt;

&lt;p&gt;
The Linux Foundation has just re-performed this analysis with Fedora 9,
and released it as
&lt;a href=&quot;http://www.linuxfoundation.org/publications/estimatinglinux.php&quot;&gt;
&amp;#8220;Estimating the Total Development Cost of a Linux Distribution&amp;#8221;&lt;/a&gt;.
&lt;a href=&quot;http://linux-foundation.org/weblogs/press/2008/10/21/linux-foundation-publishes-study-estimating-the-value-of-linux/&quot;&gt;
Here&amp;#8217;s their press release&lt;/a&gt;.
I&amp;#8217;d like to thank the authors (Amanda McPherson, Brian Proffitt,
and Ron Hale-Evans), because they&amp;#8217;ve reported a lot of interesting
information.
&lt;/p&gt;

&lt;p&gt;
For example, they found that it would take approximately 
$10.8 billion to rebuild the Fedora 9 distribution in today&amp;#8217;s dollars;
it would take $1.4 billion to develop just the Linux kernel alone.
This isn&amp;#8217;t the &lt;i&gt;value&lt;/i&gt; of the distribution;
typically people won&amp;#8217;t write software unless the software had more
value to them than what it cost them (in time and effort) to write it.
They state that quite clearly in the paper;
they note that these numbers estimate
&amp;#8220;how much it would cost to develop the software in a Linux distribution today,
from scratch. It’s important to note that this estimates the cost but not
the value to the greater ecosystem&amp;#8230;&amp;#8221;.
To emphasize that point, the authors reference a 2008 IDC study
(&amp;#8220;The Role of Linux Commercial Servers and Workloads&amp;#8221;) which claims
that Linux represents a $25 billion ecosystem.
I think IDC&amp;#8217;s figure is (in fact) a gross underestimation of
the ecosystem &lt;i&gt;value&lt;/i&gt;, understandably so (ecosystem value
is very hard to measure).
Still, the cost to &lt;i&gt;redevelop&lt;/i&gt; a system is a plausible lower bound
for the value of something (as long as people keep using it).
More importantly, it clearly proves that very large and sophisticated systems
can be developed as free-libre / open source software (FLOSS).
&lt;/p&gt;

&lt;p&gt;
They make a statement about me that I&amp;#8217;d like to expand on:
&amp;#8220;[Wheeler] concluded—as we did—that Software Lines of Code is
the most practical method to determine open source software value
since it focuses on the end result and not on per-company or
per-developer estimates.&amp;#8221;
That statement is quite true, but please let me explain why.
Directly measuring the amount of time and money spent in development would
be, by far, the best way of finding those numbers.
But few developers would respond to a survey requesting that information,
so direct measurement is completely impractical.
Thus, using well-known industry models is the best &lt;i&gt;practical&lt;/i&gt;
approach to doing so, in spite of their limitations.
&lt;/p&gt;

&lt;p&gt;
I was delighted with their section on the
&amp;#8220;Limitations and Advantages to this Study&amp;#8217;s Approach&amp;#8221;.
All studies have limitations, and I think it&amp;#8217;s much better to
acknowledge them than hide them.
They note several reasons why this approach grossly
underestimates the &lt;i&gt;real&lt;/i&gt; effort in developing a distribution,
and I quite agree with them.
In particular: (1) collaboration often takes additional time
(though it often produces better results because you see all sides);
(2) deletions are work yet they are not counted;
(3) &amp;#8220;bake-offs&amp;#8221; to determine the
best approach (where only the winner is included) produce great results
but the additional efforts for the alternatives aren&amp;#8217;t included in the
estimates.
(I noted the bake-off problem in my
&lt;a href=&quot;http://www.dwheeler.com/essays/linux-kernel-cost.html&quot;&gt;paper on
the Linux kernel&lt;/a&gt;.)
They note that some drivers aren&amp;#8217;t often used, but I don&amp;#8217;t see that as
a problem; after all, it still took effort to develop them, so it&amp;#8217;s valid
to include them in an effort estimate.
Besides, one challenge to creating an operating system is this very issue -
to become useful to many, you must develop a large number of drivers - even
though many of the drivers have a relatively small set of users.
&lt;/p&gt;

&lt;p&gt;
This is &lt;i&gt;not&lt;/i&gt; a study of &amp;#8220;all FLOSS&amp;#8221;; many
FLOSS programs are not included in Fedora (as they note in their limitations).
Others have examined Debian and the Perl CPAN library using my approach
(see &lt;a href=&quot;http://www.dwheeler.com/sloc/&quot;&gt;my page on SLOC&lt;/a&gt;), and
hopefully someday someone will actually try to measure &amp;#8220;all FLOSS&amp;#8221;
(good luck!!).
However, since the Linux Foundation measured a
descendent of what I used for my original analysis,
it&amp;#8217;s valid to examine what&amp;#8217;s happened to the size
of this single distribution over time.
That&amp;#8217;s really interesting, because that lets us examine overall trends.
So let&amp;#8217;s take advantage of that!
In terms of physical source lines of code (SLOC) we have:
&lt;pre&gt;
Distribution         Year   SLOC(million)
Red Hat Linux 6.2    2001    17
Red Hat Linux 7.1    2002    30
Fedora 9             2008   204
&lt;/pre&gt;
If Fedora was growing linearly, the first two points estimate a rate of
13MSLOC/year, and Fedora 9 would have 108 MSLOC (30+6*13).
Fedora 9 is almost twice that size, which shows clearly that there&amp;#8217;s
exponential growth.
Even if you factored in the month of release (which I haven&amp;#8217;t done), I
believe you&amp;#8217;d still have clear evidence of exponential growth.
This observation is consistent with
&lt;a href=&quot;http://www.riehle.org/publications/2008/the-total-growth-of-open-source/&quot;&gt;&amp;#8220;The Total Growth of Open Source&amp;#8221; by Amit Deshpande and Dirk Riehle&lt;/a&gt;
(2008), which found that 
&amp;#8220;both the growth rate as well as the absolute amount of source
code is best explained using an exponential model&amp;#8221;.
&lt;/p&gt;

&lt;p&gt;
Another interesting point:
&lt;a href=&quot;http://www.informationweek.com/blog/main/archives/2007/10/linux_will_be_w.html&quot;&gt;
Charles Babcock predicted, in Oct. 19, 2007, that the Linux kernel
would be worth $1 billion in the first 100 days of 2009&lt;/a&gt;.
He correctly predicted that it would pass $1 billion, but it
happened somewhat earlier than he thought: by Oct. 2008 it&amp;#8217;s already happened,
instead of waiting for 2009.
I think the reason it happened slightly earlier is that Charles Babcock&amp;#8217;s
rough estimate was based on a linear approximation
(&amp;#8220;adding 2,000 lines of code a day&amp;#8221;).
But these studies all seem to indicate that mature
FLOSS programs - including the Linux kernel - are currently
growing &lt;i&gt;exponentially&lt;/i&gt;, not linearly.
Since the rate is also increasing, the date of arrival at $1 billion
was sooner than Babcock&amp;#8217;s rough estimate.
Babcock&amp;#8217;s fundamental point - that the Linux kernel keeps adding value
at a tremendous pace - is still absolutely correct.
&lt;/p&gt;

&lt;p&gt;
I took a look at some of the detailed data, and some very interesting
factors were revealed.
By lines of code, here were the largest programs in Fedora 9
(biggest first):
&lt;pre&gt;
  kernel-2.6.25i686
  OpenOffice.org
  Gcc-4.3.0-2 0080428
  Enterprise Security Client 1.0.1
  eclipse-3.3.2
  Mono-1.9.1
  firefox-3.0
  bigloo3.0b
  gcc-3.4.6-20060404
  ParaView3.2.1
&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;
The Linux kernel is no surprise; as I noted in the past, it&amp;#8217;s &lt;i&gt;full&lt;/i&gt;
of drivers, and there&amp;#8217;s a continuous stream of new hardware that
need drivers.
The Linux Foundation decided to count both gcc3 and gcc4; since there
was a radical change in approach between gcc3 and gcc4, I think that&amp;#8217;s fair
in terms of effort estimation.
(My tool ignores duplicate files, which helps counter double-counting
of effort.)
Firefox wasn&amp;#8217;t included by name in the Gigabuck study, but Mozilla was,
and Firefox is essentially its descendent.
It&amp;#8217;s unsurprising that Firefox is big; it does a lot of things, and
trying to make things &amp;#8220;look&amp;#8221; simple often takes more code (and effort).
&lt;/p&gt;
&lt;p&gt;
What&amp;#8217;s remarkable is that many of the largest programs in Fedora 9
were not even &lt;i&gt;included&lt;/i&gt; in the &amp;#8220;Gigabuck&amp;#8221; study - these are whole
new applications that were added to Fedora since that time.
These largest programs not in the Gigabuck study are:
OpenOffice.org (an office suite, aka word processor,
spreadsheet, presentation, and so on),
Enterprise Security Client, eclipse (a development environment), Mono
(an implementation of the C# programming language and its underlying
&amp;#8220;.NET&amp;#8221; environment), bigloo (an implementation of the Scheme programming
language), and paraview (a data analysis and visualization application for
large datasets).
OpenOffice.org&amp;#8217;s size is no surprise; it does a lot.
I&amp;#8217;m a little concerned that &amp;#8220;Enterprise Security Client&amp;#8221; is so huge -
a security client should be &lt;i&gt;small&lt;/i&gt;, not big, so that you can analyze
it thoroughly for trustworthiness.
Perhaps someone will analyze that program further to see why this is so,
and if that&amp;#8217;s a reason to be concerned.
&lt;/p&gt;

&lt;p&gt;
Anyway, take a look at
&lt;a href=&quot;http://www.linuxfoundation.org/publications/estimatinglinux.php&quot;&gt;
&amp;#8220;Estimating the Total Development Cost of a Linux Distribution&amp;#8221;&lt;/a&gt;.
It conclusively shows that large and useful systems can be developed as FLOSS.
&lt;/p&gt;

&lt;p&gt;
An interesting coincidence: Someone else (Heise) almost simultaneously
released a study of just the Linux kernel, again using SLOCCount.
&lt;a href=&quot;http://www.heise-online.co.uk/open/Kernel-Log-More-than-10-million-lines-of-Linux-source-files--/news/111759&quot;&gt;
Kernel Log: More than 10 million lines of Linux source files&lt;/a&gt;
notes that the Linux kernel version 2.6.27 has 6,399,191 SLOC.
&amp;#8220;More than half of the lines are part of hardware drivers; the second largest
chunk is the arch/ directory which contains the source code of the various
architectures supported by Linux.&amp;#8221;
In that code,
&amp;#8220;96.4 per cent of the code is written in C and 3.3 percent in Assembler&amp;#8221;.
They didn&amp;#8217;t apply the corrective factors specific to Linux kernels
that I discussed in
&lt;a href=&quot;http://www.dwheeler.com/essays/linux-kernel-cost.html&quot;&gt;
Linux Kernel 2.6: It&amp;#8217;s Worth More!&lt;/a&gt;, but it&amp;#8217;s still interesting to see.
And their conclusion is inarguable:
&amp;#8220;There is no end in sight for kernel growth which has been ongoing in the Linux
2.6 series for several years - with every new version, the kernel hackers
extend the Linux kernel further to include new functions and drivers,
improving the hardware support or making it more flexible, better or faster.&amp;#8221;
&lt;/p&gt;
</description>
   </item>
  </channel>
</rss>