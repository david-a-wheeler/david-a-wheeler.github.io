<?xml version="1.0"?>
<!-- name="generator" content="blosxom/2.0" -->

<rss version="2.0">
  <channel>
    <title>David A. Wheeler's Blog   </title>
    <link>http://www.dwheeler.com/blog</link>
    <description>David A. Wheeler's weblog.</description>
    <language>en</language>

  <item>
    <title>Offset 2000 Version Numbers</title>
    <link>http://www.dwheeler.com/blog/2008/07/16#offset-2000-versioning</link>
    <pubDate>Wed, 16 Jul 2008 00:00 GMT</pubDate>
    <!-- date: 2008-07-16 -->
    <description>
&lt;p&gt;
Linus Torvalds is thinking about changing the Linux kernel
version numbering scheme
[&lt;a href=&quot;http://kerneltrap.org/Linux/Kernel_Release_Numbering_Redux&quot;&gt;Kernel Release Numbering Redux&lt;/a&gt;].
He said: &amp;#8220;I _am_ considering changing just the [version] numbering&amp;#8230;
because a constantly increasing minor number leads to big numbers.
I&amp;#8217;m not all that thrilled with &amp;#8216;26&amp;#8217; as a number: it&amp;#8217;s hard to remember&amp;#8230;
If the version were to be date-based, instead of releasing 2.6.26,
maybe we could have 2008.7 instead&amp;#8230;
I personally don&amp;#8217;t have any hugely strong opinions on the numbering.
I suspect others do, though, and I&amp;#8217;m almost certain that
this is an absolutely _perfect_ &amp;#8216;bikeshed-painting&amp;#8217; subject&amp;#8230;
let the
&lt;a href=&quot;http://producingoss.com/en/bikeshed-full.html&quot;&gt;
bike-shed-painting begin&lt;/a&gt;.&amp;#8221;
&lt;/p&gt;

&lt;p&gt;
Here&amp;#8217;s my proposal: &lt;b&gt;Offset 2000 version numbers&lt;/b&gt;, i.e.,
&amp;#8220;(y-2000).mm[.dd]&amp;#8221;.
The first number is the year minus 2000, followed by &amp;#8220;.&amp;#8221; and a two-digit month,
optionally followed by &amp;#8220;.&amp;#8221; and a two-digit day when there&amp;#8217;s more than
one release in a month.
So version 8.07 would be the first release in July 2008.
If you made a later release on July 17, that later release would be 8.07.17
(so if a project makes many releases in a month, you can again determine
how old a particular copy is).
&lt;/p&gt;

&lt;p&gt;
Date-based version numbers have a lot going for them, because at a glance
you know when it was released (and thus you can determine how old
something is).
If you choose the ISO order YYYY.MM.DD, the numbers sort very nicely;
&lt;a href=&quot;http://www.debian.org/doc/debian-policy/ch-binary.html#s3.2.1&quot;&gt;
Debian packages often use YYYYMMDD for versioning&lt;/a&gt;.
But there&amp;#8217;s a problem: full year numbers, or full dates in this format,
are annoyingly large.
For example, version numbers 2008.07.16 and 20080716 are
painfully long version numbers to remember.
&lt;/p&gt;

&lt;p&gt;
So, use dates, but shorten then.
Since nothing today can be released before 2000,
shorten it by subtracting 2000.
Note that this is &lt;i&gt;subtracting&lt;/i&gt; - there&amp;#8217;s no Y2K-like rollover problem,
because the year 2100 becomes 100 and the year 3000 becomes 1000.
The second number is the month; using a two-digit month means you
don&amp;#8217;t have the ambiguity of determining if &amp;#8220;2.2&amp;#8221; is earlier
or later than &amp;#8220;2.10&amp;#8221; (you would use &amp;#8220;2.02&amp;#8221; instead).
If you need to disambiguate day releases
(or you make additional releases in the same month),
add &amp;#8220;.&amp;#8221; and a two-digit day.
&lt;/p&gt;

&lt;p&gt;
These version numbers are short, they&amp;#8217;re easy to compare,
and they give you a clue about when it was released.
&lt;a href=&quot;http://www.ubuntu.com/aboutus/faq&quot;&gt;
Ubuntu already uses this scheme for the first two parts&lt;/a&gt;,
so this scheme is already in use and familiar
to many.
This works perfectly with
&amp;#8220;&lt;a href=&quot;http://sourcefrog.net/projects/natsort/&quot;&gt;natural sort&lt;/a&gt;&amp;#8221;
(e.g., with GNOME&amp;#8217;s Nautilus file manager or with GNU ls&amp;#8217;s &amp;#8220;-v&amp;#8221; option).
&lt;/p&gt;

&lt;p&gt;
If you use a time-based release system
(see &lt;a href=&quot;http://www.linux.com/articles/114247&quot;&gt;this summary&lt;/a&gt; of
&lt;a href=&quot;http://www.cyrius.com/publications/michlmayr-phd.html&quot;&gt;Martin Michlmayr&amp;#8217;s thesis&lt;/a&gt; for why you would),
using this version numbering scheme is easy,
and you can even talk about future releases the same way.
But what if you release software based on when the features are ready -
how, then, can you talk about the system under development?
In that case,
you can&amp;#8217;t easily call it by the version number, since you don&amp;#8217;t know it yet.
But that&amp;#8217;s not really a problem.
In many cases, you can just talk about the &amp;#8220;development&amp;#8221; branch or
give a special name to the development branch
(e.g., &amp;#8220;Rawhide&amp;#8221; for Fedora).
If you need to distinguish between multiple development
branches, just give each of them a name
(e.g., &amp;#8220;Hardy Heron&amp;#8221; for Ubuntu); on release you can announce
the version number of a named branch (e.g., &amp;#8220;Hardy Heron is 8.04&amp;#8221;).
This is more-or-less what many people do now, but if a lot of us
used the same system, version numbers would have more meaning than
they do now.
&lt;/p&gt;
</description>
   </item>
  </channel>
</rss>