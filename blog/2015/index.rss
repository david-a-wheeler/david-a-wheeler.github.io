<?xml version="1.0" encoding="UTF-8"?>
<!-- name="generator" content="blosxom/2.0" -->

<rss version="2.0">
  <channel>
    <title>David A. Wheeler's Blog   </title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>http://www.dwheeler.com/blog</link>
    <description>David A. Wheeler's weblog.</description>
    <language>en</language>

  <item>
    <title>Ransomware coming to medical devices?</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>http://www.dwheeler.com/blog/2015/11/23#ransomware-medical</link>
    <pubDate>Mon, 23 Nov 2015 13:28 GMT</pubDate>
    <!-- date: 2015-11-23 -->
    <description>
&lt;p&gt;
&lt;a href=&quot;http://motherboard.vice.com/read/ransomware-is-coming-to-medical-devices&quot;&gt;Forrester Research has an interesting
cybersecurity prediction for 2016: We’ll see ransomware for a medical device or wearable&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
This is, unfortunately, plausible.
I don&amp;#8217;t know if it will happen in 2016, but it&amp;#8217;s pretty reasonable.
Indeed, I can see threats.. even if we can&amp;#8217;t be sure that
the ransomware is even installed.
&lt;/p&gt;

&lt;p&gt;
After all,
&lt;a href=&quot;http://www.popsci.com/article/gadgets/how-dick-cheney-took-his-heart-offline-thwart-hackers&quot;&gt;Dick Cheney had his pacemaker’s Wifi disabled because of this concern&lt;/a&gt;
(see also
&lt;a href=&quot;http://www.ibtimes.com/dick-cheney-deactivates-pacemaker-wi-fi-former-vp-felt-threatened-hackers-wanted-avoid-homeland&quot;&gt;here&lt;/a&gt;).
&lt;a href=&quot;http://www.telegraph.co.uk/news/science/science-news/11212777/Terrorists-could-hack-pacemakers-like-in-Homeland-say-security-experts.html&quot;&gt;People have already noted that terrorists might use this, since medical devices are often poorly secured&lt;/a&gt;.
The additional observation is that may be a better way to (criminally)
make money.  We already have ransomware, including organizations who are
getting better at extorting with it. Traditional ransomware is foiled
by good backups; in this case backups won’t help, and victims will
(understandably) be willing to pay much, much more.  And I think that
medical devices are actually a softer target.
&lt;/p&gt;

&lt;p&gt;
With luck, this won&amp;#8217;t come true in 2016.
The question is, is that because it doesn&amp;#8217;t show up until 2017 or 2018&amp;#8230;
or because the first ones were in 2015?
&lt;a href=&quot;https://gcn.com/articles/2015/11/18/medical-device-cybersecurity.aspx&quot;&gt;DHS is funding work in this area&lt;/a&gt;, and that&amp;#8217;s good&amp;#8230;
but while research can help, the real problem is that we have
too many software developers who do not have a clue how to develop
secure software&amp;#8230; and too many people (software developers or not)
who think that&amp;#8217;s acceptable.
&lt;/p&gt;

&lt;p&gt;
In short,
we still have way too many people building safety-critical devices who
don&amp;#8217;t understand that security is necessary for safety.
I hope that this changes - and quickly.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Government adoption of OSS</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>http://www.dwheeler.com/blog/2015/10/09#government-adoption-oss</link>
    <pubDate>Fri, 09 Oct 2015 22:18 GMT</pubDate>
    <!-- date: 2015-10-09 -->
    <description>

&lt;p&gt;
If you&amp;#8217;re interested in open source software (OSS), or in how
governments can work better, take a look!
&lt;a href=&quot;http://opensource.com/government/15/10/us-dhs-issue%C2%ADs-report&quot;&gt;
Mark Bohannon has posted the article &amp;#8220;U.S. report highlights positive elements of government open source adoption&amp;#8221; on Opensource.com&lt;/a&gt;.
This discusses a paper Tom Dunn and I wrote
&lt;a href=&quot;http://www.dhs.gov/sites/default/files/publications/Open%20Source%20Software%20in%20Government%20%E2%80%93%20Challenges%20and%20Opportunities_Final.pdf&quot;&gt;Open Source Software in Government: Challenges and Opportunities&lt;/a&gt;, and
discusses a few things that have happened since.
Enjoy!
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Reveloping open source software in Linux Foundation projects: $5 billion and 30 years</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>http://www.dwheeler.com/blog/2015/09/30#redevelop-2015</link>
    <pubDate>Wed, 30 Sep 2015 13:07 GMT</pubDate>
    <!-- date: 2015-09-30 -->
    <description>
&lt;p&gt;
&lt;a href=&quot;http://www.linuxfoundation.org/publications/linux-foundation/estimating-total-development-cost-linux-foundation-collaborative-projects&quot;&gt;The Linux Foundation now estimates it would cost $5 billion and 30 years to redevelop &amp;#8220;the software residing in The Linux Foundation’s collaborative projects&amp;#8221;&lt;/a&gt;.
That&amp;#8217;s not even &lt;i&gt;all&lt;/i&gt; free / libre / open source software (FLOSS).
Of course, there are many caveats, but that&amp;#8217;s still an intriguing number;
it provides a simple view of just how big FLOSS has become.
They also credit me, since they applied the same general process I
developed earlier in my &amp;#8220;More than a Gigabuck&amp;#8221; paper.
Thanks!
If you&amp;#8217;re interested in FLOSS, I think you&amp;#8217;ll find this paper intriguing.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Heartbleed found with american fuzzy lop (afl) and Address Sanitizer (ASan)</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>http://www.dwheeler.com/blog/2015/04/07#heartbleed-afl-asan</link>
    <pubDate>Tue, 07 Apr 2015 16:53 GMT</pubDate>
    <!-- date: 2015-04-07 -->
    <description>
&lt;p&gt;
Big news in security vulnerability research:
&lt;a href=&quot;https://blog.hboeck.de/archives/868-How-Heartbleed-couldve-been-found.html&quot;&gt;Hanno Böck found Heartbleed using american fuzzy lop (afl)
and Address Sanitizer (ASan)&lt;/a&gt; - and in only 6 hours of execution time.
&lt;/p&gt;
&lt;p&gt;
This means that software developers should seriously consider using
a more-advanced fuzzer, such as
&lt;a href=&quot;http://lcamtuf.coredump.cx/afl/&quot;&gt;american fuzzy lop (afl)&lt;/a&gt;,
along with
&lt;a href=&quot;https://code.google.com/p/address-sanitizer/&quot;&gt;Address Sanitizer (ASan)&lt;/a&gt;
(an option in both the LLVM/clang and gcc compilers),
whenever you write in C, C++, Objective-C, or in other
circumstances that are not memory-safe.
In particular, seriously consider doing
this if your program is exposed to the internet or
it processes data sent via the internet
(practically all programs meet this criteria nowadays).
I had speculated that this combination could have found Heartbleed in
&lt;a href=&quot;/essays/heartbleed.html&quot;&gt;my essay on Heartbleed&lt;/a&gt;,
but this confirmation is really important.
Here I will summarize what&amp;#8217;s going on
(using the capitalization conventions
of the various tool developers).
&lt;/p&gt;
&lt;p&gt;
The
&lt;a href=&quot;http://lcamtuf.coredump.cx/afl/&quot;&gt;american fuzzy lop (afl)&lt;/a&gt;
program created by Michal Zalewski is a surprisingly effective fuzzer.
A fuzzer is simply a tool that sends lots of semi-random inputs into a program
and to detect gross problems (typically a crash).
Fuzzers do not know what the exact correct answers are,
but because they do not, they can try out more inputs than systems that
know the exact correct answers.
But afl is smarter than most fuzzers; instead of just sending random inputs,
afl tracks which branches are taken in a program.
Even more interestingly, afl even tracks how often different branches
are taken when running a program (that is &lt;i&gt;especially&lt;/i&gt; unusual).
Then, when afl creates new inputs, it prefers to create them
based on inputs that have produced different counts on at least some branches.
This evolutionary approach, using both branch coverage and the
&lt;i&gt;number of times&lt;/i&gt; a branch is used, is remarkably effective.
Simple dumb random fuzzers can only perform relatively shallow tests;
getting any depth has required more complex approaches such as
detailed descriptions of the
required format (the approach used by
so-called &amp;#8220;smart&amp;#8221; fuzzers) and/or
white-box constraint solving (such as
&lt;a href=&quot;http://esec-lab.sogeti.com/pages/Fuzzgrind&quot;&gt;fuzzgrind&lt;/a&gt;
or Microsoft&amp;#8217;s SAGE).
It&amp;#8217;s not at all clear that afl eliminates the value of these other
fuzzing approaches; I can see combining their approaches.
However, afl is clearly getting far better results than
simple dumb fuzzers that just send random values.
Indeed, the afl of today is getting remarkably deep coverage for a fuzzer.
For example, the post
&lt;a href=&quot;http://lcamtuf.blogspot.com/2014/11/pulling-jpegs-out-of-thin-air.html&quot;&gt;Pulling JPEGs out of thin air&lt;/a&gt; shows how afl was able to
start with only the text &amp;#8220;hello&amp;#8221; (a hideously bad starting point)
and still automatically figure out how to create valid JPEG files.
&lt;/p&gt;
&lt;p&gt;
However, while afl is really good at creating inputs, it can only
detect problems if they lead to a crash; vulnerabilities like
Heartbleed do not normally cause a crash.
That&amp;#8217;s where Address Sanitizer (ASan) comes in.
Address Sanitizer turns many memory access errors, including nearly
all out-of-bounds accesses, double-free, and use-after-free, into
a crash.
ASan was originally created by
Konstantin Serebryany, Derek Bruening, Alexander Potapenko, and Dmitry Vyukov.
ASan is amazing all by itself, and the combination is even better.
The fuzzer afl is good at creating inputs, and ASan is good
at turning problems into something that afl can detect.
Both are available at no cost as
Free/ libre/ open source software (FLOSS),
so anyone can try them out, see how they work, and even make improvements.
&lt;/p&gt;
&lt;p&gt;
Normally afl can only fuzz file inputs, but Heartbleed could only be
triggered by network access.
This is no big deal; Hanno describes in his article how to wrap up
network programs so they can be fuzzed by file fuzzers.
&lt;/p&gt;
&lt;p&gt;
Sometimes afl and ASan do not work well together today on 64-bit systems.
This has to do with some technical limitations involving memory use;
on 64-bit systems ASan reserves (but does not use) a lot of memory.
This is not necessarily a killer;
in many cases you can use them together anyway (as Hanno did).
More importantly, this problem is about to go away.
Recently I co-authored (along with Sam Hakim) a tool we call
afl-limit-memory; it uses Linux cgroups to eliminate the problem so
that you can always combine afl and ASan (at least on Linux).
We have already submitted the code to the afl project leader,
and we hope it will become part of afl soon.
So this is already a disappearing problem.
&lt;/p&gt;
&lt;p&gt;
There are lots of interesting related resources.
If you want to learn about fuzzing more generally,
some books
you might want to read are
&lt;a href=&quot;http://www.amazon.com/gp/product/0321446119/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321446119&amp;linkCode=as2&amp;tag=davawhesperho-20&amp;linkId=FXMNBVAG5BVBKXQF&quot;&gt;&lt;i&gt;Fuzzing: Brute Force Vulnerability Discovery&lt;/i&gt; by Sutton, Greene, and Amini&lt;/a&gt;&lt;img src=&quot;http://ir-na.amazon-adsystem.com/e/ir?t=davawhesperho-20&amp;l=as2&amp;o=1&amp;a=0321446119&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;
and
&lt;a href=&quot;http://www.amazon.com/gp/product/1596932147/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1596932147&amp;linkCode=as2&amp;tag=davawhesperho-20&amp;linkId=ZWWDLP2TYGCZUDLU&quot;&gt;&lt;i&gt;Fuzzing for Software Security Testing and Quality Assurance&lt;/i&gt; (Artech House Information Security and Privacy) by Takanen, DeMott, and Miller&lt;/a&gt;&lt;img src=&quot;http://ir-na.amazon-adsystem.com/e/ir?t=davawhesperho-20&amp;l=as2&amp;o=1&amp;a=1596932147&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;.
My
&lt;a href=&quot;http://www.dwheeler.com/secure-class/&quot;&gt;class materials for
secure software design and programming, #9 (analysis tools)&lt;/a&gt;,
also cover fuzzing (and are freely available).
&lt;a href=&quot;https://fuzzing-project.org/&quot;&gt;The Fuzzing Project&lt;/a&gt;
led by Hanno is an effort to encourate the use of fuzzing to
improving the state of free software security, and includes some tutorials
on how to do it.
The paper
&lt;a href=&quot;http://research.google.com/pubs/pub37752.html&quot;&gt;AddressSanitizer: A Fast Address Sanity Checker&lt;/a&gt;
is an excellent explanation of how ASan works.
My essay
&lt;a href=&quot;/essays/heartbleed.html&quot;&gt;How to Prevent the next Heartbleed&lt;/a&gt;
discusses many different approaches that would, or would not,
have detected Heartbleed.
&lt;/p&gt;
&lt;p&gt;
I do not think that fuzzers (or any dynamic technique) completely
replace static analysis approaches such as source code weakness analyzers.
Various tools, including dynamic tools like fuzzers and static tools
like source code weakness analyzers,
are valuable complements for finding vulnerabilities
before the attackers do.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Security presentation updates</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>http://www.dwheeler.com/blog/2015/04/04#security-presentations-updates</link>
    <pubDate>Sat, 04 Apr 2015 17:30 GMT</pubDate>
    <!-- date: 2015-04-04 -->
    <description>
&lt;p&gt;
I&amp;#8217;ve updated my
&lt;a href=&quot;/secure-class/&quot;&gt;presentations on how to design and
implement secure software&lt;/a&gt;.
In particular, I&amp;#8217;ve added much about analysis tools and
formal methods.
There is a lot going on in those fields, and no matter what I do
I am only scratching the surface.
On the other hand, if you have not been following these closely,
then there&amp;#8217;s a lot you probably don&amp;#8217;t know about.
Enjoy!
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Z3 is OSS!</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>http://www.dwheeler.com/blog/2015/03/27#z3-oss</link>
    <pubDate>Fri, 27 Mar 2015 08:45 GMT</pubDate>
    <!-- date: 2015-03-27 -->
    <description>
&lt;p&gt;
&lt;a href=&quot;https://github.com/Z3Prover/z3&quot;&gt;Z3&lt;/a&gt; has been released as
&lt;a href=&quot;http://opensource.org/&quot;&gt;open source software&lt;/a&gt; under the
&lt;a href=&quot;http://opensource.org/licenses/MIT&quot;&gt;MIT license&lt;/a&gt;!
This is great news.
Z3 is a good satisifiability modulo theories (SMT) solver /
theorem prover from Microsoft Research.
An SMT solver accepts a set of constraints
(such as &amp;#8220;a&amp;lt;5 and a&amp;gt;1&amp;#8221;) and tries to produce values that
satisfy all the constraints.
A satisfiability (SAT) solver does this too, but SAT solvers can only
work with boolean variables;
SMT solvers can handle other types, such as integers.
&lt;a href=&quot;http://rise4fun.com/z3/tutorial&quot;&gt;Here is a Z3 tutorial&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
SMT solvers are basically lower-level tools that have many uses
for building larger capabilities, because many problems
require solving logical formulas to find a solution.
&lt;/p&gt;
&lt;p&gt;
I am particularly interested in the use of SMT solvers
to help prove that programs do something or do not do something.
&lt;a href=&quot;http://why3.lri.fr/&quot;&gt;Why3&lt;/a&gt; is a platform that lets you
write programs and their specifications, and then calls out to
various provers to try to determine if the claims are true.
By itself Why3 only supports its WhyML language, but Why3 can be combined
with other tools to prove statements in other languages.
Those include C (using Frama-C and a plug-in), Java, and Ada.
People have been able to prove tiny programs for decades, but scaling up
to bigger programs in practice requires a lot of automation.
I think this approach of combining many different tools, with
different strengths, is very promising.
&lt;/p&gt;
&lt;p&gt;
The more tools that are available to Why3, the more likely it will
solve problems automatically.
That&amp;#8217;s because different tools use different heuristics and focus on
different issues, resulting in different ones being good at different things.
There are already several good SMT solvers available as OSS,
including
&lt;a href=&quot;http://cvc4.cs.nyu.edu/web/&quot;&gt;CVC4&lt;/a&gt;
and
&lt;a href=&quot;http://alt-ergo.lri.fr/&quot;&gt;alt-ergo&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Now that Microsoft has released Z3 as OSS, there is yet another
strong OSS SMT solver that tools like Why3 can use directly.
In short, the collection of OSS SMT solvers has just become even stronger.
There&amp;#8217;s a standard for SMT solver inputs, the
&lt;a href=&quot;http://www.smt-lib.org/&quot;&gt;SMT-LIB format&lt;/a&gt;,
so it&amp;#8217;s not hard to take advantage of many SMT solvers.
My hope is that this will be another step in making it easier to
have strong confidence in software.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Plans for HTTPS (SSL/TLS) on this site</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>http://www.dwheeler.com/blog/2015/03/11#https</link>
    <pubDate>Wed, 11 Mar 2015 19:50 GMT</pubDate>
    <!-- date: 2015-03-11 -->
    <description>
&lt;p&gt;
Currently this website uses only HTTP, and does not support HTTPS.
That means that users cannot trivially authenticate what they receive, and
that in some cases users reveal to others what they are viewing on the site.
(Technical note:
HTTPS is implemented by a lower-level protocol; the current protocol
versions of this protocol are named TLS, and the older ones
are named SSL, but a lot of people use the term SSL to include TLS.)
I would &lt;i&gt;like&lt;/i&gt; to use HTTPS, but this website is entirely self-funded.
I do have a plan, though.
&lt;/p&gt;
&lt;p&gt;
My current plan is that I am waiting for
&lt;a href=&quot;https://www.eff.org/deeplinks/2014/11/certificate-authority-encrypt-entire-web&quot;&gt;Let&amp;#8217;s encrypt&lt;/a&gt; to stand up and be ready.
Once that gets going, I intend to use it to add support for HTTPS.
I&amp;#8217;d like to eventually &lt;i&gt;only&lt;/i&gt; support HTTPS, since that prevents
downgrade attacks, but I need to make sure that the TLS certificates
and configuration works well.
Also, I pay others to maintain the server;
since I am not made of money, I necessarily use low-end cheap services.
That will limit what I can do in terms of HTTPS configuration hardening.
On the other hand, it should be better than the current situation.
&lt;/p&gt;
&lt;p&gt;
The &lt;i&gt;software&lt;/i&gt; I develop is generally
available on SourceForge or GitHub, and they already provide HTTPS,
so you don&amp;#8217;t need to wait for that.
Currently
&lt;a href=&quot;https://sourceforge.net/p/forge/site-support/9807&quot;&gt;you
have to log into SourceForge to get HTTPS&lt;/a&gt;, but that is expected to change,
and for now just log in.
&lt;/p&gt;
&lt;p&gt;
Anyway, I thought some of you might like to know that there &lt;i&gt;is&lt;/i&gt; a plan.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Learning from Disaster</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>http://www.dwheeler.com/blog/2015/02/14#learning-from-disaster</link>
    <pubDate>Sat, 14 Feb 2015 09:56 GMT</pubDate>
    <!-- date: 2015-02-14 -->
    <description>
&lt;p&gt;
&lt;a href=&quot;http://www.dwheeler.com/essays/learning-from-disaster.html&quot;&gt;Learning from Disaster&lt;/a&gt; is a collection of essays
that examines computer security disasters,
and what we can learn from those disasters.
This includes
&lt;a href=&quot;http://www.dwheeler.com/essays/heartbleed.html&quot;&gt;Heartbleed&lt;/a&gt;,
&lt;a href=&quot;http://www.dwheeler.com/essays/shellshock.html&quot;&gt;Shellshock&lt;/a&gt;,
&lt;a href=&quot;http://www.dwheeler.com/essays/poodle-sslv3.html&quot;&gt;POODLE&lt;/a&gt;,
the &lt;a href=&quot;http://www.dwheeler.com/essays/apple-goto-fail.html&quot;&gt;Apple goto fail&lt;/a&gt;,
and &lt;a href=&quot;http://www.dwheeler.com/essays/sony-lax.html&quot;&gt;Sony Pictures&lt;/a&gt;.
If you&amp;#8217;re interested in computer security I think you&amp;#8217;ll
find this collection interesting.
&lt;/p&gt;
&lt;p&gt;
So: please enjoy
&lt;a href=&quot;http://www.dwheeler.com/essays/learning-from-disaster.html&quot;&gt;Learning from Disaster&lt;/a&gt;.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Cloud security</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>http://www.dwheeler.com/blog/2015/01/06#cloud-security</link>
    <pubDate>Tue, 06 Jan 2015 22:48 GMT</pubDate>
    <!-- date: 2015-01-06 -->
    <description>
&lt;p&gt;
There seems to be a lot of confusion about security fundamentals
of cloud computing (and other utility-based approaches).
For example, many people erroneously think hardware virtualization is required
for clouds (it is not), or that hardware virtualization and containerization
are the same (they are not).
&lt;/p&gt;
&lt;p&gt;
My essay
&lt;a href=&quot;/essays/cloud-security-virtualization-containers.html&quot;&gt;Cloud Security: Virtualization, Containers, and Related Issues&lt;/a&gt;
is my effort to counteract some of this confusion.
It has a quick introduction to clouds,
a contrast of various security isolation mechanisms
used to implement them, and a discussion of some related issues.
&lt;/p&gt;
&lt;p&gt;
So please check out (and enjoy)
&lt;a href=&quot;/essays/cloud-security-virtualization-containers.html&quot;&gt;Cloud Security: Virtualization, Containers, and Related Issues&lt;/a&gt;.
&lt;/p&gt;
</description>
   </item>
  </channel>
</rss>