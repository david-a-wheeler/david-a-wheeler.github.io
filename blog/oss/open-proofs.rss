<?xml version="1.0"?>
<!-- name="generator" content="blosxom/2.0" -->

<rss version="2.0">
  <channel>
    <title>David A. Wheeler's Blog   </title>
    <link>http://www.dwheeler.com/blog</link>
    <description>David A. Wheeler's weblog.</description>
    <language>en</language>

  <item>
    <title>Open Proofs: New site and why we need them</title>
    <link>http://www.dwheeler.com/blog/2009/02/11#open-proofs</link>
    <pubDate>Wed, 11 Feb 2009 18:17 GMT</pubDate>
    <!-- date: 2009-02-11 -->
    <description>
&lt;p&gt;
There&amp;#8217;s a new website in town:
&lt;a href=&quot;http://www.openproofs.org&quot;&gt;http://www.openproofs.org&lt;/a&gt;.
This site exists to define the term &amp;#8220;open proofs&amp;#8221; and
encourage their development.
What &lt;i&gt;are&lt;/i&gt; open proofs, you ask?
Well, let&amp;#8217;s back up a little&amp;#8230;
&lt;/p&gt;
&lt;p&gt;
The world needs secure, accurate, and reliable software -
but most software isn&amp;#8217;t.
Testing can find some problems, but testing by itself is inadequate.
In fact, it&amp;#8217;s completely impractical to fully test real programs.
For example,
completely testing a trivial program that only add three 64-bit numbers,
using a trillion superfast computers, would take about
49,700,000,000,000,000,000,000,000,000 years!
Real programs, of course, are far more complex.
&lt;/p&gt;
&lt;p&gt;
There is actually an old, well-known approach that &lt;i&gt;can&lt;/i&gt; give much
more confidence that some software will do what it&amp;#8217;s supposed to do.
These are often called &amp;#8220;formal methods&amp;#8221;,
which apply mathematical proof techniques to software.
These approaches can produce &lt;i&gt;verified&lt;/i&gt; software, where you can prove
(given certain assumptions) that the software will (or won&amp;#8217;t) do something.
There&amp;#8217;s been progress made over the last several decades,
but they&amp;#8217;re not widely used, even where it might make sense to use them.
If there&amp;#8217;s a need, and a technology, why hasn&amp;#8217;t it matured faster and
become more common?
&lt;/p&gt;
&lt;p&gt;
There are many reasons, but I believe that one key problem is that
there are relatively few fully-public examples of verified software.
Instead,
verified software is often highly classified, sensitive, and/or proprietary.
Many of the other reasons are actually perpetuated by this.
Existing formal methods tools need more maturing, true, but it&amp;#8217;s
rediculously hard for tool developers to mature the tools
when few people can show or share meaningful examples.
Similarly, software developers who have never used them
do not believe such approaches can be used in &amp;#8220;real software development&amp;#8221;
(since there are few examples) and/or can&amp;#8217;t figure out how to apply them.
In addition, they don&amp;#8217;t have existing verified software that they
can build on or modify to fit their needs.
Teachers have difficulty explaining them, and students have
difficulty learning from them.
All of this ends up being self-perpetuating.
&lt;/p&gt;
&lt;p&gt;
I believe one way to help the logjam is to encourage
the development of &amp;#8220;open proofs&amp;#8221;.
An &amp;#8220;open proof&amp;#8221; is software or a system where all of the
following are free-libre / open source software (FLOSS):
&lt;ul&gt;
&lt;li&gt;the entire implementation&lt;/li&gt;
&lt;li&gt;automatically-verifiable proof(s) of at least one key property, and&lt;/li&gt;
&lt;li&gt;required tools (for use and modification)&lt;/li&gt;
&lt;/ul&gt;
Something is FLOSS if it gives anyone the freedom to use, study, modify,
and redistribute modified and unmodified versions of it, meeting the
Free software definition and the open source definition.
&lt;/p&gt;
&lt;p&gt;
Open proofs do not solve every possible problem, of course.
I don&amp;#8217;t expect formal methods techologies to become instantly trivial to
use just because a few open proofs show up.
And formal methods are always subject to limitations, e.g.:
(1) the formal specification might be wrong or incomplete for its purpose;
(2) the tools might be incorrect; (3) one or more assumptions might
be wrong. But they would still be a big improvement from where we are
today. Many formal method approaches have historically not scaled up to
larger programs, but open proofs may help counter that by enabling tool
developers to work with others.
In any case, I believe it&amp;#8217;s worth trying.
&lt;/p&gt;
&lt;p&gt;
So please take a look at:
&lt;a href=&quot;http://www.openproofs.org&quot;&gt;http://www.openproofs.org&lt;/a&gt;.
For example, for open proofs to be easily created and maintained, we need
for FLOSS formal methods tools to be packaged up for common systems
so they can be easily installed and used;
&lt;a href=&quot;https://www.openproofs.org/wiki/Packaging_status&quot;&gt;the web site
has a page on the packaging status of various FLOSS tools&lt;/a&gt;.
Please feel welcome to join us.
&lt;/p&gt;
</description>
   </item>
  </channel>
</rss>