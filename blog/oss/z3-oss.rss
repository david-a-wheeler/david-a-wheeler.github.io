<?xml version="1.0" encoding="UTF-8"?>
<!-- name="generator" content="blosxom/2.0" -->

<rss version="2.0">
  <channel>
    <title>David A. Wheeler's Blog   </title>
    <link>http://www.dwheeler.com/blog</link>
    <description>David A. Wheeler's weblog.</description>
    <language>en</language>

  <item>
    <title>Z3 is OSS!</title>
    <link>http://www.dwheeler.com/blog/2015/03/27#z3-oss</link>
    <pubDate>Fri, 27 Mar 2015 08:45 GMT</pubDate>
    <!-- date: 2015-03-27 -->
    <description>
&lt;p&gt;
&lt;a href=&quot;https://github.com/Z3Prover/z3&quot;&gt;Z3&lt;/a&gt; has been released as
&lt;a href=&quot;http://opensource.org/&quot;&gt;open source software&lt;/a&gt; under the
&lt;a href=&quot;http://opensource.org/licenses/MIT&quot;&gt;MIT license&lt;/a&gt;!
This is great news.
Z3 is a good satisifiability modulo theories (SMT) solver /
theorem prover from Microsoft Research.
An SMT solver accepts a set of constraints
(such as &amp;#8220;a&amp;lt;5 and a&amp;gt;1&amp;#8221;) and tries to produce values that
satisfy all the constraints.
A satisfiability (SAT) solver does this too, but SAT solvers can only
work with boolean variables;
SMT solvers can handle other types, such as integers.
&lt;a href=&quot;http://rise4fun.com/z3/tutorial&quot;&gt;Here is a Z3 tutorial&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
SMT solvers are basically lower-level tools that have many uses
for building larger capabilities, because many problems
require solving logical formulas to find a solution.
&lt;/p&gt;
&lt;p&gt;
I am particularly interested in the use of SMT solvers
to help prove that programs do something or do not do something.
&lt;a href=&quot;http://why3.lri.fr/&quot;&gt;Why3&lt;/a&gt; is a platform that lets you
write programs and their specifications, and then calls out to
various provers to try to determine if the claims are true.
By itself Why3 only supports its WhyML language, but Why3 can be combined
with other tools to prove statements in other languages.
Those include C (using Frama-C and a plug-in), Java, and Ada.
People have been able to prove tiny programs for decades, but scaling up
to bigger programs in practice requires a lot of automation.
I think this approach of combining many different tools, with
different strengths, is very promising.
&lt;/p&gt;
&lt;p&gt;
The more tools that are available to Why3, the more likely it will
solve problems automatically.
That&amp;#8217;s because different tools use different heuristics and focus on
different issues, resulting in different ones being good at different things.
There are already several good SMT solvers available as OSS,
including
&lt;a href=&quot;http://cvc4.cs.nyu.edu/web/&quot;&gt;CVC4&lt;/a&gt;
and
&lt;a href=&quot;http://alt-ergo.lri.fr/&quot;&gt;alt-ergo&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Now that Microsoft has released Z3 as OSS, there is yet another
strong OSS SMT solver that tools like Why3 can use directly.
In short, the collection of OSS SMT solvers has just become even stronger.
There&amp;#8217;s a standard for SMT solver inputs, the
&lt;a href=&quot;http://www.smt-lib.org/&quot;&gt;SMT-LIB format&lt;/a&gt;,
so it&amp;#8217;s not hard to take advantage of many SMT solvers.
My hope is that this will be another step in making it easier to
have strong confidence in software.
&lt;/p&gt;
</description>
   </item>
  </channel>
</rss>