<?xml version="1.0"?>
<!-- name="generator" content="blosxom/2.0" -->

<rss version="2.0">
  <channel>
    <title>David A. Wheeler's Blog   </title>
    <link>http://www.dwheeler.com/blog</link>
    <description>David A. Wheeler's weblog.</description>
    <language>en</language>

  <item>
    <title>Trusting Trust, DDC, and Free-Libre/Open Source Software (FLOSS)</title>
    <link>http://www.dwheeler.com/blog/2009/11/13#trusting-trust-ddc-oss</link>
    <pubDate>Fri, 13 Nov 2009 14:02 GMT</pubDate>
    <!-- date: 2009-11-13 -->
    <description>
&lt;p&gt;
&lt;a href=&quot;http://www.dwheeler.com/blog/2009/11/02/#trusting-trust-dissertation&quot;&gt;
As I noted in my blog&lt;/a&gt;,
I&amp;#8217;ve just released my dissertation
&lt;a href=&quot;http://www.dwheeler.com/trusting-trust&quot;&gt;
&amp;#8220;Fully Countering Trusting Trust through Diverse Double-Compiling&lt;/a&gt; (DDC).
But what does that mean for Free-Libre/Open Source Software (FLOSS)?
In short, it&amp;#8217;s &lt;i&gt;fantastic&lt;/i&gt; news for FLOSS, but to explain why that&amp;#8217;s so,
I need to backtrack first.
&lt;/p&gt;
&lt;p&gt;
The &amp;#8220;trusting trust&amp;#8221; attack is a nasty computer attack that involves
creating a subverted compiler in such a way that it even subverts compilers.
It was originally reported in a 1974 security evaluation of Multics,
but most people heard about it from
Ken Thompson&amp;#8217;s 1984 Turing Award presentation
(Ken Thompson is a creator of Unix).
This attack is incredibly nasty, and what&amp;#8217;s worse,
until now there&amp;#8217;s been no effective countermeasure to it.
Indeed, some have claimed that it could not ever be countered, making
the whole idea of &amp;#8220;computer security&amp;#8221; a non-starter.
&lt;/p&gt;
&lt;p&gt;
The &amp;#8220;trusting trust&amp;#8221; attack &lt;i&gt;appears&lt;/i&gt; to be especially
devastating to FLOSS.
The problem is that with the trusting trust attack, the source code that
people review does &lt;i&gt;not&lt;/i&gt; correspond to the executable that&amp;#8217;s
actually running, and that seems to
completely torpedo the &amp;#8220;many eyes&amp;#8221; review that FLOSS makes possible.
The whole world could carefully review a program&amp;#8217;s source code,
but it wouldn&amp;#8217;t matter if the compiler turns it undetectably
into something malicious.
&lt;/p&gt;
&lt;p&gt;
Thankfully, there &lt;i&gt;is&lt;/i&gt; an effective countermeasure,
which I&amp;#8217;ve named
&lt;a href=&quot;http://www.dwheeler.com/trusting-trust&quot;&gt;Diverse
Double-Compiling (DDC)&lt;/a&gt;.
You can see my dissertation which explains what it is, proves that
it works, and even demonstrates it with several compilers
including GCC.
(I will be giving a
&lt;a href=&quot;http://www.dwheeler.com/trusting-trust&quot;&gt;
public defense of it on November 23, 2009&lt;/a&gt;, if
you&amp;#8217;d like to come.)
This means that source code review, such as mass review of FLOSS code,
can now actually work.
&lt;/p&gt;
&lt;p&gt;
But there&amp;#8217;s more, because there&amp;#8217;s an interesting catch with DDC.
DDC counters the trusting trust attack, but it&amp;#8217;s only useful for
people who have access to the compiler source code.
Fundamentally, DDC is a technique for determining if a
compiler executable corresponds with its source code,
but only people who &lt;i&gt;have&lt;/i&gt; the source code can apply DDC to
see if that&amp;#8217;s true.
What&amp;#8217;s more, only people who have access to the source code
will find the statement &amp;#8220;the source and executable correspond&amp;#8221;
particularly useful.
(You could use trusted intermediaries, but this requires total trust in
those intermediaries, making such claims
far weaker than claims that &lt;i&gt;anyone&lt;/i&gt; can check.)
What&amp;#8217;s more,
DDC is actually useful beyond what we &lt;i&gt;normally&lt;/i&gt; think of
as compilers, because you can redefine
&amp;#8220;compiler&amp;#8221; as including other parts (such as the operating system).
In that case, you can even show that the system&amp;#8217;s executables
all correspond to their source code.
But you can &lt;i&gt;only&lt;/i&gt; use DDC to counter the trusting trust attack
if you have access to the source code.
&lt;/p&gt;
&lt;p&gt;
So we now have a radical change.
Now that DDC has been shown to work,
we can see that
software with available source code (including FLOSS)
has a &lt;i&gt;fundamental security advantage&lt;/i&gt; over other software.
That doesn&amp;#8217;t mean that &lt;i&gt;all&lt;/i&gt; FLOSS is more secure than
&lt;i&gt;all&lt;/i&gt; proprietary software, of course.
But
&lt;a href=&quot;http://www.dwheeler.com/essays/securing-oss.pdf&quot;&gt;FLOSS
already had a general security advantage&lt;/a&gt; because it better
meets Saltzer &amp;amp; Schroeder&amp;#8217;s &amp;#8220;Open design principle&amp;#8221;
(as explained in their 1974-1975 papers).
Now we have an attack &amp;mdash; the trusting trust attack &amp;mdash;
for which &lt;i&gt;FLOSS has a fundamental security advantage&lt;/i&gt;.
The time of ignoring FLOSS options, because of misplaced notions
that FLOSS cannot be as secure as proprietary software,
needs to come to an end.
&lt;/p&gt;
&lt;!-- Reviewed by Clyde Roby on 2009-11-13 --&gt;
</description>
   </item>
  </channel>
</rss>