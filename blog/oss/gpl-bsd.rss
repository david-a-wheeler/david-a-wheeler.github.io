<?xml version="1.0"?>
<!-- name="generator" content="blosxom/2.0" -->

<rss version="2.0">
  <channel>
    <title>David A. Wheeler's Blog   </title>
    <link>http://www.dwheeler.com/blog</link>
    <description>David A. Wheeler's weblog.</description>
    <language>en</language>

  <item>
    <title>GPL, BSD, and NetBSD - why the GPL rocketed Linux to success</title>
    <link>http://www.dwheeler.com/blog/2006/09/01#gpl-bsd</link>
    <pubDate>Fri, 01 Sep 2006 01:50 GMT</pubDate>
    <!-- date: 2006-09-01 -->
    <description>
&lt;p&gt;
Charles M. Hannum (one of the 4 originators of NetBSD)
has posted a sad article about
serious problems in the NetBSD project, saying
&amp;#8220;the NetBSD Project has stagnated to the point of irrelevance.&amp;#8221;
You can see the
&lt;a href=&quot;http://article.gmane.org/gmane.os.netbsd.general/17246&quot;&gt;article&lt;/a&gt;
or an
&lt;a href=&quot;http://lwn.net/Articles/197748/&quot;&gt;LWN article about it&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
There are still active FreeBSD and OpenBSD communities, and there&amp;#8217;s
much positive to say about FreeBSD and OpenBSD.
I use them occasionally, and
I always welcome a chance to talk to their developers - they&amp;#8217;re sharp folks.
Perhaps NetBSD will partly revive.
But systems based on the Linux kernel (&amp;#8220;Linux&amp;#8221;)
absolutely stomp the *BSDs (FreeBSD, OpenBSD, and NetBSD) in market share.
And Linux-based systems will continue to stomp on the *BSDs
into the foreseeable future.
&lt;/p&gt;

&lt;p&gt;
I think there is one primary reason Linux-based systems
completely dominate the *BSDs&amp;#8217; market share - Linux uses the protective
GPL license, and the *BSDs use the permissive (&amp;#8220;BSD-style&amp;#8221;) licenses.
The BSD license has been a lot of trouble for all the *BSDs, even though
they keep protesting that it&amp;#8217;s good for them.
But look what happens.
Every few years, for many years, someone has said,
&amp;#8220;Let&amp;#8217;s start a company based on this BSD code!&amp;#8221;
BSD/OS in particular comes to mind, but Sun (SunOS)
and others have done the same.
They pull the *BSD code in, and some of the best BSD developers,
and write a proprietary derivative. But as a proprietary vendor, their
fork becomes expensive to self-maintain, and eventually the company founders
or loses interest in that codebase
(BSD/OS is gone; Sun switched to Solaris).
All that company work is then lost forever, and good developers
were sucked away during that period. Repeat, repeat, repeat.
That&amp;#8217;s enough by itself to explain why the BSDs
don&amp;#8217;t maintain the pace of Linux kernel development.
But wait - it gets worse.
&lt;/p&gt;

&lt;p&gt;
In contrast, the GPL has enforced a consortia-like arrangement
on any major commercial companies that want to use it.
Red Hat, Novell, IBM, and many others are all contributing as a result, and
they feel safe in doing so because the others are legally required
to do the same.
Just look at the domain names on the Linux kernel mailing list - big companies,
actively paying for people to contribute.
&lt;a href=&quot;http://gcn.com/vol1_no1/daily-updates/26641-1.html&quot;&gt;
In July 2004, Andrew Morton addressed a forum held by U.S. Senators,&lt;/a&gt;
and reported that most Linux kernel code was generated by
corporate programmers (37,000 of the last 38,000 changes were
contributed by those paid by companies to do so;
see &lt;a href=&quot;http://www.dwheeler.com/oss_fs_why.html#starving_programmers&quot;&gt;
my report on OSS/FS numbers&lt;/a&gt; for more information).
BSD license advocates claim that the BSD is more &amp;#8220;business friendly&amp;#8221;, but
if you look at actual practice, that argument doesn&amp;#8217;t wash.
The GPL has created a &amp;#8220;safe&amp;#8221; zone of cooperation among companies,
without anyone
having to sign complicated legal documents. A company can&amp;#8217;t feel safe
contributing code to the BSDs, because its competitors might simply copy
the code without reciprocating. There&amp;#8217;s much more corporate cooperation in the
GPL&amp;#8217;ed kernel code than with the BSD&amp;#8217;d kernel code. Which means that in
practice, it&amp;#8217;s actually been the GPL that&amp;#8217;s most &amp;#8220;business-friendly&amp;#8221;.
&lt;/p&gt;

&lt;p&gt;
So while the BSDs have lost energy every time a company gets involved,
the GPL&amp;#8217;ed programs gain every time a company gets involved.
And that explains it all.
&lt;/p&gt;

&lt;p&gt;
That&amp;#8217;s not the only issue, of course. Linus Torvalds makes mistakes,
but in general he&amp;#8217;s a good leader; leadership
issues are clearly an issue for some of the BSDs.
And Linux&amp;#8217;s ability early on
to support dual-boot computers turned out to be critical years ago. Some people
worried about the legal threats that the BSDs were under early on,
though I don&amp;#8217;t think it had that strong an effect.
But the early Linux kernel had a number of problems
(nonstandard threads, its early network stack was terrible, etc.), which
makes it harder to argue that it was &amp;#8220;better&amp;#8221; at first. And the
Linux kernel came AFTER the *BSDs - the BSDs had a head start,
and a lot of really smart people.
Yet the Linux kernel, and operating systems based on it,
jumped quickly past all of them. I believe that&amp;#8217;s in large
part because Linux didn&amp;#8217;t suffer the endless draining of people and effort
caused by the BSD license.
&lt;/p&gt;

&lt;p&gt;
Clearly, some really excellent projects can work well on BSD-style
licenses; witness Apache, for example. It would be a mistake to think
that BSD licenses are &amp;#8220;bad&amp;#8221; licenses, or that the GPL is always the
&amp;#8220;best&amp;#8221; license. But others, like Linux, gcc, etc., have done better
with copylefting / &amp;#8220;protective&amp;#8221; licenses. And some projects, like Wine,
have switched to a protective (copylefting)
license to stem the tide of loss from the project.
Again, it&amp;#8217;s not as simple as &amp;#8220;BSD license bad&amp;#8221; - I don&amp;#8217;t think
we fully understand exactly when each license&amp;#8217;s effects truly have the
most effect. But clearly the license matters; this as close to an experiment
in competing licenses as you&amp;#8217;re likely to get.
&lt;/p&gt;

&lt;p&gt;
Obviously, a license choice should depend on your goals. But let&amp;#8217;s look
more carefully at that statement, maybe we can see what type of
license tends to be better for different purposes.
&lt;/p&gt;

&lt;p&gt;
If your goal is to get an idea or approach widely used to the largest
possible extent, a permissive license like the BSD (or MIT) license has
much to offer. Anyone can quickly snap up the code and use it. Much of
the TCP/IP code (at least for tools) in Windows was originally from BSD,
I believe; there are even some copyright statements still in it. BSD
code &lt;i&gt;is&lt;/i&gt; widely used, and even when it isn&amp;#8217;t used (the Linux
kernel developers wrote their own TCP/IP code) it is certainly studied.
But don&amp;#8217;t expect the public BSD-licensed code to be maintained by
those with a commercial interest in it.
I haven&amp;#8217;t noticed a large number of Microsoft developers
being paid to improve any of the *BSDs, even though they share the same
code ancestries in some cases.
&lt;/p&gt;

&lt;p&gt;
If your goal is to have a useful program that stays useful long-term,
then a protective (&amp;#8220;copylefting&amp;#8221;)
license like the LGPL or GPL licenses has much to offer.
Protective licenses force the cooperation that is good for everyone in the long
term, if a long-term useful project is the goal. For example, I&amp;#8217;ve noticed
that GPL projects are far less likely to fork than BSD-licensed projects;
the GPL completely eliminates any financial advantage to forking.
The power of the GPL license
is so strong that even if you choose to not use a copylefting license,
&lt;a href=&quot;http://www.dwheeler.com/essays/gpl-compatible.html&quot;&gt;
it is critically important that an open source software project use
a GPL-compatible license&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Yes, companies could voluntarily cooperate without a license forcing them to.
The *BSDs try to depend on this. But it today&amp;#8217;s cutthroat market,
that&amp;#8217;s more like the &amp;#8220;Prisoner&amp;#8217;s Dilemma&amp;#8221;. In the dilemma, it&amp;#8217;s better
to cooperate; but since the other guy might choose to not cooperate, and
exploit your naivete, you may choose to not cooperate.
A way out of this dilemma is to create a situation where you &lt;i&gt;must&lt;/i&gt;
cooperate, and the GPL does that.
&lt;/p&gt;

&lt;p&gt;
Again, I don&amp;#8217;t think license selection is all that simple when developing
a free-libre/open source software (FLOSS) program. Obviously the Apache
web server does well with its BSD-ish license. But packages like Linux,
gcc, Samba, and so on all show that the GPL does work.
And more interestingly, they show that a lot of
competing companies can cooperate, when the license requires them to.
&lt;/p&gt;
</description>
   </item>
  </channel>
</rss>