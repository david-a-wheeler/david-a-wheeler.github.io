<?xml version="1.0"?>
<!-- name="generator" content="blosxom/2.0" -->

<rss version="2.0">
  <channel>
    <title>David A. Wheeler's Blog   </title>
    <link>http://www.dwheeler.com/blog</link>
    <description>David A. Wheeler's weblog.</description>
    <language>en</language>

  <item>
    <title>Off-the-Shelf (OTS) Software Maintenance Strategies</title>
    <link>http://www.dwheeler.com/blog/2011/09/16#ots-maintenance-strategies</link>
    <pubDate>Fri, 16 Sep 2011 18:04 GMT</pubDate>
    <!-- date: 2011-09-16 -->
    <description>
&lt;p&gt;
Off-the-shelf (OTS) software is simply software that is
ready-made and available for use.
Even when you need a custom system,
building it from many OTS components has many advantages,
which is why everyone does it.
OTS works because you can save money and time, increase quality,
and increase innovation through resource pooling.
&lt;/p&gt;

&lt;p&gt;
However, people can get easily confused by the many different ways that
off-the-shelf (OTS) software can be maintained.
Terminology varies, and there hasn&amp;#8217;t been an obvious way
to describe how these different approaches are related.
In 2010 I chatted with several others
about how to make this clearer, and then created a picture
that I think clarifies things.
My thanks to helpful critiques
from Heather Burke and John Scott.
So here&amp;#8217;s the picture, followed by a discussion on what it means.
&lt;/p&gt;

&lt;p&gt;
&lt;!-- Original 1052x616 --&gt;
&lt;center&gt;
&lt;img src=&quot;http://www.dwheeler.com/images/ots-maintenance-strategies.png&quot; width=&quot;526&quot; height=&quot;308&quot;&gt;
&lt;br&gt;
&lt;i&gt;Off-the-Shelf (OTS) Maintenance Strategies&lt;/i&gt;
&lt;/center&gt;
&lt;/p&gt;


&lt;p&gt;
If OTS software is commercial, it&amp;#8217;s commercial OTS (COTS) software.
&lt;a href=&quot;http://www.dwheeler.com/essays/commercial-floss.html&quot;&gt;By U.S. law&lt;/a&gt;,
any software is commercial if it is
(1) sold, licensed, or leased to the public, and
(2) has a non-governmental use.
There are two kinds of COTS software:
Open Source Software (OSS) and proprietary software.
OSS, put briefly, is
&lt;a href=&quot;http://www.dwheeler.com/oss_fs_why.html&quot;&gt;software whose licenses give
users the freedom to run the program for any purpose,
to study and modify the program, and to redistribute copies of
either the original or modified program (without having to pay
royalties to previous developers)&lt;/a&gt;.
&lt;a href=&quot;http://www.dwheeler.com/essays/commercial-floss.html&quot;&gt;Yes,
&lt;b&gt;practically all OSS is commercial&lt;/b&gt;&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
OTS can also be retained and maintained internally by an organization.
For example, the U.S. government develops and maintains some software
internally.
In the U.S. government world, such software often called
government OTS (GOTS).
This figure shows things from the point of view of the U.S. government,
but if you work with some other organization, you can think of this figure
with your organization in the place of the U.S. government.
(Maybe this should be called &amp;#8220;internal off-the-shelf&amp;#8221; or &amp;#8220;IOTS&amp;#8221; instead!)
The idea here is that any organization can have
software that it controls internally, and view as internal OTS software,
as well as the COTS software that is available to the public.
&lt;/p&gt;

&lt;p&gt;
There are various reasons why the government should sometimes
keep certain software in-house, e.g., because sole possession of the
software gives the U.S. a distinct
advantage over its adversaries.
However, there is also considerable risk to the government
if it tries to privately hold GOTS software within the
government for too long.
Technological advantage is usually fleeting. Often there is a
commercially-developed item available to the public that begins
to perform similar functions. As it matures, other organizations begin
using this non-GOTS solution, potentially rendering the GOTS solution
obsolete. Such cases often impose difficult decisions, as the government
must determine if it will pay the heavy asymmetrical cost to switch,
or if it will continue &amp;#8220;as usual&amp;#8221; with its now-obsolete GOTS systems
(with high annual costs and limitations that may risk lives or missions).
&lt;/p&gt;

&lt;p&gt;
Either COTS or GOTS may be maintained by a single maintainer or by a
community.  In community maintenance there is often a single organization
who determines if proposals should be accepted, but the key here is
that the work tends to be distributed among those affected.
An Open GOTS (OGOTS) project is a GOTS project which uses
multiple-organization collaborative development approaches
to develop and maintain software, in a manner similar to OSS.
Some people use the term &amp;#8220;Government Open Source Software&amp;#8221; (GOSS)
instead of OGOTS (in particular,
&lt;a href=&quot;http://cio-nii.defense.gov/sites/oss/goss-govies_v1.7_29jun2011_released.pdf&quot;&gt;GOSS for Govies&lt;/a&gt; uses the term GOSS instead).
&lt;/p&gt;

&lt;p&gt;
GOTS (including OGOTS) is basically a special case of
&amp;#8220;gated software&amp;#8221; with development inside a government.
However, governments are bigger than most companies, and (in democracies)
they are supposed to serve all of their citizenry, and those factors
make them rather different than most other gated communities.
Community development of proprietary software
(&amp;#8220;gated software&amp;#8221;) outside governments
is less common, but it can happen
(historically some parts of Unix were developed this way).
The term Open Technology Development (OTD) involves community development
among government users (in the case of government developers),
and thus it includes both OSS and OGOTS (aka GOSS).
&lt;/p&gt;

&lt;p&gt;
I should note that I have a broad view of maintenance.
I&amp;#8217;ve often said that there is only one program &amp;mdash;
&amp;#8220;Hello, World&amp;#8221; &amp;mdash; and that the rest is maintenance.
That&amp;#8217;s overstated for effect, but I believe there is a
&lt;i&gt;lot&lt;/i&gt; of truth in that statement.
&lt;/p&gt;

&lt;p&gt;
This figure, and some of the text above, is in section 1.3 of the paper
&lt;a href=&quot;http://cio-nii.defense.gov/sites/oss/OTD-lessons-learned-military-signed.pdf&quot;&gt;Open Technology Development (OTD): Lessons Learned &amp; Best Practices for Military Software&lt;/a&gt;
(&lt;a href=&quot;http://mil-oss.org/otd&quot;&gt;also available via MIL-OSS&lt;/a&gt;),
which is released under the Creative Commons BY-SA license.
If you&amp;#8217;re interested in more, please see the paper!
The figure and some of the text are also part of
&lt;a href=&quot;http://journal.thedacs.com/issue/56/175&quot;&gt;
&amp;#8220;Software is a Renewable Military Resource&amp;#8221;
by John Scott, Dr. David A. Wheeler, Mark Lucas, and J.C. Herz,
&lt;i&gt;Journal of Software Technology&lt;/i&gt;, February 2011, Vol. 14, Number 1.
&lt;/p&gt;

&lt;p&gt;
I hope this figure makes it easier to understand the different
approaches for maintaining off-the-shelf (OTS) software.
&lt;/p&gt;

&lt;!--
Since this is based on company work, I requested and got approval
from my company to post it.  The approval is recorded in the email
Sent &quot;Fri 9/16/2011 4:37 PM&quot; by &quot;Myers, Margaret E&quot;, subject:
&quot;RE: May I post a short excerpt from a publicly-released DoD document? (with attribution)&quot;
Which said:
&quot;You may post it.&quot;
--&gt;
</description>
   </item>
  </channel>
</rss>