<?xml version="1.0"?>
<!-- name="generator" content="blosxom/2.0" -->

<rss version="2.0">
  <channel>
    <title>David A. Wheeler's Blog   </title>
    <link>http://www.dwheeler.com/blog</link>
    <description>David A. Wheeler's weblog.</description>
    <language>en</language>

  <item>
    <title>Python Typechecking: The Typecheck module</title>
    <link>http://www.dwheeler.com/blog/2006/01/16#python-typechecking</link>
    <pubDate>Mon, 16 Jan 2006 00:15 GMT</pubDate>
    <!-- date: 2006-01-16 -->
    <description>
&lt;p&gt;
About a year ago I started creating a Python library to support
better typechecking in &lt;a href=&quot;http://python.org/&quot;&gt;Python&lt;/a&gt;.
Python is a fun language, but errors often hide &lt;i&gt;far&lt;/i&gt; longer than
they would in other languages, making debugging more necessary and
painful than it needs to be.
A trivial typo in a field setting cannot be caught by Python, for example,
and type errors are never caught until an attempt is made to USE the value&amp;#8230;
which may be far, far later in the program.
I really miss the ability of other languages to automatically check
types, so that mistakes can be identified more directly.
But I never got around to finishing my typechecking module for
Python - there were just too many other things to do.
Which is just as well, because someone else has done a better job.
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&quot;http://oakwinter.com/code/typecheck/&quot;&gt;Typecheck&lt;/a&gt;
is a type-checking module for Python
by Collin Winter and Iain Lowe; it
&amp;#8220;provides run-time typechecking facilities for Python
functions, methods and generators.&amp;#8221;
Their typecheck module provides many more useful capabilities than my
&lt;a href=&quot;http://www.dwheeler.com/typecheck/typecheck.py&quot;&gt;early
typecheck module&lt;/a&gt;.
In particular, they handle variable-length parameter lists and other
goodies.
These capabilities, like the assert statement, make it much easier to
detect problems early&amp;#8230; and the earlier you can detect problems, the
easier it is to figure out why the problem happened.
&lt;/p&gt;
&lt;p&gt;
The biggest trouble with the current verison of typecheck is
that it isn&amp;#8217;t easy to specify the &lt;i&gt;right&lt;/i&gt; types.
Since Python hasn&amp;#8217;t had typechecking before, it doesn&amp;#8217;t have
built-in names for the types that you actually want to check against.
For example, conceptually int (integer), long (arbitrarily long integer),
and float are all subclasses of another type named &amp;#8220;Number&amp;#8221;&amp;#8230; but
there isn&amp;#8217;t actually a type named Number to compare against (or
inherit from, or implement as an interface).
The same is true for &amp;#8220;Sequence&amp;#8221;&amp;#8230; the Python documentation is full
of discussions about Sequence, but these are merely conceptual, not
something actually in the language itself.
Even in cases where there &lt;i&gt;is&lt;/i&gt; a type, such as &amp;#8220;basestring&amp;#8221; meaning
&amp;#8220;any string-like type&amp;#8221;, is a type not known about by many Python
developers.
&lt;/p&gt;
&lt;p&gt;
Typechecking only works when people actually specify the right types,
of course.
If you are too restrictive (&amp;#8220;I want only &amp;#8216;int&amp;#8217;&amp;#8221; when any number will do),
then typechecking is a problem not a help.
Hopefully the typecheck implementors
will find a way to define the types that people need.
In my mind, what&amp;#8217;s needed is a way to define an Interface (a list of
required methods) that has an efficient implementation
(e.g., it&amp;#8217;s a singleton that caches the types that match).
Then they can define critical types using the Interface type.
&lt;/p&gt;
&lt;p&gt;
I look forward to using the typecheck module, once they add enough
type definitions to use it well!
&lt;/p&gt;
</description>
   </item>
  </channel>
</rss>