<?xml version="1.0" encoding="UTF-8"?>
<!-- name="generator" content="blosxom/2.0" -->

<rss version="2.0">
  <channel>
    <title>David A. Wheeler's Blog   </title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog</link>
    <description>David A. Wheeler's weblog.</description>
    <language>en</language>

  <item>
    <title>FOSS Contributor Survey</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog/2020/07/30#cii-survey</link>
    <pubDate>Thu, 30 Jul 2020 12:45 GMT</pubDate>
    <!-- date: 2020-07-30 -->
    <description>
&lt;p&gt;
If you contribute to Free/Open Source Software,
please take the
&lt;a href=&quot;https://hbs.qualtrics.com/jfe/form/SV_enfu6tjRM0QzwQB&quot;
&gt;FOSS Contributor Survey&lt;/a&gt;!
&lt;/p&gt;

&lt;p&gt;
This survey is a collaboration between the Linux Foundation&amp;#8217;s Core
Infrastructure Initiative and the Laboratory for Innovation Science
at Harvard. Some of the questions are specific to those who write
software; if you contribute, but don&amp;#8217;t write software, just skip
those questions.
The goal is to get a better understanding about its development so that
we can best work out how to improve its security and sustainability.
&lt;/p&gt;

&lt;p&gt;
Also: please tell others who develop this software about the survey!
&lt;/p&gt;

&lt;p&gt;
One interesting complication about this survey is that it&amp;#8217;s difficult to
get the word out about such a general survey.
People talk about the &amp;#8220;open source software community&amp;#8221;, but in practice
there isn&amp;#8217;t &lt;i&gt;one&lt;/i&gt; such community, there are many communities
with some overlap.
I don&amp;#8217;t want to spam people who have never expressed any interest
in information like this.
&lt;/p&gt;

&lt;p&gt;
I&amp;#8217;m currently talking with some folks in the Linux Foundatinon leadership
about sending a one-time email &lt;i&gt;only&lt;/i&gt; to developers who are
&lt;i&gt;already&lt;/i&gt; signed up for Linux Foundation mailing lists
that are focused on developing open source software.
We don&amp;#8217;t want to spam people, but I think it&amp;#8217;s reasonable to believe
that people on those mailing lists &lt;i&gt;are&lt;/i&gt; interestd in information
related to the development of open source software.
One problem with sending to multiple mailing lists is that we don&amp;#8217;t want
to annoy people by having them receive multiple copies, so we want
to work out a way so an individual only gets one copy.
&lt;/p&gt;

&lt;p&gt;
I&amp;#8217;ve never done this before, and I hate spam myself.
So I&amp;#8217;m &lt;i&gt;first&lt;/i&gt; checking with Linux Foundation leaders and program
managers to see if they think this is reasonable.
I think it is, but it&amp;#8217;s easy to justify anything to yourself, so
I&amp;#8217;m waiting to hear from others about what they think.
&lt;/p&gt;

&lt;p&gt;
So getting back to the point -
if you contribute to Free/Open Source Software,
please take the
&lt;a href=&quot;https://hbs.qualtrics.com/jfe/form/SV_enfu6tjRM0QzwQB&quot;
&gt;FOSS Contributor Survey&lt;/a&gt;!
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Linux kernel earns gold!</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog/2020/06/12#linux-gold</link>
    <pubDate>Fri, 12 Jun 2020 14:37 GMT</pubDate>
    <!-- date: 2020-06-12 -->
    <description>
&lt;p&gt;
The Linux kernel has earned the CII Best Practices &lt;i&gt;gold&lt;/i&gt; badge.
The CII Best Practices badge has three badge levels:
passing, silver, and gold.
Gold badges are especially hard to get, and I congratulate them!
More info here:
&lt;a href=&quot;https://www.linuxfoundation.org/blog/2020/06/linux-kernel-earns-cii-best-practices-gold-badge/&quot;
&gt;Linux kernel earns CII best practices gold badge&lt;/a&gt;
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>I am at the Linux Foundation!</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog/2020/04/03#linux-foundation</link>
    <pubDate>Fri, 03 Apr 2020 17:06 GMT</pubDate>
    <!-- date: 2020-04-03 -->
    <description>
&lt;p&gt;
On April 1, 2020, I started working at the Linux Foundation!
&lt;/p&gt;

&lt;p&gt;
My new title is &amp;#8220;Director, Open Source Supply Chain Security&amp;#8221;.
I&amp;#8217;ll be working to improve the security of open source software.
I look forward to working with many others on this important problem.
&lt;/p&gt;

&lt;p&gt;
So please wish me luck&amp;#8230; and stay tuned for more.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Census II Report on Open Source Software</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog/2020/02/18#census2</link>
    <pubDate>Tue, 18 Feb 2020 18:25 GMT</pubDate>
    <!-- date: 2020-02-18 -->
    <description>
&lt;p&gt;
The Linux Foundation and the Laboratory for Innovation
Science at Harvard have just released a new report:
&lt;a href=&quot;https://www.coreinfrastructure.org/programs/census-program-ii/&quot;
&gt;“Vulnerabilities in the Core: Preliminary Report and
Census II of Open Source Software” by Frank Nagle, Jessica
Wilkerson, James Dana, and Jennifer L. Hoffman, 2020-02-14&lt;/a&gt;.
Just click on “Download Report” when you get there.  &lt;a
href=&quot;https://www.hbs.edu/news/releases/Pages/census-open-source-software-security.aspx&quot;
&gt;A summary is available from Harvard&lt;/a&gt;.
Here&amp;#8217;s a quick introduction to the paper.
&lt;/p&gt;

&lt;p&gt;
Their long-term goal is to figure out what FOSS packages are most
critical through data analysis.  This turns out to extremely difficult,
as discussed in the paper, and they expressly state that their current
results “cannot - and do not purport to - be a definitive claim of which
FOSS packages are the most critical”.  That said, they have developed
a method as a “proof of concept” to start working towards that answer.
&lt;/p&gt;

&lt;p&gt;
They describe their approach in detail. Here’s a quick summary.
First they use data from Software Composition Analysis
(SCAs) and application security companies, including Snyk and Synopsys
Cybersecurity Research Center, to identify components used in actual systems.
They then use dependency analysis (via libraries.io) to identify indirect (transitive) dependencies.
Finally, they averaged the Z-scores to provide normalized rankings.
&lt;/p&gt;

&lt;p&gt;
Here are some key lessons learned from the report (Chapter 7):
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There’s a need for a standardized naming scheme for software components.
&lt;li&gt;There’s an increasing importance of individual developer account security.
&lt;li&gt;Legacy software persists in the open source space.
&lt;/ul&gt;

&lt;p&gt;
Also, here&amp;#8217;s an interesting nugget:
“These statistics illustrate an interesting pattern: a high
correlation between being employed and being a top contributor to one
of the FOSS packages identified as most used.”
&lt;/p&gt;

&lt;p&gt;
I’m on the CII Steering Committee, so I did comment on an earlier draft,
but credit goes to the actual authors.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Gource visualization (including set.mm)</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog/2019/10/12#gource</link>
    <pubDate>Sat, 12 Oct 2019 15:02 GMT</pubDate>
    <!-- date: 2019-10-12 -->
    <description>
&lt;p&gt;
Software and mathematics are often difficult for others to visualize.
Computer hardware engineers can often have cool props to distribute
during their talks, but software developers and mathematicians work
with ideas of the mind - no physical objects involved.
&lt;/p&gt;

&lt;p&gt;
This can sometimes make it difficult to explain important ideas like
open source software (OSS).
The idea of &amp;#8220;people collaborating to produce something&amp;#8221;
is easy enough, but getting a true visceral understanding of what
happens can be hard.
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://gource.io/&quot;&gt;Gource&lt;/a&gt; is a cool visualization tool
that makes it easy to see &amp;#8220;collaboration in action&amp;#8221;.
The Gource project even has a
&lt;a href=&quot;https://github.com/acaudwell/Gource/wiki/Videos&quot;&gt;web page
showing some examples of Gource visualization&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
I recently created a
&lt;a href=&quot;https://www.youtube.com/watch?v=XC1g8FmFcUU&quot;&gt;Gource visualization
of the Metamath set.mm project&lt;/a&gt;.
Some context is important here.
In mathematics, claims are supposed to be rigorously proven, but
humans are fallible; they make mistakes, and others often miss those mistakes.
The solution to this problem is to rigorously describe mathematics
in a formal way so that
every step can be rigorously and automatically checked by a computer.
This turns out to be difficult, and requires that a lot of people
work together.
Now&amp;#8230; how can you visualize people working together to rigorously
prove mathematical claims?
One way is to use Gource&amp;#8230; because while it doesn&amp;#8217;t show everything, you
at least get a sense of the collaboration.
In this case, 48 people have contributed so far.
&lt;/p&gt;

&lt;p&gt;
This visualization shows a common feature: in many cases, a single
person starts and makes all the contributions for a while.
The same thing happens if you view, for example, a
&lt;a href=&quot;https://www.youtube.com/watch?v=cNBtDstOTmA&quot;&gt;Gource visualization
of the Python programming language&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://gource.io/&quot;&gt;Gource&lt;/a&gt; is itself OSS, so you can download it
and use it to create your own visualizations.
I strongly recommend that you automate doing it as much as possible.
For example, if you process data first, use a script to automate processing
the data.
You&amp;#8217;ll need to give Gource various options;
store options in its config file or a scripts.
&lt;/p&gt;

&lt;p&gt;
If you create a Gource video, I &lt;i&gt;strongly&lt;/i&gt; recommend adding some music
or at least an audio commentary.
If you add music, make sure it&amp;#8217;s legal to add;
the safe route is to use music released under open licenses such as
&lt;a href=&quot;https://creativecommons.org/licenses/by/4.0/&quot;&gt;Creative Commons
Attribution (CC-BY)&lt;/a&gt; or
&lt;a href=&quot;https://creativecommons.org/publicdomain/zero/1.0/&quot;&gt;CC0
Public Domain Dedication (CC0)&lt;/a&gt;.
Beware of the &amp;#8220;non-commercial use&amp;#8221; licenses - your releases might count
as &amp;#8220;commercial&amp;#8221; even if you don&amp;#8217;t think they do (talk to a lawyer if
you want to go down that path).
A great place to start for Gource music is
&lt;a href=&quot;https://audionautix.com/&quot;&gt;audionautix.com&lt;/a&gt;,
which has released lots of music under the
Creative Commons Attribution 3.0 Unported License;
you can select from lots of different styles and get some great options.
&lt;a href=&quot;https://fransdejonge.com/2018/02/improving-gource-videos-with-background-and-audio/&quot;
&gt;Improving Gource Videos with Background and Audio&lt;/a&gt;
has some tips and instructions.
&lt;/p&gt;

&lt;p&gt;
In conclusion: enjoy my
&lt;a href=&quot;https://www.youtube.com/watch?v=XC1g8FmFcUU&quot;&gt;Gource visualization
of the Metamath set.mm project&lt;/a&gt;&amp;#8230; and perhaps
it will inspire you to do something similar.
I&amp;#8217;ve embedded the video below so you can easily view it (if you like):
&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/XC1g8FmFcUU&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
</description>
   </item>
  <item>
    <title>GitHub Maintainer Security Advisories</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog/2019/05/25#github-maintainer-security-advisories</link>
    <pubDate>Sat, 25 May 2019 12:54 GMT</pubDate>
    <!-- date: 2019-05-25 -->
    <description>
&lt;p&gt;
GitHub just made a change that I think will make a big improvement
to the security of open source software (OSS).  It’s now possible to
&lt;i&gt;privately&lt;/i&gt; report vulnerabilities to OSS projects on GitHub
via
&lt;a href=&quot;https://github.blog/changelog/2019-05-23-maintainer-security-advisories&quot;&gt;maintainer security advisories&lt;/a&gt;!
This wasn’t possible before, and you can
blame me (in part), because I&amp;#8217;m the one who got this ball rolling.
I also want to give a big &lt;i&gt;congrats&lt;/i&gt; to the GitHub team,
who actually made it happen.
&lt;/p&gt;

&lt;p&gt;
Here some details, in case you&amp;#8217;re curious.
&lt;/p&gt;

&lt;p&gt;
As you probably know, there are more OSS projects on GitHub than any other
hosting service.
However, there has been no way to privately report
security vulnerabilities on OSS projects.  It’s hard to fault GitHub
too much (they’re providing a service for free!), yet because so much
software is maintained on GitHub this has led to widespread problems
in reporting and handling vulnerabilities.  It can be worked around,
but this has been a long-standing systemic problem with GitHub.
&lt;/p&gt;

&lt;p&gt;
Why is this a problem?  In a word: attackers.
Ideally software would have no defects, including vulnerabilities.
Since vulnerabilities can harm users,
developers should certainly be using a variety of techniques to limit the
number and impact of vulnerabilities in the software they develop
If you&amp;#8217;re developing OSS, a great way to see if you&amp;#8217;re doing that
(and show others the same) is to get a
&lt;a href=&quot;https://bestpractices.coreinfrastructure.org/&quot;&gt;CII
Best Practices badge&lt;/a&gt; from the Linux Foundation&amp;#8217;s
Core Infrastructure Initiative (I lead this effort).
But mistakes sometimes happen, no matter what you do, so you need to
be prepared for them.
It&amp;#8217;s hard to respond to vulnerability reports if it&amp;#8217;s hard to
get the vulnerability reports or discuss them within a project.
Of course, a project needs to rapidly &lt;i&gt;fix&lt;/i&gt; a vulnerability once it
is reported, but we need to make that first step easy.
&lt;/p&gt;

&lt;p&gt;
In September 2018 I went to a meeting at Harvard to discuss OSS security
(in support of the Linux Foundation).  There I met Devon Zuegel, who was
helping Microsoft with their recently-announced acquisition of GitHub.
I explained the problem to her, and she agreed that this was a problem
that needed to be fixed. She shared it with Nat Friedman (who was
expected to become the GitHub CEO), who also agreed that it made sense.
They couldn’t do anything until after the acquisition was complete,
but they planned to make that change once the acquisition was complete.
The acquisition did complete, so the obvious question is, did they
make the change? Well&amp;#8230;
&lt;/p&gt;

&lt;p&gt;
I am very happy to report that GitHub has just announced
the beta release of
&lt;a href=&quot;https://github.blog/changelog/2019-05-23-maintainer-security-advisories&quot;&gt;maintainer security advisories&lt;/a&gt;,
which allow people to privately report vulnerabilities without
immediately alerting every attacker out there.
My sincere thanks to
Devon Zuegel, Nat Friedman, and the entire team of developers at GitHub
for making this happen.
&lt;/p&gt;

&lt;p&gt;
This seems to be part of a larger effort by GitHub
to support security (including for OSS).
&lt;a href=&quot;https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies&quot;&gt;GitHub&amp;#8217;s security alerts&lt;/a&gt;
make it easy for GitHub-hosted projects to learn about
vulnerable dependencies (that is, a version of a
software component that you depend on but is vulnerable).
&lt;/p&gt;

&lt;p&gt;
It&amp;#8217;s easy to get discouraged about software security, because
the vulnerabilities keep happening.
Part of the problem is that most
software developers know very little about developing secure software.
After all, almost no one is teaching them how to do it
(&lt;a href=&quot;https://dwheeler.com/secure-class&quot;&gt;I teach a graduate class
at George Mason University to try to counter that problem&lt;/a&gt;).
I hope that over time more developers &lt;i&gt;will&lt;/i&gt; learn how to do it.
I also hope that more and more developers will use more and more
tools will help them create secure software, such as my
&lt;a href=&quot;https://dwheeler.com/flawfinder/&quot;&gt;flawfinder&lt;/a&gt; and
&lt;a href=&quot;https://railroader.org/&quot;&gt;Railroader&lt;/a&gt; tools.
Tools can&amp;#8217;t replace knowledge, but they are a necessary piece of the puzzle;
putting tools into a CI/CD pipeline (and an auditing process if you
can afford one) can eliminate a vast number of problems.
&lt;/p&gt;

&lt;p&gt;
These changes show that it &lt;i&gt;is&lt;/i&gt; possible to make
systemic changes to improve security.
Let&amp;#8217;s keep at it!
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>The year of Linux on the desktop</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog/2019/05/10#linux-desktop</link>
    <pubDate>Fri, 10 May 2019 17:13 GMT</pubDate>
    <!-- date: 2019-05-10 -->
    <description>
&lt;p&gt;
For those who know their computer history, wild things are going on
regarding Linux this year.
&lt;/p&gt;
&lt;p&gt;
Linux is already in widespread use.
For years
&lt;a href=&quot;https://www.statista.com/statistics/266136/global-market-share-held-by-smartphone-operating-systems/&quot;&gt;the vast majority of smartphones run Android&lt;/a&gt;, and Android runs on Linux,
so most smartphones run on Linux.
&lt;a href=&quot;https://www.top500.org/statistics/details/osfam/1&quot;&gt;As of November 2018
100% of all top 500 supercomputers worldwide run on Linux&lt;/a&gt;.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Usage_share_of_operating_systems#Market_share_by_category&quot;&gt;Best estimates for servers using Linux are around 66.7%&lt;/a&gt;,
and Linux is widely used in the cloud and in embedded devices.
&lt;/p&gt;
&lt;p&gt;
But something different is going on in 2019.
&lt;a href=&quot;https://www.zdnet.com/article/all-chromebooks-will-also-be-linux-laptops-going-forward/&quot;&gt;All Chromebooks are also going to be
Linux laptops going forward&lt;/a&gt;.
&lt;a href=&quot;https://devblogs.microsoft.com/commandline/shipping-a-linux-kernel-with-windows/&quot;&gt;Later this year Microsoft will include the Linux kernel as a component in Windows&lt;/a&gt;.
In a sense, 2019 is the year of the Linux desktop.
This was not in the way it was envisioned in the past,
but perhaps that&amp;#8217;s what makes it most interesting.
No, it does not mean that everyone is interacting directly with Linux as their
main laptop OS, and so you can certainly argue that this doesn&amp;#8217;t count.
But increasingly that is measurement is less important; people
today access computers via browsers, not the underlying OS, and that
system is often running and/or developed using Linux.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Subversion of bootstrap-sass</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog/2019/04/10#bootstrap-sass-subversion</link>
    <pubDate>Wed, 10 Apr 2019 18:03 GMT</pubDate>
    <!-- date: 2019-04-10 -->
    <description>
&lt;p&gt;
A
malicious backdoor has been found in the popular open source software
library &lt;tt&gt;bootstrap-sass&lt;/tt&gt;.
Its impact was limited - but the next attack might not be.
Thankfully, there are things we can learn and do to reduce those risks&amp;#8230;
but that requires people to think them through.
&lt;/p&gt;

&lt;p&gt;
See my essay
&lt;a href=&quot;https://dwheeler.com/essays/bootstrap-sass-subversion.html&quot;
&gt;Subversion of boostrap-sass&lt;/a&gt; for more about that!
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Railroader: Security static analysis tool for Ruby on Rails (Brakeman fork)</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog/2019/02/09#railroader</link>
    <pubDate>Sat, 09 Feb 2019 11:41 GMT</pubDate>
    <!-- date: 2019-02-09 -->
    <description>
&lt;p&gt;
I&amp;#8217;ve kicked off the &lt;a href=&quot;https://railroader.org/&quot;&gt;Railroader&lt;/a&gt;
project to maintain a security static analysis tool for
&lt;a href=&quot;https://rubyonrails.org/&quot;&gt;Ruby on Rails&lt;/a&gt;
that is
&lt;a href=&quot;https://opensource.org/osd-annotated&quot;
&gt;open source software&lt;/a&gt;.
If you are developing with Ruby on Rails, please consider using
&lt;a href=&quot;https://railroader.org/&quot;&gt;Railroader&lt;/a&gt;.
We would also really love contributions, so please contribute!
&lt;/p&gt;

&lt;p&gt;
A security static analysis tool (analyzer) examines software
to help you identify vulnerabilities (without running the possibly-vulnerable
program).
This helps you find and fix vulnerabilities &lt;i&gt;before&lt;/i&gt; you field
your web application.
Ruby on Rails is a popular framework for developing web applications;
&lt;a href=&quot;https://www.netguru.com/blog/top-10-sites-built-with-ruby-on-rails&quot;
&gt;sites that use Rails include
GitHub, Airbnb, Bloomberg, Soundcloud, Groupon, Indiegogo,
Kickstarter, Scribd, MyFitnessPal, Shopify, Urban Dictionary, Twitch.tv&lt;/a&gt;,
&lt;a href=&quot;https://about.gitlab.com/2018/10/29/why-we-use-rails-to-build-gitlab/&quot;
&gt;GitLab&lt;/a&gt;,
and the
&lt;a href=&quot;https://github.com/coreinfrastructure/best-practices-badge&quot;
&gt;Core Infrastructure Initiative (CII) Best Practices Badge&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
In the past the obvious tool for this purpose was
&lt;a href=&quot;https://brakemanscanner.org/&quot;
&gt;Brakeman&lt;/a&gt;.
However,
&lt;a href=&quot;https://brakemanscanner.org/blog/2018/06/28/brakeman-has-been-acquired-by-synopsys/index.html&quot;
&gt;Brakeman has switched to the
Creative Commons Attribution-NonCommercial-ShareAlike 4.0 Public License
(CC-BY-NC-SA-4.0)&lt;/a&gt;.
This is not an
&lt;a href=&quot;https://opensource.org/osd-annotated&quot;
&gt;open source software license&lt;/a&gt;
since it cannot be used commercially
(an OSS license cannot discriminate against a field of endeavor).
Similarly, it is not a
&lt;a href=&quot;https://www.gnu.org/philosophy/free-sw.en.html&quot;&gt;free software
license&lt;/a&gt; (since you cannot run the program as you wish / for any purpose).
You can verify this by looking at the &lt;a
href=&quot;https://brakemanscanner.org/blog/2019/01/17/brakeman-4-dot-4-dot-0-released&quot;
&gt;Brakeman 4.4.0 release announcement&lt;/a&gt;, the
&lt;a href=&quot;https://spdx.org/licenses/&quot;&gt;SPDX license list&lt;/a&gt;,
&lt;a href=&quot;https://wiki.debian.org/DFSGLicenses#Creative_Commons_Attribution-Non_Commercial-Share_Alike_.28CC-by-nc-sa.29&quot;
&gt;Debian&amp;#8217;s &amp;#8220;The Debian Free Software Guidelines (DFSG)
and Software Licenses&amp;#8221;&lt;/a&gt;,
&lt;a href=&quot;https://www.gnu.org/licenses/license-list#CC-BY-NC&quot;
&gt;Various Licenses and Comments about Them (Free Software Foundation)&lt;/a&gt;,
and
&lt;a href=&quot;https://fedoraproject.org/wiki/Licensing:Main#Bad_Licenses_3&quot;
&gt;Fedora&amp;#8217;s Licensing:Main (Bad Licenses list)&lt;/a&gt;.
Railroader conitinues using the original licenses:
MIT for code and CC-BY-3.0 for the website.
MIT, of course, is a very well-known and widely-used
open source software license.
&lt;/p&gt;

&lt;p&gt;
If you are currently using Brakeman,
&lt;b&gt;do not update to Brakeman version 4.4.0 or later&lt;/b&gt; until you
&lt;b&gt;first talk with your lawyer&lt;/b&gt;.
At the very least, if you plan to use newer versions of Brakeman,
check their new license &lt;i&gt;carefully&lt;/i&gt; to make sure that there
is no possibility of a legal issue.
This license change was part of a purchase of Brakeman by Synopsys.
Synopsys is a big company, and they definitely
have the resources to sue people who don&amp;#8217;t obey their legal terms.
Even if they didn&amp;#8217;t, it is not okay to use software
when you don&amp;#8217;t have the right to do so.
Either make sure that you have no legal issues&amp;#8230; or just switch
to Railroader, where nothing has changed.
&lt;/p&gt;

&lt;p&gt;
Unfortunately,
it is really easy to &amp;#8220;just upgrade to the latest release&amp;#8221;
of Brakeman
without realizing that this is a &lt;i&gt;major&lt;/i&gt; license change.
I suspect a lot of people will just automatically download and run
the latest version, and have no idea that this is happening.
I only noticed because I routinely use software license checkers
(&lt;tt&gt;license_finder&lt;/tt&gt; in my case) so that I immediately notice
license changes in a newer version.
I strongly recommend adding static source code analyzers &lt;i&gt;and&lt;/i&gt;
license checkers as part of your continuous integration (CI).
&lt;/p&gt;

&lt;p&gt;
We assume that &amp;#8220;Brakeman&amp;#8221; is now a trademarked by Synopsys, Inc,
so we&amp;#8217;ve tried to rename everything so that the projects
are clearly distinct. If we&amp;#8217;ve missed something,
please let us know and we&amp;#8217;ll fix it. The term &amp;#8220;Railroader&amp;#8221; is a
play on the word Rails, but it is obviously a completely different word.
Railroader shares a common code base historically with Brakeman,
and that&amp;#8217;s important to explain, but they are not the same projects and
we are expressly trying to not infringe on any Brakeman trademark.
It&amp;#8217;s obviously legal to copy and modify materials licensed under the
MIT and CC-BY-3.0 licenses
(that&amp;#8217;s the purpose of these licenses), so we believe there is no
legal problem.
&lt;/p&gt;

&lt;p&gt;
I think I have a reasonable background for starting this project.
I created and maintain &lt;a href=&quot;https://dwheeler.com/flawfinder&quot;
&gt;flawfinder&lt;/a&gt;, a security static analysis tool for C/C++,
since 2001.
I literally wrote the book on developing secure software; see my book
&lt;a href=&quot;https://dwheeler.com/secure-programs/&quot;
&gt;&lt;i&gt;Secure Programming HOWTO&lt;/i&gt;&lt;/a&gt;.
I even &lt;a href=&quot;https://dwheeler.com/secure-class/&quot;
&gt;teach a graduate class at George Mason Univerity (GMU) on
how to develop secure software&lt;/a&gt;.
For an example of how I approach securing software
in an affordable way, see my video
&lt;a href=&quot;https://www.youtube.com/watch?v=5a5D4d6hcEY&quot;
&gt;&lt;i&gt;How to Develop Secure Applications: The BadgeApp Example&lt;/i&gt;&lt;/a&gt;
(2017-09-18) or the related document
&lt;a href=&quot;https://github.com/coreinfrastructure/best-practices-badge/blob/master/doc/security.md&quot;
&gt;BadgeApp Security: Its Assurance Case&lt;/a&gt;.
I have also long analyzed software licenses, e.g., see
&lt;a href=&quot;https://dwheeler.com/essays/floss-license-slide.html&quot;
&gt;The Free-Libre / Open Source Software (FLOSS) License Slide&lt;/a&gt;,
&lt;a href=&quot;https://dwheeler.com/essays/commercial-floss.html&quot;
&gt;Free-Libre / Open Source Software (FLOSS) is Commercial Software&lt;/a&gt;, and
&lt;a href=&quot;https://www.csiac.org/journal-article/publicly-releasing-open-source-software-developed-for-the-u-s-government/&quot;
&gt;Publicly Releasing Open Source Software Developed for the U.S. Government&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
While Railroader is a project fork, we hope that this is not a hosttile fork.
We will not accept software licensed only under CC-BY-NC-SA-4.0, since
that is not an OSS license. But we&amp;#8217;ll gladly accept good contributions
from anyone if they are released under the original OSS licenses
(MIT for software, CC-BY-3.0 for website content).
If the Brakeman project wants to cooperate in some way, we&amp;#8217;d love to
talk! We are all united in our desire to squash out vulnerabilities
before they are deployed. In addition, we&amp;#8217;re grateful for all the work
that the Brakeman community has done.
&lt;/p&gt;

&lt;p&gt;
So, again:
If you are developing with Ruby on Rails, please consider using
&lt;a href=&quot;https://railroader.org/&quot;&gt;Railroader&lt;/a&gt;.
We would also really love contributions, so please contribute!
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Get your CII best practices badge!</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog/2018/11/19#cii-badge</link>
    <pubDate>Mon, 19 Nov 2018 12:17 GMT</pubDate>
    <!-- date: 2018-11-19 -->
    <description>
&lt;p&gt;
Are you developing open source software (OSS)? Selecting some?
If you&amp;#8217;re developing OSS, earn a best practices badge from
the Linux Foundation Core Infrastructure Initiative (CII).
If you&amp;#8217;re selecting OSS, prefer OSS that has earned a badge.
The badge shows that the project is applying
the best practices for today&amp;#8217;s projects.
Check out &lt;a href=&quot;https://youtu.be/JMptmhV06j8&quot;&gt;this short
Youtube video summary&lt;/a&gt;
or the
&lt;a href=&quot;https://bestpractices.coreinfrastructure.org&quot;&gt;CII Best Practices
badge website&lt;/a&gt;.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Get your CII best practices badge!</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog/2016/05/04#get-your-badge</link>
    <pubDate>Wed, 04 May 2016 12:11 GMT</pubDate>
    <!-- date: 2016-05-04 -->
    <description>
&lt;p&gt;
If you&amp;#8217;re involved in a free / libre / open source software (FLOSS) project,
go to
&lt;a href=&quot;https://bestpractices.coreinfrastructure.org/&quot;&gt;bestpractices.coreinfrastructure.org&lt;/a&gt;
and get your best practices badge!
&lt;/p&gt;

&lt;p&gt;
The Linux Foundation&amp;#8217;s Core Infrastructure Initiative (CII)
has just announced its CII best practices badging program
for FLOSS projects.
It&amp;#8217;s a free program that lets developers explain how they
follow best practices, and if they do, they can get a badge
that they can show on their GitHub page or anywhere else.
Early badge earners include the Linux kernel, Curl, GitLab,
OpenBlox, OpenSSL, Node.js and Zephyr.
&lt;/p&gt;

&lt;p&gt;
The idea is straightforward.
The Heartbleed vulnerability in OpenSSL made it obvious that
there are widely-accepted best practices that not everyone is doing -
and that even includes important projects.
This isn&amp;#8217;t just speculation;
if you compare
&lt;a href=&quot;https://bestpractices.coreinfrastructure.org/projects/87&quot;&gt;OpenSSL
before Heartbleed&lt;/a&gt; with
&lt;a href=&quot;https://bestpractices.coreinfrastructure.org/projects/54&quot;&gt;current
OpenSSL&lt;/a&gt; the difference is striking.
I think it&amp;#8217;s clear that if
more projects would apply generally-accepted best practices,
we&amp;#8217;d have more secure software.
This badging process helps projects identify those best practices,
determine if they meet them, and show everyone else that they&amp;#8217;re
meeting them.
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://github.com/linuxfoundation/cii-best-practices-badge&quot;&gt;The
web application and criteria are being maintained
as an open source software project&lt;/a&gt;, so we&amp;#8217;d love to have you!
I say &amp;#8220;we&amp;#8221; because I&amp;#8217;m leading this project&amp;#8230; but it&amp;#8217;s not just me,
and we would love to have you involved.
&lt;/p&gt;

&lt;p&gt;
More detail is in the
&lt;a href=&quot;http://www.linuxfoundation.org/news-media/announcements/2016/05/free-badge-program-signals-what-open-source-projects-meet-criteria&quot;&gt;Linux Foundation
press release about the best practices badging project&lt;/a&gt;.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>US government - Reusable and Open Source Software</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog/2016/03/10#gov-policy-2016</link>
    <pubDate>Thu, 10 Mar 2016 15:05 GMT</pubDate>
    <!-- date: 2016-03-10 -->
    <description>
&lt;p&gt;
The US White House has announced (in its blog)
&lt;a href=&quot;https://www.whitehouse.gov/blog/2016/03/09/leveraging-american-ingenuity-through-reusable-and-open-source-software&quot;&gt;Leveraging American Ingenuity through Reusable and Open Source Software&lt;/a&gt;.
They state that, &amp;#8220;Today, we’re releasing for public comment a draft policy to support improved access to custom software code developed for the Federal Government.&amp;#8221;
They are
&lt;a href=&quot;https://sourcecode.cio.gov/&quot;&gt;accepting comments on this draft policy
via GitHub pull requests, GitHub issues, or email&lt;/a&gt;.
I definitely plan to take a look,
and I&amp;#8217;m sure they would like feedback from many people.
&lt;/p&gt;
&lt;p&gt;
Note that I also
&lt;a href=&quot;https://twitter.com/drdavidawheeler/status/707971377899241473&quot;&gt;posted
this information on Twitter&lt;/a&gt;.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Using open source software to help technology transition of research</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog/2016/02/01#oss-transition</link>
    <pubDate>Mon, 01 Feb 2016 17:02 GMT</pubDate>
    <!-- date: 2016-02-01 -->
    <description>
&lt;p&gt;
If you&amp;#8217;re doing software research and development
(especially on how to improve computer security),
and are thinking about using an open source software (OSS) approach
but don&amp;#8217;t know a lot about it,
here&amp;#8217;s something that may help:
&lt;a href=&quot;https://www.ida.org//~/media/Corporate/Files/Publications/IDA_Documents/ITSD/2016/P-5279.ashx&quot;&gt;Using an Open Source Software Approach for Cybersecurity Technology Transition (IDA paper P-5279, aka the &amp;#8220;PI guide&amp;#8221;)&lt;/a&gt;.
If you&amp;#8217;re an old hand at developing Free/ libre/ open source software
(FLOSS or OSS), you probably know most of this information.
However, I&amp;#8217;ve found that a lot of people could use a hand.
Here&amp;#8217;s that helping hand.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Government adoption of OSS</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog/2015/10/09#government-adoption-oss</link>
    <pubDate>Fri, 09 Oct 2015 22:18 GMT</pubDate>
    <!-- date: 2015-10-09 -->
    <description>

&lt;p&gt;
If you&amp;#8217;re interested in open source software (OSS), or in how
governments can work better, take a look!
&lt;a href=&quot;http://opensource.com/government/15/10/us-dhs-issue%C2%ADs-report&quot;&gt;
Mark Bohannon has posted the article &amp;#8220;U.S. report highlights positive elements of government open source adoption&amp;#8221; on Opensource.com&lt;/a&gt;.
This discusses a paper Tom Dunn and I wrote
&lt;a href=&quot;http://www.dhs.gov/sites/default/files/publications/Open%20Source%20Software%20in%20Government%20%E2%80%93%20Challenges%20and%20Opportunities_Final.pdf&quot;&gt;Open Source Software in Government: Challenges and Opportunities&lt;/a&gt;, and
discusses a few things that have happened since.
Enjoy!
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Reveloping open source software in Linux Foundation projects: $5 billion and 30 years</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog/2015/09/30#redevelop-2015</link>
    <pubDate>Wed, 30 Sep 2015 13:07 GMT</pubDate>
    <!-- date: 2015-09-30 -->
    <description>
&lt;p&gt;
&lt;a href=&quot;http://www.linuxfoundation.org/publications/linux-foundation/estimating-total-development-cost-linux-foundation-collaborative-projects&quot;&gt;The Linux Foundation now estimates it would cost $5 billion and 30 years to redevelop &amp;#8220;the software residing in The Linux Foundation’s collaborative projects&amp;#8221;&lt;/a&gt;.
That&amp;#8217;s not even &lt;i&gt;all&lt;/i&gt; free / libre / open source software (FLOSS).
Of course, there are many caveats, but that&amp;#8217;s still an intriguing number;
it provides a simple view of just how big FLOSS has become.
They also credit me, since they applied the same general process I
developed earlier in my &amp;#8220;More than a Gigabuck&amp;#8221; paper.
Thanks!
If you&amp;#8217;re interested in FLOSS, I think you&amp;#8217;ll find this paper intriguing.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Z3 is OSS!</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog/2015/03/27#z3-oss</link>
    <pubDate>Fri, 27 Mar 2015 08:45 GMT</pubDate>
    <!-- date: 2015-03-27 -->
    <description>
&lt;p&gt;
&lt;a href=&quot;https://github.com/Z3Prover/z3&quot;&gt;Z3&lt;/a&gt; has been released as
&lt;a href=&quot;http://opensource.org/&quot;&gt;open source software&lt;/a&gt; under the
&lt;a href=&quot;http://opensource.org/licenses/MIT&quot;&gt;MIT license&lt;/a&gt;!
This is great news.
Z3 is a good satisifiability modulo theories (SMT) solver /
theorem prover from Microsoft Research.
An SMT solver accepts a set of constraints
(such as &amp;#8220;a&amp;lt;5 and a&amp;gt;1&amp;#8221;) and tries to produce values that
satisfy all the constraints.
A satisfiability (SAT) solver does this too, but SAT solvers can only
work with boolean variables;
SMT solvers can handle other types, such as integers.
&lt;a href=&quot;http://rise4fun.com/z3/tutorial&quot;&gt;Here is a Z3 tutorial&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
SMT solvers are basically lower-level tools that have many uses
for building larger capabilities, because many problems
require solving logical formulas to find a solution.
&lt;/p&gt;
&lt;p&gt;
I am particularly interested in the use of SMT solvers
to help prove that programs do something or do not do something.
&lt;a href=&quot;http://why3.lri.fr/&quot;&gt;Why3&lt;/a&gt; is a platform that lets you
write programs and their specifications, and then calls out to
various provers to try to determine if the claims are true.
By itself Why3 only supports its WhyML language, but Why3 can be combined
with other tools to prove statements in other languages.
Those include C (using Frama-C and a plug-in), Java, and Ada.
People have been able to prove tiny programs for decades, but scaling up
to bigger programs in practice requires a lot of automation.
I think this approach of combining many different tools, with
different strengths, is very promising.
&lt;/p&gt;
&lt;p&gt;
The more tools that are available to Why3, the more likely it will
solve problems automatically.
That&amp;#8217;s because different tools use different heuristics and focus on
different issues, resulting in different ones being good at different things.
There are already several good SMT solvers available as OSS,
including
&lt;a href=&quot;http://cvc4.cs.nyu.edu/web/&quot;&gt;CVC4&lt;/a&gt;
and
&lt;a href=&quot;http://alt-ergo.lri.fr/&quot;&gt;alt-ergo&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Now that Microsoft has released Z3 as OSS, there is yet another
strong OSS SMT solver that tools like Why3 can use directly.
In short, the collection of OSS SMT solvers has just become even stronger.
There&amp;#8217;s a standard for SMT solver inputs, the
&lt;a href=&quot;http://www.smt-lib.org/&quot;&gt;SMT-LIB format&lt;/a&gt;,
so it&amp;#8217;s not hard to take advantage of many SMT solvers.
My hope is that this will be another step in making it easier to
have strong confidence in software.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Open Source Software in U.S. Government</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog/2014/10/20#oss-in-government</link>
    <pubDate>Mon, 20 Oct 2014 12:06 GMT</pubDate>
    <!-- date: 2014-10-20 -->
    <description>
&lt;p&gt;
The report
&lt;a href=&quot;https://host-project.org/content/oss-software-government-challenges-and-opportunities&quot;&gt;&amp;#8220;Open Source Software in Government: Challenges and Opportunities&amp;#8221;&lt;/a&gt; is available to the public (you can &lt;a href=&quot;https://host-project.org/sites/default/files/Open%20Source%20Software%20in%20Government%20-%20Challenges%20and%20Opportunities.pdf&quot;&gt;jump to the &amp;#8220;Download full report&amp;#8221; link at the bottom&lt;/a&gt;).
This paper, which I co-authored,
discusses key challenges and opportunities in the
U.S. government application of open source software (OSS).
It became publicly available only recently,
even though it was finished a while back;
I hope it&amp;#8217;s been worth the wait.
If you&amp;#8217;re interested in the issues of OSS and government,
I think you&amp;#8217;ll find this report very illuminating.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>On Dave and Gunnar show</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog/2014/05/21#dave-gunnar-show</link>
    <pubDate>Wed, 21 May 2014 23:04 GMT</pubDate>
    <!-- date: 2014-05-21 -->
    <description>
&lt;p&gt;
There is now an
&lt;a href=&quot;http://dgshow.org/2014/05/51-a-visit-with-the-doctor/&quot;&gt;interview
of me on the Dave and Gunnar show (episode #51)&lt;/a&gt;.
I talk mostly about
&lt;a href=&quot;http://www.dwheeler.com/essays/heartbleed.html&quot;&gt;How to prevent the next Heartbleed&lt;/a&gt;.
I also talk about my
&lt;a href=&quot;http://www.dwheeler.com/numbers-database/&quot;&gt;FLOSS numbers database&lt;/a&gt;
(as
&lt;a href=&quot;http://www.dwheeler.com/blog/2014/05/08/#numbers-database&quot;&gt;previously discussed&lt;/a&gt;) and
&lt;a href=&quot;http://www.dwheeler.com/blog/2013/11/16/#vulnerability-economics&quot;&gt;vulnerability economics&lt;/a&gt;.
There was even a mention of my
&lt;a href=&quot;http://www.dwheeler.com/trusting-trust/&quot;&gt;Fully Countering Trusting Trust through Diverse Double-Compiling&lt;/a&gt; work.
&lt;/p&gt;
&lt;p&gt;
Since the time of the interview, more information has surfaced
about Heartbleed.
Traditional fuzzing could not find Heartbleed, but it looks like some
fuzzing variants could even if the OpenSSL code was unchanged;
see the
&lt;a href=&quot;http://www.dwheeler.com/essays/heartbleed.html&quot;&gt;latest version for more information&lt;/a&gt;.
If you learn more information relevant to the paper, let me know!
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>FLOSS numbers database!</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog/2014/05/08#numbers-database</link>
    <pubDate>Thu, 08 May 2014 22:22 GMT</pubDate>
    <!-- date: 2014-05-08 -->
    <description>
&lt;p&gt;
If you are doing research related to Free / Libre / Open Source Software
(FLOSS), then I have something that may be useful to you: the
&lt;a href=&quot;http://www.dwheeler.com/numbers-database/&quot;&gt;FLOSS numbers database&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
My paper
&lt;a href=&quot;http://www.dwheeler.com/oss_fs_why.html&quot;&gt;Why Open Source Software / Free Software (OSS/FS, FLOSS, or FOSS)? Look at the Numbers!&lt;/a&gt;
is a big collection of quantitative studies about FLOSS.
Too big, in fact.
There have been a &lt;i&gt;lot&lt;/i&gt; of quantitative studies
about FLOSS over the years!
A lot of people want to query this information for specific purposes, 
and it is hard to pull out just the parts you want from a flat document.
I had thought that as FLOSS became more and more common, fewer
people would want this information&amp;#8230; but I still get requests for it.
&lt;/p&gt;
&lt;p&gt;
So I am announcing the
&lt;a href=&quot;http://www.dwheeler.com/numbers-database/&quot;&gt;FLOSS numbers database&lt;/a&gt;;
it provides the basic information in spreadsheet format,
making it easy to query for just the parts you want.
My special thanks go to Paul Rotilie, who worked to get the
data converted from my document format into the spreadsheet.
&lt;/p&gt;
&lt;p&gt;
If you want to discuss this database, I have set up a discussion group:
&lt;a href=&quot;https://groups.google.com/forum/#!forum/numbers-about-free-libre-open-source-software&quot;&gt;Numbers about Free Libre Open Source Software&lt;/a&gt;.
If you are doing research and need or use this kind of information,
please feel free to join.
If you just need a presenatation based on this, you might like my
&lt;a href=&quot;http://www.dwheeler.com/numbers/&quot;&gt;Presentation: Why Free-Libre / Open Source Software (FLOSS or OSS/FS)? Look at the Numbers!&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
This database is the sort of thing that if you need it, you really need it.
I am sure it is incomplete&amp;#8230; but I am also sure that with your
help, we can make it better.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Opensource.com interview</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog/2014/04/24#interview-2014</link>
    <pubDate>Thu, 24 Apr 2014 21:19 GMT</pubDate>
    <!-- date: 2014-04-24 -->
    <description>
&lt;p&gt;
&lt;a href=&quot;http://opensource.com/government/14/4/interview-david-wheeler&quot;&gt;Opensource.com has posted an interview of me, titled
&amp;#8220;US government accelerating development and release of open source&amp;#8221;&lt;/a&gt;.
In this interview
I describe the current state of the use of open source software
by the US federal government,
the challenges of the Federal acquisition system,
and I also discuss what may happen next.
Enjoy!
&lt;/p&gt;
</description>
   </item>
  </channel>
</rss>