<?xml version="1.0" encoding="UTF-8"?>
<!-- name="generator" content="blosxom/2.0" -->

<rss version="2.0">
  <channel>
    <title>David A. Wheeler's Blog   </title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog</link>
    <description>David A. Wheeler's weblog.</description>
    <language>en</language>

  <item>
    <title>FLOSS Weekly #609!</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog/2020/12/13#floss-weekly-609</link>
    <pubDate>Sun, 13 Dec 2020 15:04 GMT</pubDate>
    <!-- date: 2020-12-13 -->
    <description>
&lt;p&gt;
I&amp;#8217;m currently scheduled to be a guest on
&lt;a href=&quot;https://twit.tv/shows/floss-weekly/&quot;
&gt;FLOSS Weekly&lt;/a&gt; on 
Wednesday, 2020-12-16, at 12:30pm Eastern Time (9:30am Pacific, 17:30 UTC).
The general topic will be about Linux Foundation work on
improving Open Source Software security.
&lt;/p&gt;
&lt;p&gt;
Please join the live audience or listen later.
I expect it will be interesting.
I expect that we&amp;#8217;ll discuss the
&lt;a href=&quot;https://openssf.org/&quot;&gt;Open Source Security Foundation (OpenSSF)&lt;/a&gt;,
the
&lt;a href=&quot;https://www.linuxfoundation.org/blog/2020/12/download-the-report-on-the-2020-foss-contributor-survey/&quot;
&gt;Report on the 2020 FOSS Contributor Survey&lt;/a&gt;,
the free edX trio of courses on
&lt;a href=&quot;https://www.edx.org/professional-certificate/linuxfoundationx-secure-software-development-fundamentals&quot;
&gt;Secure Software Development Fundamentals&lt;/a&gt;,
and the
&lt;a href=&quot;https://bestpractices.coreinfrastructure.org/&quot;
&gt;CII Best Practices Badge&lt;/a&gt; program.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Report on the 2020 FOSS Contributor Survey</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog/2020/12/13#2020-foss-contributor-report</link>
    <pubDate>Sun, 13 Dec 2020 14:48 GMT</pubDate>
    <!-- date: 2020-12-13 -->
    <description>
&lt;p&gt;
It&amp;#8217;s here!
You can now see the
&lt;a href=&quot;https://www.linuxfoundation.org/blog/2020/12/download-the-report-on-the-2020-foss-contributor-survey/&quot;
&gt;Report on the 2020 Free and Open Source Software (FOSS) Contributor Survey&lt;/a&gt;!
This work was done by the Linux Foundation
under the Core Infrastructure Initiative (CII) and later the
&lt;a href=&quot;https://openssf.org/&quot;
&gt;Open Source Software Foundation (OpenSSF)&lt;/a&gt;, along with
Harvard University.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Secure Software Development Fundamentals</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog/2020/12/13#secure-software-development-fundamentals</link>
    <pubDate>Sun, 13 Dec 2020 14:44 GMT</pubDate>
    <!-- date: 2020-12-13 -->
    <description>
&lt;p&gt;
If you develop software, please consider taking the &lt;i&gt;free&lt;/i&gt;
trio of courses
&lt;a href=&quot;https://www.edx.org/professional-certificate/linuxfoundationx-secure-software-development-fundamentals&quot;
&gt;Secure Software Development Fundamentals&lt;/a&gt;
on edX that I recently created for the Linux Foundation&amp;#8217;s
&lt;a href=&quot;https://openssf.org/&quot;
&gt;Open Source Security Foundation (OpenSSF)&lt;/a&gt;.
The trio of courses is free; if you want to get a certificate to prove
you learned it, you can pay to take some tests to earn the certificate
(this is how many edX courses work).
&lt;/p&gt;
&lt;p&gt;
Here&amp;#8217;s a brief summary:
&lt;blockquote&gt;
Almost all software is under attack today, and many organizations are unprepared in their defense. This professional certificate program, developed by the Open Source Security Foundation (OpenSSF), a project of the Linux Foundation, is geared towards software developers, DevOps professionals, software engineers, web application developers, and others interested in learning how to develop secure software, focusing on practical steps that can be taken, even with limited resources to improve information security. The program enables software developers to create and maintain systems that are much harder to successfully attack, reduce the damage when attacks are successful, and speed the response so that any latent vulnerabilities can be rapidly repaired. The best practices covered in the course apply to all software developers, and it includes information especially useful to those who use or develop open source software.
&lt;br&gt;&lt;br&gt;
The program discusses risks and requirements, design principles, and evaluating code (such as packages) for reuse. It then focuses on key implementation issues: input validation (such as why allowlists and not denylists should be used), processing data securely, calling out to other programs, sending output, cryptography, error handling, and incident response. This is followed by a discussion on various kinds of verification issues, including tests, including security testing and penetration testing, and security tools. It ends with a discussion on deployment and handling vulnerability reports.
&lt;br&gt;&lt;br&gt;
The training courses included in this program focus on practical steps that you (as a developer) can take to counter most common kinds of attacks. It does not focus on how to attack systems, how attacks work, or longer-term research.
&lt;br&gt;&lt;br&gt;
Modern software development depends on open source software, with open source now being pervasive in data centers, consumer devices, and services. It is important that those responsible for cybersecurity are able to understand and verify the security of the open source chain of contributors and dependencies. Thanks to the involvement of OpenSFF, a cross-industry collaboration that brings together leaders to improve the security of open source software by building a broader community, targeted initiatives, and best practices, this program provides specific tips on how to use and develop open source secur
&lt;/blockquote&gt;
&lt;/p&gt;
&lt;p&gt;
I also teach a graduate course on how to the design and implementation
of secure software.
As you might expect, a graduate course isn&amp;#8217;t the same thing.
But please, if you&amp;#8217;re a software developer, take the free edX, my class,
or in some other way learn about how to develop secure software.
The software that society depends on needs to be more secure
than it is today.
Having software developers know how develop secure software
is a necesary step towards creating that secure software we all need.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>FOSS Contributor Survey</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog/2020/07/30#cii-survey</link>
    <pubDate>Thu, 30 Jul 2020 12:45 GMT</pubDate>
    <!-- date: 2020-07-30 -->
    <description>
&lt;p&gt;
If you contribute to Free/Open Source Software,
please take the
&lt;a href=&quot;https://hbs.qualtrics.com/jfe/form/SV_enfu6tjRM0QzwQB&quot;
&gt;FOSS Contributor Survey&lt;/a&gt;!
&lt;/p&gt;

&lt;p&gt;
This survey is a collaboration between the Linux Foundation&amp;#8217;s Core
Infrastructure Initiative and the Laboratory for Innovation Science
at Harvard. Some of the questions are specific to those who write
software; if you contribute, but don&amp;#8217;t write software, just skip
those questions.
The goal is to get a better understanding about its development so that
we can best work out how to improve its security and sustainability.
&lt;/p&gt;

&lt;p&gt;
Also: please tell others who develop this software about the survey!
&lt;/p&gt;

&lt;p&gt;
One interesting complication about this survey is that it&amp;#8217;s difficult to
get the word out about such a general survey.
People talk about the &amp;#8220;open source software community&amp;#8221;, but in practice
there isn&amp;#8217;t &lt;i&gt;one&lt;/i&gt; such community, there are many communities
with some overlap.
I don&amp;#8217;t want to spam people who have never expressed any interest
in information like this.
&lt;/p&gt;

&lt;p&gt;
I&amp;#8217;m currently talking with some folks in the Linux Foundatinon leadership
about sending a one-time email &lt;i&gt;only&lt;/i&gt; to developers who are
&lt;i&gt;already&lt;/i&gt; signed up for Linux Foundation mailing lists
that are focused on developing open source software.
We don&amp;#8217;t want to spam people, but I think it&amp;#8217;s reasonable to believe
that people on those mailing lists &lt;i&gt;are&lt;/i&gt; interestd in information
related to the development of open source software.
One problem with sending to multiple mailing lists is that we don&amp;#8217;t want
to annoy people by having them receive multiple copies, so we want
to work out a way so an individual only gets one copy.
&lt;/p&gt;

&lt;p&gt;
I&amp;#8217;ve never done this before, and I hate spam myself.
So I&amp;#8217;m &lt;i&gt;first&lt;/i&gt; checking with Linux Foundation leaders and program
managers to see if they think this is reasonable.
I think it is, but it&amp;#8217;s easy to justify anything to yourself, so
I&amp;#8217;m waiting to hear from others about what they think.
&lt;/p&gt;

&lt;p&gt;
So getting back to the point -
if you contribute to Free/Open Source Software,
please take the
&lt;a href=&quot;https://hbs.qualtrics.com/jfe/form/SV_enfu6tjRM0QzwQB&quot;
&gt;FOSS Contributor Survey&lt;/a&gt;!
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Linux kernel earns gold!</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog/2020/06/12#linux-gold</link>
    <pubDate>Fri, 12 Jun 2020 14:37 GMT</pubDate>
    <!-- date: 2020-06-12 -->
    <description>
&lt;p&gt;
The Linux kernel has earned the CII Best Practices &lt;i&gt;gold&lt;/i&gt; badge.
The CII Best Practices badge has three badge levels:
passing, silver, and gold.
Gold badges are especially hard to get, and I congratulate them!
More info here:
&lt;a href=&quot;https://www.linuxfoundation.org/blog/2020/06/linux-kernel-earns-cii-best-practices-gold-badge/&quot;
&gt;Linux kernel earns CII best practices gold badge&lt;/a&gt;
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Verizon still failing to support RPKI</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog/2020/05/23#verizon-rpki</link>
    <pubDate>Sat, 23 May 2020 15:39 GMT</pubDate>
    <!-- date: 2020-05-23 -->
    <description>
&lt;p&gt;
On 2019-06-24 parts of the Internet became inaccessible because
Verizon failed to implement a key security measure called
&lt;a href=&quot;https://blog.cloudflare.com/rpki/&quot;
&gt;Resource Public Key Infrastructure (RPKI)&lt;/a&gt;.
&lt;a href=&quot;https://blog.cloudflare.com/how-verizon-and-a-bgp-optimizer-knocked-large-parts-of-the-internet-offline-today/&quot;
&gt;Here&amp;#8217;s a brief story about the 2019 failure by Verizon&lt;/a&gt;, with
&lt;a href=&quot;https://blog.cloudflare.com/the-deep-dive-into-how-verizon-and-a-bgp-optimizer-knocked-large-parts-of-the-internet-offline-monday/&quot;
&gt;follow-on details&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
What&amp;#8217;s shocking is that Verizon is &lt;i&gt;still&lt;/i&gt; failing to implement RPKI.
Verizon&amp;#8217;s continuing failure continues to make it trivial
for both accidents and
malicious actors (including governments) to shut down large swathes of
the Internet, including networks around the US capital.
That&amp;#8217;s especially absurd because during the
COVID-19 pandemic we have become &lt;i&gt;more&lt;/i&gt; dependent on the Internet.
There have been many routine failures by accident or on purpose;
it&amp;#8217;s past time to deploy the basic countermeasure (RPKI) to deal with it.
Verizon needs to implement RPKI, as many other operators already have.
&lt;/p&gt;
&lt;p&gt;
The fundamental problem is that the Internet depends on a routing system
called Border Gateway Protocol (BGP), which never included a
(useful) security mechanism.
&lt;a href=&quot;https://blog.cloudflare.com/rpki/&quot;&gt;Resource Public Key (RPKI)&lt;/a&gt;
provides an important security mechanism to counter certain kinds of
BGP problems (either by accident or on purpose).
&lt;a href=&quot;https://www.youtube.com/watch?v=Y9vbbxr-GbI&quot;
&gt;&amp;#8220;Why it&amp;#8217;s time to deploy RPKI&amp;#8221; (RIPE NCC, 2019-05-17)&lt;/a&gt;
is a short 2-minute video that explains why it&amp;#8217;s past time to deploy RPKI.
&lt;/p&gt;
&lt;p&gt;
Verizon already knows that they&amp;#8217;re failing to support RPKI; here&amp;#8217;s a
&lt;a href=&quot;https://forums.verizon.com/t5/Fios-Internet/Verizon-FIOS-does-NOT-provide-important-network-security-known/td-p/895575&quot;&gt;complaint
posted on 2020-04-19 7:16AM that Verizon wasn&amp;#8217;t supporting RPKI&lt;/a&gt;.
It&amp;#8217;s clear RPKI is useful;
&lt;a href=&quot;https://blog.thousandeyes.com/visualizing-the-benefits-of-rpki/&quot;
&gt;&amp;#8220;Visualizing the Benefits of RPKI&amp;#8221; by Kemal Sanjta (2019-07-19)&lt;/a&gt;
shows how RPKI really does help.
&lt;/p&gt;
&lt;p&gt;
If you&amp;#8217;re a Verizon customer, you can easily verify Verizon&amp;#8217;s status via
&lt;a href=&quot;https://isbgpsafeyet.com/&quot;
&gt;Is BGP safe yet?&lt;/a&gt;.
The answer for Verizon users is &amp;#8220;no&amp;#8221;.
&lt;/p&gt;
&lt;p&gt;
If your Internet Service Provider (ISP) doesn&amp;#8217;t support RPKI, please
nag them to do so.
If you&amp;#8217;re a government, and your ISPs won&amp;#8217;t yet support RPKI,
ask when they&amp;#8217;re going secure their network with this basic security measure.
It will take work, and it won&amp;#8217;t solve all problems in the universe,
but those are merely excuses for failure; those statements describe
all things that should be done.
RPKI is an important minimum part of securing the Internet, and it&amp;#8217;s time
to ensure that every Internet Service Provider (ISP) supports it.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Software Bill of Materials (SBOM) work at NTIA</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog/2020/05/19#ntia-sbom</link>
    <pubDate>Tue, 19 May 2020 18:23 GMT</pubDate>
    <!-- date: 2020-05-19 -->
    <description>
&lt;p&gt;
Modern software systems contain many components, which themselves
contain components, which themselves contain components.
Which raises some important questions, for example,
when a vulnerability is publicly identified, how do you know if
your system is affected?
Another issue involves licensing - how can you be confident that
you are meeting all your legal obligations?
This is getting harder to do as systems get bigger, and also because
software development is a global activity.
&lt;/p&gt;

&lt;p&gt;
On July 19, 2018, the US National Telecommunications and Information
Administration (NTIA) &amp;#8220;convened a meeting of stakeholders from across
multiple sectors to begin a discussion about software transparency and
the proposal being considered for a common structure for describing the
software components in a product containing software.&amp;#8221;
[&lt;i&gt;Framing Software Component Transparency: Establishing a Common Software
Bill of Material (SBOM)&lt;/i&gt;]
&lt;/p&gt;

&lt;p&gt;
A key part of this is to make it much easier to define and exchange a
&amp;#8220;Software Bill of Materials&amp;#8221; (SBOM).
You can see a lot of their information at the
&lt;a href=&quot;https://www.ntia.gov/sbom&quot;&gt;Community-Drafted
Documents on Software Bill of Materials&lt;/a&gt;.
If you&amp;#8217;re interested in this topic, that&amp;#8217;s a decent place to start.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Initial Analysis of Underhanded Source Code</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog/2020/05/15#underhanded-code</link>
    <pubDate>Fri, 15 May 2020 19:11 GMT</pubDate>
    <!-- date: 2020-05-15 -->
    <description>
&lt;p&gt;
Announcing - a newly-available security paper I wrote! It&amp;#8217;s titled
&lt;a href=&quot;https://www.ida.org/-/media/feature/publications/i/in/initial-analysis-of-underhanded-source-code/d-13166.ashx&quot;
&gt;&amp;#8220;Initial Analysis of Underhanded Source Code&amp;#8221;
(by David A. Wheeler, IDA Document D-13166, April 2020)&lt;/a&gt;.
Here&amp;#8217;s what it&amp;#8217;s about, from its executive summary:
&lt;/p&gt;
&lt;blockquote&gt;
&amp;#8220;It is possible to develop software source code that appears benign
to human review but is actually malicious. In various competitions,
such as the Obfuscated V Contest and Underhanded C Contest,
software developers have demonstrated that it is possible to solve
a data processing problem “with covert malicious behavior [in the]
source code [that] easily passes visual inspection.”
This is not merely an academic concern; in 2003, an attacker attempted to
subvert the widely used Linux kernel by inserting underhanded software
(this attack inserted code that used = instead of ==, an easily missed,
one-character difference).
This paper provides a brief initial look at
underhanded source code, with the intent to eventually help develop
countermeasures against it. &amp;#8230;
&lt;br&gt;&lt;br&gt;
This initial work suggests that countering underhanded code is not
an impossible task; it appears that a relatively small set of simple
countermeasures can significantly reduce the risk from underhanded
code. I recommend examining more samples, identifying a recommended
set of underhanded code countermeasures, and applying countermeasures
in situations where countering underhanded code is important and the
benefits exceed their costs.&amp;#8221;
&lt;/blockquote&gt;

&lt;p&gt;
In my experience there are usually ways to reduce security risks,
once you know about them.
This is another case in point; once you know that this is a potential
attack, there are a variety of ways to reduce their effectiveness.
I don&amp;#8217;t think this is the last word at all on this topic, but
I hope it can be immediately applied and that others can build on it.
&lt;/p&gt;

&lt;p&gt;
This was the last paper I wrote when I worked at IDA
(I now work at the Linux Foundation).
My thanks to IDA for releasing it!
My special thanks go to Margaret Myers, Torrance Gloss, and
Reginald N. Meeson, Jr., who all worked to make this paper possible.
&lt;/p&gt;
&lt;p&gt;
So if you&amp;#8217;re interested in the topic, you can view the
&lt;a href=&quot;https://www.ida.org/research-and-publications/publications/all/i/in/initial-analysis-of-underhanded-source-code&quot;&gt;Landing page for
IDA Document D-13166&lt;/a&gt; or go directly to the
&lt;a href=&quot;https://www.ida.org/-/media/feature/publications/i/in/initial-analysis-of-underhanded-source-code/d-13166.ashx&quot;
&gt;PDF for IDA DOcument D-13166,
&amp;#8220;Initial Analysis of Underhanded Source Code&amp;#8221;&lt;/a&gt;.
(If that doesn&amp;#8217;t work, use this
&lt;a href=&quot;https://perma.cc/FVQ8-EKWA&quot;&gt;Perma.cc link to paper D-13166&lt;/a&gt;.)
Enjoy!
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>COVID-19/Coronavirus and Computer Attacks</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog/2020/04/07#covid-19-attacks</link>
    <pubDate>Tue, 07 Apr 2020 10:29 GMT</pubDate>
    <!-- date: 2020-04-07 -->
    <description>
&lt;p&gt;
Sadly, attackers have been exploiting the
COVID-19 pandemic (caused by Coronavirus SARS-CoV-2) to
cause problems via computers around the world.
&lt;a href=&quot;https://www.modernhealthcare.com/cybersecurity/hackers-taking-advantage-covid-19-spread-malware&quot;&gt;Modern Healthcare&lt;/a&gt; notes that
hospitals are seeing active attacks,
emails where a sender (pretending to be from the
Centers for Disease Control and Prevention) asks the receiver
to open a link (which is actually malware),
other scams claim to track COVID-19 cases but actually steals personal
information.
&lt;a href=&quot;https://threatpost.com/official-government-covid-19-apps-threats/154512/&quot;
&gt;Many official government COVID-19 mobile applications have
threats&lt;/a&gt; (ranging from malware to incredibly basic security
problems).
For example, in Columbia the government released
a mobile app called CoronApp-Colombia to help people track potential
COVID-19 symptoms; the intention is great, but as of March 25 it failed
to use HTTPS (secure communication), and instead used HTTP
(insecure) to relay personal data (including health data).
&lt;/p&gt;

&lt;p&gt;
In the long term, the solution is for software developers and operators
to do a much better job in creating and deploying secure applications.
In the short term,
&lt;a href=&quot;https://hbr.org/2020/03/will-coronavirus-lead-to-more-cyber-attacks&quot;
&gt;we need to take extra care about our computer security&lt;/a&gt;.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>I am at the Linux Foundation!</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog/2020/04/03#linux-foundation</link>
    <pubDate>Fri, 03 Apr 2020 17:06 GMT</pubDate>
    <!-- date: 2020-04-03 -->
    <description>
&lt;p&gt;
On April 1, 2020, I started working at the Linux Foundation!
&lt;/p&gt;

&lt;p&gt;
My new title is &amp;#8220;Director, Open Source Supply Chain Security&amp;#8221;.
I&amp;#8217;ll be working to improve the security of open source software.
I look forward to working with many others on this important problem.
&lt;/p&gt;

&lt;p&gt;
So please wish me luck&amp;#8230; and stay tuned for more.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Census II Report on Open Source Software</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog/2020/02/18#census2</link>
    <pubDate>Tue, 18 Feb 2020 18:25 GMT</pubDate>
    <!-- date: 2020-02-18 -->
    <description>
&lt;p&gt;
The Linux Foundation and the Laboratory for Innovation
Science at Harvard have just released a new report:
&lt;a href=&quot;https://www.coreinfrastructure.org/programs/census-program-ii/&quot;
&gt;“Vulnerabilities in the Core: Preliminary Report and
Census II of Open Source Software” by Frank Nagle, Jessica
Wilkerson, James Dana, and Jennifer L. Hoffman, 2020-02-14&lt;/a&gt;.
Just click on “Download Report” when you get there.  &lt;a
href=&quot;https://www.hbs.edu/news/releases/Pages/census-open-source-software-security.aspx&quot;
&gt;A summary is available from Harvard&lt;/a&gt;.
Here&amp;#8217;s a quick introduction to the paper.
&lt;/p&gt;

&lt;p&gt;
Their long-term goal is to figure out what FOSS packages are most
critical through data analysis.  This turns out to extremely difficult,
as discussed in the paper, and they expressly state that their current
results “cannot - and do not purport to - be a definitive claim of which
FOSS packages are the most critical”.  That said, they have developed
a method as a “proof of concept” to start working towards that answer.
&lt;/p&gt;

&lt;p&gt;
They describe their approach in detail. Here’s a quick summary.
First they use data from Software Composition Analysis
(SCAs) and application security companies, including Snyk and Synopsys
Cybersecurity Research Center, to identify components used in actual systems.
They then use dependency analysis (via libraries.io) to identify indirect (transitive) dependencies.
Finally, they averaged the Z-scores to provide normalized rankings.
&lt;/p&gt;

&lt;p&gt;
Here are some key lessons learned from the report (Chapter 7):
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There’s a need for a standardized naming scheme for software components.
&lt;li&gt;There’s an increasing importance of individual developer account security.
&lt;li&gt;Legacy software persists in the open source space.
&lt;/ul&gt;

&lt;p&gt;
Also, here&amp;#8217;s an interesting nugget:
“These statistics illustrate an interesting pattern: a high
correlation between being employed and being a top contributor to one
of the FOSS packages identified as most used.”
&lt;/p&gt;

&lt;p&gt;
I’m on the CII Steering Committee, so I did comment on an earlier draft,
but credit goes to the actual authors.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Gource visualization (including set.mm)</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog/2019/10/12#gource</link>
    <pubDate>Sat, 12 Oct 2019 15:02 GMT</pubDate>
    <!-- date: 2019-10-12 -->
    <description>
&lt;p&gt;
Software and mathematics are often difficult for others to visualize.
Computer hardware engineers can often have cool props to distribute
during their talks, but software developers and mathematicians work
with ideas of the mind - no physical objects involved.
&lt;/p&gt;

&lt;p&gt;
This can sometimes make it difficult to explain important ideas like
open source software (OSS).
The idea of &amp;#8220;people collaborating to produce something&amp;#8221;
is easy enough, but getting a true visceral understanding of what
happens can be hard.
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://gource.io/&quot;&gt;Gource&lt;/a&gt; is a cool visualization tool
that makes it easy to see &amp;#8220;collaboration in action&amp;#8221;.
The Gource project even has a
&lt;a href=&quot;https://github.com/acaudwell/Gource/wiki/Videos&quot;&gt;web page
showing some examples of Gource visualization&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
I recently created a
&lt;a href=&quot;https://www.youtube.com/watch?v=XC1g8FmFcUU&quot;&gt;Gource visualization
of the Metamath set.mm project&lt;/a&gt;.
Some context is important here.
In mathematics, claims are supposed to be rigorously proven, but
humans are fallible; they make mistakes, and others often miss those mistakes.
The solution to this problem is to rigorously describe mathematics
in a formal way so that
every step can be rigorously and automatically checked by a computer.
This turns out to be difficult, and requires that a lot of people
work together.
Now&amp;#8230; how can you visualize people working together to rigorously
prove mathematical claims?
One way is to use Gource&amp;#8230; because while it doesn&amp;#8217;t show everything, you
at least get a sense of the collaboration.
In this case, 48 people have contributed so far.
&lt;/p&gt;

&lt;p&gt;
This visualization shows a common feature: in many cases, a single
person starts and makes all the contributions for a while.
The same thing happens if you view, for example, a
&lt;a href=&quot;https://www.youtube.com/watch?v=cNBtDstOTmA&quot;&gt;Gource visualization
of the Python programming language&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://gource.io/&quot;&gt;Gource&lt;/a&gt; is itself OSS, so you can download it
and use it to create your own visualizations.
I strongly recommend that you automate doing it as much as possible.
For example, if you process data first, use a script to automate processing
the data.
You&amp;#8217;ll need to give Gource various options;
store options in its config file or a scripts.
&lt;/p&gt;

&lt;p&gt;
If you create a Gource video, I &lt;i&gt;strongly&lt;/i&gt; recommend adding some music
or at least an audio commentary.
If you add music, make sure it&amp;#8217;s legal to add;
the safe route is to use music released under open licenses such as
&lt;a href=&quot;https://creativecommons.org/licenses/by/4.0/&quot;&gt;Creative Commons
Attribution (CC-BY)&lt;/a&gt; or
&lt;a href=&quot;https://creativecommons.org/publicdomain/zero/1.0/&quot;&gt;CC0
Public Domain Dedication (CC0)&lt;/a&gt;.
Beware of the &amp;#8220;non-commercial use&amp;#8221; licenses - your releases might count
as &amp;#8220;commercial&amp;#8221; even if you don&amp;#8217;t think they do (talk to a lawyer if
you want to go down that path).
A great place to start for Gource music is
&lt;a href=&quot;https://audionautix.com/&quot;&gt;audionautix.com&lt;/a&gt;,
which has released lots of music under the
Creative Commons Attribution 3.0 Unported License;
you can select from lots of different styles and get some great options.
&lt;a href=&quot;https://fransdejonge.com/2018/02/improving-gource-videos-with-background-and-audio/&quot;
&gt;Improving Gource Videos with Background and Audio&lt;/a&gt;
has some tips and instructions.
&lt;/p&gt;

&lt;p&gt;
In conclusion: enjoy my
&lt;a href=&quot;https://www.youtube.com/watch?v=XC1g8FmFcUU&quot;&gt;Gource visualization
of the Metamath set.mm project&lt;/a&gt;&amp;#8230; and perhaps
it will inspire you to do something similar.
I&amp;#8217;ve embedded the video below so you can easily view it (if you like):
&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/XC1g8FmFcUU&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
</description>
   </item>
  <item>
    <title>CWE Top 25 for 2019</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog/2019/09/17#cwe-top-25-2019</link>
    <pubDate>Tue, 17 Sep 2019 17:09 GMT</pubDate>
    <!-- date: 2019-09-17 -->
    <description>
&lt;p&gt;
In case you weren’t aware of it,
there is now a
&lt;a href=&quot;https://cwe.mitre.org/top25/archive/2019/2019_cwe_top25.html&quot;
&gt;2019 version of the CWE Top 25 list&lt;/a&gt;.
This list attempts to rank what are the most important kinds
of software vulnerabilities
(what they call &amp;#8220;weaknesses&amp;#8221;).
&lt;/p&gt;

&lt;p&gt;
Their new approach is to directly use
the National Vulnerability Database (NVD) to score
various kinds of vulnerabilities.
There are a number of limitations with this approach,
and they discuss many of them in the cited page.
&lt;/p&gt;

&lt;p&gt;
Their approach does have some oddnesses, for example,
their #1 worst problem
(CWE-119, Improper restriction of operations within the bounds of
a memory buffer) is itself the parent of items #5 (CWE-125, out-of-bounds read)
and #12 (CWE-787, out-of-bounds write).
&lt;/p&gt;

&lt;p&gt;
Another oddity: they rank Cross-Site Request Forgery (CSRF) quite high (#9).
CSRF doesn&amp;#8217;t even appear in the
&lt;a href=&quot;https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project&quot;
&gt;2017 (latest) OWASP Top 10 list&lt;/a&gt;, even though the
OWASP top 10 list focuses on websites (where CSRF can occur).
I think this happens because the CWE folks are
using a large dataset from 2017-2018, where there are still a large
number of CSRF vulnerabilities.
But the impact of those remaining vulnerabilities has been going down,
due to changes to frameworks, standards, and web browsers.
Most sites use a pre-existing frameworks, and frameworks have been
increasingly adding on-by-default CSRF countermeasures.
The &amp;#8220;SameSite&amp;#8221; cookie attribute that provides an easy countermeasure
against CSRF was implemented in most browsers around 2016-2018
(depending on the browser),
but having it take effect required that websites make changes,
and during that 2017-2018 timeframe websites
were only starting to deploy those changes.
As of late 2019 several browsers are in the
process of switching their SameSite defaults so that they
counter CSRF by default, &lt;i&gt;without&lt;/i&gt; requiring sites to do anything.
(In particular, see the announcement for
&lt;a href=&quot;https://www.chromestatus.com/feature/5088147346030592&quot;
&gt;Chrome&lt;/a&gt;
and the change log for
&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1551798&quot;
&gt;Mozilla Firefox&lt;/a&gt;.)
These changes to the SameSite defaults
implement the security improvements proposed in
&lt;a href=&quot;https://tools.ietf.org/html/draft-west-cookie-incrementalism-00&quot;
&gt;Incrementally Better Cookies&lt;/a&gt; by M. West in May 2019.
This change in the security default could not have been realistically done
before 2019 because of a
&lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=198181&quot;&gt;bug
in the Apple Safari browser that was only fixed in 2019&lt;/a&gt;.
As more browsers self-protect against CSRF by default,
without requiring sites or developers to do anything,
CSRF vulnerabilities will become dramatically less likely.
This once again shows the power of defaults;
systems should be designed to be secure by default whenever possible,
because normally people simply accept the defaults.
&lt;/p&gt;

&lt;p&gt;
That said, having a top 25 list based on quantitative analysis is probably
for the best long-term, and the results appear to be (mostly)
very reasonable.
I&amp;#8217;m glad to see it!
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Metamath book for 2019 available!</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog/2019/06/15#metamath-book-2019</link>
    <pubDate>Sat, 15 Jun 2019 12:57 GMT</pubDate>
    <!-- date: 2019-06-15 -->
    <description>
&lt;p&gt;
One of my hobbies is playing with &lt;a href=&quot;http://us.metamath.org/index.html&quot;
&gt;Metamath&lt;/a&gt;,
a tiny language that can express theorems in abstract mathematics,
accompanied by proofs that can be verified by a computer program.
I find it absolutely fascinating.
&lt;/p&gt;
&lt;p&gt;
I&amp;#8217;m happy to announce that the 2019 hardcover version of the
so-called Metamath book is now available!
You can even
&lt;a href=&quot;https://www.youtube.com/watch?v=Llhjd3gkusY&quot;
&gt;watch me unbox a proof copy&lt;/a&gt;.
If you&amp;#8217;re thinking about getting your own copy, please go to Lulu here:
&lt;a href=&quot;http://www.lulu.com/shop/norman-megill-and-david-a-wheeler/metamath-a-computer-language-for-mathematical-proofs/hardcover/product-24129769.html&quot;
&gt;&lt;/i&gt;Metamath: A Computer Language for Mathematical Proofs&lt;/i&gt;
by Norman Megill &amp;amp; David A. Wheeler, 2019,
ISBN 9780359702237&lt;/a&gt;.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>GitHub Maintainer Security Advisories</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog/2019/05/25#github-maintainer-security-advisories</link>
    <pubDate>Sat, 25 May 2019 12:54 GMT</pubDate>
    <!-- date: 2019-05-25 -->
    <description>
&lt;p&gt;
GitHub just made a change that I think will make a big improvement
to the security of open source software (OSS).  It’s now possible to
&lt;i&gt;privately&lt;/i&gt; report vulnerabilities to OSS projects on GitHub
via
&lt;a href=&quot;https://github.blog/changelog/2019-05-23-maintainer-security-advisories&quot;&gt;maintainer security advisories&lt;/a&gt;!
This wasn’t possible before, and you can
blame me (in part), because I&amp;#8217;m the one who got this ball rolling.
I also want to give a big &lt;i&gt;congrats&lt;/i&gt; to the GitHub team,
who actually made it happen.
&lt;/p&gt;

&lt;p&gt;
Here some details, in case you&amp;#8217;re curious.
&lt;/p&gt;

&lt;p&gt;
As you probably know, there are more OSS projects on GitHub than any other
hosting service.
However, there has been no way to privately report
security vulnerabilities on OSS projects.  It’s hard to fault GitHub
too much (they’re providing a service for free!), yet because so much
software is maintained on GitHub this has led to widespread problems
in reporting and handling vulnerabilities.  It can be worked around,
but this has been a long-standing systemic problem with GitHub.
&lt;/p&gt;

&lt;p&gt;
Why is this a problem?  In a word: attackers.
Ideally software would have no defects, including vulnerabilities.
Since vulnerabilities can harm users,
developers should certainly be using a variety of techniques to limit the
number and impact of vulnerabilities in the software they develop
If you&amp;#8217;re developing OSS, a great way to see if you&amp;#8217;re doing that
(and show others the same) is to get a
&lt;a href=&quot;https://bestpractices.coreinfrastructure.org/&quot;&gt;CII
Best Practices badge&lt;/a&gt; from the Linux Foundation&amp;#8217;s
Core Infrastructure Initiative (I lead this effort).
But mistakes sometimes happen, no matter what you do, so you need to
be prepared for them.
It&amp;#8217;s hard to respond to vulnerability reports if it&amp;#8217;s hard to
get the vulnerability reports or discuss them within a project.
Of course, a project needs to rapidly &lt;i&gt;fix&lt;/i&gt; a vulnerability once it
is reported, but we need to make that first step easy.
&lt;/p&gt;

&lt;p&gt;
In September 2018 I went to a meeting at Harvard to discuss OSS security
(in support of the Linux Foundation).  There I met Devon Zuegel, who was
helping Microsoft with their recently-announced acquisition of GitHub.
I explained the problem to her, and she agreed that this was a problem
that needed to be fixed. She shared it with Nat Friedman (who was
expected to become the GitHub CEO), who also agreed that it made sense.
They couldn’t do anything until after the acquisition was complete,
but they planned to make that change once the acquisition was complete.
The acquisition did complete, so the obvious question is, did they
make the change? Well&amp;#8230;
&lt;/p&gt;

&lt;p&gt;
I am very happy to report that GitHub has just announced
the beta release of
&lt;a href=&quot;https://github.blog/changelog/2019-05-23-maintainer-security-advisories&quot;&gt;maintainer security advisories&lt;/a&gt;,
which allow people to privately report vulnerabilities without
immediately alerting every attacker out there.
My sincere thanks to
Devon Zuegel, Nat Friedman, and the entire team of developers at GitHub
for making this happen.
&lt;/p&gt;

&lt;p&gt;
This seems to be part of a larger effort by GitHub
to support security (including for OSS).
&lt;a href=&quot;https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies&quot;&gt;GitHub&amp;#8217;s security alerts&lt;/a&gt;
make it easy for GitHub-hosted projects to learn about
vulnerable dependencies (that is, a version of a
software component that you depend on but is vulnerable).
&lt;/p&gt;

&lt;p&gt;
It&amp;#8217;s easy to get discouraged about software security, because
the vulnerabilities keep happening.
Part of the problem is that most
software developers know very little about developing secure software.
After all, almost no one is teaching them how to do it
(&lt;a href=&quot;https://dwheeler.com/secure-class&quot;&gt;I teach a graduate class
at George Mason University to try to counter that problem&lt;/a&gt;).
I hope that over time more developers &lt;i&gt;will&lt;/i&gt; learn how to do it.
I also hope that more and more developers will use more and more
tools will help them create secure software, such as my
&lt;a href=&quot;https://dwheeler.com/flawfinder/&quot;&gt;flawfinder&lt;/a&gt; and
&lt;a href=&quot;https://railroader.org/&quot;&gt;Railroader&lt;/a&gt; tools.
Tools can&amp;#8217;t replace knowledge, but they are a necessary piece of the puzzle;
putting tools into a CI/CD pipeline (and an auditing process if you
can afford one) can eliminate a vast number of problems.
&lt;/p&gt;

&lt;p&gt;
These changes show that it &lt;i&gt;is&lt;/i&gt; possible to make
systemic changes to improve security.
Let&amp;#8217;s keep at it!
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>The year of Linux on the desktop</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog/2019/05/10#linux-desktop</link>
    <pubDate>Fri, 10 May 2019 17:13 GMT</pubDate>
    <!-- date: 2019-05-10 -->
    <description>
&lt;p&gt;
For those who know their computer history, wild things are going on
regarding Linux this year.
&lt;/p&gt;
&lt;p&gt;
Linux is already in widespread use.
For years
&lt;a href=&quot;https://www.statista.com/statistics/266136/global-market-share-held-by-smartphone-operating-systems/&quot;&gt;the vast majority of smartphones run Android&lt;/a&gt;, and Android runs on Linux,
so most smartphones run on Linux.
&lt;a href=&quot;https://www.top500.org/statistics/details/osfam/1&quot;&gt;As of November 2018
100% of all top 500 supercomputers worldwide run on Linux&lt;/a&gt;.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Usage_share_of_operating_systems#Market_share_by_category&quot;&gt;Best estimates for servers using Linux are around 66.7%&lt;/a&gt;,
and Linux is widely used in the cloud and in embedded devices.
&lt;/p&gt;
&lt;p&gt;
But something different is going on in 2019.
&lt;a href=&quot;https://www.zdnet.com/article/all-chromebooks-will-also-be-linux-laptops-going-forward/&quot;&gt;All Chromebooks are also going to be
Linux laptops going forward&lt;/a&gt;.
&lt;a href=&quot;https://devblogs.microsoft.com/commandline/shipping-a-linux-kernel-with-windows/&quot;&gt;Later this year Microsoft will include the Linux kernel as a component in Windows&lt;/a&gt;.
In a sense, 2019 is the year of the Linux desktop.
This was not in the way it was envisioned in the past,
but perhaps that&amp;#8217;s what makes it most interesting.
No, it does not mean that everyone is interacting directly with Linux as their
main laptop OS, and so you can certainly argue that this doesn&amp;#8217;t count.
But increasingly that is measurement is less important; people
today access computers via browsers, not the underlying OS, and that
system is often running and/or developed using Linux.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Subversion of bootstrap-sass</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog/2019/04/10#bootstrap-sass-subversion</link>
    <pubDate>Wed, 10 Apr 2019 18:03 GMT</pubDate>
    <!-- date: 2019-04-10 -->
    <description>
&lt;p&gt;
A
malicious backdoor has been found in the popular open source software
library &lt;tt&gt;bootstrap-sass&lt;/tt&gt;.
Its impact was limited - but the next attack might not be.
Thankfully, there are things we can learn and do to reduce those risks&amp;#8230;
but that requires people to think them through.
&lt;/p&gt;

&lt;p&gt;
See my essay
&lt;a href=&quot;https://dwheeler.com/essays/bootstrap-sass-subversion.html&quot;
&gt;Subversion of boostrap-sass&lt;/a&gt; for more about that!
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Assurance cases</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog/2019/03/26#assurance-case</link>
    <pubDate>Tue, 26 Mar 2019 11:24 GMT</pubDate>
    <!-- date: 2019-03-26 -->
    <description>
&lt;p&gt;
No one thing creates secure software, so you
need to do a set of things to make adequately secure software.
But no one has infinite resources; how can you have confidence
that you are doing the right set?
Many experts (including me) have recommended creating an
&lt;i&gt;assurance case&lt;/i&gt; to connect the various approaches together
to an efficient, cohesive whole.
It can be hard to start an assurance case, though, because
there are few public examples.
&lt;/p&gt;

&lt;p&gt;
So I am pleased to report that you can now freely get my paper
&lt;a href=&quot;https://www.ida.org/idamedia/Corporate/Files/Publications/IDA_Documents/ITSD/2019/P-9278.pdf&quot;&gt;&lt;i&gt;A Sample Security Assurance Case Pattern&lt;/i&gt; by David A. Wheeler, December 2018&lt;/a&gt;.
This paper discusses how to create secure software by applying an
assurance case, and uses the
&lt;a href=&quot;https://github.com/coreinfrastructure/best-practices-badge/blob/master/doc/security.md&quot;&gt;Badge Application&amp;#8217;s assurance case&lt;/a&gt; as
an example.
If you are trying to create a secure application, I hope you
will find it useful.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Don’t Use ISO/IEC 14977 Extended Backus-Naur Form (EBNF)</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog/2019/03/02#dont-use-iso-14977-ebnf</link>
    <pubDate>Sat, 02 Mar 2019 15:48 GMT</pubDate>
    <!-- date: 2019-03-02 -->
    <description>
&lt;p&gt;
Sometimes people want to do something, find a standard, and do
not realize the downsides of using that standard.
I have an essay in that genre titled
&lt;a href=&quot;/essays/dont-use-iso-14977-ebnf.html&quot;
&gt;Don’t Use ISO/IEC 14977 Extended Backus-Naur Form (EBNF)&lt;/a&gt;.
The problem is that although there is a ISO/IEC 14977:1996 specification,
in most cases you should not use it.
If you have to write a specification for a programming language
or complex data structure, please take a look at why I think that!
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Railroader: Security static analysis tool for Ruby on Rails (Brakeman fork)</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog/2019/02/09#railroader</link>
    <pubDate>Sat, 09 Feb 2019 11:41 GMT</pubDate>
    <!-- date: 2019-02-09 -->
    <description>
&lt;p&gt;
I&amp;#8217;ve kicked off the &lt;a href=&quot;https://railroader.org/&quot;&gt;Railroader&lt;/a&gt;
project to maintain a security static analysis tool for
&lt;a href=&quot;https://rubyonrails.org/&quot;&gt;Ruby on Rails&lt;/a&gt;
that is
&lt;a href=&quot;https://opensource.org/osd-annotated&quot;
&gt;open source software&lt;/a&gt;.
If you are developing with Ruby on Rails, please consider using
&lt;a href=&quot;https://railroader.org/&quot;&gt;Railroader&lt;/a&gt;.
We would also really love contributions, so please contribute!
&lt;/p&gt;

&lt;p&gt;
A security static analysis tool (analyzer) examines software
to help you identify vulnerabilities (without running the possibly-vulnerable
program).
This helps you find and fix vulnerabilities &lt;i&gt;before&lt;/i&gt; you field
your web application.
Ruby on Rails is a popular framework for developing web applications;
&lt;a href=&quot;https://www.netguru.com/blog/top-10-sites-built-with-ruby-on-rails&quot;
&gt;sites that use Rails include
GitHub, Airbnb, Bloomberg, Soundcloud, Groupon, Indiegogo,
Kickstarter, Scribd, MyFitnessPal, Shopify, Urban Dictionary, Twitch.tv&lt;/a&gt;,
&lt;a href=&quot;https://about.gitlab.com/2018/10/29/why-we-use-rails-to-build-gitlab/&quot;
&gt;GitLab&lt;/a&gt;,
and the
&lt;a href=&quot;https://github.com/coreinfrastructure/best-practices-badge&quot;
&gt;Core Infrastructure Initiative (CII) Best Practices Badge&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
In the past the obvious tool for this purpose was
&lt;a href=&quot;https://brakemanscanner.org/&quot;
&gt;Brakeman&lt;/a&gt;.
However,
&lt;a href=&quot;https://brakemanscanner.org/blog/2018/06/28/brakeman-has-been-acquired-by-synopsys/index.html&quot;
&gt;Brakeman has switched to the
Creative Commons Attribution-NonCommercial-ShareAlike 4.0 Public License
(CC-BY-NC-SA-4.0)&lt;/a&gt;.
This is not an
&lt;a href=&quot;https://opensource.org/osd-annotated&quot;
&gt;open source software license&lt;/a&gt;
since it cannot be used commercially
(an OSS license cannot discriminate against a field of endeavor).
Similarly, it is not a
&lt;a href=&quot;https://www.gnu.org/philosophy/free-sw.en.html&quot;&gt;free software
license&lt;/a&gt; (since you cannot run the program as you wish / for any purpose).
You can verify this by looking at the &lt;a
href=&quot;https://brakemanscanner.org/blog/2019/01/17/brakeman-4-dot-4-dot-0-released&quot;
&gt;Brakeman 4.4.0 release announcement&lt;/a&gt;, the
&lt;a href=&quot;https://spdx.org/licenses/&quot;&gt;SPDX license list&lt;/a&gt;,
&lt;a href=&quot;https://wiki.debian.org/DFSGLicenses#Creative_Commons_Attribution-Non_Commercial-Share_Alike_.28CC-by-nc-sa.29&quot;
&gt;Debian&amp;#8217;s &amp;#8220;The Debian Free Software Guidelines (DFSG)
and Software Licenses&amp;#8221;&lt;/a&gt;,
&lt;a href=&quot;https://www.gnu.org/licenses/license-list#CC-BY-NC&quot;
&gt;Various Licenses and Comments about Them (Free Software Foundation)&lt;/a&gt;,
and
&lt;a href=&quot;https://fedoraproject.org/wiki/Licensing:Main#Bad_Licenses_3&quot;
&gt;Fedora&amp;#8217;s Licensing:Main (Bad Licenses list)&lt;/a&gt;.
Railroader conitinues using the original licenses:
MIT for code and CC-BY-3.0 for the website.
MIT, of course, is a very well-known and widely-used
open source software license.
&lt;/p&gt;

&lt;p&gt;
If you are currently using Brakeman,
&lt;b&gt;do not update to Brakeman version 4.4.0 or later&lt;/b&gt; until you
&lt;b&gt;first talk with your lawyer&lt;/b&gt;.
At the very least, if you plan to use newer versions of Brakeman,
check their new license &lt;i&gt;carefully&lt;/i&gt; to make sure that there
is no possibility of a legal issue.
This license change was part of a purchase of Brakeman by Synopsys.
Synopsys is a big company, and they definitely
have the resources to sue people who don&amp;#8217;t obey their legal terms.
Even if they didn&amp;#8217;t, it is not okay to use software
when you don&amp;#8217;t have the right to do so.
Either make sure that you have no legal issues&amp;#8230; or just switch
to Railroader, where nothing has changed.
&lt;/p&gt;

&lt;p&gt;
Unfortunately,
it is really easy to &amp;#8220;just upgrade to the latest release&amp;#8221;
of Brakeman
without realizing that this is a &lt;i&gt;major&lt;/i&gt; license change.
I suspect a lot of people will just automatically download and run
the latest version, and have no idea that this is happening.
I only noticed because I routinely use software license checkers
(&lt;tt&gt;license_finder&lt;/tt&gt; in my case) so that I immediately notice
license changes in a newer version.
I strongly recommend adding static source code analyzers &lt;i&gt;and&lt;/i&gt;
license checkers as part of your continuous integration (CI).
&lt;/p&gt;

&lt;p&gt;
We assume that &amp;#8220;Brakeman&amp;#8221; is now a trademarked by Synopsys, Inc,
so we&amp;#8217;ve tried to rename everything so that the projects
are clearly distinct. If we&amp;#8217;ve missed something,
please let us know and we&amp;#8217;ll fix it. The term &amp;#8220;Railroader&amp;#8221; is a
play on the word Rails, but it is obviously a completely different word.
Railroader shares a common code base historically with Brakeman,
and that&amp;#8217;s important to explain, but they are not the same projects and
we are expressly trying to not infringe on any Brakeman trademark.
It&amp;#8217;s obviously legal to copy and modify materials licensed under the
MIT and CC-BY-3.0 licenses
(that&amp;#8217;s the purpose of these licenses), so we believe there is no
legal problem.
&lt;/p&gt;

&lt;p&gt;
I think I have a reasonable background for starting this project.
I created and maintain &lt;a href=&quot;https://dwheeler.com/flawfinder&quot;
&gt;flawfinder&lt;/a&gt;, a security static analysis tool for C/C++,
since 2001.
I literally wrote the book on developing secure software; see my book
&lt;a href=&quot;https://dwheeler.com/secure-programs/&quot;
&gt;&lt;i&gt;Secure Programming HOWTO&lt;/i&gt;&lt;/a&gt;.
I even &lt;a href=&quot;https://dwheeler.com/secure-class/&quot;
&gt;teach a graduate class at George Mason Univerity (GMU) on
how to develop secure software&lt;/a&gt;.
For an example of how I approach securing software
in an affordable way, see my video
&lt;a href=&quot;https://www.youtube.com/watch?v=5a5D4d6hcEY&quot;
&gt;&lt;i&gt;How to Develop Secure Applications: The BadgeApp Example&lt;/i&gt;&lt;/a&gt;
(2017-09-18) or the related document
&lt;a href=&quot;https://github.com/coreinfrastructure/best-practices-badge/blob/master/doc/security.md&quot;
&gt;BadgeApp Security: Its Assurance Case&lt;/a&gt;.
I have also long analyzed software licenses, e.g., see
&lt;a href=&quot;https://dwheeler.com/essays/floss-license-slide.html&quot;
&gt;The Free-Libre / Open Source Software (FLOSS) License Slide&lt;/a&gt;,
&lt;a href=&quot;https://dwheeler.com/essays/commercial-floss.html&quot;
&gt;Free-Libre / Open Source Software (FLOSS) is Commercial Software&lt;/a&gt;, and
&lt;a href=&quot;https://www.csiac.org/journal-article/publicly-releasing-open-source-software-developed-for-the-u-s-government/&quot;
&gt;Publicly Releasing Open Source Software Developed for the U.S. Government&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
While Railroader is a project fork, we hope that this is not a hosttile fork.
We will not accept software licensed only under CC-BY-NC-SA-4.0, since
that is not an OSS license. But we&amp;#8217;ll gladly accept good contributions
from anyone if they are released under the original OSS licenses
(MIT for software, CC-BY-3.0 for website content).
If the Brakeman project wants to cooperate in some way, we&amp;#8217;d love to
talk! We are all united in our desire to squash out vulnerabilities
before they are deployed. In addition, we&amp;#8217;re grateful for all the work
that the Brakeman community has done.
&lt;/p&gt;

&lt;p&gt;
So, again:
If you are developing with Ruby on Rails, please consider using
&lt;a href=&quot;https://railroader.org/&quot;&gt;Railroader&lt;/a&gt;.
We would also really love contributions, so please contribute!
&lt;/p&gt;
</description>
   </item>
  </channel>
</rss>