<?xml version="1.0"?>
<!-- name="generator" content="blosxom/2.0" -->

<rss version="2.0">
  <channel>
    <title>David A. Wheeler's Blog   </title>
    <link>http://www.dwheeler.com/blog</link>
    <description>David A. Wheeler's weblog.</description>
    <language>en</language>

  <item>
    <title>Petition the White House to cease issuing software patents</title>
    <link>http://www.dwheeler.com/blog/2011/09/30#petition-no-software-patents</link>
    <pubDate>Fri, 30 Sep 2011 09:49 GMT</pubDate>
    <!-- date: 2011-09-30 -->
    <description>
&lt;p&gt;
I encourage all US citizens to sign
&lt;a href=&quot;https://wwws.whitehouse.gov/petition-tool/petition/direct-patent-office-cease-issuing-software-patents/vvNslSTq&quot;&gt;this petition to the US White House
to &amp;#8220;direct the patent office to cease issuing software patents&amp;#8221;&lt;/a&gt;.
I believe
&lt;a href=&quot;http://www.dwheeler.com/essays/software-patents.html&quot;&gt;software
patents impede innovation (instead of helping it), and they
have become a threat to the US economy&lt;/a&gt;.
Many organizations involved in software
are now spending lots of time fending off patent trolls,
fighting patent lawsuits, or cannot safely solve problems
due to patent thickets.
The recently-passed
&amp;#8220;America Invents Act&amp;#8221; (AIA) completely failed to deal with this
fundamental problem.
&lt;/p&gt;
&lt;p&gt;
Signing a petition won&amp;#8217;t immediately solve anything.
That&amp;#8217;s not how it works.
But repeatedly making the government aware that there&amp;#8217;s a real
problem is a good first step to solving a problem.
In the US,
&lt;a href=&quot;https://wwws.whitehouse.gov/petitions/#!/how-why/introduction&quot;&gt;the
right of the people to petition their government is guaranteed by
the first amendment of the US Constitution&lt;/a&gt;
(&amp;#8220;Congress shall make no law &amp;#8230;. abridging&amp;#8230; the right of the people
peaceably to assemble, and to petition the Government
for a redress of grievances&amp;#8221;).&lt;/a&gt;
Everyone is affected today by software, and so far the government
has not effectively dealt with the problem.
Please use this opportunity to make the government aware of a real problem.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Off-the-Shelf (OTS) Software Maintenance Strategies</title>
    <link>http://www.dwheeler.com/blog/2011/09/16#ots-maintenance-strategies</link>
    <pubDate>Fri, 16 Sep 2011 18:04 GMT</pubDate>
    <!-- date: 2011-09-16 -->
    <description>
&lt;p&gt;
Off-the-shelf (OTS) software is simply software that is
ready-made and available for use.
Even when you need a custom system,
building it from many OTS components has many advantages,
which is why everyone does it.
OTS works because you can save money and time, increase quality,
and increase innovation through resource pooling.
&lt;/p&gt;

&lt;p&gt;
However, people can get easily confused by the many different ways that
off-the-shelf (OTS) software can be maintained.
Terminology varies, and there hasn&amp;#8217;t been an obvious way
to describe how these different approaches are related.
In 2010 I chatted with several others
about how to make this clearer, and then created a picture
that I think clarifies things.
My thanks to helpful critiques
from Heather Burke and John Scott.
So here&amp;#8217;s the picture, followed by a discussion on what it means.
&lt;/p&gt;

&lt;p&gt;
&lt;!-- Original 1052x616 --&gt;
&lt;center&gt;
&lt;img src=&quot;http://www.dwheeler.com/images/ots-maintenance-strategies.png&quot; width=&quot;526&quot; height=&quot;308&quot;&gt;
&lt;br&gt;
&lt;i&gt;Off-the-Shelf (OTS) Maintenance Strategies&lt;/i&gt;
&lt;/center&gt;
&lt;/p&gt;


&lt;p&gt;
If OTS software is commercial, it&amp;#8217;s commercial OTS (COTS) software.
&lt;a href=&quot;http://www.dwheeler.com/essays/commercial-floss.html&quot;&gt;By U.S. law&lt;/a&gt;,
any software is commercial if it is
(1) sold, licensed, or leased to the public, and
(2) has a non-governmental use.
There are two kinds of COTS software:
Open Source Software (OSS) and proprietary software.
OSS, put briefly, is
&lt;a href=&quot;http://www.dwheeler.com/oss_fs_why.html&quot;&gt;software whose licenses give
users the freedom to run the program for any purpose,
to study and modify the program, and to redistribute copies of
either the original or modified program (without having to pay
royalties to previous developers)&lt;/a&gt;.
&lt;a href=&quot;http://www.dwheeler.com/essays/commercial-floss.html&quot;&gt;Yes,
&lt;b&gt;practically all OSS is commercial&lt;/b&gt;&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
OTS can also be retained and maintained internally by an organization.
For example, the U.S. government develops and maintains some software
internally.
In the U.S. government world, such software often called
government OTS (GOTS).
This figure shows things from the point of view of the U.S. government,
but if you work with some other organization, you can think of this figure
with your organization in the place of the U.S. government.
(Maybe this should be called &amp;#8220;internal off-the-shelf&amp;#8221; or &amp;#8220;IOTS&amp;#8221; instead!)
The idea here is that any organization can have
software that it controls internally, and view as internal OTS software,
as well as the COTS software that is available to the public.
&lt;/p&gt;

&lt;p&gt;
There are various reasons why the government should sometimes
keep certain software in-house, e.g., because sole possession of the
software gives the U.S. a distinct
advantage over its adversaries.
However, there is also considerable risk to the government
if it tries to privately hold GOTS software within the
government for too long.
Technological advantage is usually fleeting. Often there is a
commercially-developed item available to the public that begins
to perform similar functions. As it matures, other organizations begin
using this non-GOTS solution, potentially rendering the GOTS solution
obsolete. Such cases often impose difficult decisions, as the government
must determine if it will pay the heavy asymmetrical cost to switch,
or if it will continue &amp;#8220;as usual&amp;#8221; with its now-obsolete GOTS systems
(with high annual costs and limitations that may risk lives or missions).
&lt;/p&gt;

&lt;p&gt;
Either COTS or GOTS may be maintained by a single maintainer or by a
community.  In community maintenance there is often a single organization
who determines if proposals should be accepted, but the key here is
that the work tends to be distributed among those affected.
An Open GOTS (OGOTS) project is a GOTS project which uses
multiple-organization collaborative development approaches
to develop and maintain software, in a manner similar to OSS.
Some people use the term &amp;#8220;Government Open Source Software&amp;#8221; (GOSS)
instead of OGOTS (in particular,
&lt;a href=&quot;http://cio-nii.defense.gov/sites/oss/goss-govies_v1.7_29jun2011_released.pdf&quot;&gt;GOSS for Govies&lt;/a&gt; uses the term GOSS instead).
&lt;/p&gt;

&lt;p&gt;
GOTS (including OGOTS) is basically a special case of
&amp;#8220;gated software&amp;#8221; with development inside a government.
However, governments are bigger than most companies, and (in democracies)
they are supposed to serve all of their citizenry, and those factors
make them rather different than most other gated communities.
Community development of proprietary software
(&amp;#8220;gated software&amp;#8221;) outside governments
is less common, but it can happen
(historically some parts of Unix were developed this way).
The term Open Technology Development (OTD) involves community development
among government users (in the case of government developers),
and thus it includes both OSS and OGOTS (aka GOSS).
&lt;/p&gt;

&lt;p&gt;
I should note that I have a broad view of maintenance.
I&amp;#8217;ve often said that there is only one program &amp;mdash;
&amp;#8220;Hello, World&amp;#8221; &amp;mdash; and that the rest is maintenance.
That&amp;#8217;s overstated for effect, but I believe there is a
&lt;i&gt;lot&lt;/i&gt; of truth in that statement.
&lt;/p&gt;

&lt;p&gt;
This figure, and some of the text above, is in section 1.3 of the paper
&lt;a href=&quot;http://cio-nii.defense.gov/sites/oss/OTD-lessons-learned-military-signed.pdf&quot;&gt;Open Technology Development (OTD): Lessons Learned &amp; Best Practices for Military Software&lt;/a&gt;
(&lt;a href=&quot;http://mil-oss.org/otd&quot;&gt;also available via MIL-OSS&lt;/a&gt;),
which is released under the Creative Commons BY-SA license.
If you&amp;#8217;re interested in more, please see the paper!
The figure and some of the text are also part of
&lt;a href=&quot;http://journal.thedacs.com/issue/56/175&quot;&gt;
&amp;#8220;Software is a Renewable Military Resource&amp;#8221;
by John Scott, Dr. David A. Wheeler, Mark Lucas, and J.C. Herz,
&lt;i&gt;Journal of Software Technology&lt;/i&gt;, February 2011, Vol. 14, Number 1.
&lt;/p&gt;

&lt;p&gt;
I hope this figure makes it easier to understand the different
approaches for maintaining off-the-shelf (OTS) software.
&lt;/p&gt;

&lt;!--
Since this is based on company work, I requested and got approval
from my company to post it.  The approval is recorded in the email
Sent &quot;Fri 9/16/2011 4:37 PM&quot; by &quot;Myers, Margaret E&quot;, subject:
&quot;RE: May I post a short excerpt from a publicly-released DoD document? (with attribution)&quot;
Which said:
&quot;You may post it.&quot;
--&gt;
</description>
   </item>
  <item>
    <title>Ask not who holds the copyrights</title>
    <link>http://www.dwheeler.com/blog/2011/09/10#ask-not-who-holds-copyrights</link>
    <pubDate>Sat, 10 Sep 2011 11:13 GMT</pubDate>
    <!-- date: 2011-09-10 -->
    <description>
&lt;p&gt;
Asking
&amp;#8220;who has the copyright?&amp;#8221; for
&lt;a href=&quot;intellectual-rights-not-intellectual-property.html&quot;&gt;intellectual works&lt;/a&gt;
(like software, documents, and data) is almost always
the &lt;i&gt;&lt;b&gt;wrong&lt;/b&gt;&lt;/i&gt; question to ask.
Instead, ask &amp;#8220;&lt;i&gt;what rights do I have (or can I get)?&lt;/i&gt;&amp;#8221; and
&amp;#8220;&lt;i&gt;do those rights let me do what I want to do?&lt;/i&gt;&amp;#8221;.
In a vast number of situations, those are the right questions to ask instead.
Even people who should know better can fall into this subtle trap!
&lt;/p&gt;

&lt;p&gt;
This became obvious to me when it was revealed that even the smart
people at the Apache Software Foundation fell into this.
In the recent
&lt;a href=&quot;https://wiki.apache.org/incubator/AccumuloProposal&quot;&gt;Accumulo
proposal&lt;/a&gt;, there were unnecessary copyright hurdles because
Apache was unnecessarily asking for a copyright transfer, instead of
the necessary rights (in this case, there was no copyright to transfer!).
&lt;/p&gt;

&lt;p&gt;
So I&amp;#8217;ve justed posted
&lt;i&gt;&lt;a href=&quot;http://www.dwheeler.com/essays/ask-not-holds-copyright.html&quot;&gt;Ask Not Who Holds the Copyright&lt;/a&gt;&lt;/i&gt;,
which I hope will clear this up.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>MIL-OSS 2011</title>
    <link>http://www.dwheeler.com/blog/2011/09/04#mil-oss-2011</link>
    <pubDate>Sun, 04 Sep 2011 22:35 GMT</pubDate>
    <!-- date: 2011-09-04 -->
    <description>
&lt;p&gt;
&lt;img src=&quot;http://www.dwheeler.com/images/i-want-you-to-oss.png&quot; align=&quot;right&quot; width=&quot;150&quot; height=&quot;202&quot;&gt;
I recently went to the &lt;a href=&quot;http://mil-oss.org/&quot;&gt;MIL-OSS&lt;/a&gt;
(&amp;#8220;military open source software&amp;#8221;)
&lt;a href=&quot;http://mil-oss.org/wg3-overview&quot;&gt;2011 Working Group (WG) /
Conference&lt;/a&gt; in Atlanta, Georgia.
Topics included the open prosthetics project,
releasing government-funded software as OSS,
replacing MATLAB with Python,
the &amp;#8220;&lt;a href=&quot;http://opentechdossier.org/&quot;&gt;Open Technology Dossier Protocol&lt;/a&gt;&amp;#8221; (OTDP),
confining users using SELinux,
an explanation of DoD policies on OSS,
Charlie Schweik&amp;#8217;s study on what makes a success OSS project,
and more.
Some people started developing a walkie-talkie Android app at the conference.
Here&amp;#8217;s a summary of the conference, if you&amp;#8217;re curious.
&lt;/p&gt;
&lt;p&gt;
First, a few general comments.
If this conference is any guide, it is slowly getting easier
to get OSS into government (including military) systems.
OSS is already used in many places, but it&amp;#8217;s often
&amp;#8220;don&amp;#8217;t ask, don&amp;#8217;t tell&amp;#8221;, and there are still
lots of silly bureaucratic barriers that prevent the use of OSS
where it &lt;i&gt;should&lt;/i&gt; be used or at least considered.
But there were many success stories, with
slide titles like &amp;#8220;how we succeeded&amp;#8221;.
&lt;/p&gt;
&lt;p&gt;
Although the conference had serious purposes, it was all done in good humor.
All participants got the MIL-OSS poster of Uncle Sam (saying
&amp;#8220;I want YOU to Open Source!&amp;#8221;).
The theme of the conference was
the &lt;a href=&quot;http://en.wikipedia.org/wiki/WarGames&quot;&gt;WarGames&lt;/a&gt;
movie; the first finder for each of the WarGames Easter eggs
would get a silly 80s-style prize (such as an Atari T-shirt).
&lt;/p&gt;
&lt;p&gt;
As the &lt;a href=&quot;http://mil-oss.org/wg3-speakers-and-presentations&quot;&gt;MIL-OSS 2011 presentations list&lt;/a&gt; shows, I gave three talks:
&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;&lt;i&gt;&lt;a href=&quot;http://mil-oss.org/resources/mil-oss-wg3_releasing-oss-developed-government_david-a-wheeler.pdf&quot;&gt;Publicly Releasing Open Source Software (OSS) Developed for the U.S. Government&lt;/a&gt;&lt;/i&gt;.
This presentation explained
when the government or contractors
can publicly release software, as open source software,
if it was developed using U.S. government funds.
This presentation summarized my paper
&lt;a href=&quot;http://journal.thedacs.com/issue/56/180&quot;&gt;Publicly Releasing Open Source Software Developed for the U.S. Government&lt;/a&gt;
(also see &lt;a href=&quot;http://mil-oss.org/resources/software-copyright-assertion-rights-quick-reference.pdf&quot;&gt;Kane McLean&amp;#8217;s one-page summary of this paper,
the &amp;#8220;OSS Releasability Quick Reference&amp;#8221;&lt;/a&gt;, which was given to every
conference participant).
I think this is an important topic.
Billions of dollars go into developing software, yet most of
the time, the taxpayers (who paid for it) don&amp;#8217;t get the benefits.
It turns out that this software often &lt;i&gt;can&lt;/i&gt; be released; this is
the decoder ring for these Byzantine rules.
This can have incredible benefits.
For example, the DoD funded the work that created the Internet,
and then released as OSS an implementation of its key TCP/IP protocols.
The Internet has mightily benefitted the DoD, in fact, it&amp;#8217;s
benefitted the whole world.
(And yes, it had the required WarGames Easter egg.
Slide 15 says &amp;#8220;Talk to others who have experience with OSS&amp;#8221; &amp;#8212; the egg
is in the supporting bullet, &amp;#8220;Q: What is it doing? A: It&amp;#8217;s learning!&amp;#8221;)
&lt;/li&gt;
&lt;li&gt;&lt;i&gt;&lt;a href=&quot;http://mil-oss.org/resources/mil-oss-wg3_gpl-might-not-destroy-the-universe_david-a-wheeler.pdf&quot;&gt;Why the GPL Might not Destroy the Universe&lt;/a&gt;&lt;/i&gt;.
This tongue-in-cheek talk tries to counter some of the silly,
over-the-top fears about the GNU General Public License (GPL).
I figure any presentation can&amp;#8217;t be bad if it includes photos of Godzilla,
flying saucers, zombies, and a poster saying &amp;#8220;If you program
open source, you&amp;#8217;re programming COMMUNISM!&amp;#8221;.
&lt;/li&gt;
&lt;li&gt;&lt;i&gt;&lt;a href=&quot;http://mil-oss.org/resources/mil-oss-wg3_host-lessons-learned_wheeler-dunn.pdf&quot;&gt;HOST Lessons Learned&lt;/a&gt;&lt;/i&gt; (with Tom Dunn).  This summarized interviews
of various people on the roadblocks to using or developing open technology
(including open source software) in the government.
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;
The conference was complicated by the recent passing
of Hurricane Irene.
The area itself was fine, but some people had trouble flying in.
The first day&amp;#8217;s whole schedule was delayed so speakers
could arrive (using rescheduled flights).
That was probably the best thing to do in the circumstance &amp;#8212;
it was basically like a temporary time zone change &amp;#8212;
but it meant that one of my talks that day
(&lt;i&gt;Why the GPL Might not Destroy the Universe&lt;/i&gt;) was at 9:10pm.
And I wasn&amp;#8217;t even the last speaker.  Eeeek.
Around 15 speakers had still not arrived when the conference arrived, but
all but one managed to get there before they had to speak.
&lt;/p&gt;
&lt;p&gt;
Here are few notes on the talks:
&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;Andy Henshaw (GTRI) spoke on &amp;#8220;Replacing MATLAB: Python Tools for Scientists and Engineers&amp;#8221;.  His basic point is that
&amp;#8220;Python is a good replacement for MATLAB in a lot of cases&amp;#8221;.
Although Python isn&amp;#8217;t fast by itself, it&amp;#8217;s often useful as a glue,
with the intensive data-handling being done by hand-crafted libraries.
He focused on (and discussed) the libraries
&lt;a href=&quot;http://www.scipy.org/NumPy_for_Matlab_Users&quot;&gt;NumPy&lt;/a&gt;,
SciPy, matplotlib, and ipython.
He also discussed differences between MATLAB and Python for MATLAB users.
In Matlab, the basic type is a matrix, it uses 1-based indexing, &amp;#8216;*&amp;#8217;
means matrix multiplication, and function calls use pass-by-value with
lazy copy-on-write.
In contrast, in Python with libraries like these,
the basic type is a multidimensional array, it uses 0-based indexing,
&amp;#8216;*&amp;#8217; means element-wise multiplication (use dot() for matrix multiplication
or use the matrix class), and function calls use pass-by-reference.
&lt;/li&gt;
&lt;li&gt;
I learned interesting things about AdaCore
(who make GNAT pro, SPARK Pro, and Code Peer).
They don&amp;#8217;t have a separate support organization &amp;mdash; their engineers 
provide support directly, since support is really what they sell.
&lt;/li&gt;
&lt;li&gt;
Maj Wilson/Kane McLean discussed changing culture.
They argued that the mind has two independent decision-making functions
that work simultaneously:
the emotional mind and the rational mind.
The emotional mind is like an elephant; it&amp;#8217;s illogical and determined, 
emphasizes getting stuff done, and has mental &amp;#8220;muscle memory&amp;#8221;.
The rational mind is like a jockey; it&amp;#8217;s logical and reasoned, 
emphasizes organization but often can&amp;#8217;t &amp;#8220;get off the saddle&amp;#8221;, and does 
long-term / strategic planning.
You need to convince both, so you should try to
shrink the change, shape a clear path forward, and repeat what works.
They believe that culture change in a big bureaucracy happens from both
the top (the &amp;#8220;clouds&amp;#8221;) and the bottom (the &amp;#8220;grass roots&amp;#8221;);
resistance often comes from the middle.
The solution for change, then, is to &amp;#8220;seed clouds&amp;#8221;
and &amp;#8220;grow the grass&amp;#8221;.
&lt;/li&gt;
&lt;li&gt;
The &amp;#8220;&lt;a href=&quot;http://opentechdossier.org/&quot;&gt;Open Technology Dossier Protocol&lt;/a&gt;&amp;#8221; (OTDP)
was pitched by Winston Messer and Nick Bollweg.
Basically, they&amp;#8217;d like every OSS project to put, on their web site,
a small XML file that would let various search systems learn more about
their project.
That way, each project can update their own information.
&lt;/li&gt;
&lt;li&gt;
David Egts (Red Hat) explained &amp;#8220;SELinux user confinement&amp;#8221; -
a new capability in RHEL 6 to easily confine users using SELinux.
Just install the &amp;#8220;policycoreutils-python&amp;#8221; package, which includes the
semanage tool that lets you control much more precisely what specific
users may do.
&lt;/li&gt;
&lt;li&gt;
Alex S. Voultepsis explained how the intelligence community (IC)
has built up an internal infrastructure with the tools that people want to
use; in a vast number of cases, they use OSS to do this.
For example, Intellipedia is implemented using MediaWiki, the same software
that runs Wikipedia.
&lt;/li&gt;
&lt;li&gt;
Dan Risacher discussed the DoD Oct 16, 2009 memo on open source software.
He noted that we have a &amp;#8220;Government IP knot&amp;#8221;: &amp;#8220;Government rules are
designed to enable a program manager to control their program, not to
enable sharing it&amp;#8221;.  A way to cut this knot is to make it clear that the
software will be released as OSS; then everyone knows what the rules are.
He wants to be a &amp;#8220;developer advocate&amp;#8221; - the DoD needs
to be able to innovate faster than its opponents.&lt;/li&gt;
&lt;li&gt;
John Kuniholm presented on the &amp;#8220;Open Prosthetics Project&amp;#8221;.
He is missing part of an arm, and explained some of the complications of
making prosthetics.
A key need is really good open source CAD tools.
That is a general problem, not unique to the military or government &amp;#8212;
currently the tools are hideously expensive, and until that changes, the
promise of cheap 3D printers will be harder to realize.
&lt;/li&gt;
&lt;li&gt;
Charlie Schweik has been doing a lot of quantitative studies of
OSS projects, to determine what separates successful projects
from abandoned projects.
He expects to have a book on soon on this topic!
In the initiation stage, the key factors were: Leadership by doing, clear vision, and well-articulated goals.
Other factors were Project marketing; project financing; knowledge continuity; being a multideveloper project.
A really key factor, once a project is initiated, is gaining a developer
(and then gaining more later).
There are many conflicting claims, e.g., some say
that smaller groups are better (Brooks), that larger groups
are better (Linus&amp;#8217; law), or that size doesn&amp;#8217;t
matter; his data shows that Linus&amp;#8217; law is the correct one.
Face-to-face communication doesn&amp;#8217;t seem to be as important as it used to be,
due to better communication technology.
He&amp;#8217;s gathered lots more info; I&amp;#8217;m looking forward
to seeing the whole thing.
&lt;/li&gt;
&lt;li&gt;
One great thing was that everyone was motivated to actually solve problems,
immediately.
There is already an official
&lt;a href=&quot;http://cio-nii.defense.gov/sites/oss/Open_Source_Software_%28OSS%29_FAQ.htm&quot;&gt;DoD Open Source Software (OSS) Frequently-Asked Questions (FAQ)&lt;/a&gt;,
but there&amp;#8217;s a need for a less-official FAQ, so during the conference
a new
&lt;a href=&quot;http://mil-oss.org/learn-more/frequently-asked-questions-on-open-source-software-oss&quot;&gt;MIL-OSS OSS FAQ&lt;/a&gt; was created.
On the last day there was a discussion between various software developers
and military folks, particularly about military needs.
A real problem in military situations &amp;#8212;
and disasters like hurricanes &amp;#8212;
is that centralized communications systems fail.
Within a short time, people were suddenly developing an
&lt;a href=&quot;https://github.com/mil-oss/walkitalkie&quot;&gt;OSS walkie-talkie
application for Android and hosting it on github&lt;/a&gt;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;
Many discussions revolved around the problems of getting
authentication/authorization working &lt;i&gt;without&lt;/i&gt; passwords, in particular
using the ID cards now widely used by nearly all western governments
(such as DoD CAC cards).
Although things can work sometimes,
it&amp;#8217;s incredibly painful to get them to work
on any system (OSS or not), and they are fragile.
Dmitri Pal (Red Hat)&amp;#8217;s talk &amp;#8220;CAC and Kerberos From Vision to Reality&amp;#8221;
discussed some of the problems and ways to possibly make it better.
The OpenSSH developers are actively hostile to the X.509 standard that
everyone uses for identity certificates; I agree with the OpenSSH folks
that X.509 is clunky, but that is what everyone uses, and not supporting
X.509 means that openssh is useless for them.
Every card reader is incompatible with the others, so every time a new
model comes out, drivers have to be written and it often doesn&amp;#8217;t work anyway
(compare that to USB keyboards, which &amp;#8220;just work&amp;#8221; every time even
through KVM switches).
I think some group needs to be formed, maybe a
&amp;#8220;Simple Authorization without passwords&amp;#8221; group, with the goal of
setting standards and building OSS components so that systems by default
(maybe by installing one package) can trivially use PKI and other systems
and have it &amp;#8220;just work&amp;#8221; every time.
No matter that client, server (relying party), or third-party
authenticator/authorization server is in use.
&lt;!--
Possible members:
Richard Burroughs, Gunnar Hellekson, Dmitri, Dan Risacher, me.
--&gt;
&lt;/p&gt;
&lt;p&gt;
If you&amp;#8217;re interested in more of my personal thoughts about OSS and the
U.S. Department of Defense (DoD), also see
&lt;a href=&quot;http://twit.tv/floss160&quot;&gt;FLOSS Weekly #160, the
interview of David A. Wheeler by Randal Schwartz and Simon Phipps&lt;/a&gt;.
Good general sites for more info are the
&lt;a href=&quot;http://mil-oss.org/&quot;&gt;MIL-OSS website&lt;/a&gt; and the
&lt;a href=&quot;http://cio-nii.defense.gov/sites/oss/&quot;&gt;DoD CIO Free Open Source Software (FOSS) site&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
There&amp;#8217;s more to be done, but a lot is already happening.
&lt;/p&gt;
</description>
   </item>
  </channel>
</rss>