<?xml version="1.0"?>
<!-- name="generator" content="blosxom/2.0" -->

<rss version="2.0">
  <channel>
    <title>David A. Wheeler's Blog   </title>
    <link>http://www.dwheeler.com/blog</link>
    <description>David A. Wheeler's weblog.</description>
    <language>en</language>

  <item>
    <title>Release government-developed software as OSS</title>
    <link>http://www.dwheeler.com/blog/2012/07/20#white-house-default-release-oss</link>
    <pubDate>Fri, 20 Jul 2012 18:06 GMT</pubDate>
    <!-- date: 2012-07-20 -->
    <description>
&lt;p&gt;
I encourage people to sign the white house petition to
&lt;a href=&quot;https://petitions.whitehouse.gov/petition/maximize-public-benefit-federal-technology-sharing-government-developed-software-under-open-source/6n5ZBBwf&quot;&gt;Maximize the public benefit of federal technology by sharing government-developed software under an open source license&lt;/a&gt;.
I, at least, interpret this to include software developed by contractors
(since they receive government funding).
I think this proposal makes sense.
Sure, some software is classified, or export-controlled, or for some other
specific reason should not be released to the public.
But those should be exceptions.
If we the people paid to have it developed, then we the people
should get it!
&lt;/p&gt;
&lt;p&gt;
It is true that many petitions do not get action right away, but
that isn&amp;#8217;t taking the long view.
Often an issue has to be repeatedly raised before anything happens.
So just because something doesn&amp;#8217;t happen once doesn&amp;#8217;t mean it was
a waste of time.
The
&lt;a href=&quot;http://www.consumerfinance.gov/blog/the-cfpbs-source-code-policy-open-and-shared/&quot;&gt;Consumer Financial Protection Bureau has
a &amp;#8220;default share&amp;#8221; policy&lt;/a&gt; so it &lt;i&gt;is&lt;/i&gt; possible.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Interview at opensource.com</title>
    <link>http://www.dwheeler.com/blog/2012/07/17#interview-oss-com</link>
    <pubDate>Tue, 17 Jul 2012 09:48 GMT</pubDate>
    <!-- date: 2012-07-17 -->
    <description>
&lt;p&gt;
FYI, opensource.com just posted an interview with me:
&lt;a href=&quot;http://opensource.com/government/12/6/5-questions-david-wheeler&quot;&gt;
&amp;#8220;5 Questions with David A. Wheeler&amp;#8221; by Melanie Chernoff,
Opensource.com, 2012-07-17&lt;/a&gt;.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>How to have a successful open source software (OSS) project: Internet Success</title>
    <link>http://www.dwheeler.com/blog/2012/07/08#internet-success</link>
    <pubDate>Sun, 08 Jul 2012 16:31 GMT</pubDate>
    <!-- date: 2012-07-08 -->
    <description>
&lt;p&gt;
The world of the future belongs to the collaborators.
But how, exactly, can you have a successful project with collaborators?
Can we quantitatively analyze past projects to figure out what works,
instead of just using our best guesses?
The answer, thankfully, is yes.
&lt;/p&gt;

&lt;p&gt;
I just finished reading the amazing
&lt;a href=&quot;http://www.amazon.com/gp/product/0262017253/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0262017253&amp;amp;linkCode=as2&amp;amp;tag=davawhesperho-20&quot;&gt;Internet Success: A Study of Open-Source Software Commons&lt;/a&gt;&lt;img src=&quot;http://www.assoc-amazon.com/e/ir?t=davawhesperho-20&amp;amp;l=as2&amp;amp;o=1&amp;amp;a=0262017253&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;.
This landmark book by Charles M. Schweik and Robert C. English of the
Massachusetts Institute of Technology (MIT)
presents the results of &lt;i&gt;five years&lt;/i&gt; of painstaking quantitative
research to answer this question:
&amp;#8220;&lt;i&gt;&lt;b&gt;What factors lead some open source software (OSS) commons
(aka projects) to success, and others to abandonment?&lt;/b&gt;&lt;/i&gt;&amp;#8221;

&lt;p&gt;
If you&amp;#8217;re doing serious research in how
collaborative development projects succeed (or not), you
&lt;i&gt;have&lt;/i&gt; to get this book.
If you&amp;#8217;re running a project, you should
apply its results, and
frankly, you&amp;#8217;d probably get quite a bit of insight about
collaboration from reading it.
The book focuses specifically on the development of OSS,
but as the authors note, many of its lessons probably apply elsewhere.
Here&amp;#8217;s a quick review and summary.
&lt;/p&gt;

&lt;p&gt;
Schweik and English examined over 100,000 projects on SourceForge, using
data from SourceForge and developer surveys.
Their approach to data collection and analysis is spelled out in detail
in the book; the key is that they took the time to deeply dive into it.
Many previous studies have focused on just a few projects, and they
summarize those; while those are useful, they don&amp;#8217;t tell the whole story.
Schweik and English instead cover a broad array of projects, using
quantitative analysis instead of guesswork.
&lt;/p&gt;

&lt;p&gt;
Fair warning: The book is &lt;i&gt;quite&lt;/i&gt; technical.
People who are not used to statistical analysis will find some parts
quite mysterious, and they answer a lot of questions you might not even
have thought to ask.
Because this is serious scientific research, they carefully define terms,
walk through a variety of data, and present an avalanche of data.
The key, though, is that they managed
to find useful answers from the data, and their &lt;i&gt;results&lt;/i&gt;
are actually quite understandable.
&lt;/p&gt;

&lt;p&gt;
They spend a whole chapter (chapter 7) defining the terms
&amp;#8220;success&amp;#8221; and &amp;#8220;abandonment&amp;#8221.
The definitions of these terms are key to the whole study, so
it makes sense that they spend time to define them.
Interestingly, they switched to the term &amp;#8220;abandonment&amp;#8221;
instead of the more common term &amp;#8220;failure&amp;#8221;;
they found that &amp;#8220;many projects that had ceased collaborating
would not be seen as failed projects&amp;#8221;, e.g., because
that project code had been absorbed into another project
or the developer had improved their development skills (where this
was their purpose).
&lt;/p&gt;

&lt;p&gt;
They use a very simple project lifecycle model &amp;mdash; projects begin in
&lt;i&gt;&lt;b&gt;initiation&lt;/b&gt;&lt;/i&gt;, and once the project has made its
first software release, it switches to &lt;i&gt;&lt;b&gt;growth&lt;/b&gt;&lt;/i&gt;.
They also categorized projects as success, abandonment, or indeterminate.
Combining these produces 6 categories of project:
success initiation (SI); abandonment initiation (AI);
success growth (SG); abandonment growth (AG);
indeterminant initiation (II); and indeterminant growth (IG).
Their operational definition of success initiation (SI) is oversimplified
but easy to understand: an SI project has at least one release.
Their operational definition for a success growth (SG) project
is very generous: at least 3 releases,
at least 6 months between releases, and has more than 10 downloads.
Chapter 7 gives details on these; I note these here because it&amp;#8217;s
hard to follow most of the book without knowing these categories.
I could argue that these are really too generous a definition of success,
but even with those definitions, they had many projects which did not meet
these definitions, and it is important to understand why
(so that future projects would be more likely to succeed).
&lt;/p&gt;

&lt;p&gt;
They had so much data that even supercomputers could not directly
process it.  Given today&amp;#8217;s computing capabilities,
that&amp;#8217;s pretty amazing.
&lt;/p&gt;

&lt;p&gt;
So, what did they learn?  Quite a bit.
A few specific points are described in chapter 12.
For example,
they had presumed that OSS projects with limited competition would be
more successful, but the effect is actually mildly the other way;
&amp;#8220;successful growth (SG) projects are more frequently found in
environments where there is more competition, not less&amp;#8221;.
Unsurprisingly,
projects with financial backing are &amp;#8220;much more likely to be successful
than those that are not&amp;#8221; once they are in growth stage; although financing
had an effect, its effects were not as strong in initiation.
&lt;!-- Chapter 12 --&gt;
&lt;/p&gt;


&lt;p&gt;
As with any research material, if you don&amp;#8217;t have time for
the details, it&amp;#8217;s a good idea to jump to the conclusions, which in
this book is chapter 13.
So what does it say?
&lt;/p&gt;

&lt;p&gt;
One of the key results is that during initiation (before first
release), the following are the most important issues, in order of importance,
for success in an OSS project:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&amp;#8220;Put in the hours.  Work hard toward creating your first release.&amp;#8221;
The details in chapter 11 tell the story:
If the leader put in more than 1.5 hours per week (on average),
the project was successful 73% of the time;
if the leader did not, the project was abandoned 65% of the time.
They are not saying that leaders should only put in 2 hours a week;
instead, the point is that the leader must consistently put in time
for the project to get to its first release.
&lt;/li&gt;
&lt;li&gt;&amp;#8220;Practice leadership by administering your project well, and
thinking through and articulating your vision as well as goals for
the project. Demonstrate your leadership through hard work&amp;#8230;&amp;#8221;
&lt;/li&gt;
&lt;li&gt;
&amp;#8220;Establish a high-quality Web site to showcase and promote your project.&amp;#8221;
&lt;/li&gt;
&lt;li&gt;
&amp;#8220;Create good documentation for your (potential) user and
developer community.&amp;#8221;
&lt;/li&gt;
&lt;li&gt;
&amp;#8220;Advertise and market your project, and communicate your plans and goals
with the hope of getting help from others.&amp;#8221;
&lt;/li&gt;
&lt;li&gt;
&amp;#8220;Realize that successful projects are found in both GPL-based and
non-GPL-compatible situations.&amp;#8221;
&lt;/li&gt;
&lt;li&gt;
&amp;#8220;Consider, at the project&amp;#8217;s outset, creating software that has the
potential to be useful to a substantial number of users.&amp;#8221;
Remarkably, the minimum number of users is surprisingly small;
they estimate that successful growth stage projects typically
have at least 200 users.
In general, the more potential users, the better.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
None of these are earth-shattering surprises, but now they
are confirmed by data instead of being merely guessed at.
In particular, some items that people have claimed are important,
such as keeping complexity low, were not really supported as important.
In fact, successful projects tended to have a little more complexity.
That is probably not because a project should strive for complexity.
Instead, I suspect both successful and abandoned projects often strive to
reduce complexity &amp;mdash; so it not really something that distinguishes them
&amp;mdash; and I suspect sometimes a project that focuses on user needs has
to have more complexity than one that does not, simply because user needs
can sometimes require some complexity.
&lt;/p&gt;

&lt;p&gt;
Similarly, they had guidance for growth projects, in order of importance:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&amp;#8220;Your goal should be to create a virtuous circle where others help to
improve the software, thereby attracting more users and other developers,
which in turn leads to more improvements in the software&amp;#8230;&amp;#8221;
Do this the same way it is done in initiation:
spending time, maintain goals and plans, communicate the plans,
and maintain a high-quality project web site.&amp;#8221;
The user community should actively interacting with the development team.
&lt;/li&gt;
&lt;li&gt;
&amp;#8220;Advertize and market your project.&amp;#8221;
In particular, successful growth projects are frequently projects that
have added at least one new developer in the growth stage.
&lt;/li&gt;
&lt;li&gt;
Have some small tasks available for contributors with limited time.
&lt;/li&gt;
&lt;li&gt;
Welcome competition.
The authors were surprised, but noted that
&amp;#8220;competition seems to favor success&amp;#8221;.
Personally, I do not find this surprising at all.
Competition often encourages others to do better; we have an entire
economic system based on that premise.
&lt;/li&gt;
&lt;li&gt;Consider accepting offers of financing or paid developers
(they can greatly increase success rates).
This one, in particular, should surprise no one &amp;mdash; if you want
to increase success, pay someone to do it.&lt;/li&gt;
&lt;li&gt;&amp;#8220;Keep institutions (rules and project governance) as lean and
informal as possible, but do not be afraid to move toward more
formalization if it appears necessary.&amp;#8221;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
The also have some hints of how potential OSS users (consumers) can
choose OSS that is more likely to endure.
Successful OSS projects have characteristics like
more than 1000 downloads, users participating in bug tracker and email lists,
goals/plans listed, a development team that responds quickly to questions,
a good web site, good user documentation, and good developer documentation.
A larger development team is a good sign, too.
&lt;/p&gt;

&lt;p&gt;
These are just some of the research highlights.
For details, well, get the book!
&lt;/p&gt;

&lt;p&gt;
If you&amp;#8217;re looking for more detailed guidance on how to run an OSS
project, then a good place to go is
&lt;a href=&quot;http://producingoss.com/&quot;&gt; &amp;#8220;Producing Open Source Software:
How to Run a Successful Free Software Project&amp;#8221;
by Karl Fogel&lt;/a&gt;.
If you want to do it with or in the U.S. government, you might look at
&lt;a href=&quot;http://dodcio.defense.gov/Portals/0/Documents/FOSS/OTD-lessons-learned-military-signed.pdf&quot;&gt;Open Technology Development (OTD): Lessons Learned &amp; Best Practices for Military Software - OSD Report, May 2011&lt;/a&gt;
(full disclosure: I am co-author).
Both of them were written before these research results were reported,
but I think they are all quite consistent with each other.
&lt;/p&gt;

&lt;p&gt;
I want to give some extra kudos to the authors: They have made a vast
amount of their data avaiable so that analysis can be re-done, and so that
additional analysis can be done.
(They held back some survey data due to personally-identifying information
issues, which is reasonable enough).
Science depends on repeatability, yet much of today&amp;#8217;s so-called
&amp;#8220;science&amp;#8221; does not publish its data or analysis software,
and thus cannot be repeated&amp;#8230; and thus is not science.
&lt;/p&gt;

&lt;p&gt;
The book is not perfect.
It&amp;#8217;s big and rather technical in some spots, which will make it hard
reading for some.
An unfortunate blot is that, while they&amp;#8217;re usually extremely precise,
there are serious ambiguities in their discussion on licensing.
In particular, they have fundamentally inconsistent definitions for
the term &amp;#8220;GPL-compatible&amp;#8221; and &amp;#8220;GPL-incompatible&amp;#8221; throughout the book,
making their license analysis results suspect.
On page 22, they define the term &amp;#8220;GPL-incompatible&amp;#8221; in an extremely
bizarre and non-standard way; they define &amp;#8220;GPL-incompatible&amp;#8221; as
software in which &amp;#8220;firms can derive new works from OSS, but are not
obliged to license new derivatives under the GPL [and] are not
obligated to expose the code logic in [derivative products].&amp;#8221;
In short, they seem to using the term &amp;#8220;GPL-compatible&amp;#8221; as a synonym for
what the rest of the world would call a &amp;#8220;reciprocal&amp;#8221; or &amp;#8220;protective&amp;#8221; license.
Similarly, they seem to be defining the term &amp;#8220;GPL-incompatible&amp;#8221; to mean a
&amp;#8220;permissive&amp;#8221; license.
I don&amp;#8217;t like non-standard terminology, but as long as unusual terms
are defined clearly, I can deal with bizarre terminology.
Yet later, on page 157, they define &amp;#8220;GPL-compatible&amp;#8221; completely
differently, and give it its conventional meaning &lt;i&gt;instead&lt;/i&gt;.
That is, they define &amp;#8220;GPL-compatible&amp;#8221; as software that can be combined
with the GPL (which includes not just the reciprocal GPL license,
but which also includes many permissive licenses like the MIT license).
My initial guess is that the page 22 text is just wrong, but
it&amp;#8217;s hard to be sure.
There is another wrinkle, too, presuming that they meant the term
&amp;#8220;GPL-compatible&amp;#8221; in the usual sense
(and that page 22 is just wrong).
One of the more popular licenses, the
Apache License 2.0, has recently become GPL-compatible
(on release of the GPL version 3),
even though it wasn&amp;#8217;t before.
It&amp;#8217;s not clear from the book that this is reflected in their data
(at least I didn&amp;#8217;t see it), if they actually used the term &amp;#8220;GPL-compatible&amp;#8221;
in its usual sense,
and there is enough Apache-licensed software that this would matter.
This may just be a poor explanation of terms, but until this is
cleared up, I would be cautious about its comments on licensing.
Hopefully they will clear this up, and in addition,
it would probably be very useful to re-run the licensing analysis
to examine (1) GPL-compatible vs. GPL-incompatible,  and (2)
to examine the typical 3 license categories (permissive,
weakly protective/reciprocal, and strongly protective/reciprocal).
&lt;/p&gt;

&lt;p&gt;
So if you are interested in the latest research on how
OSS projects become successful (or not), pick up
&lt;a href=&quot;http://www.amazon.com/gp/product/0262017253/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0262017253&amp;amp;linkCode=as2&amp;amp;tag=davawhesperho-20&quot;&gt;Internet Success: A Study of Open-Source Software Commons&lt;/a&gt;&lt;img src=&quot;http://www.assoc-amazon.com/e/ir?t=davawhesperho-20&amp;amp;l=as2&amp;amp;o=1&amp;amp;a=0262017253&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;.
This book is a milestone in the serious study of collaborative development
approaches.
&lt;/p&gt;

&lt;p&gt;
What&amp;#8217;s especially intriguing is that success is very achievable.
While initiating your project you should keep at it and communicate
(articulate the vision and goals,
have a high-quality web site to showcase/promote
the project, create good docuemntation, and advertize).
Once it&amp;#8217;s growing, work to attract more users and developers.
&lt;/p&gt;
</description>
   </item>
  </channel>
</rss>