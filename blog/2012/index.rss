<?xml version="1.0"?>
<!-- name="generator" content="blosxom/2.0" -->

<rss version="2.0">
  <channel>
    <title>David A. Wheeler's Blog   </title>
    <link>http://www.dwheeler.com/blog</link>
    <description>David A. Wheeler's weblog.</description>
    <language>en</language>

  <item>
    <title>Readable s-expressions for Lisp-based languages: Lots of progress!</title>
    <link>http://www.dwheeler.com/blog/2012/08/12#readable-sweet-lisp4</link>
    <pubDate>Sun, 12 Aug 2012 12:42 GMT</pubDate>
    <!-- date: 2012-08-12 -->
    <description>
&lt;p&gt;
Lots has been happening recently in my effort to make
Lisp-based languages more readable.
A lot of programming languages are Lisp-based, including Scheme,
Common Lisp, emacs Lisp, Arc, Clojure, and so on.
But many software developers reject these languages, at least in
part because their basic notation (s-expressions) is very awkward.
&lt;/p&gt;

&lt;p&gt;
The &lt;a href=&quot;http://readable.sourceforge.net&quot;&gt;Readable Lisp
s-expressions&lt;/a&gt; project has a set of potential solutions.
We now have much more robust code (you can easily download, install, and
use it, due to autoconfiscation), and we have a video that explains our solutions.
The &lt;a href=&quot;http://www.youtube.com/watch?v=l9sFTOKa-cg&amp;feature=plcp&quot;&gt;video
on readable Lisp s-expressions is also available on Youtube&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
We&amp;#8217;re now at version 0.4.  This version is very compatible with
existing Lisp code; they are simply a set of additional abbreviations.
There are three tiers:
curly-infix expressions (which add infix),
neoteric-expressions (which add a more conventional call format), and
sweet-expressions (which deduce parentheses from indentation, reducing
the number of required parentheses).

&lt;p&gt;
Here&amp;#8217;s an example of (awkward) traditional s-expression format:
&lt;pre&gt;
(define (factorial n)
  (if (&amp;lt;= n 1)
    1
    (* n (factorial (- n 1)))))
&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;
Here&amp;#8217;s the same thing, expressed using sweet-expressions:
&lt;pre&gt;
define factorial(n)
  if {n &amp;lt;= 1}
    1
    {n * factorial{n - 1}}
&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;
A sweet-expression reader could accept either format, actually,
since these tiers are simply additional abbreviations and adjustments
that you can make to an existing Lisp reader.
If you&amp;#8217;re interested, please go to the
&lt;a href=&quot;http://readable.sourceforge.net&quot;&gt;Readable Lisp
s-expressions project web page&lt;/a&gt; for more information and an
implementation - and please &lt;a href=&quot;https://sourceforge.net/p/readable/wiki/Join/&quot;&gt;join us&lt;/a&gt;!
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Release government-developed software as OSS</title>
    <link>http://www.dwheeler.com/blog/2012/07/20#white-house-default-release-oss</link>
    <pubDate>Fri, 20 Jul 2012 18:06 GMT</pubDate>
    <!-- date: 2012-07-20 -->
    <description>
&lt;p&gt;
I encourage people to sign the white house petition to
&lt;a href=&quot;https://petitions.whitehouse.gov/petition/maximize-public-benefit-federal-technology-sharing-government-developed-software-under-open-source/6n5ZBBwf&quot;&gt;Maximize the public benefit of federal technology by sharing government-developed software under an open source license&lt;/a&gt;.
I, at least, interpret this to include software developed by contractors
(since they receive government funding).
I think this proposal makes sense.
Sure, some software is classified, or export-controlled, or for some other
specific reason should not be released to the public.
But those should be exceptions.
If we the people paid to have it developed, then we the people
should get it!
&lt;/p&gt;
&lt;p&gt;
It is true that many petitions do not get action right away, but
that isn&amp;#8217;t taking the long view.
Often an issue has to be repeatedly raised before anything happens.
So just because something doesn&amp;#8217;t happen once doesn&amp;#8217;t mean it was
a waste of time.
The
&lt;a href=&quot;http://www.consumerfinance.gov/blog/the-cfpbs-source-code-policy-open-and-shared/&quot;&gt;Consumer Financial Protection Bureau has
a &amp;#8220;default share&amp;#8221; policy&lt;/a&gt; so it &lt;i&gt;is&lt;/i&gt; possible.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Interview at opensource.com</title>
    <link>http://www.dwheeler.com/blog/2012/07/17#interview-oss-com</link>
    <pubDate>Tue, 17 Jul 2012 09:48 GMT</pubDate>
    <!-- date: 2012-07-17 -->
    <description>
&lt;p&gt;
FYI, opensource.com just posted an interview with me:
&lt;a href=&quot;http://opensource.com/government/12/6/5-questions-david-wheeler&quot;&gt;
&amp;#8220;5 Questions with David A. Wheeler&amp;#8221; by Melanie Chernoff,
Opensource.com, 2012-07-17&lt;/a&gt;.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>How to have a successful open source software (OSS) project: Internet Success</title>
    <link>http://www.dwheeler.com/blog/2012/07/08#internet-success</link>
    <pubDate>Sun, 08 Jul 2012 16:31 GMT</pubDate>
    <!-- date: 2012-07-08 -->
    <description>
&lt;p&gt;
The world of the future belongs to the collaborators.
But how, exactly, can you have a successful project with collaborators?
Can we quantitatively analyze past projects to figure out what works,
instead of just using our best guesses?
The answer, thankfully, is yes.
&lt;/p&gt;

&lt;p&gt;
I just finished reading the amazing
&lt;a href=&quot;http://www.amazon.com/gp/product/0262017253/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0262017253&amp;amp;linkCode=as2&amp;amp;tag=davawhesperho-20&quot;&gt;Internet Success: A Study of Open-Source Software Commons&lt;/a&gt;&lt;img src=&quot;http://www.assoc-amazon.com/e/ir?t=davawhesperho-20&amp;amp;l=as2&amp;amp;o=1&amp;amp;a=0262017253&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;.
This landmark book by Charles M. Schweik and Robert C. English of the
Massachusetts Institute of Technology (MIT)
presents the results of &lt;i&gt;five years&lt;/i&gt; of painstaking quantitative
research to answer this question:
&amp;#8220;&lt;i&gt;&lt;b&gt;What factors lead some open source software (OSS) commons
(aka projects) to success, and others to abandonment?&lt;/b&gt;&lt;/i&gt;&amp;#8221;

&lt;p&gt;
If you&amp;#8217;re doing serious research in how
collaborative development projects succeed (or not), you
&lt;i&gt;have&lt;/i&gt; to get this book.
If you&amp;#8217;re running a project, you should
apply its results, and
frankly, you&amp;#8217;d probably get quite a bit of insight about
collaboration from reading it.
The book focuses specifically on the development of OSS,
but as the authors note, many of its lessons probably apply elsewhere.
Here&amp;#8217;s a quick review and summary.
&lt;/p&gt;

&lt;p&gt;
Schweik and English examined over 100,000 projects on SourceForge, using
data from SourceForge and developer surveys.
Their approach to data collection and analysis is spelled out in detail
in the book; the key is that they took the time to deeply dive into it.
Many previous studies have focused on just a few projects, and they
summarize those; while those are useful, they don&amp;#8217;t tell the whole story.
Schweik and English instead cover a broad array of projects, using
quantitative analysis instead of guesswork.
&lt;/p&gt;

&lt;p&gt;
Fair warning: The book is &lt;i&gt;quite&lt;/i&gt; technical.
People who are not used to statistical analysis will find some parts
quite mysterious, and they answer a lot of questions you might not even
have thought to ask.
Because this is serious scientific research, they carefully define terms,
walk through a variety of data, and present an avalanche of data.
The key, though, is that they managed
to find useful answers from the data, and their &lt;i&gt;results&lt;/i&gt;
are actually quite understandable.
&lt;/p&gt;

&lt;p&gt;
They spend a whole chapter (chapter 7) defining the terms
&amp;#8220;success&amp;#8221; and &amp;#8220;abandonment&amp;#8221.
The definitions of these terms are key to the whole study, so
it makes sense that they spend time to define them.
Interestingly, they switched to the term &amp;#8220;abandonment&amp;#8221;
instead of the more common term &amp;#8220;failure&amp;#8221;;
they found that &amp;#8220;many projects that had ceased collaborating
would not be seen as failed projects&amp;#8221;, e.g., because
that project code had been absorbed into another project
or the developer had improved their development skills (where this
was their purpose).
&lt;/p&gt;

&lt;p&gt;
They use a very simple project lifecycle model &amp;mdash; projects begin in
&lt;i&gt;&lt;b&gt;initiation&lt;/b&gt;&lt;/i&gt;, and once the project has made its
first software release, it switches to &lt;i&gt;&lt;b&gt;growth&lt;/b&gt;&lt;/i&gt;.
They also categorized projects as success, abandonment, or indeterminate.
Combining these produces 6 categories of project:
success initiation (SI); abandonment initiation (AI);
success growth (SG); abandonment growth (AG);
indeterminant initiation (II); and indeterminant growth (IG).
Their operational definition of success initiation (SI) is oversimplified
but easy to understand: an SI project has at least one release.
Their operational definition for a success growth (SG) project
is very generous: at least 3 releases,
at least 6 months between releases, and has more than 10 downloads.
Chapter 7 gives details on these; I note these here because it&amp;#8217;s
hard to follow most of the book without knowing these categories.
I could argue that these are really too generous a definition of success,
but even with those definitions, they had many projects which did not meet
these definitions, and it is important to understand why
(so that future projects would be more likely to succeed).
&lt;/p&gt;

&lt;p&gt;
They had so much data that even supercomputers could not directly
process it.  Given today&amp;#8217;s computing capabilities,
that&amp;#8217;s pretty amazing.
&lt;/p&gt;

&lt;p&gt;
So, what did they learn?  Quite a bit.
A few specific points are described in chapter 12.
For example,
they had presumed that OSS projects with limited competition would be
more successful, but the effect is actually mildly the other way;
&amp;#8220;successful growth (SG) projects are more frequently found in
environments where there is more competition, not less&amp;#8221;.
Unsurprisingly,
projects with financial backing are &amp;#8220;much more likely to be successful
than those that are not&amp;#8221; once they are in growth stage; although financing
had an effect, its effects were not as strong in initiation.
&lt;!-- Chapter 12 --&gt;
&lt;/p&gt;


&lt;p&gt;
As with any research material, if you don&amp;#8217;t have time for
the details, it&amp;#8217;s a good idea to jump to the conclusions, which in
this book is chapter 13.
So what does it say?
&lt;/p&gt;

&lt;p&gt;
One of the key results is that during initiation (before first
release), the following are the most important issues, in order of importance,
for success in an OSS project:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&amp;#8220;Put in the hours.  Work hard toward creating your first release.&amp;#8221;
The details in chapter 11 tell the story:
If the leader put in more than 1.5 hours per week (on average),
the project was successful 73% of the time;
if the leader did not, the project was abandoned 65% of the time.
They are not saying that leaders should only put in 2 hours a week;
instead, the point is that the leader must consistently put in time
for the project to get to its first release.
&lt;/li&gt;
&lt;li&gt;&amp;#8220;Practice leadership by administering your project well, and
thinking through and articulating your vision as well as goals for
the project. Demonstrate your leadership through hard work&amp;#8230;&amp;#8221;
&lt;/li&gt;
&lt;li&gt;
&amp;#8220;Establish a high-quality Web site to showcase and promote your project.&amp;#8221;
&lt;/li&gt;
&lt;li&gt;
&amp;#8220;Create good documentation for your (potential) user and
developer community.&amp;#8221;
&lt;/li&gt;
&lt;li&gt;
&amp;#8220;Advertise and market your project, and communicate your plans and goals
with the hope of getting help from others.&amp;#8221;
&lt;/li&gt;
&lt;li&gt;
&amp;#8220;Realize that successful projects are found in both GPL-based and
non-GPL-compatible situations.&amp;#8221;
&lt;/li&gt;
&lt;li&gt;
&amp;#8220;Consider, at the project&amp;#8217;s outset, creating software that has the
potential to be useful to a substantial number of users.&amp;#8221;
Remarkably, the minimum number of users is surprisingly small;
they estimate that successful growth stage projects typically
have at least 200 users.
In general, the more potential users, the better.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
None of these are earth-shattering surprises, but now they
are confirmed by data instead of being merely guessed at.
In particular, some items that people have claimed are important,
such as keeping complexity low, were not really supported as important.
In fact, successful projects tended to have a little more complexity.
That is probably not because a project should strive for complexity.
Instead, I suspect both successful and abandoned projects often strive to
reduce complexity &amp;mdash; so it not really something that distinguishes them
&amp;mdash; and I suspect sometimes a project that focuses on user needs has
to have more complexity than one that does not, simply because user needs
can sometimes require some complexity.
&lt;/p&gt;

&lt;p&gt;
Similarly, they had guidance for growth projects, in order of importance:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&amp;#8220;Your goal should be to create a virtuous circle where others help to
improve the software, thereby attracting more users and other developers,
which in turn leads to more improvements in the software&amp;#8230;&amp;#8221;
Do this the same way it is done in initiation:
spending time, maintain goals and plans, communicate the plans,
and maintain a high-quality project web site.&amp;#8221;
The user community should actively interacting with the development team.
&lt;/li&gt;
&lt;li&gt;
&amp;#8220;Advertize and market your project.&amp;#8221;
In particular, successful growth projects are frequently projects that
have added at least one new developer in the growth stage.
&lt;/li&gt;
&lt;li&gt;
Have some small tasks available for contributors with limited time.
&lt;/li&gt;
&lt;li&gt;
Welcome competition.
The authors were surprised, but noted that
&amp;#8220;competition seems to favor success&amp;#8221;.
Personally, I do not find this surprising at all.
Competition often encourages others to do better; we have an entire
economic system based on that premise.
&lt;/li&gt;
&lt;li&gt;Consider accepting offers of financing or paid developers
(they can greatly increase success rates).
This one, in particular, should surprise no one &amp;mdash; if you want
to increase success, pay someone to do it.&lt;/li&gt;
&lt;li&gt;&amp;#8220;Keep institutions (rules and project governance) as lean and
informal as possible, but do not be afraid to move toward more
formalization if it appears necessary.&amp;#8221;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
The also have some hints of how potential OSS users (consumers) can
choose OSS that is more likely to endure.
Successful OSS projects have characteristics like
more than 1000 downloads, users participating in bug tracker and email lists,
goals/plans listed, a development team that responds quickly to questions,
a good web site, good user documentation, and good developer documentation.
A larger development team is a good sign, too.
&lt;/p&gt;

&lt;p&gt;
These are just some of the research highlights.
For details, well, get the book!
&lt;/p&gt;

&lt;p&gt;
If you&amp;#8217;re looking for more detailed guidance on how to run an OSS
project, then a good place to go is
&lt;a href=&quot;http://producingoss.com/&quot;&gt; &amp;#8220;Producing Open Source Software:
How to Run a Successful Free Software Project&amp;#8221;
by Karl Fogel&lt;/a&gt;.
If you want to do it with or in the U.S. government, you might look at
&lt;a href=&quot;http://dodcio.defense.gov/Portals/0/Documents/FOSS/OTD-lessons-learned-military-signed.pdf&quot;&gt;Open Technology Development (OTD): Lessons Learned &amp; Best Practices for Military Software - OSD Report, May 2011&lt;/a&gt;
(full disclosure: I am co-author).
Both of them were written before these research results were reported,
but I think they are all quite consistent with each other.
&lt;/p&gt;

&lt;p&gt;
I want to give some extra kudos to the authors: They have made a vast
amount of their data avaiable so that analysis can be re-done, and so that
additional analysis can be done.
(They held back some survey data due to personally-identifying information
issues, which is reasonable enough).
Science depends on repeatability, yet much of today&amp;#8217;s so-called
&amp;#8220;science&amp;#8221; does not publish its data or analysis software,
and thus cannot be repeated&amp;#8230; and thus is not science.
&lt;/p&gt;

&lt;p&gt;
The book is not perfect.
It&amp;#8217;s big and rather technical in some spots, which will make it hard
reading for some.
An unfortunate blot is that, while they&amp;#8217;re usually extremely precise,
there are serious ambiguities in their discussion on licensing.
In particular, they have fundamentally inconsistent definitions for
the term &amp;#8220;GPL-compatible&amp;#8221; and &amp;#8220;GPL-incompatible&amp;#8221; throughout the book,
making their license analysis results suspect.
On page 22, they define the term &amp;#8220;GPL-incompatible&amp;#8221; in an extremely
bizarre and non-standard way; they define &amp;#8220;GPL-incompatible&amp;#8221; as
software in which &amp;#8220;firms can derive new works from OSS, but are not
obliged to license new derivatives under the GPL [and] are not
obligated to expose the code logic in [derivative products].&amp;#8221;
In short, they seem to using the term &amp;#8220;GPL-compatible&amp;#8221; as a synonym for
what the rest of the world would call a &amp;#8220;reciprocal&amp;#8221; or &amp;#8220;protective&amp;#8221; license.
Similarly, they seem to be defining the term &amp;#8220;GPL-incompatible&amp;#8221; to mean a
&amp;#8220;permissive&amp;#8221; license.
I don&amp;#8217;t like non-standard terminology, but as long as unusual terms
are defined clearly, I can deal with bizarre terminology.
Yet later, on page 157, they define &amp;#8220;GPL-compatible&amp;#8221; completely
differently, and give it its conventional meaning &lt;i&gt;instead&lt;/i&gt;.
That is, they define &amp;#8220;GPL-compatible&amp;#8221; as software that can be combined
with the GPL (which includes not just the reciprocal GPL license,
but which also includes many permissive licenses like the MIT license).
My initial guess is that the page 22 text is just wrong, but
it&amp;#8217;s hard to be sure.
There is another wrinkle, too, presuming that they meant the term
&amp;#8220;GPL-compatible&amp;#8221; in the usual sense
(and that page 22 is just wrong).
One of the more popular licenses, the
Apache License 2.0, has recently become GPL-compatible
(on release of the GPL version 3),
even though it wasn&amp;#8217;t before.
It&amp;#8217;s not clear from the book that this is reflected in their data
(at least I didn&amp;#8217;t see it), if they actually used the term &amp;#8220;GPL-compatible&amp;#8221;
in its usual sense,
and there is enough Apache-licensed software that this would matter.
This may just be a poor explanation of terms, but until this is
cleared up, I would be cautious about its comments on licensing.
Hopefully they will clear this up, and in addition,
it would probably be very useful to re-run the licensing analysis
to examine (1) GPL-compatible vs. GPL-incompatible,  and (2)
to examine the typical 3 license categories (permissive,
weakly protective/reciprocal, and strongly protective/reciprocal).
&lt;/p&gt;

&lt;p&gt;
So if you are interested in the latest research on how
OSS projects become successful (or not), pick up
&lt;a href=&quot;http://www.amazon.com/gp/product/0262017253/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0262017253&amp;amp;linkCode=as2&amp;amp;tag=davawhesperho-20&quot;&gt;Internet Success: A Study of Open-Source Software Commons&lt;/a&gt;&lt;img src=&quot;http://www.assoc-amazon.com/e/ir?t=davawhesperho-20&amp;amp;l=as2&amp;amp;o=1&amp;amp;a=0262017253&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;.
This book is a milestone in the serious study of collaborative development
approaches.
&lt;/p&gt;

&lt;p&gt;
What&amp;#8217;s especially intriguing is that success is very achievable.
While initiating your project you should keep at it and communicate
(articulate the vision and goals,
have a high-quality web site to showcase/promote
the project, create good docuemntation, and advertize).
Once it&amp;#8217;s growing, work to attract more users and developers.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Antideficiency Act and the Apache License</title>
    <link>http://www.dwheeler.com/blog/2012/06/27#antideficiency-apache</link>
    <pubDate>Wed, 27 Jun 2012 21:23 GMT</pubDate>
    <!-- date: 2012-06-27 -->
    <description>
&lt;p&gt;
Some people are claiming that the U.S. federal government law
called the &amp;#8220;antideficiency act&amp;#8221; means that the U.S. government cannot
use any software released under the Apache 2.0 license.
This is nonsense, but it&amp;#8217;s a good example of the nonsense that
impedes government use and co-development of some great software.
Here&amp;#8217;s why this is nonsense.
&lt;/p&gt;

&lt;p&gt;
First, I should note that in my earlier post,
&lt;a href=&quot;http://www.dwheeler.com/blog/2012/06/24/#volunteer-open-source-antideficiency&quot;&gt;Open Source Software volunteers forbidden in government? (Antideficiency Act)&lt;/a&gt;,
I explained that the US government rule called the
&amp;#8220;antideficiency act&amp;#8221; (ADA)
doesn&amp;#8217;t interfere with the government&amp;#8217;s use of open source software (OSS),
even if it is created by people who are &amp;#8220;volunteers&amp;#8221;.
As long as the volunteers intend or agree that their work is
gratuitous (no-charge), there&amp;#8217;s no problem.
The antideficiency act says that you can&amp;#8217;t create a moral obligation
to pay without Congress&amp;#8217; consent; the government &lt;i&gt;can&lt;/i&gt;
accept materials even if they are provided at no cost.
&lt;/p&gt;

&lt;p&gt;
The &lt;a href=&quot;http://www.gao.gov/legal/lawresources/antideficiencybackground.html&quot;&gt;GAO has a summary describing the Antideficiency Act (ADA), Pub.L. 97-258, 96 Stat. 923&lt;/a&gt;.
It explains that the ADA prohibits &amp;#8220;federal employees from:
&lt;ul&gt;
&lt;li&gt;making or authorizing an expenditure from, or creating or authorizing an obligation under, any appropriation or fund in excess of the amount available in the appropriation or fund unless authorized by law. 31 U.S.C. § 1341(a)(1)(A).&lt;/li&gt;
&lt;li&gt;involving the government in any obligation to pay money before funds have been appropriated for that purpose, unless otherwise allowed by law. 31 U.S.C. § 1341(a)(1)(B).&lt;/li&gt;
&lt;li&gt;accepting voluntary services for the United States, or employing personal services not authorized by law, except in cases of emergency involving the safety of human life or the protection of property. 31 U.S.C. § 1342.&lt;/li&gt;
&lt;li&gt;making obligations or expenditures in excess of an apportionment or reapportionment, or in excess of the amount permitted by agency regulations. 31 U.S.C. § 1517(a).&amp;#8221;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;p&gt;
Software licenses sometimes include indemnification clauses, and those clauses can run afoul of this act if the clauses require the government to grant a possibly unlimited future liability (or any liability not already appropriated).
But some lawyers act
as if the word &amp;#8220;indemnification&amp;#8221; is some kind of magic curse word.
The word &amp;#8220;indemnification&amp;#8221; is not a magic word that makes a licenses
automatically unacceptable for government use.
As always, whether a license is okay or not depends on what
the license actually says.
&lt;/p&gt;

&lt;p&gt;
The license that seems to trigger problems in some lawyers is the
Apache 2.0 license, a popular OSS license.
Yet the &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0.html&quot;&gt;Apache
license version 2.0&lt;/a&gt; does not require such broad indemnification.
The Apache 2.0 license clause 9 (&amp;#8220;Accepting Warranty or Additional
Liability&amp;#8221;) instead requires that a redistributor provide indemnification
&lt;i&gt;only&lt;/i&gt; when additional conditions are met - in this case, when
the redistributor provides warranty or indemnification.  Clause 9 says
in full, &amp;#8220;While redistributing the Work or Derivative Works thereof,
You may choose to offer, and charge a fee for, acceptance of support,
warranty, indemnity, or other liability obligations and/or rights
consistent with this License. However, in accepting such obligations,
You may act only on Your own behalf and on Your sole responsibility, not
on behalf of any other Contributor, and only if You agree to indemnify,
defend, and hold each Contributor harmless for any liability incurred by,
or claims asserted against, such Contributor by reason of your accepting
any such warranty or additional liability.&amp;#8221;
&lt;/p&gt;

&lt;p&gt;
In short (and to oversimplify), &amp;#8220;if you indemnify your downstream
(recipients), you have to indemnify your upstream
(those you received it from)&amp;#8221;.
There is a reason for clauses like this; it
helps counter some clever sheanigans by
competitors who might want to harm a project.
If a competitor set up a situation to legally protect that software&amp;#8217;s users
while legally exposing its developers to heightened risk,
after a while there would be no developers.
This clause prevents this.
(This is yet another example of
why you should reuse a widely-used OSS license instead of
writing your own; most people would never have thought of this issue.)
&lt;/p&gt;

&lt;p&gt;
It is extremely unlikely that any government agency would trigger
this clause by warrantying the software or indemnifying a recipient,
so it is quite unlikely that this clause would ever be triggered by
government action.  But in any case, it would be this later action,
not mere acceptance of the Apache 2.0 license, that would potentially
run afoul of the ADA.  This is simply the same as usual; the government
typically does not warranty or indemnify software it releases, and if it
did, it would have to determine that value and lawfully receive funding
to do it.
&lt;/p&gt;

&lt;p&gt;
There&amp;#8217;s an additional wrinkle on this stuff.
The legal field, like the software field, is so large that many people
specialize, and sometimes the right specialists don&amp;#8217;t get involved.
Reviewing software licenses is normally the domain of so-called
&amp;#8220;intellectual property&amp;#8221; lawyers, who really should be called
&amp;#8220;data rights&amp;#8221; lawyers.
(I&amp;#8217;ve commented elsewhere that
&lt;a href=&quot;http://www.dwheeler.com/essays/intellectual-rights-not-intellectual-property.html&quot;&gt;the term &amp;#8220;intellectual property&amp;#8221; is dangerously misleading&lt;/a&gt;,
but that is a different topic.)
But I&amp;#8217;ve been told that at least in some organizations, the
people who really understand the antideficiency act are a different
group of lawyers (e.g., those who specialize in finance).
So if a data rights lawyer comes back with antideficiency act questions,
find out if that lawyer is the right person to talk to; it may be that the
question really should be forwarded to a lawyer who specializes
in that instead.
&lt;/p&gt;

&lt;p&gt;
Now I am no lawyer, and this blog post is not legal advice.
Even if I were a lawyer, I am not &lt;i&gt;your&lt;/i&gt; lawyer &amp;mdash; specific
facts can create weird situations.
There is no formal ruling on this matter, either, more&amp;#8217;s the pity.
However, this conclusion that I&amp;#8217;m describing
has been previously reached by others, in particular, see
&lt;a href=&quot;http://www.fiercegovernmentit.com/story/army-lawyers-dismiss-apache-license-indemnification-snafu/2012-03-08?utm_medium=nl&amp;utm_source=internal&quot;&gt;
&amp;#8220;Army lawyers dismiss Apache license indemnification snafu&amp;#8221;, Fierce
Government IT, March 8, 2012&lt;/a&gt;.
What&amp;#8217;s more, other lawyers I&amp;#8217;ve talked
to have agreed that this makes sense.
Basically, the word &amp;#8220;indemification&amp;#8221; is not
a magic curse word when it is in a licence &amp;mdash;
you have to actually read the license, and then determine if it is
a problem or not.
&lt;/p&gt;

&lt;p&gt;
More broadly, this is (yet another) example of a misunderstanding in the
U.S. federal government that impedes the use and collaborative
development of open source software (aka OSS or FLOSS).
I believe
the U.S. federal government does not use or co-develop OSS to the extent
that it should, and in some cases it is
because of misunderstandings like this.
So if this matters to you, spread the word &amp;mdash; often rules that
appear to be problems are not problems at all.
&lt;/p&gt;

&lt;p&gt;
I&amp;#8217;ve put this information in the
&lt;a href=&quot;http://mil-oss.org/learn-more/frequently-asked-questions-on-open-source-software-oss&quot;&gt;MIL-OSS FAQ&lt;/a&gt; so others can find out about this.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Open Source Software volunteers forbidden in government? (Antideficiency Act)</title>
    <link>http://www.dwheeler.com/blog/2012/06/24#volunteer-open-source-antideficiency</link>
    <pubDate>Sun, 24 Jun 2012 13:16 GMT</pubDate>
    <!-- date: 2012-06-24 -->
    <description>
&lt;p&gt;
Sometimes people ask me if open source software (OSS) is forbidden in the U.S. federal government due to a prohibition on &amp;#8220;voluntary services&amp;#8221;.  Often they don&amp;#8217;t even know exactly where this prohibition is in law, they just heard third-hand that there was some problem.
&lt;/p&gt;

&lt;p&gt;
It turns out that there is no problem, as I will explain. Please spread the word to those who care!  Even if this isn&amp;#8217;t your specific problem, I think this question can provide some general lessons about how to deal with government laws and regulations that, on first reading, do not make sense.
&lt;/p&gt;

&lt;p&gt;
The issue here is something called the &amp;#8220;antideficiency act&amp;#8221; (ADA), specifically the part of the ADA in
&lt;a href=&quot;http://uscode.house.gov/uscode-cgi/fastweb.exe?getdoc+uscview+t29t32+1830+0++%28%29%20%20AND%20%28%2831%29%20ADJ%20USC%29%3ACITE%20AND%20%28USC%20w%2F10%20%281342%29%29%3ACITE%20%20%20%20%20%20%20%20%20&quot;&gt;31 U.S.C. &amp;sect; 1342, Limitation on voluntary services&lt;/a&gt;.  This statute says that, &amp;#8220;An officer or employee of the United States Government or of the District of Columbia government may not accept voluntary services for either government or employ personal services exceeding that authorized by law except for emergencies involving the safety of human life or the protection of property&amp;#8230;&amp;#8221;
&lt;/p&gt;

&lt;p&gt;
Now at first glance, this text could appear to forbid OSS. Historically, OSS was developed by volunteers, and a lot of OSS is still created by people who aren&amp;#8217;t paid to write it.  A lot of OSS developers are paid to write software today, often at a premium, but that doesn&amp;#8217;t help either.  After all, often the government is not the one paying for the development, so at first glance this still sounds like &amp;#8220;volunteer&amp;#8221; work. After all, the company who is paying is still &amp;#8220;volunteering&amp;#8221; the software to the government!
&lt;/p&gt;

&lt;p&gt;
In fact, it&amp;#8217;s even worse.  It appears to forbid the government
from working with volunteer organizations like the Red Cross.
In fact, it becomes hard to imagine how the government can work with
various non-government organizations (NGOs) &amp;mdash; most depend greatly
on volunteers!
&lt;/p&gt;

&lt;p&gt;
But as is often the case, if there&amp;#8217;s a government law or regulation that doesn&amp;#8217;t make sense, you should dig deeper to find out what it actually means.  Often there are court cases or official guidance documents that explain things, and often you&amp;#8217;ll find out that the law or regulation means something very different than you might expect.  I&amp;#8217;ve found that in the US government (or in law), the problems are often caused because a key term doesn&amp;#8217;t mean what you might expect it to mean.  In this case, the word &amp;#8220;voluntary&amp;#8221; does not mean what you might think it means.
&lt;/p&gt;

&lt;p&gt;
The &lt;a href=&quot;http://www.gao.gov/legal/redbook/redbook.html&quot;&gt;US Government Accountability Office (GAO) Office of the General Counsel&amp;#8217;s &amp;#8220;Principles of Federal Appropriations Law&amp;#8221; (aka the &amp;#8220;Red Book&amp;#8221;)&lt;/a&gt; explains federal appropriation law.  Volume II of its third edition, section 6.C.3, describes in detail this prohibition on voluntary services.  Section 6.C.3.a notes that the voluntary services provision is not new; it first appeared, in almost identical form, back in 1884.  The red book explains its purpose; since &amp;#8220;an agency cannot directly obligate in excess or advance of its appropriations, it should not be able to accomplish the same thing indirectly by accepting ostensibly &amp;#8216;voluntary&amp;#8217; services and then presenting Congress with the bill, in the hope that Congress will recognize a &amp;#8216;moral obligation&amp;#8217; to pay for the benefits conferred&amp;#8230;&amp;#8221;
&lt;/p&gt;

&lt;p&gt;
The red book section 6.C.3.b states that in 1913, the Attorney General developed an opinion (30 Op. Att&amp;#8217;y Gen. 51 (1913)) that &amp;#8220;has become the leading case construing 31 U.S.C. § 1342&amp;#8230; the Attorney General drew a distinction that the Comptroller of the Treasury thereafter adopted, and that GAO and the Justice Department continue to follow to this day: &amp;#8221;the distinction between &amp;#8216;voluntary services&amp;#8217; and &amp;#8216;gratuitous services.&amp;#8217;&amp;#8221;  Some key text from this opinion, as identified by the red book, are: &amp;#8220;[I]t seems plain that the words &amp;#8216;voluntary service&amp;#8217; were not intended to be synonymous with &amp;#8216;gratuitous service&amp;#8217; &amp;#8230; it is evident that the evil at which Congress was aiming was not appointment or employment for authorized services without compensation, but the acceptance of unauthorized services not intended or agreed to be gratuitous and therefore likely to afford a basis for a future claim upon Congress&amp;#8230; .&amp;#8221;  More recent decisions, such as the &lt;a href=&quot;http://www.gao.gov/assets/450/441639.pdf&quot;&gt;1982 decision B-204326 by the U.S. Comptroller General&lt;/a&gt;, continue to confirm this distinction between &amp;#8220;gratuitous&amp;#8221; and &amp;#8220;voluntary&amp;#8221; service.
&lt;/p&gt;

&lt;p&gt;
So here we have a word (&amp;#8220;voluntary&amp;#8221;) that has a very special meaning in these regulations that is different from its usual meaning.  I expect that a lot of the problem is that this word dates from 1884; words their meaning change over time.  And changing laws is hard; lawmakers rarely change a text just because it&amp;#8217;s hard for ordinary people to understand.&lt;/p&gt;

&lt;p&gt;
In short, the ADA&amp;#8217;s limitation on voluntary services does not broadly forbid the government from working with organizations and people who identify themselves as volunteers, including those who develop OSS.
Instead, the ADA prohibits government employees from accepting services that are not intended or agreed to be given freely (gratuitous), but were instead rendered in the hope that Congress will subsequently recognize a moral obligation to pay for the benefits conferred.
Services that are intended and agreed to be gratuitous do not conflict with this statute.  In most cases, contributors to OSS projects intend for their contributions to be gratuitous, and provide them for all (not just for the Federal government), clearly distinguishing such OSS contributions from the &amp;#8220;voluntary services&amp;#8221; that the ADA was designed to prevent.
&lt;/p&gt;

&lt;p&gt;
I&amp;#8217;ve recorded this information on the
&lt;a href=&quot;http://mil-oss.org/learn-more/frequently-asked-questions-on-open-source-software-oss&quot;&gt;
MIL-OSS FAQ at
http://mil-oss.org/learn-more/frequently-asked-questions-on-open-source-software-oss&lt;/a&gt; so that others can learn about this.
&lt;/p&gt;
&lt;p&gt;
When you have questions about OSS and US federal government,
good places for information/guidance include the following
(the DoD-specific ones have information that may be useful elsewhere):
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://dodcio.defense.gov/Portals/0/Documents/FOSS/2009OSS.pdf&quot;&gt;&amp;#8220;Clarifying Guidance Regarding Open Source Software (OSS)&amp;#8221;, a memorandum signed by David M. Wennergren on 16 October 2009 (the official DoD policy memo on open source software (OSS))&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://dodcio.defense.gov/OpenSourceSoftwareFAQ.aspx&quot;&gt;DoD Open Source Software (OSS) Frequently Asked Questions (FAQ)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mil-oss.org/learn-more/frequently-asked-questions-on-open-source-software-oss&quot;&gt;MIL-OSS FAQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://dodcio.defense.gov/Portals/0/Documents/FOSS/OTD-lessons-learned-military-signed.pdf&quot;&gt;Open Technology Development (OTD): Lessons Learned &amp; Best Practices for Military Software (OSD Report, May 2011)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cendi.gov/publications/index.html&quot;&gt;Frequently Asked Questions About Copyright and Computer Software - Issues affecting the U.S. Government with Special Emphasis on Open Source Software  (CENDI/2009-1) (Updated October 2010)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;http://www.gao.gov/legal/redbook/redbook.html&quot;&gt;red book&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Lessons Learned Webinar</title>
    <link>http://www.dwheeler.com/blog/2012/06/05#lessons-learned-webinar</link>
    <pubDate>Tue, 05 Jun 2012 10:02 GMT</pubDate>
    <!-- date: 2012-06-05 -->
    <description>
&lt;p&gt;
On &lt;a href=&quot;https://event.on24.com/eventRegistration/EventLobbyServlet?target=registration.jsp&amp;eventid=462526&amp;sessionid=1&amp;key=E7F3DCDCA57D4521C74872EA9D848A2C&amp;sourcepage=register&quot;&gt;June 7, 2012, 2-3pm Eastern Time,
I&amp;#8217;ll be speaking as part of the free webinar
&amp;#8220;Lessons Learned: Roadblocks and Opportunities for Open Source Software (OSS) in U.S. Government&amp;#8221; hosted by GovLoop&lt;/a&gt;.
The webinar will feature a recent Department of Homeland Security (DHS)
Homeland Open Security Technology (HOST)
report that I co-authored, which discusses
key roadblocks and opportunities in the government application of
open source software, as reported in interviews of
experts, suppliers, and potential users.
Join us!
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Award, and learn how to develop secure software!</title>
    <link>http://www.dwheeler.com/blog/2012/05/17#award-secure-software</link>
    <pubDate>Thu, 17 May 2012 18:35 GMT</pubDate>
    <!-- date: 2012-05-17 -->
    <description>
&lt;p&gt;
I just received an award from
&lt;a href=&quot;http://www.gmu.edu&quot;&gt;George Mason University (GMU)&lt;/a&gt; &amp;mdash;
thank you!
I&amp;#8217;m grateful, but I think this award means something bigger, too:
&lt;i&gt;Anyone&lt;/i&gt; developing software should
&lt;a href=&quot;http://www.dwheeler.com/secure-programs&quot;&gt;learn how to develop &lt;i&gt;secure&lt;/i&gt; software&lt;/a&gt; (you might even get a raise!).
Here&amp;#8217;s how I connect those seemingly unconnected points.
&lt;/p&gt;

&lt;p&gt;
First, the award.
I received the &amp;#8220;outstanding adjunct faculty&amp;#8221; award from
&lt;a href=&quot;http://cs.gmu.edu/&quot;&gt;GMU&amp;#8217;s Department of Computer Science&lt;/a&gt;
on May 16, 2012.
This award is based on comments from both students and faculty.
Thank you!
Although it&amp;#8217;s not the only class I&amp;#8217;ve taught at GMU, I&amp;#8217;m
mainly known for teaching
&lt;a href=&quot;http://www.dwheeler.com/secure-programs&quot;&gt;Secure Software Design and Programming (SWE-781/ISA-681)&lt;/a&gt;.
It was this work, teaching SWE-781/ISA-681,
that was specifically cited in the award ceremony by
&lt;a href=&quot;http://www.cs.gmu.edu/~setia/&quot;&gt;Sanjeev Setia&lt;/a&gt;
(chairman of the Computer Science department).
&lt;/p&gt;

&lt;p&gt;
I have a passion about developing secure software.
I believe that today&amp;#8217;s software developers need to know how
to develop &lt;i&gt;secure&lt;/i&gt; software, because most of
today&amp;#8217;s programs routinely connect to a network or take data from one.
If you&amp;#8217;re a software developer, please consider taking a course
that teaches you how to develop secure software
(or take courses that embed that information in them).
If your college/university doesn&amp;#8217;t offer it,
tell them that they need such material.
And if you influence the selection of courses available at
a college/university, please convince them to add it!
I am delighted that George Mason University offers this course;
I believe it is important.
&lt;/p&gt;

&lt;p&gt;
Perhaps my favorite story from my class is that
&lt;b&gt;&lt;i&gt;one of my students got a raise at work&lt;/i&gt;&lt;/b&gt; by applying the
material he learned in class.
Another student
reported that he was asked at his work to present his school project
and to help organize an effort to raise software security awareness.
Here are some quotes from former students
(using their name when they said it was okay):
&lt;ol&gt;
&lt;li&gt;
&amp;#8220;&amp;#8230; GMU should&amp;#8230; make the course (or something like it) mandatory for all CS graduates.  Cyber threats are everywhere and becoming more numerous by the day.  Exploits of insecure code are causing millions of dollars in damage (especially to companies&amp;#8217; reputations).  Developers &amp;mdash; even those who work for companies where security is supposed to be a top priority (like where I work) &amp;mdash; are still not security-minded enough to avoid common pitfalls in either design or implementation.  At my job, I have been to a 2 or 3-day training that covered similar topics as this course.  All of the developers were supposed to go to this training.  However, due to the short time schedule, the training was far more limited than the class.  We were not able to go into too much depth on any of the topics&amp;#8230;
I continue to run into insecure coding practices in the real world&amp;#8230;  For example, numerous web sites will store passwords unencrypted and conveniently send it to you unencrypted over e-mail (not secure) when you register.  There are built-in libraries to make the passwords many times more secure in most web programming languages.  Developers are just not using them.
What we need is more security-focused developers.  The only way to get them is to train them.  One of the best ways to train them is when they are just starting out (i.e., in college).  Nearly all CS courses should emphasize the security aspects and implications of the algorithms and principles being taught.  All CS professors should be trained on a regular basis in secure coding principles so that they can adequately pass that knowledge on to their students.  If GMU doesn&amp;#8217;t do its part to help CS students learn how to be secure, we&amp;#8217;re going to continue to have too many security vulnerabilities that could have been avoided.&amp;#8221; - Carl Bohman
&lt;/li&gt;

&lt;li&gt;
&amp;#8220;I would like to thank you for giving me the opportunity to be one of your
students. By the end of your class, I was confident enough to go ahead with
my idea. I developed an Android application for file sharing over wireless
local area networks. Before taking the class, I had no idea what an SQL
injection was, but now all my database transactions are protected against
SQL injections. Also, I utilized what I have learned about SSL/TLS. I have
created my application with security in mind&amp;#8230;
Around two weeks ago, I published my application and so far, I have more
than 600 users on Google Play and SlideME&amp;#8230; have a look
at &lt;a href=&quot;http://wifizer.net&quot;&gt;WiFizer at http://wifizer.net&lt;/a&gt;&amp;#8230;&amp;#8221;
&lt;/li&gt;

&lt;li&gt;
&amp;#8220;Your class got me a raise at work&amp;#8230; I feel that your class has directly [led] to higher levels of reliability and security in some of our nation&amp;#8217;s voting systems all while assisting me in developing cost reduction methods&amp;#8230;
Understanding any complex software-driven system is obviously a tricky task. It is often difficult to understand what types of issues I should be looking for when performing source code review and reviewing test methods&amp;#8230;  Your practical input and answering questions (even staying late) helped many of my classmates&amp;#8230;
your class has a direct impact of many of my job functions. Not only that, the books and papers your assigned was not filler - all your books and papers are either well-known for their value in the Information Security/Assure community and/or highly praised on amazon by other leaders in the field like yourself&amp;#8230;  Your class is tied for first place with me (along with Angelos Stavarou&amp;#8217;s [OS Security Class])&amp;#8230; [you] made it exciting, useful, and approachable.&amp;#8221;
&lt;/li&gt;


&lt;li&gt;
&amp;#8220;I took up ISA681 in Fall 2011. And the effects are rewarding. I have
been working as a Research Assistant since and your stress on sanitizing
inputs has helped me not only on a security front but also to solve on
problems with data normalization which often happens with data collected
in the real world.  Thank you for the amazing learning experience.&amp;#8221;
&lt;/li&gt;

&lt;li&gt;
&amp;#8220;In general, your course has created an awareness about security in any piece of written code or while using third party libraries&amp;#8230;
[At work] we fixed a couple of persistent and non-persistent java_script injection attacks last year and your course work was fresh in my mind at that time&amp;#8230;  Some of the other things that we use are PreparedStatements for SQL. Since we code review all our commits, static analysis and some principles of software testing flow graphs have been pretty useful in finding defects while refactoring code&amp;#8230;  This course is definitely worth taking and the project was very interesting and fun. It helps us put into practice what we&amp;#8217;ve learned and we generally tend to remember projects more compared to lectures.&amp;#8221;
&lt;/li&gt;

&lt;li&gt;
&amp;#8220;This course helped me understand that security must be built in from
the start not added on later. By understanding what kinds of
programming errors can expose security vulnerabilities, I am better
able to write code that is more secure. I also learned a lot about
testing and how &amp;#8220;bad people&amp;#8221; find vulnerabilities and use them to
steal. I actually think this class should be included as a core course
for SWE, CS and INFS. And a version of it should be required for
undergrads as well. By having this class as an elective, I&amp;#8217;m not sure
how many students take it&amp;#8230;&amp;#8221; - Leslie Jeffries
&lt;/li&gt;


&lt;li&gt;
&amp;#8220;I really enjoyed your class and it has helped me on my current job quite a bit. I work in a classified environment and although we run our production system isolated from [the] internet the security of our system is still highly valued. Since your class I have been able to decrease the vulnerability of the code I write as well as make more valuable contributions to code reviews. My level of knowledge in secure coding is much deeper than it was prior to your class. I also feel I am more security conscious than many of my peers.
Outside of my day job, I&amp;#8217;ve also spent the last couple of years working on a prototype that I plan to build a company around. The nature of this product is deeply rooted in many of the topics we discussed in your class and I still review your course materials frequently.
[The class] was among the top few classes in all of my MS studies.&amp;#8221;
&lt;/li&gt;

&lt;li&gt;
&amp;#8220;[I&amp;#8217;m] looking for work [and] in my interviews I often
get a chance to talk about the group project which I participated in for
your class and how we included features in our design which made it more
secure.  I must have learned something relevant because some of the
interviewers seemed to know what I was talking about&amp;#8230;
I think that the size of our class should convince you and others that the
course is worth teaching&amp;#8230;&amp;#8221; - Daniel Ryan
&lt;/li&gt;
&lt;li&gt;
&amp;#8220;I work for a government agency as a security analyst and my team and I perform static code analysis to identify vulnerabilities in software developed in house before they are sent into production. The most challenging part of our job is educating developers about vulnerabilities and the potential damage they could do in case they were exploited by an attacker.&amp;#8221;
&lt;/li&gt;
&lt;li&gt;
&amp;#8220;This was indeed a very good learning experience for me. And I promise I will apply security features in all my work as a software professional!&amp;#8221;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/p&gt;

&lt;p&gt;
I hope these reports will convince you that anyone developing software
should learn how to developing &lt;i&gt;secure&lt;/i&gt; software &amp;mdash;
such as by taking a course like this.
People are reporting that this course &lt;i&gt;was really valuable&lt;/i&gt;, and
in some sense, I am receiving an award because this material is
directly useful and important.
If you&amp;#8217;re at GMU, or considering it, by all means take my class!
And again, if you influence the courses taught at a college or university,
please make sure that they teach how to develop secure software in some way.
The knowledge of how to make more secure programs exists;
now we need to share it with the people who need it.
&lt;/p&gt;
 
&lt;p&gt;
Oh, and
here is the certificate &amp;mdash; my thanks to everyone who recommended me.
&lt;br/&gt;
&lt;a href=&quot;http://www.dwheeler.com/images/outstanding-adjunct-david-wheeler.jpg&quot;&gt;&lt;img src=&quot;http://www.dwheeler.com/images/outstanding-adjunct-david-wheeler.jpg&quot; width=&quot;550&quot; height=&quot;424&quot;&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>The magic cookie parable</title>
    <link>http://www.dwheeler.com/blog/2012/04/15#magic-cookie-parable</link>
    <pubDate>Sun, 15 Apr 2012 09:18 GMT</pubDate>
    <!-- date: 2012-04-15 -->
    <description>
&lt;p&gt;
&lt;img src=&quot;http://www.dwheeler.com/images/Choco_chip_cookie.png&quot; align=&quot;left&quot;&gt; &lt;/img&gt;
&lt;i&gt;
In some
&lt;a href=&quot;http://www.dwheeler.com/essays/dod-oss.pdf&quot;&gt;presentations&lt;/a&gt; I
include the &amp;#8220;magic cookie parable&amp;#8221;.
Here is the parable, for those who have not heard it
(I usually hold a cookie in my hand when I present it).
Anyway&amp;#8230;
&lt;/i&gt;
&lt;/p&gt;

&lt;div style=&quot;color:#6600CC ; font-size: 120%&quot;&gt;
&lt;p&gt;
I have in my hand&amp;#8230; a magic cookie!
Just one cookie will supply all your food needs for a whole year.
What is more, the first one is only $1.
Imagine how much money you will save!
Imagine how much time you will save!
&lt;/p&gt;

&lt;p&gt;
Ah, but there&amp;#8217;s a catch.
Once you eat the magic cookie, you can &lt;i&gt;only&lt;/i&gt; eat
magic cookies, as all other food will become poisonous to you.
What&amp;#8217;s more, there is only one manufacturer of magic cookies.
&lt;/p&gt;

&lt;p&gt;
Do you think the cookie will be $1 next year?
How about for the rest of your life?
Are you as eager to eat the cookie?
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Is that a silly parable?
It should be.
Yet many people accept information technology (IT),
for themselves or on behalf of
their organizations, that are fundamentally magic cookies.
Too many are blinded into accepting technology that makes them, or their
organization, completely at the mercy of a single supplier.
You can call dependence on single supplier a security problem,
or a supply chain problem, or a support problem, or many other things.
But no matter what you call it, it is a serious problem.
&lt;/p&gt;

&lt;p&gt;
Now please do not hear what I am not saying.
I am not here to attack any particular supplier.
In fact, we all need suppliers, and
I am grateful for suppliers!
The problem is not the existence of suppliers; the problem is
excessive dependency on any one supplier.
&lt;/p&gt;

&lt;p&gt;
There are only a few information technology (IT)
strategies that counter sole-supplier dependency that I know of:
&lt;ol&gt;
&lt;li&gt;Build and control it yourself.
In a few cases this is reasonable, but in most cases, that is too expensive
and it risks obsolescence.&lt;/li&gt;
&lt;li&gt;Open systems/open standards.  Here, you ensure that your system is
made of modular parts with key interfaces covered by standards;
that way, you can later switch to a different product.
This can work, but suppliers may create
proprietary extensions that (if you are not careful) lock you in anyway.
&lt;/li&gt;Open source software.
Since open source software allows anyone to modify and
redistribute the software, if a supplier goes in a direction you did not like,
you can band together with other customers to ensure a supply of software
that meets your needs.
&lt;/li&gt;
&lt;li&gt;A Combination.  That is, a combination of the above.&lt;/li&gt;
&lt;/ol&gt;
&lt;/p&gt;
&lt;p&gt;
Before getting locked into a single supplier, count the true cost
over the entire time it will occur.
Sure, in some cases, it may be worth it anyway.
But you may find that this true cost is far higher than you are willing to pay.
(The cookie image is by Bob Smith, released under
the CC Attribution 2.5 license.  Thank you!)
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>DoD Open Source Software (OSS) Pages Moved</title>
    <link>http://www.dwheeler.com/blog/2012/04/05#dod-oss-moved-2012</link>
    <pubDate>Thu, 05 Apr 2012 16:33 GMT</pubDate>
    <!-- date: 2012-04-05 -->
    <description>
&lt;p&gt;
The US Department of Defense (DoD) has changed the URLs for some of
its information on Open Source Software (OSS).
Unfortunately, there are currently no redirects, and that
makes them hard to find (sigh).
Here are new links, if you want them.
&lt;/p&gt;
&lt;p&gt;
A good place to start is the
&lt;a href=&quot;http://dodcio.defense.gov/Home/Topics/UseofFreeOpenSourceSoftwareFOSS.aspx&quot;&gt;Department of Defense (DoD)
Free Open Source Software (FOSS)
Community of Interest page,
hosted by the DoD Chief Information Officer (CIO)&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
From that page, you can reach:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://dodcio.defense.gov/Portals/0/Documents/FOSS/2009OSS.pdf&quot;&gt;Clarifying Guidance Regarding Open Source Software (OSS)
    Memorandum by David M. Wennergren, 16 October 2009&lt;/a&gt; - this is the overall DoD policy on OSS
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://dodcio.defense.gov/Portals/0/Documents/FOSS/OTD-lessons-learned-military-signed.pdf&quot;&gt;Open Technology Development (OTD): Lessons Learned &amp;amp; Best Practices for Military Software - OSD Report, May 2011&lt;/a&gt; - this is guidance on how to develop and use OSS
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://dodcio.defense.gov/OpenSourceSoftwareFAQ.aspx&quot; title=&quot;DoD Open Source Software Frequently Asked Questions (DoD OSS FAQ)&quot;&gt;DoD Open Source Software (OSS) Frequently Asked Questions (FAQ)&lt;/a&gt; - this has lots of answers to questions about OSS, focusing on DoD issues
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://dodcio.defense.gov/Portals/0/Documents/FOSS/dodfoss_pdf.pdf&quot;&gt;Use of Free and Open-Source Software (FOSS) in the U.S. Department of Defense - 2003 Study by MITRE Corporation performed for DoD&lt;/a&gt; - a report by MITRE&amp;#8217;s Terry Bollinger showing that the DoD was already using OSS widely in 2002-2003.  Funny fact: In the Acknowledgements page, I am listed second.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;p&gt;
If you are interested in the topic of DoD and OSS, you might also be
interested in the
&lt;a href=&quot;http://www.mil-oss.org/&quot;&gt;Military Open Source Software (Mil-OSS)&lt;/a&gt;
group, which is not a government organization, but is an
active community.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Insecure open source software libraries?</title>
    <link>http://www.dwheeler.com/blog/2012/04/03#insecure-libraries</link>
    <pubDate>Tue, 03 Apr 2012 14:00 GMT</pubDate>
    <!-- date: 2012-04-03 -->
    <description>
&lt;p&gt;
The news is abuzz about a new report,
&lt;a href=&quot;https://www.aspectsecurity.com/blog/the-unfortunate-reality-of-insecure-libraries/&quot;&gt;&amp;#8220;The Unfortunate Reality of Insecure Libraries&amp;#8221; (by Aspect Security, in partnership with Sonatype)&lt;/a&gt;.
Some news articles about it, like
&lt;a href=&quot;http://www.networkworld.com/news/2012/032612-open-source-vulnerabilities-257645.html&quot;&gt;Open source code libraries seen as rife with vulnerabilities (Network World)&lt;/a&gt;
make it sound like open source software (OSS) is especially bad.
(To be fair, they do not literally say that, but many readers might
infer it.)
&lt;/p&gt;
&lt;p&gt;
However, if you look at the report, you see something quite different.
The report directly states that,
&amp;#8220;This paper is not a critique of open source libraries,
and we caution against interpreting this analysis as such.&amp;#8221;
They only examined open source Java libraries,
but their &amp;#8220;experience in evaluating
the security of hundreds of custom applications indicates that the
findings are likely to apply to closed-source and commercial libraries
as well.&amp;#8221;
&lt;/p&gt;
&lt;p&gt;
This is a valuable report, because it points out a general problem
&lt;i&gt;not&lt;/i&gt; specific to OSS.
&lt;/p&gt;
&lt;p&gt;
The problem is that
&lt;b&gt;software libraries (OSS or not)
are not being adequately managed, leading to a vast
number of vulnerabilities&lt;/b&gt;.
For example, the report states that
&amp;#8220;The data show that most organizations do not appear to have a strong process in place for ensuring
that the libraries they rely upon are up-to-date and free from known vulnerabilities.&amp;#8221;
They point out that
&amp;#8220;development teams readily acknowledge, often with some level of embarrassment,
that they make no efforts to keep their libraries up-to-date.&amp;#8221;
They also note that
&amp;#8220;Organizations download many old versions of libraries&amp;#8230;
If people were updating their libraries, we would have expected the popularity of older libraries to drop to zero within the first two years. However, the data clearly show popularity extending back over six years&amp;#8230;.
The continuing popularity of libraries for extended months suggests
that incremental releases of legacy applications are not being updated
to use the latest versions of libraries but are continuing to
use older versions.&amp;#8221;
They recommend that software development organizations inventory,
analyze, control, and monitor their libraries, and give details on each point.
&lt;/p&gt;
&lt;p&gt;
I should note that I&amp;#8217;ve been saying some of these things for years.
For years I have said that you should
&lt;a href=&quot;http://www.dwheeler.com/oss_fs_eval.html&quot;&gt;evaluate OSS before
you use it&lt;/a&gt;&amp;#8230; some software is better than others.
Back in 2008 I also urged
&lt;a href=&quot;http://www.dwheeler.com/blog/2008/09/19/&quot;&gt;developers to
use system libraries&lt;/a&gt;, at least as an option;
embedding libraries often leads over time to the use of old (and vulnerable)
libraries.
An advantage of OSS is that many people can review the software,
find problems (including vulnerabilities), and fix them&amp;#8230;
but this advantage is lost if the fixed versions are not used!
And of course, if you develop software, you need to learn
&lt;a href=&quot;http://www.dwheeler.com/secure-programs/index.html&quot;&gt;how to
develop secure software&lt;/a&gt;.
As the report notes, tools can be useful
(I give away &lt;a href=&quot;http://www.dwheeler.com/flawfinder/&quot;&gt;flawfinder&lt;/a&gt;),
but tools cannot replace human knowledge and human review.
&lt;/p&gt;
&lt;p&gt;
For more information, you should see their actual report,
&lt;a href=&quot;https://www.aspectsecurity.com/blog/the-unfortunate-reality-of-insecure-libraries/&quot;&gt;&amp;#8220;The Unfortunate Reality of Insecure Libraries&amp;#8221; (by Aspect Security)&lt;/a&gt;.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Software patents may silence little girl</title>
    <link>http://www.dwheeler.com/blog/2012/03/26#software-patents-silence-little-girl</link>
    <pubDate>Mon, 26 Mar 2012 01:22 GMT</pubDate>
    <!-- date: 2012-03-26 -->
    <description>
&lt;p&gt;
Software patents are hurting the world, but the damage they do
is often hard to explain and see.
&lt;/p&gt;
&lt;p&gt;
But 
&lt;a href=&quot;http://niederfamily.blogspot.com/2012/03/goliath-v-david-aac-style.html&quot;&gt;Dana Nieder&amp;#8217;s post &amp;#8220;Goliath v. David, AAC style&amp;#8221;&lt;/a&gt;
has put a face on the invisible scourge of software patents.
As she puts it, a software patent has put her
&amp;#8220;daughter&amp;#8217;s voice on the line.  Literally.
My daughter, Maya, will turn four in May and she can&amp;#8217;t speak.&amp;#8221;
After many tries, the parents found a solution: A simple iPad application
called &amp;#8220;Speak for Yourself&amp;#8221; that
implements &amp;#8220;augmentative and alternative communication&amp;#8221; (AAC).
Dana Nieder said,
&amp;#8220;My kid is learning how to &amp;#8216;talk.&amp;#8217;  It&amp;#8217;s breathtaking.&amp;#8221;
&lt;/p&gt;
&lt;p&gt;
But now Speak for Yourself is being sued by a big company,
Semantic Compaction Systems and Prentke Romich Company (SCS/PRC),
who claims that the smaller Speak for Yourself
is infringing SCS/PRC&amp;#8217;s patents.
If SCS/PRC wins their case, the likely outcome is that these small apps
will completely disappear, eliminating the voice of countless children.
The reason is simple: Money.
SCS/PRC can make $9,000 by selling their one of their
devices, so they have every incentive to eliminate
software applications that cost only a few hundred dollars.
Maya cannot even use the $9,000 device, and even if she could, it would be
an incredible hardship on a Bronx family with income from a single
6th grade math teacher.
In short, if SCS/PRC wins, they will take away the voice of this
little girl, who is not yet even four, as well as countless others.
&lt;/p&gt;
&lt;p&gt;
I took a quick look at the
&lt;a href=&quot;http://www.scribd.com/priorsmart/d/83475314-Semantic-Compaction-Systems-et-al-v-Speak-For-Yourself-et-al&quot;&gt;
complaint,
Semantic Compaction Systems, Inc. and Prentke Romich Company,
v.
Speak for Yourself LLC; Renee Collender, an individual; and Heidi
Lostracco, an individual&lt;/a&gt;, and it is horrifying at several levels.
Point 16 says that the key &amp;#8220;invention&amp;#8221; is this
misleadingly complicated paragraph:
&amp;#8220;A dynamic keyboard includes a plurality of keys, each with an
associated symbol, which are dynamically redefinable to provide
access to higher level keyboards. Based on sequenced symbols of
keys sequentially activated, certain dynamic categories and
subcategories can be accessed and keys corresponding thereto
dynamically redefined. Dynamically redefined keys can include
embellished symbols and/or newly displayed symbols. These
dynamically redefined keys can then provide the user with the
ability to easily access both core and fringe vocabulary words in a
speech synthesis system.&amp;#8221;
&lt;/p&gt;
&lt;p&gt;
Strip away the gobbledygook, and this is a patent for using pictures
as menus and sub-menus.
This is breathtakingly obvious, and was obvious long before this was patented.
Indeed, it would have been obvious to most non-computer people.
But this is the problem with many software patents; once
software patents were allowed (for many years they were not, and they
are still not allowed in many countries),
it&amp;#8217;s hard to figure out where to end.
&lt;/p&gt;
&lt;p&gt;
One slight hope is that there is finally some effort to curb the
worst abuses of the patent system.  The
&lt;a href=&quot;http://www.supremecourt.gov/opinions/11pdf/10-1150.pdf&quot;&gt;Supreme Court decided on March 20, 2012, in Mayo v. Prometheus&lt;/a&gt;, 
that a patent must do more than simply state
some law of nature and add the words &amp;#8220;apply it.&amp;#8221;
This was a unanimous decision by the U.S. Supreme Court,
remarkable and unusual in itself.
You would think this would be obvious, but believe it or not, the
lower court actually thought this was fine.
We&amp;#8217;ve gone through years where just about anything can be patented.
By allowing software patents and business patents, the patent and trade office
has become swamped with patent applications, often for obvious or
already-implemented ideas.
Other countries do not allow such abuse, by simply not allowing these
kinds of patents in the first place, giving them time to review the rest.
See my
&lt;a href=&quot;http://www.dwheeler.com/essays/software-patents.html&quot;&gt;discussion
about software patents&lt;/a&gt; for more.
&lt;/p&gt;
&lt;p&gt;
My hope is that these patents are struck down, so that this 3-year-old
girl will be allowed to keep her voice.
Even better, let&amp;#8217;s strike down all the software patents;
that would give voice to millions.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Introduction to the autotools (autoconf, automake, libtool)</title>
    <link>http://www.dwheeler.com/blog/2012/03/19#introduction-autotools</link>
    <pubDate>Mon, 19 Mar 2012 00:01 GMT</pubDate>
    <!-- date: 2012-03-19 -->
    <description>
&lt;p&gt;
I&amp;#8217;ve recently posted a
&lt;a href=&quot;http://www.dwheeler.com/autotools&quot;&gt;video titled
&amp;#8220;Introduction to the autotools (autoconf, automake, and libtool)&amp;#8221;&lt;/a&gt;.
If you develop software, you might find this video useful.
So, here&amp;#8217;s a little background on it, for those who are interested.
&lt;/p&gt;

&lt;p&gt;
The &amp;#8220;autotools&amp;#8221; are a set of programs
for software developers that include at least autoconf, automake, and libtool.
The autotools make it easier to create or
distribute source code that (1) portably and automatically builds, (2)
&lt;a href=&quot;http://www.dwheeler.com/essays/releasing-floss-software.html&quot;&gt;follows
common build conventions (such as DESTDIR)&lt;/a&gt;, and (3)
provides automated dependency generation if you&amp;#8217;re using C or C++.
They&amp;#8217;re primarily intended for Unix-like systems, but
they can be used to build programs for Microsoft Windows too.
&lt;/p&gt;

&lt;p&gt;
The autotools are &lt;i&gt;not&lt;/i&gt; the only way to create source code releases
that are easily built and packaged.
Common and reasonable alternatives,
depending on your circumstances, include Cmake, Apache Ant, and Apache Maven.
But the autotools are one of the most widely-used such tools, especially
for programs that use C or C++ (though they&amp;#8217;re not limited to that).
Even if you choose to not use them for projects you control, if you are a
software developer, you are likely to encounter
the autotools in programs you use or might want to modify.
&lt;/p&gt;

&lt;p&gt;
Years ago, the autotools were hard for developers to use and they
had lousy documentation.
The autotools &lt;i&gt;have&lt;/i&gt; significantly improved over the years.
Unfortunately, there&amp;#8217;s a lot of really obsolete documentation,
along with a lot of obsolete complaints about autotools, and it&amp;#8217;s
a little hard to get started with them (in part due to all this
obsolete documentation).
&lt;/p&gt;

&lt;p&gt;
So, I have created a little video introduction at
&lt;a href=&quot;http://www.dwheeler.com/autotools&quot;&gt;http://www.dwheeler.com/autotools&lt;/a&gt; that I hope will give people a hand.
You can also view the video via YouTube (I had to split it into parts) as
&lt;a href=&quot;http://youtu.be/4q_inV9M_us&quot;&gt;Introduction to the autotools, part 1&lt;/a&gt;,
&lt;a href=&quot;http://youtu.be/tku2h_fPxhc&quot;&gt;Introduction to the autotools, part 2&lt;/a&gt;, and
&lt;a href=&quot;http://youtu.be/e-uYBb554LU&quot;&gt;Introduction to the autotools, part 3&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
The entire video was created using free/libre / open source software
(FLOSS) tools. I am releasing it in the royalty-free webm video format,
under the Creative Commons CC-BY-SA license.
I am posting it to my personal site using the HTML5 video tag, which should
make it easy to use.
Firefox and Chrome users can see it immediately; IE9 users can see it once
they install a free webm driver.
I tried to make sure that the audio was more than loud enough to hear,
the terminal text was large enough to read, and that the quality of both
is high; a video that cannot be seen or heard is rediculous.
&lt;/p&gt;

&lt;p&gt;
This video tutorial emphasizes how to use the various autotools pieces
together, instead of treating them as independent components,
since that&amp;#8217;s how most people will want to use them.
I used a combination of slides (with some animations) and the command line
to help make it clear.
I even walk through some examples, showing how to do some things step by step
(including using git with the autotools).
This tutorial gives simple quoting rules that will prevent lots of mistakes,
explains how to correctly create the &amp;#8220;m4&amp;#8221; subdirectory
(which is recommended but not fully explained in many places), and
discusses why and how to use a non-recursive make.
It is merely an introduction, but hopefully it will be enough to help
people get started if they want to use the autotools.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Debian GNU/Linux = $19 billion</title>
    <link>http://www.dwheeler.com/blog/2012/02/14#nineteen-billion-debian-linux</link>
    <pubDate>Tue, 14 Feb 2012 17:53 GMT</pubDate>
    <!-- date: 2012-02-14 -->
    <description>
&lt;p&gt;
Debian developer James Bromberger recently posted the interesting
&lt;a href=&quot;http://blog.james.rcpt.to/2012/02/13/debian-wheezy-us19-billion-your-pr
ice-free/&quot;&gt;&amp;#8221;Debian Wheezy: US$19 Billion. Your price… FREE!&amp;#8221;&lt;/a&gt;,
where he explains why the newest Debian distribution
(&amp;#8220;Wheezy&amp;#8221;) would have taken $19 billion U.S. dollars to develop if it
had been developed as proprietary software.
This post was picked up in the news article
&lt;a href=&quot;http://www.itnews.com.au/News/290236,perth-coder-finds-new-debian-worth-18-billion.aspx&quot;&gt;&amp;#8221;Perth coder finds new Debian &amp;#8216;worth&amp;#8217; $18 billion&amp;#8221; (by Liam Tung, IT News, February 14, 2012)&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
You can view this as an update of my
&lt;a href=&quot;http://www.dwheeler.com/sloc/&quot;&gt;More than a Gigabuck: Estimating GNU/Linux&amp;#8217;s Size&lt;/a&gt;, since it uses my approach and even uses my tool
&lt;a href=&quot;http://www.dwheeler.com/sloccount&quot;&gt;sloccount&lt;/a&gt;.
Anyone who says &amp;#8220;open source software can&amp;#8217;t scale to large systems&amp;#8221;
clearly isn&amp;#8217;t paying attention.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>New Hampshire: Open source, open standards, open data</title>
    <link>http://www.dwheeler.com/blog/2012/02/06#new-hampshire</link>
    <pubDate>Mon, 06 Feb 2012 01:05 GMT</pubDate>
    <!-- date: 2012-02-06 -->
    <description>
&lt;p&gt;
The U.S. state of New Hampshire just passed act &lt;a href=&quot;http://www.nhliberty.org/bills/view/2012/HB418&quot;&gt;HB418 (2012)&lt;/a&gt;, which requires state agencies to consider open source software, promotes the use of open data formats, and requires the commissioner of information technology (IT) to develop an open government data policy.
&lt;a href=&quot;http://yro.slashdot.org/story/12/02/04/2259227/new-hampshire-passes-open-source-bill&quot;&gt;Slashdot has a posted discussion about it&lt;/a&gt;.
This looks really great, and it looks like a bill
that other states might want to emulate.
My congrats go to
&lt;a href=&quot;http://yro.slashdot.org/comments.pl?sid=2654797&amp;cid=38931519&quot;&gt;Seth Cohn&lt;/a&gt; (the primary author) and the many others who made this happen.
In this post I&amp;#8217;ll walk through some of its key points on
open source software, open standards for data formats,
and open government data.
&lt;/p&gt;

&lt;p&gt;
First, here&amp;#8217;s what it says about open source software (OSS):
&amp;#8220;For all software acquisitions, each state agency&amp;#8230; shall&amp;#8230; Consider whether proprietary or open source software offers the most cost effective software solution for the agency, based on consideration of all associated acquisition, support, maintenance, and training costs&amp;#8230;&amp;#8221;.
Notice that this law does not mandate that the state government
&lt;i&gt;must&lt;/i&gt; always use OSS.
Instead, it simply requires government agencies to &lt;i&gt;consider&lt;/i&gt; OSS.
You&amp;#8217;d think this would be useless, but you&amp;#8217;d be wrong.
Fairly considering OSS is still remarkably hard to do
in many government agencies,
so having a law or regulation clearly declare this is very valuable.
Yes, closed-minded people can claim they &amp;#8220;considered&amp;#8221; OSS and paper over
their biases, but laws like this make it easier for OSS to get a fair hearing.
The law defines &amp;#8220;open source software&amp;#8221; (OSS) in a way consistent
with its usual technical definition, indeed, this law&amp;#8217;s definition
looks a lot like the free software definition.
That&amp;#8217;s a good thing; the impact of laws and regulations is often
controlled by their definitions, so having good definitions (like this one
for OSS) is really important.
Here&amp;#8217;s the New Hampshire definition of OSS, which I think is a good one:
&lt;ol type=&quot;a&quot;&gt;
&lt;li&gt;&amp;#8221;Unrestricted use of the software for any purpose;&lt;/li&gt;
&lt;li&gt;Unrestricted access to the respective source code;&lt;/li&gt;
&lt;li&gt;Exhaustive inspection of the working mechanisms of the software;&lt;/li&gt;
&lt;li&gt;Use of the internal mechanisms and arbitrary portions of the software, to adapt them to the needs of the user;&lt;/li&gt;
&lt;li&gt;Freedom to make and distribute copies of the software; and&lt;/li&gt;
&lt;li&gt;Modification of the software and freedom to distribute modifications of the new resulting software, under the same license as the original software.&amp;#8221;&lt;/li&gt;
&lt;/ol&gt;
&lt;/p&gt;

&lt;p&gt;
The material on open standards for data says,
&amp;#8220;The commissioner shall assist state agencies in the purchase or creation of data processing devices or systems that comply with open standards for the accessing, storing, or transferring of data&amp;#8230;&amp;#8221;
The definition is interesting, too; it defines an &amp;#8220;open standard&amp;#8221; as
a specification &amp;#8220;for the encoding and transfer of computer data&amp;#8221; 
that meets a long list of requirements, including that it is
&amp;#8220;Is free for all to implement and use in perpetuity, with no royalty or fee&amp;#8221;
and that it
&amp;#8220;Has no restrictions on the use of data stored in the format&amp;#8221;.
The list is actually much longer; it&amp;#8217;s clear that the authors were trying to
counter common vendor tricks who try to create &amp;#8220;open&amp;#8221; standards that
really aren&amp;#8217;t.
I think it would have been great if they had adopted the more stringent
&lt;a href=&quot;http://www.digistan.org/open-standard:definition&quot;&gt;Digistan
definition of open standard&lt;/a&gt;, but this is still a great step forward.
&lt;/p&gt;

&lt;p&gt;
Finally, it talks about open government data, e.g., it requires that
&amp;#8220;The commissioner shall develop a statewide information policy based on the following principles of open government data&amp;#8221;.
This may be one of the most important parts of the bill,
because it establishes these as the open data principles:
&lt;ol type=&quot;a&quot;&gt;
&lt;li&gt;&amp;#8221;Complete. All public data is made available, unless subject to valid privacy, security, or privilege limitations.&lt;/li&gt;
&lt;li&gt;Primary. Data is collected at the source, with the highest possible level of granularity, rather than in aggregate or modified forms.&lt;/li&gt;
&lt;li&gt;Timely. Data is made available as quickly as necessary to preserve the value of the data.&lt;/li&gt;
&lt;li&gt;Accessible. Data is available to the widest range of users for the widest range of purposes.&lt;/li&gt;
&lt;li&gt;Machine processable. Data is reasonably structured to allow automated processing.&lt;/li&gt;
&lt;li&gt;Nondiscriminatory. Data is available to anyone, with no requirement of registration.&lt;/li&gt;
&lt;li&gt;Nonproprietary. Data is available in a format over which no entity has exclusive control, with the exception of national or international published standards.&lt;/li&gt;
&lt;li&gt;License-free. Data is not subject to any copyright, patent, trademark, or trade secret regulation. Reasonable privacy, security, and privilege restrictions may be allowed.&amp;#8221;&lt;/li&gt;
&lt;/ol&gt;
&lt;/p&gt;

&lt;p&gt;
The official motto of the U.S. state of New Hampshire
is &amp;#8220;Live Free or Die&amp;#8221;.
Looks like they truly do mean to live free.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Website back up</title>
    <link>http://www.dwheeler.com/blog/2012/01/20#website-back-up</link>
    <pubDate>Fri, 20 Jan 2012 18:27 GMT</pubDate>
    <!-- date: 2012-01-20 -->
    <description>
&lt;p&gt;
This website (www.dwheeler.com) was down part of the day yesterday due to a
mistake made by my web hosting company. Sorry about that.
It&amp;#8217;s back up, obviously.
&lt;/p&gt;
&lt;p&gt;
For those who are curious what happened, here&amp;#8217;s the scoop.
My hosting provider (WebHostGiant) moved my site to a new improved computer.
By itself, that&amp;#8217;s great.
That new computer has a different IP address
(the old one was 207.55.250.19, the new one is 208.86.184.80).
That&amp;#8217;d be fine too, except they didn&amp;#8217;t tell me that they were changing
my site&amp;#8217;s IP address, nor did they forward the old IP address.
The mistake is that the web hosting company should have notified me
of this change, ahead of time, but they failed to do so.
As a result, I didn&amp;#8217;t change my site&amp;#8217;s DNS entries (which I control)
to point to its new location;
I didn&amp;#8217;t even know that I should, or what the new values would be.
My provider didn&amp;#8217;t even warn me ahead of time that anything like
this was going to happen&amp;#8230; if they had,
I could have at least changed the DNS timeouts so the changeover would have
been quick.
&lt;/p&gt;
&lt;p&gt;
Now to their credit, once I put in a trouble ticket (#350465),
Alex Prokhorenko (of WebhostGIANT Support Services)
responded promptly, and explained what happened so clearly that it
was easy for me to fix things.
I appreciate that they&amp;#8217;re upgrading the server hardware,
I understand that IP addresses sometimes much change, and
I appreciate their low prices.
In fact, I&amp;#8217;ve been generally happy with them.
&lt;/p&gt;
&lt;p&gt;
But if you&amp;#8217;re a hosting provider, you need to &lt;i&gt;tell the customer&lt;/i&gt;
if some change you make will make your customer&amp;#8217;s entire site unavailable
without the customer taking some action!
A simple email ahead-of-time would have eliminated the whole problem.
&lt;/p&gt;

&lt;p&gt;
Grumble grumble.
&lt;/p&gt;

&lt;p&gt;
I did post a rant against SOPA and PIPA the day before, but I&amp;#8217;m quite
confident that this outage was unrelated.
&lt;/p&gt;

&lt;p&gt;
Anyway, I&amp;#8217;m back up.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Stop SOPA and PIPA</title>
    <link>http://www.dwheeler.com/blog/2012/01/18#stop-sopa-pipa</link>
    <pubDate>Wed, 18 Jan 2012 10:06 GMT</pubDate>
    <!-- date: 2012-01-18 -->
    <description>
&lt;p&gt;
Please protest the proposed STOP (Stop Online Piracy Act) and
PIPA (PROTECT IP Act).
&lt;a href=&quot;http://blog.wikimedia.org/2012/01/16/wikipedias-community-calls-for-anti-sopa-blackout-january-18/&quot;&gt;The English Wikipedia is blacked out today&lt;/a&gt;,
and many other websites (like Google)
are trying to awareness of these hideous proposed laws.
&lt;a href=&quot;https://www.eff.org/deeplinks/2012/01/how-pipa-and-sopa-violate-white-house-principles-supporting-free-speech&quot;&gt;The EFF has more information about PIPA and SOPA&lt;/a&gt;.
Yes, the U.S. House has temporarily suspended its work, but that is just
temporary; it needs to be clear that such egregious laws must never
be accepted.
&lt;/p&gt;
&lt;p&gt;
Wikimedia Foundation board member Kat Walsh puts it very well:
&amp;#8220;We [the Wikimedia Foundation and its project participants] depend on a legal infrastructure that makes it possible for us to operate. And we depend on a legal infrastructure that also allows other sites to host user-contributed material, both information and expression. For the most part, Wikimedia projects are organizing and summarizing and collecting the world&amp;#8217;s knowledge. We&amp;#8217;re putting it in context, and showing people how to make sense of it.
But that knowledge has to be published somewhere for anyone to find and use it. Where it can be censored without due process, it hurts the speaker, the public, and Wikimedia. Where you can only speak if you have sufficient resources to fight legal challenges, or, if your views are pre-approved by someone who does, the same narrow set of ideas already popular will continue to be all anyone has meaningful access to.&amp;#8221;
&lt;/p&gt;
</description>
   </item>
  </channel>
</rss>