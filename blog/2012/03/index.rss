<?xml version="1.0"?>
<!-- name="generator" content="blosxom/2.0" -->

<rss version="2.0">
  <channel>
    <title>David A. Wheeler's Blog   </title>
    <link>http://www.dwheeler.com/blog</link>
    <description>David A. Wheeler's weblog.</description>
    <language>en</language>

  <item>
    <title>Software patents may silence little girl</title>
    <link>http://www.dwheeler.com/blog/2012/03/26#software-patents-silence-little-girl</link>
    <pubDate>Mon, 26 Mar 2012 01:22 GMT</pubDate>
    <!-- date: 2012-03-26 -->
    <description>
&lt;p&gt;
Software patents are hurting the world, but the damage they do
is often hard to explain and see.
&lt;/p&gt;
&lt;p&gt;
But 
&lt;a href=&quot;http://niederfamily.blogspot.com/2012/03/goliath-v-david-aac-style.html&quot;&gt;Dana Nieder&amp;#8217;s post &amp;#8220;Goliath v. David, AAC style&amp;#8221;&lt;/a&gt;
has put a face on the invisible scourge of software patents.
As she puts it, a software patent has put her
&amp;#8220;daughter&amp;#8217;s voice on the line.  Literally.
My daughter, Maya, will turn four in May and she can&amp;#8217;t speak.&amp;#8221;
After many tries, the parents found a solution: A simple iPad application
called &amp;#8220;Speak for Yourself&amp;#8221; that
implements &amp;#8220;augmentative and alternative communication&amp;#8221; (AAC).
Dana Nieder said,
&amp;#8220;My kid is learning how to &amp;#8216;talk.&amp;#8217;  It&amp;#8217;s breathtaking.&amp;#8221;
&lt;/p&gt;
&lt;p&gt;
But now Speak for Yourself is being sued by a big company,
Semantic Compaction Systems and Prentke Romich Company (SCS/PRC),
who claims that the smaller Speak for Yourself
is infringing SCS/PRC&amp;#8217;s patents.
If SCS/PRC wins their case, the likely outcome is that these small apps
will completely disappear, eliminating the voice of countless children.
The reason is simple: Money.
SCS/PRC can make $9,000 by selling their one of their
devices, so they have every incentive to eliminate
software applications that cost only a few hundred dollars.
Maya cannot even use the $9,000 device, and even if she could, it would be
an incredible hardship on a Bronx family with income from a single
6th grade math teacher.
In short, if SCS/PRC wins, they will take away the voice of this
little girl, who is not yet even four, as well as countless others.
&lt;/p&gt;
&lt;p&gt;
I took a quick look at the
&lt;a href=&quot;http://www.scribd.com/priorsmart/d/83475314-Semantic-Compaction-Systems-et-al-v-Speak-For-Yourself-et-al&quot;&gt;
complaint,
Semantic Compaction Systems, Inc. and Prentke Romich Company,
v.
Speak for Yourself LLC; Renee Collender, an individual; and Heidi
Lostracco, an individual&lt;/a&gt;, and it is horrifying at several levels.
Point 16 says that the key &amp;#8220;invention&amp;#8221; is this
misleadingly complicated paragraph:
&amp;#8220;A dynamic keyboard includes a plurality of keys, each with an
associated symbol, which are dynamically redefinable to provide
access to higher level keyboards. Based on sequenced symbols of
keys sequentially activated, certain dynamic categories and
subcategories can be accessed and keys corresponding thereto
dynamically redefined. Dynamically redefined keys can include
embellished symbols and/or newly displayed symbols. These
dynamically redefined keys can then provide the user with the
ability to easily access both core and fringe vocabulary words in a
speech synthesis system.&amp;#8221;
&lt;/p&gt;
&lt;p&gt;
Strip away the gobbledygook, and this is a patent for using pictures
as menus and sub-menus.
This is breathtakingly obvious, and was obvious long before this was patented.
Indeed, it would have been obvious to most non-computer people.
But this is the problem with many software patents; once
software patents were allowed (for many years they were not, and they
are still not allowed in many countries),
it&amp;#8217;s hard to figure out where to end.
&lt;/p&gt;
&lt;p&gt;
One slight hope is that there is finally some effort to curb the
worst abuses of the patent system.  The
&lt;a href=&quot;http://www.supremecourt.gov/opinions/11pdf/10-1150.pdf&quot;&gt;Supreme Court decided on March 20, 2012, in Mayo v. Prometheus&lt;/a&gt;, 
that a patent must do more than simply state
some law of nature and add the words &amp;#8220;apply it.&amp;#8221;
This was a unanimous decision by the U.S. Supreme Court,
remarkable and unusual in itself.
You would think this would be obvious, but believe it or not, the
lower court actually thought this was fine.
We&amp;#8217;ve gone through years where just about anything can be patented.
By allowing software patents and business patents, the patent and trade office
has become swamped with patent applications, often for obvious or
already-implemented ideas.
Other countries do not allow such abuse, by simply not allowing these
kinds of patents in the first place, giving them time to review the rest.
See my
&lt;a href=&quot;http://www.dwheeler.com/essays/software-patents.html&quot;&gt;discussion
about software patents&lt;/a&gt; for more.
&lt;/p&gt;
&lt;p&gt;
My hope is that these patents are struck down, so that this 3-year-old
girl will be allowed to keep her voice.
Even better, let&amp;#8217;s strike down all the software patents;
that would give voice to millions.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Introduction to the autotools (autoconf, automake, libtool)</title>
    <link>http://www.dwheeler.com/blog/2012/03/19#introduction-autotools</link>
    <pubDate>Mon, 19 Mar 2012 00:01 GMT</pubDate>
    <!-- date: 2012-03-19 -->
    <description>
&lt;p&gt;
I&amp;#8217;ve recently posted a
&lt;a href=&quot;http://www.dwheeler.com/autotools&quot;&gt;video titled
&amp;#8220;Introduction to the autotools (autoconf, automake, and libtool)&amp;#8221;&lt;/a&gt;.
If you develop software, you might find this video useful.
So, here&amp;#8217;s a little background on it, for those who are interested.
&lt;/p&gt;

&lt;p&gt;
The &amp;#8220;autotools&amp;#8221; are a set of programs
for software developers that include at least autoconf, automake, and libtool.
The autotools make it easier to create or
distribute source code that (1) portably and automatically builds, (2)
&lt;a href=&quot;http://www.dwheeler.com/essays/releasing-floss-software.html&quot;&gt;follows
common build conventions (such as DESTDIR)&lt;/a&gt;, and (3)
provides automated dependency generation if you&amp;#8217;re using C or C++.
They&amp;#8217;re primarily intended for Unix-like systems, but
they can be used to build programs for Microsoft Windows too.
&lt;/p&gt;

&lt;p&gt;
The autotools are &lt;i&gt;not&lt;/i&gt; the only way to create source code releases
that are easily built and packaged.
Common and reasonable alternatives,
depending on your circumstances, include Cmake, Apache Ant, and Apache Maven.
But the autotools are one of the most widely-used such tools, especially
for programs that use C or C++ (though they&amp;#8217;re not limited to that).
Even if you choose to not use them for projects you control, if you are a
software developer, you are likely to encounter
the autotools in programs you use or might want to modify.
&lt;/p&gt;

&lt;p&gt;
Years ago, the autotools were hard for developers to use and they
had lousy documentation.
The autotools &lt;i&gt;have&lt;/i&gt; significantly improved over the years.
Unfortunately, there&amp;#8217;s a lot of really obsolete documentation,
along with a lot of obsolete complaints about autotools, and it&amp;#8217;s
a little hard to get started with them (in part due to all this
obsolete documentation).
&lt;/p&gt;

&lt;p&gt;
So, I have created a little video introduction at
&lt;a href=&quot;http://www.dwheeler.com/autotools&quot;&gt;http://www.dwheeler.com/autotools&lt;/a&gt; that I hope will give people a hand.
You can also view the video via YouTube (I had to split it into parts) as
&lt;a href=&quot;http://youtu.be/4q_inV9M_us&quot;&gt;Introduction to the autotools, part 1&lt;/a&gt;,
&lt;a href=&quot;http://youtu.be/tku2h_fPxhc&quot;&gt;Introduction to the autotools, part 2&lt;/a&gt;, and
&lt;a href=&quot;http://youtu.be/e-uYBb554LU&quot;&gt;Introduction to the autotools, part 3&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
The entire video was created using free/libre / open source software
(FLOSS) tools. I am releasing it in the royalty-free webm video format,
under the Creative Commons CC-BY-SA license.
I am posting it to my personal site using the HTML5 video tag, which should
make it easy to use.
Firefox and Chrome users can see it immediately; IE9 users can see it once
they install a free webm driver.
I tried to make sure that the audio was more than loud enough to hear,
the terminal text was large enough to read, and that the quality of both
is high; a video that cannot be seen or heard is rediculous.
&lt;/p&gt;

&lt;p&gt;
This video tutorial emphasizes how to use the various autotools pieces
together, instead of treating them as independent components,
since that&amp;#8217;s how most people will want to use them.
I used a combination of slides (with some animations) and the command line
to help make it clear.
I even walk through some examples, showing how to do some things step by step
(including using git with the autotools).
This tutorial gives simple quoting rules that will prevent lots of mistakes,
explains how to correctly create the &amp;#8220;m4&amp;#8221; subdirectory
(which is recommended but not fully explained in many places), and
discusses why and how to use a non-recursive make.
It is merely an introduction, but hopefully it will be enough to help
people get started if they want to use the autotools.
&lt;/p&gt;
</description>
   </item>
  </channel>
</rss>