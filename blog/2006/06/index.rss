<?xml version="1.0"?>
<!-- name="generator" content="blosxom/2.0" -->

<rss version="2.0">
  <channel>
    <title>David A. Wheeler's Blog   </title>
    <link>http://www.dwheeler.com/blog</link>
    <description>David A. Wheeler's weblog.</description>
    <language>en</language>

  <item>
    <title>The Wisdom of Crowds and Free-Libre / Open Source Software</title>
    <link>http://www.dwheeler.com/blog/2006/06/24#wisdom-crowds</link>
    <pubDate>Sat, 24 Jun 2006 21:21 GMT</pubDate>
    <!-- date: 2006-06-24 -->
    <description>
&lt;p&gt;
I just came across an interesting
&lt;a href=&quot;http://leshatton.org/A17.html&quot;&gt;
short essay by Dr. Les Hatton titled &amp;#8220;Open source inevitably good&amp;#8221;&lt;/a&gt;;
it appears it was published in the July 2005 &lt;i&gt;IT week&lt;/i&gt;.
He has some intriguing conclusions about free-libre / open source software
(FLOSS).
&lt;/p&gt;
&lt;p&gt;
But first, a little about
&lt;a href=&quot;http://leshatton.org/&quot;&gt;Dr. Hatton&lt;/a&gt;, to show that he
is no lightweight.
Dr. Hatton holds the Chair in Forensic Software Engineering at the
University of Kingston, UK,
he is a fellow of the British Computer Society,
and was voted in &amp;#8220;World&amp;#8217;s leading Scholars of
Systems and Software Engineering (1993-2002)&amp;#8221;
by U.S. Journal of Systems and Software.
His
&lt;a href=&quot;http://leshatton.org/index_CS.html&quot;&gt;
work in computer science&lt;/a&gt; has primarily been in the field
of software failure, especially the design and execution of experiments
to determine the cause and reduce the likelihood
of failure in software systems.
He&amp;#8217;s particularly known for his work on
&lt;a href=&quot;http://leshatton.org/index_SA.html&quot;&gt;safer language subsets&lt;/a&gt;,
such as &amp;#8220;Safer C&amp;#8221;.
One paper of his I especially like is
&lt;a href=&quot;http://leshatton.org/ISOC_subset1103.html&quot;&gt;
&amp;#8220;EC&amp;#8212;, a measurement based safer subset of ISO C suitable
for embedded system development&amp;#8221;&lt;/a&gt; - in this, he &lt;i&gt;measures&lt;/i&gt;
the common mistakes made in C by professional developers, and then
proposes simple rules to reduce their likelihood (if you write software
in C, it&amp;#8217;s definitely worth reading).
In any case, here is someone who understands software development,
and in particular has carefully studied why software fails
and how to prevent such failures in the future.
&lt;/p&gt;
&lt;p&gt;
In his essay
&lt;a href=&quot;http://leshatton.org/A17.html&quot;&gt;&amp;#8220;Open source inevitably good&amp;#8221;&lt;/a&gt;,
Hatton starts by first examining James Surowiecki&amp;#8217;s interesting book
&amp;#8220;The Wisdom of Crowds: Why the Many are smarter than the Few&amp;#8221;.
It turns out that crowds working together regularly beat the experts;
there&amp;#8217;s both good evidence for this (with legions of examples),
and good mathematical underpinnings justifying this too.
For this to happen, two simple conditions must be met:
they must all have &lt;i&gt;some&lt;/i&gt; knowledge, and they must
act effectively independently.
&lt;/p&gt;
&lt;p&gt;
He notes that while the &amp;#8220;many eyeballs&amp;#8221; theory of Raymond still operates,
this &amp;#8220;wisdom of the crowds&amp;#8221; also has a strong effect.
In short, FLOSS software development often appears chaotic because
much of it uses a &amp;#8220;survival of the fittest&amp;#8221; development approach; several
different ideas are tried, and then the most successful approach is selected
by many others.
When viewed through the lens of the &amp;#8220;wisdom of crowds&amp;#8221;, this is
an entirely sensible thing to do.
He concludes this startling way:
&amp;#8220;High quality open source isn&amp;#8217;t a surprise, it&amp;#8217;s inevitable.&amp;#8221;
&lt;/p&gt;
&lt;p&gt;
Obviously, there has to &lt;i&gt;be&lt;/i&gt; a crowd for this concept to hold.
But there are many FLOSS projects where it&amp;#8217;s obvious that there is a
crowd, &lt;i&gt;and&lt;/i&gt; where the results are really very good.
So take a peek at &lt;a href=&quot;http://leshatton.org/A17.html&quot;&gt;
Les Hatton&amp;#8217;s &amp;#8220;Open source inevitably good&amp;#8221;&lt;/a&gt;.
It&amp;#8217;s an interesting and provocative piece that will make you think.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Readable s-expressions and sweet-expressions: Getting the infix fix and fewer parentheses in Lisp-like languages</title>
    <link>http://www.dwheeler.com/blog/2006/06/17#readable-sweet-lisp</link>
    <pubDate>Sat, 17 Jun 2006 23:10 GMT</pubDate>
    <!-- date: 2006-06-17 -->
    <description>
&lt;p&gt;
Lisp-based programming languages
normally represent programs as &lt;i&gt;s-expressions&lt;/i&gt;,
where an operation and its parameters are surrounded by parentheses.
The operation to be performed is identified first,
and each parameter afterwards is
separated by whitespace.  So the traditional &amp;#8220;2+3&amp;#8221; is written as
&amp;#8220;(+&amp;nbsp;2&amp;nbsp;3)&amp;#8221; instead.
This is regular, but most people find this hard to read.
Here&amp;#8217;s a longer example of an s-expression - notice the many parentheses
and the lack of infix operations:
&lt;pre&gt;
 (defun factorial (n)
   (if (&amp;lt;= n 1)
       1
       (* n (factorial (- n 1)))))
&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;
I think there&amp;#8217;s a small resurging interest in Lisp-based systems, because Lisp
is still very good at &amp;#8220;programs that manipulate programs&amp;#8221;.
The major branches of Lisp (Common Lisp, Scheme, and Emacs Lisp) have
not disappeared, after all.
And I recently encountered a very cool and very new language in development,
&lt;a href=&quot;http://www.coyotos.org/docs/bitc/spec.html&quot;&gt;BitC&lt;/a&gt;.
This language was created to write low-level programs
(e.g., operating system kernels and real-time programs)
that are easy to mathematically &lt;i&gt;prove&lt;/i&gt; correct.
I learned about this very cool idea while writing my paper
&lt;a href=&quot;http://www.dwheeler.com/essays/high-assurance-floss.html&quot;&gt;
High Assurance (for Security or Safety) and
Free-Libre / Open Source Software (FLOSS)&amp;#8230; with Lots on Formal Methods&lt;/a&gt;.
BitC combines ideas from Scheme, ML, and C, but it&amp;#8217;s represented using
s-expressions because it&amp;#8217;s easy to manipulate program fragments that way.
I don&amp;#8217;t know how well it&amp;#8217;ll succeed, but it has a good chance;
if nothing else, I don&amp;#8217;t know of &lt;i&gt;anyone&lt;/i&gt; who&amp;#8217;s tried this particular
approach.
The program-prover
&lt;a href=&quot;http://www.cs.utexas.edu/users/moore/acl2/&quot;&gt;ACL2&lt;/a&gt; uses
Common Lisp as a basis, for the same reason: program-manipulating programs
are easy.
The FSF backs guile (a Scheme dialect) as their recommended
tool for scripting; guile gives lots of power in a small package.
&lt;/p&gt;

&lt;p&gt;
But many software developers avoid Lisp-based languages,
even in cases where they would be a good tool to use, because
most software developers find s-expressions really hard to read.
S-expressions are very regular&amp;#8230; but so is a Turing machine.
They don&amp;#8217;t call it
&amp;#8216;Lots of Irritating Superfluous Parentheses&amp;#8217; for nothing.
Even if you can read it, most developers have to work with others.
Some people like s-expressions as they are - and if so, fine!
But many others are not satisfied with the status quo.
Lots of people have tried to create easier-to-read versions, but
they generally tend to lose the advantages of s-expressions
(such as powerful macro and quoting capabilities).
Can something be done to make it easy to create easier-to-read
code for Lisp-like languages - without spoiling their advantages?
&lt;/p&gt;

&lt;p&gt;
I think something can be done, and
I hope to spur a discussion about various options.
To get that started, I&amp;#8217;ve developed my own approach, &amp;#8220;sweet-expressions&amp;#8221;,
which I think is actually a plausible solution.
&lt;/p&gt;

&lt;p&gt;
A sweet-expression reader will accept the traditional s-expressions
(except for some pathological cases),
but it also supports various extensions that make it easier to read.
Sweet-expressions are automatically translated into s-expressions, so
they lose no power.
Here&amp;#8217;s how that same program above could be written using sweet-expressions:
&lt;pre&gt;
 defun factorial (n)         ; Parameters can be indented, but need not be
   if (n &amp;lt;= 1)               ; Supports infix, prefix, &amp;amp; function &amp;lt;=(n 1)
       1                     ; This has no parameters, so it's an atom.
       n * factorial(n - 1)  ; Function(...) notation supported
&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;
Sweet-expressions add the following abilities:
&lt;ol&gt;
&lt;li&gt;&lt;b&gt;Indentation&lt;/b&gt;. Indentation may be used instead
of parentheses to start and end
expressions: any indented line is a parameter of its parent,
later terms on a line are parameters of the first term,
lists of lists are marked with GROUP, and
a function call with 0 parameters is surrounded or followed by a pair of
parentheses [e.g., (pi) and pi()].
A &amp;#8220;(&amp;#8221; disables indentation until its matching &amp;#8220;)&amp;#8221;.
Blank lines at the beginning of a new expression are ignored.
A term that begins at the left edge and is immediately followed by newline
is immediately executed, to make interactive use pleasant.
&lt;li&gt;&lt;b&gt;Name-ending&lt;/b&gt;. Terms of the form &amp;#8216;NAME(x y&amp;#8230;)&amp;#8217;, with no whitespace before
&amp;#8216;(&amp;#8217;, are interpreted as &amp;#8216;(NAME x y&amp;#8230;)&amp;#8217;;.
Parameters are space-separated inside.
If its content is an infix expression, it&amp;#8217;s considered one parameter instead
(so f(2 + 3) passes the its parameter, 5, to f).
&lt;li&gt;&lt;b&gt;Infix&lt;/b&gt;.  Optionally,
expressions are automatically interpreted as infix
if their second parameter is an infix operator
(by matching an &amp;#8220;infix operator&amp;#8221; pattern of symbols),
the first parameter is not an infix operator,
and it has at least three parameters.
Otherwise, expressions are interpreted as
normal &amp;#8220;function first&amp;#8221; prefix notation.
To disable infix interpretation, surround the second parameter with as(&amp;#8230;).
Infix expressions must have an odd number of parameters with the
even ones being binary infix operators.
You must separate each infix operator with whitespace on both sides;
precedence is supported.
Use the &amp;#8220;name-ending&amp;#8221; form for unary operations, e.g., -(x) for &amp;#8220;negate x&amp;#8221;.
Thus &amp;#8220;2 + y * -(x)&amp;#8221; is a valid expression, equivalent to (+ 2 (* y (- x))).
Infix operators must match this pattern (and in Scheme cannot be =&amp;gt;):
&lt;pre&gt;
    [+-\*/&amp;lt;&amp;gt;=&amp;amp;\|\p{Sm}]{1-4}|\:
&lt;/pre&gt;
&lt;/ol&gt;
&lt;/p&gt;

&lt;p&gt;
I call this combination &amp;#8220;sweet-expressions&amp;#8221;,
because by adding syntactic sugar (which are essentially abbreviations),
I hope to create a sweeter result.
&lt;/p&gt;

&lt;p&gt;
For more information on sweet-expressions or on making
s-expressions more readable in general, see my website page at
&lt;a href=&quot;http://www.dwheeler.com/readable&quot;&gt;http://www.dwheeler.com/readable&lt;/a&gt;.
For example, I provide a sweet-expression reader in Scheme
(under the MIT license), as well as an indenting pretty-printer in
Common Lisp.
In particular, you can
&lt;a href=&quot;http://www.dwheeler.com/readable/readable-s-expressions.html&quot;&gt;
see my lengthy paper about why sweet-expressions do what they do, and
some plausible alternatives.&lt;/a&gt;
You can also download some other implementation code.
&lt;/p&gt;

&lt;p&gt;
I&amp;#8217;ve set up a
&lt;a href=&quot;http://sourceforge.net/projects/readable&quot;&gt;
SourceForge project named &amp;#8220;readable&amp;#8221;&lt;/a&gt; to
discuss options in making s-expressions more readable,
and to distribute open source software to implement them
(unimplemented ideas don&amp;#8217;t go far!).
I will probably need to work on other things for a while, but
since I had this idea, I thought it&amp;#8217;d be a good idea to
write the idea and a quick sample demo of it, so that others could
build on top of it.
There hasn&amp;#8217;t a single place for people to discuss how to make
s-expressions more readable.. so now there is one.
There are a lot of smart people out there; giving like-minded parties
a place to discuss them is likely to produce something good.
If you&amp;#8217;re interested in this topic, please visit/join!
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Learning from the Masters</title>
    <link>http://www.dwheeler.com/blog/2006/06/17#learning-masters</link>
    <pubDate>Sat, 17 Jun 2006 08:53 GMT</pubDate>
    <!-- date: 2006-06-17 -->
    <description>
&lt;p&gt;
If you want to learn something, study what the masters do.
To me that seems obvious, and yet many don&amp;#8217;t do it.
Perhaps we simply forget.
So let me inspire you with a few examples&amp;#8230;
&lt;/p&gt;
&lt;p&gt;
I just got an advance copy of David Shenk&amp;#8217;s
&amp;#8220;The Immortal Game: A history of chess&amp;#8221; - and I&amp;#8217;m referenced in it!
Which is an odd thing; I don&amp;#8217;t normally think of myself
as a chess commentator.
But I do like the game of chess, and one of my key approaches to
getting better is simple: Study the games of good players.
I&amp;#8217;ve even posted a few of the games with my comments on my web site,
including The Game of the Century
(&lt;a href=&quot;http://www.dwheeler.com/misc/game_of_the_century.pgn&quot;&gt;PGN&lt;/a&gt;/&lt;a href=&quot;http://www.dwheeler.com/misc/game_of_the_century.txt&quot;&gt;Text&lt;/a&gt;),
The Immortal Game (&lt;a href=&quot;http://www.dwheeler.com/misc/immortal.pgn&quot;&gt;PGN&lt;/a&gt;/&lt;a href=&quot;http://www.dwheeler.com/misc/immortal.txt&quot;&gt;Text&lt;/a&gt;),
The Evergreen Game (&lt;a href=&quot;http://www.dwheeler.com/misc/evergreen.pgn&quot;&gt;PGN&lt;/a&gt;/&lt;a href=&quot;http://www.dwheeler.com/misc/evergreen.txt&quot;&gt;Text&lt;/a&gt;),
and
Deep Blue - Kasparov, 1996, Game 1 (&lt;a href=&quot;http://www.dwheeler.com/misc/deepblue-kasparov.pgn&quot;&gt;PGN&lt;/a&gt;/&lt;a href=&quot;http://www.dwheeler.com/misc/deepblue-kasparov.txt&quot;&gt;Text&lt;/a&gt;).
It&amp;#8217;s my Byrne/Fischer writeup that was referenced in Shenk&amp;#8217;s book.
But I didn&amp;#8217;t create that stuff for a book, originally.
I can&amp;#8217;t play like these great players can,
but I get better by studying what they do.
In short, I&amp;#8217;ve found that I must study the work of the masters.
&lt;/p&gt;
&lt;p&gt;
There are many children&amp;#8217;s educational philosophies that have, at least in part,
the notion of studying good examples as part of education.
Ruth Beechick&amp;#8217;s &amp;#8220;natural method&amp;#8221; for teaching writing emphasizes starting
by copying and studying examples of great writing. She even notes
Jack London and Benjamin Franklin started by studying works they admired.
Learning begins by studying the work of the masters.
&lt;/p&gt;
&lt;p&gt;
I often write about
&lt;a href=&quot;http://www.dwheeler.com/oss_fs_why.html&quot;&gt;
free-libre/open source software (FLOSS)&lt;/a&gt;.
In part, I do because it&amp;#8217;s one amazingly interesting development.
But there are other reasons, too.
Some developers of FLOSS programs are the best in the business -
you can learn a lot by seeing what they do.
In short, one important advantage of FLOSS is that it is now possible for
software developers to study the work of the masters.
&lt;/p&gt;
&lt;p&gt;
I recently wrote the article
&lt;a href=&quot;http://www.dwheeler.com/essays/high-assurance-floss.html&quot;&gt;
High Assurance (for Security or Safety) and Free-Libre / Open Source Software (FLOSS)&amp;#8230; with Lots on Formal Methods (aka high confidence or high integrity)&lt;/a&gt;
(I gave it the long title to help people find it).
Here, I note the many tools to &lt;i&gt;create&lt;/i&gt; high assurance software -
but there are precious few FLOSS examples of high assurance software.
True, there are very few examples of high assurance software, period,
but where are the high assurance software components that people can study
and modify without legal encumberances?
(If you know of more,
&lt;a href=&quot;http://www.dwheeler.com/contactme.html&quot;&gt;contact me&lt;/a&gt;.)
That worries me; how are we supposed to educate people how to create
high assurance software, if students never see it?
People do not wake up one morning and discover that they are an expert.
They must learn, and books about a topic are not enough.
They must study the work of the masters.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>How to read the mysterious Winmail.dat / Part 1.2 files (TNEF)</title>
    <link>http://www.dwheeler.com/blog/2006/06/13#microsoft-outlook-tnef</link>
    <pubDate>Tue, 13 Jun 2006 01:55 GMT</pubDate>
    <!-- date: 2006-06-13 -->
    <description>
&lt;p&gt;
All too often nowadays people report that they
&amp;#8220;can&amp;#8217;t open the attachment&amp;#8221; of an email, because
they only received a file named (typically) &amp;#8220;Part 1.2&amp;#8221; or &amp;#8220;Winmail.dat&amp;#8221;.
&lt;/p&gt;
&lt;p&gt;
The basic problem is that in certain cases Microsoft Outlook
uses a nonstandard extra packaging mechanism called &amp;#8220;ms-tnef&amp;#8221; or &amp;#8220;tnef&amp;#8221;
when it sends email - typically when it sends attachments.
What Outlook is &lt;i&gt;supposed&lt;/i&gt; to do is simply use the industry standards
(such as MIME and HTML) directly for attachments, but Outlook fails to do so
and adds this other nonsense instead.
The full name of the format is &amp;#8220;Transport Neutral Encapsulation Format&amp;#8221;,
but that is a misleading name&amp;#8230; it may be neutral on transport, but
it obstructs reception.
&lt;/p&gt;
&lt;p&gt;
Almost no other email reader can read this nonstandard format.
Email clients that can&amp;#8217;t (currently) read this format include
Lotus Notes, Thunderbird / Netscape Mail, and Eudora.
In fact, I&amp;#8217;ve been told that
even Microsoft&amp;#8217;s own Outlook Express can&amp;#8217;t read this format!
&lt;/p&gt;
&lt;p&gt;
So take a look at my new article,
&lt;a href=&quot;http://www.dwheeler.com/essays/microsoft-outlook-tnef.html&quot;&gt;Microsoft Outlook MS-TNEF handling (aka Winmail.dat or &amp;#8220;Part 1.2&amp;#8221; problem of unopenable email attachments)&lt;/a&gt;.
It gives you a brief explanation of the problem, and what to do about it,
both from the sender view (how can I stop sending unopenable email?)
and the receiver view (how can I read them anyway?).
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Sony Playstation 3: Train wreck in process</title>
    <link>http://www.dwheeler.com/blog/2006/06/05#playstation3</link>
    <pubDate>Mon, 05 Jun 2006 22:35 GMT</pubDate>
    <!-- date: 2006-06-05 -->
    <description>
&lt;p&gt;
I try to keep up with the general gaming business.
Many of the best new computer hardware technologies
first show up in the gaming world, for one thing.
And for another, I once in the business; in the mid-1980s
I was lead software developer/maintainer for the first commercial
multiplayer role-playing game in the U.S.,
&lt;a href=&quot;http://en.wikipedia.org/wiki/Scepter_of_Goth&quot;&gt;Scepter of Goth&lt;/a&gt;.
(Full disclosure: I didn&amp;#8217;t write the original, I maintained it after
it had been initially developed. Scepter may have been
the first commercial multiplayer RPG in the world, but I have never gotten
good-enough data to show conclusively if MUD or Scepter were first.
Bartle&amp;#8217;s MUD was clearly first in the UK, and Scepter
was clearly the first in the US, and neither knew of the other for
a long time.)
I also wrote some videogames for the Apple ][, which I sold.
(I still play occasionally, but my hand/eye coordination is awful;
my brother had to playtest them, since I couldn&amp;#8217;t get far in my own games.)
I generally hope for good competition, since that is what keeps the
the innovation flowing and the prices down.
My hopes are getting dashed, because Sony seems to have had
a full lobotomy recently.
&lt;/p&gt;
&lt;p&gt;
If Sony is trying to go (mostly) out of business, it&amp;#8217;s
got a great process going.
Recently about half of Sony&amp;#8217;s income has depended on the Playstation 2,
so you&amp;#8217;d think that they would avoid bone-headed decisions that
would doom them in the market as they release their next-generation console.
&lt;/p&gt;
&lt;p&gt;
But the
&lt;a href=&quot;http://www.philly.com/mld/philly/news/columnists/14733980.htm&quot;&gt;
Sony Playstation 3 will come with an outrageous pricetag&lt;/a&gt;:
starting at $599 (or $499 for a stripped-down version).
Home video-game consoles have sold for $199 to $299 traditionally, and the
X-Box 360 (its primary competitor) costs much
less than this announced price too.
&lt;/p&gt;
&lt;p&gt;
Why so much?
One significant reason is
because Sony is including a Blu-ray reader, a proprietary video format
that they hope will replace DVDs;
this is both raising the price substantially &lt;i&gt;and&lt;/i&gt; appears to be
delaying shipment.
Didn&amp;#8217;t Sony learn its lesson from Betamax, their earlier costly blunder
in the videotape format war?
No, it appears that Sony must go out of business to learn.
Betamax was supposed to be better technically (and it was in some ways),
but it cost much more.
In part, the higher cost was due to the lack of competing suppliers; the
competing VHS market was full of competing suppliers who quickly marched
past the proprietary format.
Sony has even lost big money on other proprietary formats, too.
Blu-Ray has all the same earmarks of a failure, in exactly the same way.
The Playstation 3 will have a hopelessly high price tag because of
Blu-ray, and it looks like the Playstation 3 will go down with it.
Since both Blu-Ray and its competitor HD-DVD
have really more egregious digital restrictions management (DRM) mechanisms
built in, I hope both fail - their improvements frankly don&amp;#8217;t
justify abandoning DVDs in my eyes.
&lt;/p&gt;
&lt;p&gt;
Ah, but the higher price tag implies better performance, right?  Wrong.
&lt;a href=&quot;http://www.theinquirer.net/?article=32171&quot;&gt;The Inquirer reports
that there are some serious technical flaws in the Playstation 3&lt;/a&gt;,
The Playstation 3 will have half the triangle setup capability compared
to Xbox 360.
What&amp;#8217;s worse, its local cell memory read speed is about 1/1000th of
the speed it &lt;i&gt;should&lt;/i&gt; be getting.
In fact, one slide describing the Playstation 3 performance had to say
&amp;#8220;no that isn&amp;#8217;t a typo&amp;#8221;, because the performance figures on this
fundamental subsystem are so horrifically bad.
So people will have the option of spending a lot more money for a
less capable machine that is saddled with
yet another failed proprietary format.
And in addition, Sony is already really late with its next-gen console;
if you&amp;#8217;re not first, you need to be &lt;i&gt;better or cheaper&lt;/i&gt;, not
&lt;i&gt;obviously worse and more expensive&lt;/i&gt;.
Yes, it&amp;#8217;ll run Linux, but I can run Linux very well
on a general-purpose computer system, for less money and
without the hampering I expect from Sony.
&lt;/p&gt;
&lt;p&gt;
Has greed disabled Sony&amp;#8217;s ability to think clearly?
The
&lt;a href=&quot;http://www.eff.org/IP/DRM/Sony-BMG/&quot;&gt;
Sony-BMG DRM music CD scandal&lt;/a&gt;, where Sony subverted a massive number of
computers through a rootkit on its music CDs, just led to a big settlement.
Granted, it could have been worse for Sony; under the laws of most
countries, many Sony executives should probably be in jail.
In the Sony-BMG case,
Sony tried to force a digital restrictions management (DRM)
system on users by breaking into their customers&amp;#8217; operating systems.
The point of DRM systems is to prevent you from using copyrighted products
in ways the company doesn&amp;#8217;t approve of &amp;#8212; even if they are legal (!).
Hrmpf.
The
&lt;a href=&quot;http://www.apig.org.uk/index/APIG_DRM_Report-final.pdf&quot;&gt;
All Party Parliamentary Internet Group (APIG) in the UK&lt;/a&gt;
recommended the publication of
&amp;#8220;guidance to make it clear that companies
distributing Technical Protection Measures systems in the UK would, if they
have features such as those in Sony-BMG’s MediaMax and XCP systems, run a
significant risk of being prosecuted for criminal actions.&amp;#8221;
It&amp;#8217;s fine to want money, but it&amp;#8217;s wise to make money by making
a good product &amp;#8212; one that is cheaper or better in some way.
&amp;#8220;Get rich quick&amp;#8221; schemes, like rootkitting your customers to keep them
from doing stuff you don&amp;#8217;t like, or
trying to establish proprietary format locks so everyone has
to go to you, often backfire.
&lt;/p&gt;
&lt;p&gt;
What&amp;#8217;s weird is that this was all unnecessary; it would have
been relatively easy for Sony
to create a platform with modern electronics that had much better performance,
worth paying for, without all this.
It would have been much less risk to Sony if they&amp;#8217;d taken a simpler
route.
What&amp;#8217;s more, their market share is so large that it was theirs to keep;
they just had to be smart about making a good follow-on product.
&lt;/p&gt;
&lt;p&gt;
Maybe Sony will pull things through in spite of its problems.
I hope they don&amp;#8217;t just collapse, because competition is a critical force in
keeping innovation going and prices low.
Their product&amp;#8217;s
ability to play Playstation 2 games, for example, is an advantage&amp;#8230;
but I doubt that will be enough, because the old games won&amp;#8217;t
exploit any of the advantages of a next-generation platform.
If Sony can get a massive number of amazingly-good platform-unique
games &amp;#8212; ones so good that people will choose the Playstation 3 specifically
for them &amp;#8212; then &lt;i&gt;maybe&lt;/i&gt; they can survive.
But I doubt they can get that strong a corner on good games;
many independents will not want to risk their companies
by making single-platform games, especially one as risky as this one,
and Sony is unlikely to have the finances to buy them all up or
back them enough to eliminate the risks.
What is more likely to happen is that there will be a few platform-unique
games for Playstation 3, a few platform-unique games for its competitors
(particularly XBox 360), and a
few multiple-platform games&amp;#8230; which means no lock for Sony.
In short, things do not look very good right now for Sony;
Sony seems to have
&lt;a href=&quot;http://en.wiktionary.org/wiki/hoist_by_one%27s_own_petard&quot;&gt;
hoisted themselves on their own petard&lt;/a&gt;.
I don&amp;#8217;t even see what they can do now to recover.
&lt;/p&gt;
&lt;p&gt;
I think Jonathan V. Last of the Philadelphia Inquirer has it right:
&amp;#8220;Obsessed with owning proprietary formats, Sony keeps picking fights.
[And] It keeps losing. And yet it keeps coming back for more, convinced that
all it needs to do is push a bigger stack of chips to the center of the
table. If Blu-ray fails, it will be the biggest home-electronics failure
since Betamax. If it drags PlayStation 3 down with it, it will be one
of the biggest corporate blunders of our time.&amp;#8221;
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>My upcoming presentations - Date change and a new page</title>
    <link>http://www.dwheeler.com/blog/2006/06/04#presentations</link>
    <pubDate>Sun, 04 Jun 2006 22:07 GMT</pubDate>
    <!-- date: 2006-06-04 -->
    <description>
&lt;p&gt;
I&amp;#8217;m still giving a presentation at NovaLUG, but the
date has been changed from July 1 to July 8 (2006).
This is because July 4 is a U.S. holiday (independence day),
and there was concern that some people might not be able to come.
So it will now be July 8, 10am,
&amp;#8220;Free-Libre/Open Source Software (FLOSS) and Security&amp;#8221;.
Washington Technology Park/CSC (formerly Dyncorp),
15000 Conference Center Drive, Chantilly, VA.
&lt;/p&gt;
&lt;p&gt;
This has convinced me that I need a page to help people
find when and where I&amp;#8217;m speaking, so that they don&amp;#8217;t have to
march through my blogs to get the information.
So here it is&amp;#8230;
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&quot;http://www.dwheeler.com/presentations.html&quot;&gt;
Presentations by David A. Wheeler.&lt;/a&gt;
Just click on it, and you&amp;#8217;ll get the latest times, places, etc., of
where to go if you just can&amp;#8217;t find something better
to do with your life :-).
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Autonumbering supported in Firefox 1.5!</title>
    <link>http://www.dwheeler.com/blog/2006/06/02#firefox-autonumbering</link>
    <pubDate>Fri, 02 Jun 2006 21:31 GMT</pubDate>
    <!-- date: 2006-06-02 -->
    <description>
&lt;p&gt;
Here&amp;#8217;s another reason to use Firefox as your web browser, besides the fact that
&lt;a href=&quot;http://www.dwheeler.com/blog/2005/08/06/#ie-horrific&quot;&gt;Firefox has
a better security record&lt;/a&gt; and that Firefox has
&lt;a href=&quot;http://news.com.com/Microsoft+yielding+to+IE+standards+pressure/2100-1032_3-5620988.html&quot;&gt;better
support for web standards in general.&lt;/a&gt;
Firefox 1.5 has added autonumbering support, and sites like mine are
starting to use it.
If you&amp;#8217;re using a non-compliant web browser,
like the current version of Internet Explorer,
you&amp;#8217;re missing out.
But let&amp;#8217;s back up a bit to the basics: HTML.
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&quot;http://www.w3.org/MarkUp/&quot;&gt;HTML&lt;/a&gt; has been a
spectacularly successful standard for sharing
information - web pages around the world use it.
I write a lot of my papers directly in HTML, because it&amp;#8217;s easy,
using HTML makes them easily accessible to everyone, and it&amp;#8217;s a
&lt;a href=&quot;http://www.dwheeler.com/essays/opendocument-open.html&quot;&gt;
completely open standard&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
But HTML has several weaknesses if you&amp;#8217;re writing long or
technical reports.
One especially important one is automatic numbering of headers:
the original HTML specification can&amp;#8217;t do it.
When you&amp;#8217;re reading a long report, it can be hard to keep track of
where you are, so having every heading numbered (such as
&amp;#8220;section 2.4.3&amp;#8221;) is &lt;i&gt;really&lt;/i&gt; helpful.
This can be solved by having programs directly insert the heading numbers
numbers into the HTML text, but that&amp;#8217;s a messy and kludgy solution.
It&amp;#8217;d be much
better if browsers automatically added numbered headings where appropriate,
so that the HTML file itself is simple and clean.
&lt;/p&gt;
&lt;p&gt;
The W3C (the standards group in charge of HTML and related
standards) agreed that automatic numbering was important,
and included support for automatic numbering in the
&lt;a href=&quot;http://www.w3.org/Style/CSS/&quot;&gt;
Cascading Style Sheets (CSS) standard&lt;/a&gt; way back in 1998.
CSS is an important support standard for HTML, so that should have been it&amp;#8230;
but it wasn&amp;#8217;t.
Both Netscape and Microsoft decided to not fully implement the standard,
nor try to fix the standard so that they &lt;i&gt;would&lt;/i&gt; implement it.
Soon afterwards Microsoft gained dominant market share, and then
let their browser stagnate (why bother improving it, since there was
no competition?).
It looked like we, the users, would never get basic
capabilities in HTML like auto-numbering.
&lt;/p&gt;
&lt;p&gt;
I&amp;#8217;m happy to report that
&lt;a href=&quot;http://www.spreadfirefox.com/?q=affiliates&amp;amp;id=31988&amp;amp;t=60&quot;&gt;
Firefox 1.5 has added support for auto-numbering&lt;/a&gt; headings and
other constructs too.
So I&amp;#8217;ve modified my
&lt;a href=&quot;http://www.dwheeler.com/essays/paper.css&quot;&gt;CSS file for
papers and essays&lt;/a&gt; so it auto-number headings;
I&amp;#8217;ve released my CSS file under the MIT/X license, so anyone else can use it.
If you develop web content you may want to look
at examples like mine for a reason, because&amp;#8230;
&lt;/p&gt;
&lt;p&gt;
It turns out that the story is more complicated.
In the process of implementing auto-numbering,
the Firefox developers found a serious problem with the CSS specification.
Oops!
The &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=3247&quot;&gt;
Mozilla Firefox bug #3247&lt;/a&gt; and
&lt;a href=&quot;http://www.davidflanagan.com/blog/2005_08.html#000075&quot;&gt;
David Flanagan&amp;#8217;s blog&lt;/a&gt; discuss this further.
The Firefox developers talked with the W3C, and the W3C ended up creating
&amp;#8220;CSS 2.1&amp;#8221;, an updated/patched version of the CSS2 standard
that is in the process of being formally released.
&lt;/p&gt;
&lt;p&gt;
What this means is that the examples for autonumbering
in the &amp;#8220;official&amp;#8221; original CSS2 standard won&amp;#8217;t actually work!
Instead, you need to follow a slightly different approach as defined
in the patched CSS2.1 specification.
&lt;blockquote&gt;
&lt;b&gt;Technical stuff:&lt;/b&gt;
The basic problem involves scoping issues.
To solve it, the counter-reset property &lt;i&gt;must&lt;/i&gt; be in the
main heading names (like h1, h2, etc.), and &lt;i&gt;not&lt;/i&gt; in the
&amp;#8220;before&amp;#8221; sections (like h1:before, h2:before, etc.) - in spite of
all the examples in the original CSS2 spec.
You can put counter-increment in either place, though the spec
puts them in the :before sections so I have too.
&lt;!-- Here's the W3C example.  I don't think it matters; I think
     what matters is the location of the counter-reset.
H1:before {
    content: &quot;Chapter &quot; counter(chapter) &quot;. &quot;;
    counter-increment: chapter;  /* Add 1 to chapter */
}
H1 {
    counter-reset: section;      /* Set section to 0 */
}
The latest examples in CSS2.1 working draft of 11 April 2006
move the counter-reset property to main heading names, but keep the
counter-increment property in the &quot;:before&quot; sections.
--&gt;
&lt;/blockquote&gt;
&lt;/p&gt;
&lt;p&gt;
Now people have yet another reason to upgrade to Firefox.
Firefox has had better standards support for some time;
there are now many sites that won&amp;#8217;t display properly
(or as well) if your browser doesn&amp;#8217;t support the standards well.
But here is a clear and functionally important difference.
&lt;/p&gt;
&lt;p&gt;
I&amp;#8217;m a big believer in standards, but they can only help users if
they are implemented, and they will only be implemented if
users demand standards compliance.
I think that the more people switch to standards-compliant browsers,
and the more that sites use standards (to encourage people to switch),
the more pressure it will bring on the other browser makers to catch up.
And that would be great for all computer users.
&lt;/p&gt;
&lt;p&gt;
More broadly, this is also a good example of why it&amp;#8217;s important to have
implementations try out standards before they are frozen;
they help avoid mistakes like this.
Today,
&lt;a href=&quot;http://www.dwheeler.com/essays/open-standards-open-source.html&quot;&gt;
essentially every successful open standard is implemented by
free-libre/open source software (FLOSS)&lt;/a&gt; - this makes sure that the
standard is implementable, helps all understand what the standard
means, and also helps other developers understand at least one way
to implement it.
This doesn&amp;#8217;t mean standards aren&amp;#8217;t important; standards are vital!
And this also shows that when a mistake is made by a standards body,
life is not over;
standards bodies can work with implementors to fix problems.
In fact, this
shows that the best standards are those created from an
interplay between standards developers and implementors, where
standards are then made official after actual implementation experience.
&lt;/p&gt;
</description>
   </item>
  </channel>
</rss>