<?xml version="1.0"?>
<!-- name="generator" content="blosxom/2.0" -->

<rss version="2.0">
  <channel>
    <title>David A. Wheeler's Blog   </title>
    <link>http://www.dwheeler.com/blog</link>
    <description>David A. Wheeler's weblog.</description>
    <language>en</language>

  <item>
    <title>New PhD Dissertation: Fully Countering Trusting Trust through Diverse Double-Compiling</title>
    <link>http://www.dwheeler.com/blog/2009/11/02#trusting-trust-dissertation</link>
    <pubDate>Mon, 02 Nov 2009 12:19 GMT</pubDate>
    <!-- date: 2009-11-02 -->
    <description>
&lt;p&gt;
An Air Force evaluation of Multics, and Ken Thompson&amp;#8217;s Turing award
lecture (&amp;#8220;Reflections on Trusting Trust&amp;#8221;), showed that compilers can
be subverted to insert malicious Trojan horses into critical software,
&lt;i&gt;including themselves&lt;/i&gt;.  If this &amp;#8220;trusting trust&amp;#8221; attack goes undetected,
even complete analysis of a system&amp;#8217;s source code will not find the
malicious code that is running.  Previously-known countermeasures have
been grossly inadequate.  If this attack cannot be countered, attackers
can quietly subvert entire classes of computer systems, gaining complete
control over financial, infrastructure, military, and/or business
system infrastructures worldwide.
&lt;/p&gt;
&lt;p&gt;
Thankfully, there &lt;i&gt;is&lt;/i&gt; a countermeasure to the
&amp;#8220;trusting trust&amp;#8221; attack.
In 2005
&lt;a href=&quot;http://www.dwheeler.com/trusting-trust&quot;&gt;I wrote a paper on Diverse Double-Compiling (DDC), published by ACSAC&lt;/a&gt;, where I explained DDC and
why it is an effective countermeasure.
But some people still raised concerns.
Would DDC &lt;i&gt;really&lt;/i&gt; counter the attack?
Would DDC scale up to real-world compilers?
Also, the ACSAC paper required &amp;#8220;self-parenting&amp;#8221; compilers &amp;mdash;
can DDC handle compilers that are &lt;i&gt;not&lt;/i&gt; self-parenting?
&lt;/p&gt;
&lt;p&gt;
I&amp;#8217;m now releasing
&lt;b&gt;&lt;a href=&quot;http://www.dwheeler.com/trusting-trust/&quot;&gt;Fully Countering Trusting Trust through Diverse Double-Compiling&lt;/a&gt;&lt;/b&gt;,
my 2009 PhD dissertation that expands on how to counter the
&amp;#8220;trusting trust&amp;#8221; attack by using the &amp;#8220;Diverse Double-Compiling&amp;#8221; (DDC)
technique.
This dissertation was accepted by my PhD committee on October 26, 2009.
&lt;/p&gt;
&lt;p&gt;
On &lt;b&gt;November 23, 2009, 1-3pm&lt;/b&gt;, I will be giving a
&lt;b&gt;public defense&lt;/b&gt; of this dissertation.
&lt;b&gt;If you&amp;#8217;re interested, please come!&lt;/b&gt;
It will be at
&lt;a href=&quot;http://www.gmu.edu&quot;&gt;George Mason University&lt;/a&gt;,
Fairfax, Virginia,
&lt;a href=&quot;http://itu.gmu.edu/innovationhall/aboutih.html&quot;&gt;Innovation Hall&lt;/a&gt;,
room 105.
[&lt;a href=&quot;http://itu.gmu.edu/innovationhall/images/academiciv.gif&quot;&gt;campus
location&lt;/a&gt;] [&lt;a
href=&quot;http://maps.google.com/maps?f=q&amp;amp;source=s_q&amp;amp;hl=en&amp;amp;geocode=&amp;amp;q=38.828240,+-77.307578&amp;amp;sll=38.828258,-77.307615&amp;amp;sspn=0.011417,0.01929&amp;amp;ie=UTF8&amp;amp;ll=38.827539,-77.307336&amp;amp;spn=0.011417,0.01929&amp;amp;z=16&quot;&gt;Google
map&lt;/a&gt;]
&lt;/p&gt;
&lt;p&gt;
This dissertation&amp;#8217;s thesis is that
the trusting trust attack can be detected and effectively countered
using the &amp;#8220;Diverse Double-Compiling&amp;#8221; (DDC) technique, as demonstrated by
(1) a formal proof that DDC can determine if source code and generated
executable code correspond, (2) a demonstration of DDC with four compilers
(a small C compiler, a small Lisp compiler, a small maliciously corrupted
Lisp compiler, and a large industrial-strength C compiler, GCC), and
(3) a description of approaches for applying DDC in various real-world
scenarios.  In the DDC technique, source code is compiled twice: once
with a second (trusted) compiler (using the source code of the compiler&amp;#8217;s
parent), and then the compiler source code is compiled using the result
of the first compilation.  If the result is bit-for-bit identical with
the untrusted executable, then the source code accurately represents
the executable.
&lt;/p&gt;
&lt;p&gt;
Many people commented on my previous 2005 ACSAC paper on the topic.
&lt;a href=&quot;http://www.schneier.com/blog/archives/2006/01/countering_trus.html&quot;&gt;
Bruce Schneier wrote an article on &amp;#8216;Countering &amp;#8220;Trusting Trust&amp;#8221;&amp;#8217;&lt;/a&gt;,
which I think is one of the best independent articles describing my work
on DDC.
&lt;/p&gt;
&lt;p&gt;
This 2009 dissertation significantly extends my previous 2005 ACSAC paper.
For example, I now have a formal proof that DDC is effective
(the ACSAC paper only had an informal justification).
I also have additional demonstrations, including one with GCC
(to show that it scales up) and one with a maliciously corrupted compiler
(to show that it really does detect them in the real world).
The dissertation is also more general; the ACSAC paper only considered
the special case of a &amp;#8220;self-parenting&amp;#8221; compiler,
while the dissertation eliminates that assumption.
&lt;/p&gt;
&lt;p&gt;
So if you&amp;#8217;re interested in countering the &amp;#8220;trusting trust&amp;#8221; attack,
please take a look at my
&lt;a href=&quot;http://www.dwheeler.com/trusting-trust/&quot;&gt;work on countering trusting trust through diverse double-compiling (DDC)&lt;/a&gt;.
&lt;/p&gt;
</description>
   </item>
  </channel>
</rss>