<?xml version="1.0" encoding="UTF-8"?>
<!-- name="generator" content="blosxom/2.0" -->

<rss version="2.0">
  <channel>
    <title>David A. Wheeler's Blog   </title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog</link>
    <description>David A. Wheeler's weblog.</description>
    <language>en</language>

  <item>
    <title>Who decides when you need to update vulnerable software? (Equifax)</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog/2017/09/23#who-decides-update</link>
    <pubDate>Sat, 23 Sep 2017 20:08 GMT</pubDate>
    <!-- date: 2017-09-23 -->
    <description>
&lt;p&gt;
I have a trick question:
Who decides when you &lt;i&gt;need&lt;/i&gt; to update vulnerable software
(presuming that if it&amp;#8217;s unpatched it might lead to bad consequences)?
In a company, is that the information technology (IT) department?
The chief information officer (CIO)?
A policy?
The user of the computer?
At home, is it the user of the computer?
Perhaps the family&amp;#8217;s &amp;#8220;tech support&amp;#8221; person?
&lt;/p&gt;
&lt;p&gt;
Remember, it&amp;#8217;s a trick question.  What&amp;#8217;s the answer?
The answer is&amp;#8230;
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;The attacker decides.&lt;/b&gt;
&lt;/p&gt;
&lt;p&gt;
The &lt;i&gt;attacker&lt;/i&gt; is the person who decides when you get attacked, and how.
Not the computer user.  Not a document.  Not support. Not an executive.
&lt;i&gt;The attacker decides.&lt;/i&gt;
And that means &lt;i&gt;the attacker decides when you need to update
your vulnerable software&lt;/i&gt;.
If that statement makes you uncomfortable,
then you need to change your thinking.
This is reality.
&lt;/p&gt;
&lt;p&gt;
So let&amp;#8217;s look at Equifax, and see what we can learn from it.
&lt;/p&gt;
&lt;p&gt;
Let&amp;#8217;s start with the first revelation in 2017:
&lt;a href=&quot;https://arstechnica.com/information-technology/2017/09/massive-equifax-breach-caused-by-failure-to-patch-two-month-old-bug/&quot;&gt;A security vulnerability
in Apache Struts (a widely-used software component)
was fixed in March 2017, but Equifax failed to update it for two whole months,
leading to the loss of
sensitive information on about 143 million US consumers&lt;/a&gt;.
The update was available for free, for two months, and it was well-known
that attackers were &lt;i&gt;exploiting&lt;/i&gt; this vulnerability in other
organizations.
Can we excuse Equifax?
Is it &amp;#8220;too hard&amp;#8221; to update vulnerable software (aka &amp;#8220;patch&amp;#8221;) in a timely way?
Is it acceptable that organizations fail to update vulnerable components
when those vulnerabilities allow unauthorized
access to lots of sensitive high-value data?
&lt;/p&gt;
&lt;p&gt;
&lt;i&gt;Nonsense.&lt;/i&gt;
Equifax may &lt;i&gt;choose&lt;/i&gt; to fail to update known vulnerable components.
Clearly it did so!
But Equifax &lt;i&gt;needed&lt;/i&gt; to update rapidly, because &lt;i&gt;the need to update
was decided by the attackers&lt;/i&gt;, not by Equifax.
In fact, two months is an absurdly long time, because again, the timeframe
is determined by the &lt;i&gt;attacker&lt;/i&gt;.
&lt;/p&gt;
&lt;p&gt;
Now it&amp;#8217;s true that if you don&amp;#8217;t plan to rapidly update, it&amp;#8217;s
hard to update.
Too bad.  Nobody cares.
Vulnerabilities are routinely found in software components, and have been
for decades.
Since it is 100% predictable that there will be vulnerabilities found in
the software you use (including third-party software components you reuse),
you need to &lt;i&gt;plan ahead&lt;/i&gt;.
I don&amp;#8217;t know when it will rain, but I know it will, so
I plan ahead by paying for a roof and buying umbrellas.
When something is certain to happen, you need to plan for it.
For example, make sure you rapidly learn about vulnerabilities in
third party software you depend on,
and that you have a process in place (with tools and
automated testing) so that you can update and ship in minutes, not months.
Days, not decades.
&lt;/p&gt;
&lt;p&gt;
The
&lt;a href=&quot;https://blogs.apache.org/foundation/entry/apache-struts-statement-on-equifax&quot;&gt;Apache Struts Statement on Equifax Security Breach&lt;/a&gt;
has some great points about how to properly handle
reused software components (no matter where it&amp;#8217;s from).
The Apache Struts team notes that you should
(1) understand the software you use,
(2) establish a rapid update process,
(3) remember that all complex software has flaws,
(4) establish security layers, and
(5) establish monitoring.
Their statement has more details, in particular for #2 they say,
&amp;#8220;establish a process to quickly roll out a security fix release&amp;#8230;
[when reused software] needs to be updated for security reasons. Best
is to think in terms of hours or a few days, not weeks or months.&amp;#8221;
&lt;/p&gt;
&lt;p&gt;
Many militaries refer to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/OODA_loop&quot;&gt;&amp;#8220;OODA loop&amp;#8221;, which is the
decision cycle of observe, orient, decide, and act&lt;/a&gt;.
The idea was developed by military strategist and
United States Air Force Colonel John Boyd.
Boyd noted that, &amp;#8220;In order to win, we should operate at a faster tempo
or rhythm than our adversaries&amp;#8230;&amp;#8221;.
Of course, if you want to lose, then you simply need to operate more
slowly than your adversary.
You need to get comfortable with this adversarial terminology, because
if you&amp;#8217;re running a computer system today, you &lt;i&gt;are&lt;/i&gt; in an
adversarial situation, and the attackers are your adversaries.
&lt;/p&gt;
&lt;p&gt;
In short, you &lt;i&gt;must&lt;/i&gt; update your software when vulnerabilities
are found &lt;i&gt;before&lt;/i&gt; attackers can exploit them (if they can be exploited).
If you can&amp;#8217;t do that, then you need to change how you manage your software
so &lt;i&gt;can&lt;/i&gt; do that.
Again, &lt;b&gt;the attacker decides how fast you need to react&lt;/b&gt;.
&lt;/p&gt;
&lt;p&gt;
We&amp;#8217;re only beginnning to learn about the Equifax disaster of 2017, but
it&amp;#8217;s clear that Equifax &amp;#8220;security&amp;#8221; is just one failure after another.
The more we learn, the worse it gets.
Here are some of the information we have so far.
Equifax used the rediculous pair
&lt;a href=&quot;https://www.cnbc.com/2017/09/14/equifax-used-admin-for-the-login-and-password-of-a-non-us-database.html&quot;&gt;Username &amp;#8220;admin&amp;#8221;, password
&amp;#8220;admin&amp;#8221;&lt;/a&gt; for a database with personal employee information.
&lt;a href=&quot;https://www.grc.com/sn/SN-628-Notes.pdf&quot;&gt;Security Now! #628&lt;/a&gt;
showed that Equifax recommended using Netscape Navigator in their
website discussion on security, a rediculously obsolete suggestion
(Netscape shut down in 2003, 14 years ago).
Equifax provided customers with PINs that were simply the date and time,
making the PINs predictable and thus insecure.
Equifax set up a &amp;#8220;checker&amp;#8221; site
&lt;a href=&quot;https://techcrunch.com/2017/09/08/psa-no-matter-what-you-write-equifax-may-tell-you-youve-been-impacted-by-the-hack/&quot;&gt;which makes false statements&lt;/a&gt;:
&amp;#8220;In what is an unconscionable move by the credit report company, the
checker site, hosted by Equifax product TrustID, seems to be telling
people at random they may have been affected by the data breach&amp;#8230;
It&amp;#8217;s clear Equifax&amp;#8217;s goal isn&amp;#8217;t to protect the consumer or
bring them vital information. It&amp;#8217;s to get you to sign up for its
revenue-generating product TrustID&amp;#8230;  [and] TrustID&amp;#8217;s Terms of Service [say]
that anyone signing up for the product is barred from suing the company after.&amp;#8221;
&lt;a href=&quot;http://www.zdnet.com/article/equifax-freeze-your-account-site-is-also-vulnerable-to-hacking/&quot;&gt;Equifax&amp;#8217;s credit report monitoring site was
found to be vulnerable to hacking&lt;/a&gt;
(specifically, an XSS vulnerability that was quickly found by others).
Equifax failed to use its own domain name for all its sites (as is standard),
making it easy for others to spoof them.
Indeed, NPR reported that that
&lt;a href=&quot;http://www.npr.org/sections/thetwo-way/2017/09/21/552681357/after-massive-data-breach-equifax-directed-customers-to-fake-site&quot;&gt;&amp;#8221;After Massive Data Breach, Equifax Directed Customers To Fake Site&amp;#8221;&lt;/a&gt;.
There are now suggestions that there were
&lt;a href=&quot;https://arstechnica.com/information-technology/2017/09/massive-equifax-hack-reportedly-started-4-months-before-it-was-detected/&quot;&gt;break-ins even
earlier&lt;/a&gt; which Equifax never detected.
In short: The more we learn, the worse it gets.
&lt;/p&gt;

&lt;p&gt;
Most obviously, Equifax failed
to responsibly update a known vulnerable component
in a timely way.
Updating software doesn&amp;#8217;t matter when there&amp;#8217;s no valuable
information, but in this case
extremely sensitive personal data was involved.
This was especially sensitive data, Equifax was using a component version
with a publicly-known vulnerability, and it was known that attackers were
exploiting that vulnerability.
It was completely foreseeable that attackers would use this vulnerable
component to extract sensitive data.
In short, Equifax had a duty of care
that they failed to perform.
Sometimes attackers perform an unprecedented kind of sneaky attack,
and get around a host of prudent defenses;
that would be different.
But there is no excuse for failing to promptly respond
when you &lt;i&gt;know&lt;/i&gt; that a component is vulnerable.
That is negligence.
&lt;/p&gt;
&lt;p&gt;
But how can you quickly update software components?
Does this require magic?  Not at all, it just requires accepting that
this &lt;i&gt;will&lt;/i&gt; happen and so you &lt;i&gt;must&lt;/i&gt; be ready.
This is not an unpredictable event; I may not know exactly &lt;i&gt;when&lt;/i&gt;
it will happen, but I can be certain that it &lt;i&gt;will&lt;/i&gt; happen.
Once you accept that it will happen, you can easily get ready for it.
There are tools that can help you monitor when your components publicly
report a vulnerability or security update, so that you quickly find out
when you have a problem.
Package managers let you rapidly download, review, and update a component.
You need to have an automated checking system that
uses a variety of static tools, automated test suites,
and other dynamic tools so that you can be confident that the system
(with updated component) works correctly.
You need to be confident that you can ship to production immediately
with acceptable risk after
you&amp;#8217;ve updated your component and run your automated checking system.
If you&amp;#8217;re not confident, then your checking system is unacceptable and
needs to be fixed.
You also need to quickly ship that to production (and this must be
automated), because again,
you have to address vulnerabilities &lt;i&gt;faster&lt;/i&gt; than the attacker.
&lt;/p&gt;
&lt;p&gt;
Of course, your risks go down much further if you think about security
the whole time you&amp;#8217;re developing software.
For example, you can design your system so that a defect is
(1) less likely to lead to a system vulnerability or
(2) has less of an impact.
When you do that, then a component vulnerability will often not
lead to a system vulnerability anyway.
A single vulnerability in a front-end component should not
have allowed such a disastrous outcome in the first place, since this
was especially sensitive data, so the Equifax
design also appears to have been negligent.
They also failed to detect the problem for a long time; you should be
monitoring high-value systems, to help reduce the impact of a vulnerability.
The failure to notice this is also hard to justify.
Developing secure software is quite possible, and you don&amp;#8217;t need to
break the bank to do it.
It&amp;#8217;s impossible in the real world to be perfect,
but it&amp;#8217;s very possible to be &lt;i&gt;adequately&lt;/i&gt; secure.
&lt;/p&gt;
&lt;p&gt;
Sadly, very few software developers know how to develop secure software.
So I&amp;#8217;ve created a video that&amp;#8217;s on YouTube that should help:
&lt;a href=&quot;https://www.youtube.com/watch?v=5a5D4d6hcEY&quot;&gt;&amp;#8220;How to Develop Secure Applications: The BadgeApp Example&amp;#8221; (by David A. Wheeler)&lt;/a&gt;.
This walks through a real-world program (BadgeApp)
as an example, to show approaches
for developing far more secure software.
If you&amp;#8217;re involved in software development in any way, I encourage you
to take a look at that video.
Your software will almost certainly look different, but if you think
about security throughout development, the results will almost certainly
be much better.
Perfection is impossible, but you can &lt;i&gt;manage&lt;/i&gt; your risks, that is,
reduce the probability and impact of attacks.
There are a wide variety of countermeasures that can often prevent attacks,
and they work well when combined with monitoring and response mechanisms
for the relatively few attacks that get through.
&lt;/p&gt;
&lt;p&gt;
The contrast between Equifax and BadgeApp is stark.
Full disclosure: I am the technical lead of the BadgeApp project&amp;#8230; but
it is clear we did a better job than Equifax.
Earlier this week a vulnerability was announced
in one of the components (nokogiri) that is used by the BadgeApp.
This vulnerability was announced on
&lt;a href=&quot;https://github.com/rubysec/ruby-advisory-db&quot;&gt;ruby-advisory-db&lt;/a&gt;,
a database of vulnerable Ruby gems (software library components)
used to report to users about component vulnerabilities.
Within two hours of that announcement the BadgeApp
project had downloaded the security update, run the BadgeApp
application through a variety of tools and its automated test suite
(with 100% statement coverage) to make sure everything was okay,
and pushed the fixed version to the production site.
The BadgeApp application is a simpler program, sure, but it also manages much
less sensitive data than Equifax&amp;#8217;s systems.
We should expect Equifax to do &lt;i&gt;at least&lt;/i&gt; as well, because they
handle much more sensitive data.
Instead,
Equifax failed to update reused components with known vulnerabilities in
a timely fashion.
&lt;/p&gt;
&lt;p&gt;
Remember, &lt;b&gt;the attacker decides&lt;/b&gt;.
&lt;/p&gt;
&lt;p&gt;
The attacker decides how fast you need to react, what you need to defend
against, and what you need to counter.
More generally, the attacker decides how much you need to do to
counter attacks.
You do not get to decide what the attacker will choose to do.
But you &lt;i&gt;can&lt;/i&gt; plan ahead to make your software secure.
&lt;/p&gt;
</description>
   </item>
  </channel>
</rss>