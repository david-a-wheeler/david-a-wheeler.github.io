<?xml version="1.0" encoding="UTF-8"?>
<!-- name="generator" content="blosxom/2.0" -->

<rss version="2.0">
  <channel>
    <title>David A. Wheeler's Blog   </title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog</link>
    <description>David A. Wheeler's weblog.</description>
    <language>en</language>

  <item>
    <title>CWE Top 25 for 2019</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
    <link>https://www.dwheeler.com/blog/2019/09/17#cwe-top-25-2019</link>
    <pubDate>Tue, 17 Sep 2019 17:09 GMT</pubDate>
    <!-- date: 2019-09-17 -->
    <description>
&lt;p&gt;
In case you werenâ€™t aware of it,
there is now a
&lt;a href=&quot;https://cwe.mitre.org/top25/archive/2019/2019_cwe_top25.html&quot;
&gt;2019 version of the CWE Top 25 list&lt;/a&gt;.
This list attempts to rank what are the most important kinds
of software vulnerabilities
(what they call &amp;#8220;weaknesses&amp;#8221;).
&lt;/p&gt;

&lt;p&gt;
Their new approach is to directly use
the National Vulnerability Database (NVD) to score
various kinds of vulnerabilities.
There are a number of limitations with this approach,
and they discuss many of them in the cited page.
&lt;/p&gt;

&lt;p&gt;
Their approach does have some oddnesses, for example,
their #1 worst problem
(CWE-119, Improper restriction of operations within the bounds of
a memory buffer) is itself the parent of items #5 (CWE-125, out-of-bounds read)
and #12 (CWE-787, out-of-bounds write).
&lt;/p&gt;

&lt;p&gt;
Another oddity: they rank Cross-Site Request Forgery (CSRF) quite high (#9).
CSRF doesn&amp;#8217;t even appear in the
&lt;a href=&quot;https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project&quot;
&gt;2017 (latest) OWASP Top 10 list&lt;/a&gt;, even though the
OWASP top 10 list focuses on websites (where CSRF can occur).
I think this happens because the CWE folks are
using a large dataset from 2017-2018, where there are still a large
number of CSRF vulnerabilities.
But the impact of those remaining vulnerabilities has been going down,
due to changes to frameworks, standards, and web browsers.
Most sites use a pre-existing frameworks, and frameworks have been
increasingly adding on-by-default CSRF countermeasures.
The &amp;#8220;SameSite&amp;#8221; cookie attribute that provides an easy countermeasure
against CSRF was implemented in most browsers around 2016-2018
(depending on the browser),
but having it take effect required that websites make changes,
and during that 2017-2018 timeframe websites
were only starting to deploy those changes.
As of late 2019 several browsers are in the
process of switching their SameSite defaults so that they
counter CSRF by default, &lt;i&gt;without&lt;/i&gt; requiring sites to do anything.
(In particular, see the announcement for
&lt;a href=&quot;https://www.chromestatus.com/feature/5088147346030592&quot;
&gt;Chrome&lt;/a&gt;
and the change log for
&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1551798&quot;
&gt;Mozilla Firefox&lt;/a&gt;.)
These changes to the SameSite defaults
implement the security improvements proposed in
&lt;a href=&quot;https://tools.ietf.org/html/draft-west-cookie-incrementalism-00&quot;
&gt;Incrementally Better Cookies&lt;/a&gt; by M. West in May 2019.
This change in the security default could not have been realistically done
before 2019 because of a
&lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=198181&quot;&gt;bug
in the Apple Safari browser that was only fixed in 2019&lt;/a&gt;.
As more browsers self-protect against CSRF by default,
without requiring sites or developers to do anything,
CSRF vulnerabilities will become dramatically less likely.
This once again shows the power of defaults;
systems should be designed to be secure by default whenever possible,
because normally people simply accept the defaults.
&lt;/p&gt;

&lt;p&gt;
That said, having a top 25 list based on quantitative analysis is probably
for the best long-term, and the results appear to be (mostly)
very reasonable.
I&amp;#8217;m glad to see it!
&lt;/p&gt;
</description>
   </item>
  </channel>
</rss>