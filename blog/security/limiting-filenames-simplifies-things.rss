<?xml version="1.0"?>
<!-- name="generator" content="blosxom/2.0" -->

<rss version="2.0">
  <channel>
    <title>David A. Wheeler's Blog   </title>
    <link>http://www.dwheeler.com/blog</link>
    <description>David A. Wheeler's weblog.</description>
    <language>en</language>

  <item>
    <title>Limiting Unix/Linux/POSIX filenames simplifies things: Lowercasing filenames</title>
    <link>http://www.dwheeler.com/blog/2009/07/26#limiting-filenames-simplifies-things</link>
    <pubDate>Sun, 26 Jul 2009 08:40 GMT</pubDate>
    <!-- date: 2009-07-26 -->
    <description>
&lt;p&gt;
My essay
&lt;a href=&quot;http://www.dwheeler.com/essays/fixing-unix-linux-filenames.html&quot;&gt;
&lt;i&gt;Fixing Unix/Linux/POSIX Filenames:
Control Characters (such as Newline), Leading Dashes, and Other Problems&lt;/i&gt;&lt;/a&gt;
argues that adding some limitations on legal Unix/Linux/POSIX filenames
would be an improvement.
In particular, a few minor limitations (which most people assume anyway)
would eliminate certain kinds of bugs, some of which end up
being security vulnerabilities.
Forbidding crazy things (like control characters in filenames)
simplifies creating programs that work all the time.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#8217;s a little example of this.
I wanted to convert all the filenames inside a directory tree
to all lowercase letters.
I didn&amp;#8217;t want to lose any files without checking on them first,
so I wanted it to ask before doing a rename in a way that would
eliminate a file (i.e., I wanted to use &lt;tt&gt;mv&amp;nbsp;-i&lt;/tt&gt;).
I didn&amp;#8217;t find such a program built into my distro, so I wrote
a short script to do it
(which is just as well, because it makes a nice simple example).
I wanted it to be portable, since I might need it again later.
&lt;/p&gt;
&lt;p&gt;
So how do we write this?
A simple glob like &amp;#8220;*&amp;#8221; won&amp;#8217;t work, because it needs to
recursively descend through a tree of directories, and simple globs
will skip hidden filesystem objects too (and I want to include them).
I could write a more complex glob that included hidden files and directories,
and recursed down through subdirectories, but the naive way of recursing
down subdirectories can have many problems (e.g., it could get stuck
in endless loops created by symbolic links).
If we need to handle a tree recursively, there&amp;#8217;s a better
tool designed for the purpose &amp;mdash; &lt;tt&gt;find&lt;/tt&gt;.
&lt;/p&gt;
&lt;p&gt;
Unfortunately, an ordinary
&lt;tt&gt;find&amp;nbsp;.&lt;/tt&gt;
has an interesting problem &amp;mdash;
it will pick the upper-level names first,
and if we rename the upper-level names first, find will fail when
it tries to enter them (since they will no longer exist).
No problem &amp;mdash; if we are manipulating the tree structure
(including renames), we can use the &lt;tt&gt;-depth&lt;/tt&gt; option of find, which
will process each directory&amp;#8217;s contents
before the directory itself.
We can then rename just the basename of what find returns, so
we won&amp;#8217;t change anything before find descends into it.
&lt;/p&gt;
&lt;p&gt;
Now, if we could assume that newlines and tabs cannot be in filenames, 
as recommended in
&lt;a href=&quot;http://www.dwheeler.com/essays/fixing-unix-linux-filenames.html&quot;&gt;
&lt;i&gt;Fixing Unix/Linux/POSIX Filenames&amp;#8230;&lt;/i&gt;&lt;/a&gt;, then
we can do a simple &lt;tt&gt;for&lt;/tt&gt; loop around the results of find.
My
&lt;a href=&quot;http://www.dwheeler.com/misc/mklowercase&quot;&gt;shell script
&lt;tt&gt;mklowercase&lt;/tt&gt; renames filenames to lowercase letters recursively&lt;/a&gt;.
Here is its essence:
&lt;/p&gt;
&lt;pre&gt;
  #!/bin/sh
  # mklowercase - change all filenames to lowercase recursively from &quot;.&quot; down.
  # Will prompt if there's an existing file of that name (mv -i)
  # Presumes that filenames don't include newline or tab.

  set -eu
  IFS=`printf '\n\t'`
  
  for file in `find . -depth` ; do
    [ &quot;.&quot; = &quot;$file&quot; ] &amp;amp;&amp;amp; continue                  # Skip &quot;.&quot; entry.
    dir=`dirname &quot;$file&quot;`
    base=`basename &quot;$file&quot;`
    oldname=&quot;$dir/$base&quot;
    newbase=`printf &quot;%s&quot; &quot;$base&quot; | tr A-Z a-z`
    newname=&quot;$dir/$newbase&quot;
    if [ &quot;$oldname&quot; != &quot;$newname&quot; ] ; then
      mv -i &quot;$file&quot; &quot;$newname&quot;
    fi
  done
&lt;/pre&gt;
&lt;p&gt;
This script skips &amp;#8220;.&amp;#8221;, which is not strictly necessary,
but I thought it would be a good idea to point out that you may need to skip
&amp;#8220;.&amp;#8221; sometimes.
&lt;/p&gt;
&lt;p&gt;
Yes, this &lt;i&gt;could&lt;/i&gt; be modified to handle literally all
possible Unix/Linux/POSIX filenames, but those modifications make
it more complicated and uglier.
One approach would be to use one program to use &lt;tt&gt;find&amp;#8230;-exec&lt;/tt&gt;, which
then invokes another script to do the renaming.
But then you have to maintain two scripts, and keep them in sync.
You could embed the command into find, but then the find command
becomes hideously complicated.
&lt;/p&gt;
&lt;p&gt;
Another solution to handling all filenames would be to change the loop to:
&lt;/p&gt;
&lt;pre&gt;
  find . -depth -print0 |
  while IFS=&quot;&quot; read -r -d '' file ; do ...
&lt;/pre&gt;
&lt;p&gt;
However, this requires non-standard GNU extensions to find (-print0)
and bash (read -d),
as well as being uglier and more complicated.  Also, if &amp;#8220;mv&amp;#8221; is implemented
as required by the Single Unix Standard, then the &amp;#8220;mv -i&amp;#8221;
will fail badly if it tries to rename a file into an existing name.
That&amp;#8217;s because when it tries to get an answer, it will send a prompt to
stderr, but it will expect a RESPONSE from stdin&amp;#8230; and yet, stdin
is where it gets the list of filenames!!
&lt;/p&gt;
&lt;p&gt;
And it&amp;#8217;s all silly anyway.
If you put newlines in filenames, &lt;i&gt;lots&lt;/i&gt; of scripts fail.
It&amp;#8217;s simply too much of a pain to deal with them &amp;#8220;correctly&amp;#8221;.
Which is the point of
&lt;a href=&quot;http://www.dwheeler.com/essays/fixing-unix-linux-filenames.html&quot;&gt;
&lt;i&gt;Fixing Unix/Linux/POSIX Filenames&lt;/i&gt;&lt;/a&gt; &amp;mdash;
adding some limitations on legal Unix/Linux/POSIX filenames
would be an improvement.
At the least, by default let&amp;#8217;s forbid control characters
(so simple &amp;#8220;find&amp;#8221; and filename display is safe),
forbid leading dash characters (so simple globbing is safe),
require that all filenames be UTF-8
(so displaying filenames always works), and perhaps
forbid trailing spaces
(since these are dangerously misleading to end-users).
I would like to see kernels build in the mechanisms to
forbid certain kinds of filenames, so that administrators can
then specify the specific &amp;#8220;bad filename&amp;#8221; policy they
would like to use.
&lt;/p&gt;
&lt;p&gt;
So please take a look at:
&lt;a href=&quot;http://www.dwheeler.com/essays/fixing-unix-linux-filenames.html&quot;&gt;
&lt;i&gt;Fixing Unix/Linux/POSIX Filenames:
Control Characters (such as Newline), Leading Dashes,
and Other Problems&lt;/i&gt;&lt;/a&gt;.
I&amp;#8217;ve made a few recent additions, thanks to some interesting
comments people have sent, but the basic message is the same.
&lt;/p&gt;
</description>
   </item>
  </channel>
</rss>