<?xml version="1.0" encoding="UTF-8"?>
<!-- name="generator" content="blosxom/2.0" -->

<rss version="2.0">
  <channel>
    <title>David A. Wheeler's Blog   </title>
    <link>http://www.dwheeler.com/blog</link>
    <description>David A. Wheeler's weblog.</description>
    <language>en</language>

  <item>
    <title>Presenting at American Society for Quality</title>
    <link>http://www.dwheeler.com/blog/2014/02/20#asq-2014-oss</link>
    <pubDate>Thu, 20 Feb 2014 10:29 GMT</pubDate>
    <!-- date: 2014-02-20 -->
    <description>
&lt;p&gt;
On February 25, 2014,
I will be presenting on
&lt;a href=&quot;http://www.asq509.org/ht/d/sp/i/2499/pid/2499&quot;&gt;&amp;#8220;Open Source Software and Government&amp;#8221; at the
American Society for Quality (ASQ) Software SIG&lt;/a&gt;.
You can join in person in McLean, Virginia;
there will also be various video tele-conferencing sites, and you
can join by phone or online as well.
&lt;/p&gt;
&lt;p&gt;
If you&amp;#8217;re interested, you&amp;#8217;re welcome to join us,
but
&lt;a href=&quot;http://www.asq509.org/ht/d/sp/i/2499/pid/2499&quot;&gt;you&amp;#8217;ll need to pre-register&lt;/a&gt;.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>William W. McCune: He made the world a better place through source code</title>
    <link>http://www.dwheeler.com/blog/2014/02/07#william-mccune-source-code</link>
    <pubDate>Fri, 07 Feb 2014 18:46 GMT</pubDate>
    <!-- date: 2014-02-07 -->
    <description>
&lt;p&gt;
Here I want to honor the memory of William W. (&amp;#8220;Bill&amp;#8221;) McCune,
who helped change the world for the better
by releasing software source code.
I hope that many other researchers and government
policy-makers will follow his lead&amp;#8230; and below I intend to show why.
&lt;/p&gt;

&lt;p&gt;
But first, I should explain my connection to him.
&lt;a href=&quot;http://www.dwheeler.com/trusting-trust&quot;&gt;My PhD dissertation&lt;/a&gt;
involved countering the so-called &amp;#8220;trusting trust&amp;#8221; attack.
In this attack, an attacker subverts the
tools that developers use to create software.
This turns out to be a really nasty attack.
If a software developer&amp;#8217;s tools are subverted,
then the attacker actually controls the computer system running the software.
This is no idle concern, either; we know that computers are under
constant attack, and that some of these attacks are very sophisticated.
Such subversions could allow attackers to essentially control all computers
worldwide, including the global financial system, militaries,
electrical systems, dams, you name it.
That kind of power makes this kind of attack potentially worthwhile, but
only if it cannot be detected and countered.
For many years there were no good detection mechanisms or countermeasures.
Then Henry Spencer suggested a potential solution&amp;#8230; but
there was no agreement that his idea would really counter attackers.
That matters; how can you be absolutely &lt;i&gt;certain&lt;/i&gt;
about some claim?
&lt;/p&gt;

&lt;p&gt;
The &amp;#8220;gold standard&amp;#8221; for knowing if
something is true is a formal mathematical proof.
Many important questions cannot be proved this way, all proofs depend
on assumptions, and creating a formal proof is often hard.
Still, a formal mathematical proof is the best guarantee we have for
being certain about something.
And there were a lot of questions about whether or not Henry Spencer&amp;#8217;s
approach would really counter this attack.
So, I went about trying to prove that Henry Spencer&amp;#8217;s idea
really would counter the attack (if certain assumptions held).
&lt;/p&gt;

&lt;p&gt;
After trying several other approaches,
I found that the tools developed by
Bill McCune (in particular &lt;i&gt;prover9&lt;/i&gt;, &lt;i&gt;mace4&lt;/i&gt;, and &lt;i&gt;ivy&lt;/i&gt;)
were perfect for my needs.
These tools made my difficult work far easier, because his tools managed to
mostly-automatically prove claims mathematically once they were described
using mathematical statements.
In the end, I managed to mathematically prove that Henry Spencer&amp;#8217;s
approach really did counter the subverted compiler problem.
The tools Bill McCune developed and released made a real difference
in helping to solve this challenging real-world problem.
I didn&amp;#8217;t need much help (because his tools were remarkably easy to use
and well-documented), but he responded quickly when I emailed him too.
&lt;/p&gt;

&lt;p&gt;
Sadly, Bill McCune suddenly died on May 4, 2011,
leaving the field of automated reasoning deprived of one of its founders
(particularly in the subfields
of practical theorem proving and model building).
In 2013 an academic book was released in his honor
(&lt;a href=&quot;http://link.springer.com/book/10.1007/978-3-642-36675-8&quot;&gt;&amp;#8220;Automated Reasoning and Mathematics:
Essays in Memory of William W. McCune&amp;#8221;,
Lecture Notes in Artificial Intelligence 7788&lt;/a&gt;).
That book&amp;#8217;s preface has a nice tribute to Bill McCune,
listing some of his personal
accomplishments (e.g., the development of &lt;i&gt;Otter&lt;/i&gt;)
and other accomplishments that his tools enabled.
&lt;/p&gt;

&lt;p&gt;
Bill McCune released many tools as open source software
(including prover9, mace4, ivy, and the older tool Otter).
This means that anyone could use the software (for any purpose),
modify it, and distribute it (with or without modification).
These freedoms had far-reaching effects, accelerating research in
automated proving of claims, as well as speeding the use of these techniques.
That book&amp;#8217;s preface notes several of Bill McCune&amp;#8217;s
accomplishments, including the impact he had by releasing the code:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bill McCune &amp;#8220;deeply understood the &amp;#8230; research developed elsewhere,
and united it with the best results of [his organization&amp;#8217;s] tradition
[to create] a new theorem prover named Otter&amp;#8230;
The release of Otter at CADE-9 in 1988 was a turning point in the history of
automated reasoning. Never before had the computer science community seen a
theorem prover of such awesome power&amp;#8230;&amp;#8221;
&lt;/li&gt;
&lt;li&gt;&amp;#8220;perhaps Otter&amp;#8217;s greatest impact was due to Bill&amp;#8217;s generous and
far-looking decision to make its source code publicly available.
It is impossible to describe completely a reasoning program in research
papers. There is always some amount of knowledge, often a surprising
amount, that is written only in the code, and therefore remains hidden, if
the code is not public or is too hard to read. Bill&amp;#8217;s code was admirably
readable and well organized. Other researchers, including those whose
systems eventually overtook Otter in speed or in variety of inference
rules, also learnt from Bill&amp;#8217;s code data structures, algorithms, and
indexing schemes, which are fundamental for implementing theorem provers&amp;#8230;
Prover9 and Mace4 inherited
all the great qualities of their predecessors Otter and Mace2, as witnessed by
the fact that they are still very much in use today&amp;#8221;.
&lt;/li&gt;
&lt;li&gt;Mark E. Stickel, another developer of automated reasoning systems,
noted that,
&amp;#8220;Bill and I were both system builders
who learned from each other&amp;#8217;s systems.
I often consult Otter or Prover9 code to see
how Bill did things, and Bill looked
at my implementation of the DPLL procedure when developing [his] ANL-DP
and my implementation of AC-unification when developing [his] EQP.&amp;#8221;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
All too often the U.S. government spends a fortune in research, and
then that same research has to be recreated from scratch several times again
by other researchers (sometimes unsuccessfully).
This is a tremendous waste of government money, and can delay work by
years (if it can happen at all) resulting in
far less progress for the money spent.
Bill McCune instead ensured that this results got out to people
who could use and improve upon them.
In this specific area Bill McCune made software
research available to many others, so that those others
could use it, verify it, and build on top of those results.
&lt;/p&gt;

&lt;p&gt;
Of course, he was not alone in recognizing the value of sharing research
when implemented as software.
The paper
&lt;a href=&quot;http://fmv.jku.at/papers/Biere-ETH-TR-444-2004.pdf&quot;&gt;&amp;#8221;The Evolution from LIMMAT to NANOSAT&amp;#8221; by Armin Biere (April 2004)&lt;/a&gt;
makes the same point when they tried to reproduce others&amp;#8217; work.
That paper states,
&amp;#8220;From the publications alone, without access to the source code, various
details were still unclear&amp;#8230; what we did not realize, and which hardly
could be deduced from the literature, was [an optimization] employed
in GRASP and CHAFF [was critically important]&amp;#8230; Only [when CHAFF&amp;#8217;s
source code became available did] our unfortunate design decision became
clear&amp;#8230; The lesson learned is, that important details are often omitted
in publications and can only be extracted from source code. It can be
argued, that making source code &amp;#8230; available is as important
to the advancement of the field as publication.&amp;#8221;
&lt;/p&gt;

&lt;p&gt;
More generally,
&lt;a href=&quot;http://freethecode.org/&quot;&gt;Free the Code.org&lt;/a&gt;
argues that if government pays to develop software, then it should be
available to others for reuse and sharing.
That makes sense to me; if &amp;#8220;we the people&amp;#8221; paid to develop software,
then by default &amp;#8220;we the people&amp;#8221; should receive it.
I think it especially makes sense in science and research;
without the details of how software works, results are not reproduceable.
Currently much of science is not reproduceable (and thus not really science),
though &lt;a href=&quot;http://centerforopenscience.org&quot;&gt;open science&lt;/a&gt; efforts
are working to change this.
&lt;/p&gt;

&lt;p&gt;
I think Bill McCune made great contributions to many, many, others.
I am certainly one of the beneficiaries.
Thank you, Bill McCune, so very much for your life&amp;#8217;s work.
&lt;/p&gt;
</description>
   </item>
  </channel>
</rss>