<?xml version="1.0" encoding="UTF-8"?>
<!-- name="generator" content="blosxom/2.0" -->

<rss version="2.0">
  <channel>
    <title>David A. Wheeler's Blog   </title>
    <link>http://www.dwheeler.com/blog</link>
    <description>David A. Wheeler's weblog.</description>
    <language>en</language>

  <item>
    <title>I hope we learn from the computer security problems of 2014</title>
    <link>http://www.dwheeler.com/blog/2014/12/31#learn-2014</link>
    <pubDate>Wed, 31 Dec 2014 15:06 GMT</pubDate>
    <!-- date: 2014-12-31 -->
    <description>
&lt;p&gt;
As 2014 draws to a close, I hope anyone involved with computers
will resolve to &lt;i&gt;learn&lt;/i&gt; from the legion of security
problems of 2014.
&lt;/p&gt;
&lt;p&gt;
We had way too many serious vulnerabilities in widely-used software
revealed in 2014.
In each case, there are lessons that people &lt;i&gt;could&lt;/i&gt; learn from them.
Please take a look at the lessons that can be learned from
&lt;a href=&quot;/essays/heartbleed.html&quot;&gt;Heartbleed&lt;/a&gt;,
&lt;a href=&quot;/essays/shellshock.html&quot;&gt;Shellshock&lt;/a&gt;,
the
&lt;a href=&quot;/essays/poodle-sslv3.html&quot;&gt;POODLE attack on SSLv3&lt;/a&gt;, and the
&lt;a href=&quot;/essays/apple-goto-fail.html&quot;&gt;Apple goto fail vulnerability&lt;/a&gt;.
More generally,
&lt;a href=&quot;http://www.dwheeler.com/secure-programs/&quot;&gt;a lot of information
is available on how develop secure software&lt;/a&gt; -
even though most software developers still do not know how to develop
secure software.
Simiarly, there are a host of lessons that organizations could learn from
&lt;a href=&quot;/essays/sony-lax.html&quot;&gt;Sony Pictures&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
&lt;i&gt;Will&lt;/i&gt; people actually learn anything?
Georg Wilhelm Friedrich Hegel reportedly said that,
&amp;#8220;We learn from history that we do not learn from history&amp;#8221;.
&lt;/p&gt;
&lt;p&gt;
Yet I think there are reasons to hope.
There are a lot of efforts to improve the security of
Free/Libre/Open Source Software (FLOSS) that are important yet
inadequately secure.
The
&lt;a href=&quot;http://www.linuxfoundation.org/programs/core-infrastructure-initiative&quot;&gt;Linux Foundation (LF) Core Infrastructure Initiative (CII)&lt;/a&gt;
was established to &amp;#8220;fund open source projects that are in the critical
path for core computing functions&amp;#8221; to improve their security.
&lt;a href=&quot;https://fsfe.org/news/2014/news-20141219-01.en.html&quot;&gt;most recent European Union (EU) budget includes â‚¬1 million for auditing free-software programs&lt;/a&gt; to identify and fix vulnerabilities.
The &lt;a href=&quot;https://host-project.org/&quot;&gt;US DHS HOST project&lt;/a&gt; is also
working to improve security using open source software (OSS).
The
&lt;a href=&quot;https://www.google.com/about/appsecurity/patch-rewards/&quot;&gt;Google Application Security Patch Reward Program&lt;/a&gt; is also working to improve security.
And to be fair, these problems were found by people who were examining
the software or protocols so that the problems could be fixed - exactly
what you &lt;i&gt;want&lt;/i&gt; to happen.
At an organizational level, I think Sony was unusually lax in its
security posture.
I am already seeing evidence that other organizations have suddenly
become much more serious about security, now that they see what has been
done to Sony Pictures.
In short, they are finally starting to see that
security problems are not theoretical; they are real.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#8217;s hoping that 2015 will be known as the year where people took
computer security more seriously, and as a result, software and our
computer systems became much harder to attack.
If that happens, that would make 2015 an awesome year.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Sony Pictures, Lax Security, and Passwords</title>
    <link>http://www.dwheeler.com/blog/2014/12/20#sony-lax</link>
    <pubDate>Sat, 20 Dec 2014 19:10 GMT</pubDate>
    <!-- date: 2014-12-20 -->
    <description>
&lt;p&gt;
&lt;a href=&quot;/essays/sony-lax.html&quot;&gt;Sony Pictures, Lax Security, and Passwords&lt;/a&gt;
is a new essay about the devastating attack on Sony Pictures.
We now have new information about how Sony Pictures was attacked;
from that, and public information about Sony Pictures,
we can see why the attack was so devastating.
Even more importantly, we can learn from it.
So please, take a look at
&lt;a href=&quot;/essays/sony-lax.html&quot;&gt;Sony Pictures, Lax Security, and Passwords&lt;/a&gt;.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Lessons learned from Apple goto fail</title>
    <link>http://www.dwheeler.com/blog/2014/11/23#apple-goto-fail</link>
    <pubDate>Sun, 23 Nov 2014 19:25 GMT</pubDate>
    <!-- date: 2014-11-23 -->
    <description>
&lt;p&gt;
The year 2014 has not been a good year for the SSL/TLS protocol.
SSL/TLS is the fundamental algorithm for securing web applications.
Yet every major implementation has had at least one
disastrous vulnerability, including
Apple (&lt;a href=&quot;http://www.dwheeler.com/essays/apple-goto-fail.html&quot;&gt;goto fail&lt;/a&gt;),
GnuTLS,
OpenSSL (&lt;a href=&quot;http://www.dwheeler.com/essays/heartbleed.html&quot;&gt;Heartbleed&lt;/a&gt;),
and Microsoft.
Separately a nasty attack has been found in the underlying
SSLv3 protocol
(&lt;a href=&quot;http://www.dwheeler.com/essays/poodle-sslv3.html&quot;&gt;POODLE&lt;/a&gt;).
But instead of just noting those depressing statistics, we
need to figure out &lt;i&gt;why&lt;/i&gt; those vulnerabilities happened,
and &lt;i&gt;change&lt;/i&gt; how we develop software to prevent them
from happening again.
&lt;/p&gt;
&lt;p&gt;
To help, I just released
&lt;a href=&quot;http://www.dwheeler.com/essays/apple-goto-fail.html&quot;&gt;The Apple goto fail vulnerability: lessons learned&lt;/a&gt;, a paper that is similar to my
previous papers that focuses on
&lt;i&gt;how to counter these kinds of vulnerabilities
in the future&lt;/i&gt;.
In many ways Apple goto fail vulnerability was much more embarassing
compared to Heartbleed; the goto fail vulnerability was
&lt;i&gt;easy&lt;/i&gt; to detect, in a portion that was a &lt;i&gt;key&lt;/i&gt; part of its
functionality.
This vulnerability was reported back in February 2014, but there
does not seem to be a single place where you can find a more complete
list of approaches to counter it.
I also note some information that doesn&amp;#8217;t seem to
be available elsewhere.
&lt;/p&gt;
&lt;p&gt;
So if you develop software - or manage people who do - take
a look at
&lt;a href=&quot;http://www.dwheeler.com/essays/apple-goto-fail.html&quot;&gt;The Apple goto fail vulnerability: lessons learned&lt;/a&gt;.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Peter Miller and improving make</title>
    <link>http://www.dwheeler.com/blog/2014/10/22#make</link>
    <pubDate>Wed, 22 Oct 2014 18:24 GMT</pubDate>
    <!-- date: 2014-10-22 -->
    <description>
&lt;p&gt;
First, a sad note.
&lt;a href=&quot;http://article.gmane.org/gmane.linux.debian.user.news/547&quot;&gt;Peter Miller died on 2014-07-27 from leukemia&lt;/a&gt;.
He did a lot of important things, including writing the influential paper
&lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.20.2572&quot;&gt;&amp;#8220;Recursive Make Considered Harmful&amp;#8221;&lt;/a&gt;.
Rest in peace.
&lt;/p&gt;
&lt;p&gt;
I should point out an
&lt;a href=&quot;http://www.dwheeler.com/essays/make.html&quot;&gt;essay I&amp;#8217;ve written
about improving make&lt;/a&gt;.
Make is widely used, but the POSIX standard for it lacks
key functions, including vital ones that Peter Miller pointed out years ago.
Thankfully, progress has been made.
My hope is that progress will continue to happen;
&lt;a href=&quot;http://www.dwheeler.com/essays/make.html&quot;&gt;I welcome help
for improving the standard and implementations of make&lt;/a&gt;.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Open Source Software in U.S. Government</title>
    <link>http://www.dwheeler.com/blog/2014/10/20#oss-in-government</link>
    <pubDate>Mon, 20 Oct 2014 12:06 GMT</pubDate>
    <!-- date: 2014-10-20 -->
    <description>
&lt;p&gt;
The report
&lt;a href=&quot;https://host-project.org/content/oss-software-government-challenges-and-opportunities&quot;&gt;&amp;#8220;Open Source Software in Government: Challenges and Opportunities&amp;#8221;&lt;/a&gt; is available to the public (you can &lt;a href=&quot;https://host-project.org/sites/default/files/Open%20Source%20Software%20in%20Government%20-%20Challenges%20and%20Opportunities.pdf&quot;&gt;jump to the &amp;#8220;Download full report&amp;#8221; link at the bottom&lt;/a&gt;).
This paper, which I co-authored,
discusses key challenges and opportunities in the
U.S. government application of open source software (OSS).
It became publicly available only recently,
even though it was finished a while back;
I hope it&amp;#8217;s been worth the wait.
If you&amp;#8217;re interested in the issues of OSS and government,
I think you&amp;#8217;ll find this report very illuminating.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>POODLE attack against SSLv3</title>
    <link>http://www.dwheeler.com/blog/2014/10/14#poodle-sslv3</link>
    <pubDate>Tue, 14 Oct 2014 21:15 GMT</pubDate>
    <!-- date: 2014-10-14 -->
    <description>
&lt;p&gt;
There is a new
&lt;a href=&quot;http://www.dwheeler.com/essays/poodle-sslv3.html&quot;&gt;POODLE attack
against SSLv3&lt;/a&gt;.
See my page for more info.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Twitter</title>
    <link>http://www.dwheeler.com/blog/2014/10/13#twitter-username</link>
    <pubDate>Mon, 13 Oct 2014 15:41 GMT</pubDate>
    <!-- date: 2014-10-13 -->
    <description>
&lt;p&gt;
My username on Twitter is
&lt;a href=&quot;https://twitter.com/drdavidawheeler&quot;&gt;drdavidawheeler&lt;/a&gt;,
for those on Twitter who want occasional comments
on computer security, open source software, software development,
and so on.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>A tester walks into a bar</title>
    <link>http://www.dwheeler.com/blog/2014/10/09#tester-walks-bar</link>
    <pubDate>Thu, 09 Oct 2014 18:15 GMT</pubDate>
    <!-- date: 2014-10-09 -->
    <description>
&lt;p&gt;
&lt;blockquote&gt;
&lt;i&gt;A tester walks into a bar and orders a beer.
Then he orders 999,999 beers.
Orders 0 beers.  Orders -1 beers.
Orders a coyote.  Orders a qpoijzcpx.
Then he insults the bartender.&lt;/i&gt;
&lt;/blockquote&gt;
&lt;!-- That last bit is an addition from a co-worker. I reordered
them to put the numbers first, I think that's easier to follow. --&gt;
&lt;/p&gt;
&lt;p&gt;
This joke (with variations)
is making the rounds, but it also has a serious point.
It&amp;#8217;s a nice example of how testing should work,
including software testing.
&lt;/p&gt;
&lt;p&gt;
Too many of today&amp;#8217;s so-called software &amp;#8220;tests&amp;#8221;
only check for correct data.
This has led to numerous vulnerabilities including
&lt;a href=&quot;http://www.dwheeler.com/essays/heartbleed.html&quot;&gt;Heartbleed&lt;/a&gt;
and
&lt;a href=&quot;http://www.zdnet.com/apples-goto-fail-tells-us-nothing-good-about-cupertinos-software-delivery-process-7000027449/&quot;&gt;Apple&amp;#8217;s &amp;#8220;goto fail; goto fail;&amp;#8221; vulnerability&lt;/a&gt;.
The paper
&lt;a href=&quot;https://crypto.stanford.edu/~dabo/pubs/abstracts/ssl-client-bugs.html&quot;&gt;&amp;#8220;The Most Dangerous Code in the World:
Validating SSL Certificates in Non-Browser Software&amp;#8221;&lt;/a&gt;
found that a disturbingly large number of programss&amp;#8217;
security depends on SSL certificate validation, and they
are insecure because no one actually
tested them with invalid certificates.
They note that
&amp;#8220;most of the vulnerabilities we found should
have been discovered during development with proper unit testing&amp;#8221;.
&lt;/p&gt;
&lt;p&gt;
Good software testing must include
&lt;a href=&quot;http://www.dwheeler.com/essays/heartbleed.html#negative-testing&quot;&gt;negative testing&lt;/a&gt;
(tests with data that should be rejected)
to ensure that the software protects itself against bad data.
This must be part of an automated regression test suite
(re-run constantly) to prevent problems from creeping in later.
For example,
if your programs accept numbers, don&amp;#8217;t just test for
&amp;#8220;correct&amp;#8221; input; test for wrong cases like
too big, zero, negative or too small, and non-numbers.
Testing &amp;#8220;just around&amp;#8221; too big and too small numbers
is often helpful, too, as is testing that tries to bypass the interface.
Your users won&amp;#8217;t know how you did it, but they&amp;#8217;ll know your
program &amp;#8220;just works&amp;#8221; reliably.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Shellshock</title>
    <link>http://www.dwheeler.com/blog/2014/10/05#shellshock</link>
    <pubDate>Sun, 05 Oct 2014 18:30 GMT</pubDate>
    <!-- date: 2014-10-05 -->
    <description>
&lt;p&gt;
I have posted a new
&lt;a href=&quot;http://www.dwheeler.com/essays/shellshock.html&quot;&gt;paper about
Shellshock&lt;/a&gt;.
In particular, it includes a
&lt;a href=&quot;http://www.dwheeler.com/essays/shellshock.html#timeline&quot;&gt;detailed
timeline about shellshock&lt;/a&gt;, which counters a number of myths
and misunderstandings.
It also shows a
&lt;a href=&quot;http://www.dwheeler.com/essays/shellshock.html#detecting&quot;&gt;correct
way to detect if your system is vulnerable to shellshock&lt;/a&gt;
(many postings get it wrong and only detect part of the problem).
&lt;/p&gt;
&lt;p&gt;
I also briefly discuss
&lt;a href=&quot;http://www.dwheeler.com/essays/shellshock.html#detect-or-prevent&quot;&gt;how to detect or prevent future shellshock-like attacks&lt;/a&gt;.
At the moment this list is short, because these kinds of vulnerabilities
are known to be difficult to detect ahead of time.
Still, I think it is worth trying to do this.
My goal is to eventually end up with something similar to the
&lt;a href=&quot;http://www.dwheeler.com/essays/heartbleed.html&quot;&gt;list of countermeasures for Heartbleed-like attacks&lt;/a&gt; that I developed earlier.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Software SOAR released!!</title>
    <link>http://www.dwheeler.com/blog/2014/08/19#software-soar</link>
    <pubDate>Tue, 19 Aug 2014 11:48 GMT</pubDate>
    <!-- date: 2014-08-19 -->
    <description>
&lt;p&gt;
The
&lt;a href=&quot;http://www.acq.osd.mil/se/initiatives/init_pp-sse.html&quot;&gt;&lt;i&gt;Software SOAR&lt;/i&gt;&lt;/a&gt; (which I co-authored) has finally been released to the public!
This document - whose full name is
&lt;a href=&quot;http://www.acq.osd.mil/se/initiatives/init_pp-sse.html&quot;&gt;&lt;i&gt;State-of-the-Art Resources (SOAR) for Software Vulnerability Detection, Test, and Evaluation&lt;/i&gt; (Institute for Defense Analyses Paper P-5061, July 2014)&lt;/a&gt; -
is now available to everyone.
It defines and describes the following overall process for selecting and
using appropriate analysis tools and techniques for evaluating software
for software (security) assurance.
In particular, it identifies types of tools and techniques
available for evaluating software, as well as the
technical objectives those tools and techniques can meet.
A key thing that it does is make clear that in most cases you need to
use a &lt;i&gt;variety&lt;/i&gt; of different tools if you are trying to evaluate
software (e.g., to find vulnerabilities).
&lt;/p&gt;
&lt;p&gt;
The easy way to get the document is via the
&lt;a href=&quot;http://www.acq.osd.mil/se/initiatives/init_pp-sse.html&quot;&gt;Program Protection and System Security Engineering&lt;/a&gt; web page,
then scroll to the bottom to look for it
(it is co-authored by David A. Wheeler and Rama S. Moorthy).
You can jump directly to the
&lt;a href=&quot;http://www.acq.osd.mil/se/docs/P-5061-software-soar-mobility-Final-Full-Doc-20140716.pdf&quot;&gt;Main report of the software SOAR&lt;/a&gt; and &lt;a href=&quot;http://www.acq.osd.mil/se/docs/P-5061-AppendixE-soar-sw-matrix-v9-mobility.xlsx&quot;&gt;Appendix E (Software State-of-the-Art Resources (SOAR) Matrix)&lt;/a&gt;.
You can also
&lt;a href=&quot;https://www.ida.org/~/media/Corporate/Files/Publications/IDA_Documents/ITSD/2014/P-5061.ashx&quot;&gt;get the software SOAR report via IDA&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
I don&amp;#8217;t normally mention things I&amp;#8217;ve done at work,
but this is publicly available, some people have been waiting for it,
and I&amp;#8217;ve found that some people have had trouble finding it.
For example, the article &amp;#8220;Pentagon rates software assurance tools&amp;#8221;
by David Perera (Politico, 2014-08-19) is about this paper, but it does
not tell people how to actually get it.
I&amp;#8217;m hoping that this announcement will give people a hand.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Flawfinder version 1.28 released!</title>
    <link>http://www.dwheeler.com/blog/2014/07/13#flawfinder-1.28</link>
    <pubDate>Sun, 13 Jul 2014 16:32 GMT</pubDate>
    <!-- date: 2014-07-13 -->
    <description>
&lt;p&gt;
I&amp;#8217;ve released yet another new version of
&lt;a href=&quot;http://www.dwheeler.com/flawfinder&quot;&gt;flawfinder&lt;/a&gt; - now
it&amp;#8217;s version 1.28.
Flawfinder is a simple program that examines C/C++ source code and
reports on likely security flaws in the program, ranked by risk level.
&lt;/p&gt;
&lt;p&gt;
This new version has some new capabilities.
Common Weakness Enumeration (CWE) references are now included in most hits
(this makes it easier to use in conjunction with other tools, and
it also makes it easier to find general information about a weakness).
The new version of flawfinder
also has a new option to only produce reports that match
a regular expression
(e.g., you can report only hits with specific CWE values).
This version also adds support for the git diff format.
&lt;/p&gt;
&lt;p&gt;
This new version also has a number of bug fixes.
For example, it handles files not ending in newline,
and it more gracefully handles handles unbalanced double-quotes in sprintf.
A bug in reporting the time executed has also been fixed.
&lt;/p&gt;
&lt;p&gt;
For more information, or a copy, just go to my
&lt;a href=&quot;http://www.dwheeler.com/flawfinder&quot;&gt;original flawfinder home page&lt;/a&gt;
or the
&lt;a href=&quot;https://sourceforge.net/projects/flawfinder/&quot;&gt;flawfinder project page on SourceForge.net&lt;/a&gt;.
Enjoy!
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Interview on Application Security</title>
    <link>http://www.dwheeler.com/blog/2014/06/10#trusted-software-alliance</link>
    <pubDate>Tue, 10 Jun 2014 11:23 GMT</pubDate>
    <!-- date: 2014-06-10 -->
    <description>
&lt;p&gt;
A new interview of me is available:
&lt;a href=&quot;http://trustedsoftwarealliance.com/2014/06/10/david-a-wheeler-on-the-current-state-of-application-security-audio/&quot;&gt;David A. Wheeler on the Current State of Application Security (by the Trusted Software Alliance)&lt;/a&gt;
(&lt;a href=&quot;https://soundcloud.com/trustedsoftwarealliance/david-wheeler-on-the-current-state-of-application-security&quot;&gt;alternate link&lt;/a&gt;).
In this interview I discuss a variety of topics with Mark Miller,
including the need for education in developing secure software,
the need to consider security thoughout the lifecycle,
and the impact of componentization.
I warn that many people do not include security
(including software assurance) when they ask for quality;
while I agree in principle that security is generally part of quality, in
practice you have to specifically &lt;i&gt;ask&lt;/i&gt; for security
or you won&amp;#8217;t get it.
&lt;/p&gt;
&lt;p&gt;
This interview is part of their
&lt;a href=&quot;http://trustedsoftwarealliance.com/category/50-in-50-interviews/&quot;&gt;50 in 50 interviews&lt;/a&gt; series, along with
Joe Jarzombek (Department of Homeland Security),
Steve Lipner (Microsoft),
Bruce Schneier,
Jeff Williams (Aspect Security and OWASP),
and many others.
It was an honor and pleasure to participate, and I hope you enjoy the results.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>On Dave and Gunnar show</title>
    <link>http://www.dwheeler.com/blog/2014/05/21#dave-gunnar-show</link>
    <pubDate>Wed, 21 May 2014 23:04 GMT</pubDate>
    <!-- date: 2014-05-21 -->
    <description>
&lt;p&gt;
There is now an
&lt;a href=&quot;http://dgshow.org/2014/05/51-a-visit-with-the-doctor/&quot;&gt;interview
of me on the Dave and Gunnar show (episode #51)&lt;/a&gt;.
I talk mostly about
&lt;a href=&quot;http://www.dwheeler.com/essays/heartbleed.html&quot;&gt;How to prevent the next Heartbleed&lt;/a&gt;.
I also talk about my
&lt;a href=&quot;http://www.dwheeler.com/numbers-database/&quot;&gt;FLOSS numbers database&lt;/a&gt;
(as
&lt;a href=&quot;http://www.dwheeler.com/blog/2014/05/08/#numbers-database&quot;&gt;previously discussed&lt;/a&gt;) and
&lt;a href=&quot;http://www.dwheeler.com/blog/2013/11/16/#vulnerability-economics&quot;&gt;vulnerability economics&lt;/a&gt;.
There was even a mention of my
&lt;a href=&quot;http://www.dwheeler.com/trusting-trust/&quot;&gt;Fully Countering Trusting Trust through Diverse Double-Compiling&lt;/a&gt; work.
&lt;/p&gt;
&lt;p&gt;
Since the time of the interview, more information has surfaced
about Heartbleed.
Traditional fuzzing could not find Heartbleed, but it looks like some
fuzzing variants could even if the OpenSSL code was unchanged;
see the
&lt;a href=&quot;http://www.dwheeler.com/essays/heartbleed.html&quot;&gt;latest version for more information&lt;/a&gt;.
If you learn more information relevant to the paper, let me know!
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>FLOSS numbers database!</title>
    <link>http://www.dwheeler.com/blog/2014/05/08#numbers-database</link>
    <pubDate>Thu, 08 May 2014 22:22 GMT</pubDate>
    <!-- date: 2014-05-08 -->
    <description>
&lt;p&gt;
If you are doing research related to Free / Libre / Open Source Software
(FLOSS), then I have something that may be useful to you: the
&lt;a href=&quot;http://www.dwheeler.com/numbers-database/&quot;&gt;FLOSS numbers database&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
My paper
&lt;a href=&quot;http://www.dwheeler.com/oss_fs_why.html&quot;&gt;Why Open Source Software / Free Software (OSS/FS, FLOSS, or FOSS)? Look at the Numbers!&lt;/a&gt;
is a big collection of quantitative studies about FLOSS.
Too big, in fact.
There have been a &lt;i&gt;lot&lt;/i&gt; of quantitative studies
about FLOSS over the years!
A lot of people want to query this information for specific purposes, 
and it is hard to pull out just the parts you want from a flat document.
I had thought that as FLOSS became more and more common, fewer
people would want this information&amp;#8230; but I still get requests for it.
&lt;/p&gt;
&lt;p&gt;
So I am announcing the
&lt;a href=&quot;http://www.dwheeler.com/numbers-database/&quot;&gt;FLOSS numbers database&lt;/a&gt;;
it provides the basic information in spreadsheet format,
making it easy to query for just the parts you want.
My special thanks go to Paul Rotilie, who worked to get the
data converted from my document format into the spreadsheet.
&lt;/p&gt;
&lt;p&gt;
If you want to discuss this database, I have set up a discussion group:
&lt;a href=&quot;https://groups.google.com/forum/#!forum/numbers-about-free-libre-open-source-software&quot;&gt;Numbers about Free Libre Open Source Software&lt;/a&gt;.
If you are doing research and need or use this kind of information,
please feel free to join.
If you just need a presenatation based on this, you might like my
&lt;a href=&quot;http://www.dwheeler.com/numbers/&quot;&gt;Presentation: Why Free-Libre / Open Source Software (FLOSS or OSS/FS)? Look at the Numbers!&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
This database is the sort of thing that if you need it, you really need it.
I am sure it is incomplete&amp;#8230; but I am also sure that with your
help, we can make it better.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>How to Prevent the next Heartbleed</title>
    <link>http://www.dwheeler.com/blog/2014/05/03#heartbleed</link>
    <pubDate>Sat, 03 May 2014 20:45 GMT</pubDate>
    <!-- date: 2014-05-03 -->
    <description>
&lt;p&gt;
My new article
&lt;a href=&quot;http://www.dwheeler.com/essays/heartbleed.html&quot;&gt;How to Prevent the next Heartbleed&lt;/a&gt;
describes why the Heartbleed vulnerability in OpenSSL was
so hard to find&amp;#8230; and what could be done to prevent something like
it next time.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Opensource.com interview</title>
    <link>http://www.dwheeler.com/blog/2014/04/24#interview-2014</link>
    <pubDate>Thu, 24 Apr 2014 21:19 GMT</pubDate>
    <!-- date: 2014-04-24 -->
    <description>
&lt;p&gt;
&lt;a href=&quot;http://opensource.com/government/14/4/interview-david-wheeler&quot;&gt;Opensource.com has posted an interview of me, titled
&amp;#8220;US government accelerating development and release of open source&amp;#8221;&lt;/a&gt;.
In this interview
I describe the current state of the use of open source software
by the US federal government,
the challenges of the Federal acquisition system,
and I also discuss what may happen next.
Enjoy!
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Presenting at American Society for Quality</title>
    <link>http://www.dwheeler.com/blog/2014/02/20#asq-2014-oss</link>
    <pubDate>Thu, 20 Feb 2014 10:29 GMT</pubDate>
    <!-- date: 2014-02-20 -->
    <description>
&lt;p&gt;
On February 25, 2014,
I will be presenting on
&lt;a href=&quot;http://www.asq509.org/ht/d/sp/i/2499/pid/2499&quot;&gt;&amp;#8220;Open Source Software and Government&amp;#8221; at the
American Society for Quality (ASQ) Software SIG&lt;/a&gt;.
You can join in person in McLean, Virginia;
there will also be various video tele-conferencing sites, and you
can join by phone or online as well.
&lt;/p&gt;
&lt;p&gt;
If you&amp;#8217;re interested, you&amp;#8217;re welcome to join us,
but
&lt;a href=&quot;http://www.asq509.org/ht/d/sp/i/2499/pid/2499&quot;&gt;you&amp;#8217;ll need to pre-register&lt;/a&gt;.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>William W. McCune: He made the world a better place through source code</title>
    <link>http://www.dwheeler.com/blog/2014/02/07#william-mccune-source-code</link>
    <pubDate>Fri, 07 Feb 2014 18:46 GMT</pubDate>
    <!-- date: 2014-02-07 -->
    <description>
&lt;p&gt;
Here I want to honor the memory of William W. (&amp;#8220;Bill&amp;#8221;) McCune,
who helped change the world for the better
by releasing software source code.
I hope that many other researchers and government
policy-makers will follow his lead&amp;#8230; and below I intend to show why.
&lt;/p&gt;

&lt;p&gt;
But first, I should explain my connection to him.
&lt;a href=&quot;http://www.dwheeler.com/trusting-trust&quot;&gt;My PhD dissertation&lt;/a&gt;
involved countering the so-called &amp;#8220;trusting trust&amp;#8221; attack.
In this attack, an attacker subverts the
tools that developers use to create software.
This turns out to be a really nasty attack.
If a software developer&amp;#8217;s tools are subverted,
then the attacker actually controls the computer system running the software.
This is no idle concern, either; we know that computers are under
constant attack, and that some of these attacks are very sophisticated.
Such subversions could allow attackers to essentially control all computers
worldwide, including the global financial system, militaries,
electrical systems, dams, you name it.
That kind of power makes this kind of attack potentially worthwhile, but
only if it cannot be detected and countered.
For many years there were no good detection mechanisms or countermeasures.
Then Henry Spencer suggested a potential solution&amp;#8230; but
there was no agreement that his idea would really counter attackers.
That matters; how can you be absolutely &lt;i&gt;certain&lt;/i&gt;
about some claim?
&lt;/p&gt;

&lt;p&gt;
The &amp;#8220;gold standard&amp;#8221; for knowing if
something is true is a formal mathematical proof.
Many important questions cannot be proved this way, all proofs depend
on assumptions, and creating a formal proof is often hard.
Still, a formal mathematical proof is the best guarantee we have for
being certain about something.
And there were a lot of questions about whether or not Henry Spencer&amp;#8217;s
approach would really counter this attack.
So, I went about trying to prove that Henry Spencer&amp;#8217;s idea
really would counter the attack (if certain assumptions held).
&lt;/p&gt;

&lt;p&gt;
After trying several other approaches,
I found that the tools developed by
Bill McCune (in particular &lt;i&gt;prover9&lt;/i&gt;, &lt;i&gt;mace4&lt;/i&gt;, and &lt;i&gt;ivy&lt;/i&gt;)
were perfect for my needs.
These tools made my difficult work far easier, because his tools managed to
mostly-automatically prove claims mathematically once they were described
using mathematical statements.
In the end, I managed to mathematically prove that Henry Spencer&amp;#8217;s
approach really did counter the subverted compiler problem.
The tools Bill McCune developed and released made a real difference
in helping to solve this challenging real-world problem.
I didn&amp;#8217;t need much help (because his tools were remarkably easy to use
and well-documented), but he responded quickly when I emailed him too.
&lt;/p&gt;

&lt;p&gt;
Sadly, Bill McCune suddenly died on May 4, 2011,
leaving the field of automated reasoning deprived of one of its founders
(particularly in the subfields
of practical theorem proving and model building).
In 2013 an academic book was released in his honor
(&lt;a href=&quot;http://link.springer.com/book/10.1007/978-3-642-36675-8&quot;&gt;&amp;#8220;Automated Reasoning and Mathematics:
Essays in Memory of William W. McCune&amp;#8221;,
Lecture Notes in Artificial Intelligence 7788&lt;/a&gt;).
That book&amp;#8217;s preface has a nice tribute to Bill McCune,
listing some of his personal
accomplishments (e.g., the development of &lt;i&gt;Otter&lt;/i&gt;)
and other accomplishments that his tools enabled.
&lt;/p&gt;

&lt;p&gt;
Bill McCune released many tools as open source software
(including prover9, mace4, ivy, and the older tool Otter).
This means that anyone could use the software (for any purpose),
modify it, and distribute it (with or without modification).
These freedoms had far-reaching effects, accelerating research in
automated proving of claims, as well as speeding the use of these techniques.
That book&amp;#8217;s preface notes several of Bill McCune&amp;#8217;s
accomplishments, including the impact he had by releasing the code:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bill McCune &amp;#8220;deeply understood the &amp;#8230; research developed elsewhere,
and united it with the best results of [his organization&amp;#8217;s] tradition
[to create] a new theorem prover named Otter&amp;#8230;
The release of Otter at CADE-9 in 1988 was a turning point in the history of
automated reasoning. Never before had the computer science community seen a
theorem prover of such awesome power&amp;#8230;&amp;#8221;
&lt;/li&gt;
&lt;li&gt;&amp;#8220;perhaps Otter&amp;#8217;s greatest impact was due to Bill&amp;#8217;s generous and
far-looking decision to make its source code publicly available.
It is impossible to describe completely a reasoning program in research
papers. There is always some amount of knowledge, often a surprising
amount, that is written only in the code, and therefore remains hidden, if
the code is not public or is too hard to read. Bill&amp;#8217;s code was admirably
readable and well organized. Other researchers, including those whose
systems eventually overtook Otter in speed or in variety of inference
rules, also learnt from Bill&amp;#8217;s code data structures, algorithms, and
indexing schemes, which are fundamental for implementing theorem provers&amp;#8230;
Prover9 and Mace4 inherited
all the great qualities of their predecessors Otter and Mace2, as witnessed by
the fact that they are still very much in use today&amp;#8221;.
&lt;/li&gt;
&lt;li&gt;Mark E. Stickel, another developer of automated reasoning systems,
noted that,
&amp;#8220;Bill and I were both system builders
who learned from each other&amp;#8217;s systems.
I often consult Otter or Prover9 code to see
how Bill did things, and Bill looked
at my implementation of the DPLL procedure when developing [his] ANL-DP
and my implementation of AC-unification when developing [his] EQP.&amp;#8221;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
All too often the U.S. government spends a fortune in research, and
then that same research has to be recreated from scratch several times again
by other researchers (sometimes unsuccessfully).
This is a tremendous waste of government money, and can delay work by
years (if it can happen at all) resulting in
far less progress for the money spent.
Bill McCune instead ensured that this results got out to people
who could use and improve upon them.
In this specific area Bill McCune made software
research available to many others, so that those others
could use it, verify it, and build on top of those results.
&lt;/p&gt;

&lt;p&gt;
Of course, he was not alone in recognizing the value of sharing research
when implemented as software.
The paper
&lt;a href=&quot;http://fmv.jku.at/papers/Biere-ETH-TR-444-2004.pdf&quot;&gt;&amp;#8221;The Evolution from LIMMAT to NANOSAT&amp;#8221; by Armin Biere (April 2004)&lt;/a&gt;
makes the same point when they tried to reproduce others&amp;#8217; work.
That paper states,
&amp;#8220;From the publications alone, without access to the source code, various
details were still unclear&amp;#8230; what we did not realize, and which hardly
could be deduced from the literature, was [an optimization] employed
in GRASP and CHAFF [was critically important]&amp;#8230; Only [when CHAFF&amp;#8217;s
source code became available did] our unfortunate design decision became
clear&amp;#8230; The lesson learned is, that important details are often omitted
in publications and can only be extracted from source code. It can be
argued, that making source code &amp;#8230; available is as important
to the advancement of the field as publication.&amp;#8221;
&lt;/p&gt;

&lt;p&gt;
More generally,
&lt;a href=&quot;http://freethecode.org/&quot;&gt;Free the Code.org&lt;/a&gt;
argues that if government pays to develop software, then it should be
available to others for reuse and sharing.
That makes sense to me; if &amp;#8220;we the people&amp;#8221; paid to develop software,
then by default &amp;#8220;we the people&amp;#8221; should receive it.
I think it especially makes sense in science and research;
without the details of how software works, results are not reproduceable.
Currently much of science is not reproduceable (and thus not really science),
though &lt;a href=&quot;http://centerforopenscience.org&quot;&gt;open science&lt;/a&gt; efforts
are working to change this.
&lt;/p&gt;

&lt;p&gt;
I think Bill McCune made great contributions to many, many, others.
I am certainly one of the beneficiaries.
Thank you, Bill McCune, so very much for your life&amp;#8217;s work.
&lt;/p&gt;
</description>
   </item>
  </channel>
</rss>