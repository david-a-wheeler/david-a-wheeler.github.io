<?xml version="1.0" encoding="UTF-8"?>
<!-- name="generator" content="blosxom/2.0" -->

<rss version="2.0">
  <channel>
    <title>David A. Wheeler's Blog   </title>
    <link>http://www.dwheeler.com/blog</link>
    <description>David A. Wheeler's weblog.</description>
    <language>en</language>

  <item>
    <title>Shellcheck</title>
    <link>http://www.dwheeler.com/blog/2013/12/01#shellcheck</link>
    <pubDate>Sun, 01 Dec 2013 14:05 GMT</pubDate>
    <!-- date: 2013-12-01 -->
    <description>
&lt;p&gt;
I just learned about &lt;a href=&quot;http://www.shellcheck.net/&quot;&gt;shellcheck&lt;/a&gt;,
a tool that reports on common mistakes in (Bourne) shell scripts.
If you write shell scripts, you should definitely check out this
static analyzer.
You can try it out by pasting shell scripts into their website.
It is open source software, so you can also download and use it
to your heart&amp;#8217;s content.
&lt;/p&gt;
&lt;p&gt;
It even covers some of the issues identified in
&lt;a href=&quot;http://www.dwheeler.com/essays/filenames-in-shell.html&quot;&gt;Filenames and Pathnames in Shell: How to do it Correctly&lt;/a&gt;.
If you are interested in static analyzers for software,
you can also see my
&lt;a href=&quot;http://www.dwheeler.com/flawfinder/&quot;&gt;Flawfinder home page&lt;/a&gt;
which identifies many other static analysis tools.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Vulnerability bidding wars and vulnerability economics</title>
    <link>http://www.dwheeler.com/blog/2013/11/16#vulnerability-economics</link>
    <pubDate>Sat, 16 Nov 2013 14:28 GMT</pubDate>
    <!-- date: 2013-11-16 -->
    <description>
&lt;p&gt;
I worry that the economics of software vulnerability reporting
is seriously increasing the risks to society.
The problem is the rising bidding wars for vulnerability information,
leading to a rapidly-growing number of
vulnerabilities known only to attackers.
These kinds of vulnerabilities, when exploited,
are sometimes called &amp;#8220;zero-days&amp;#8221;
because users and suppliers had zero days of warning.
I suspect we should create laws limiting the
sale of vulnerability information,
similar to the limits we place on organ donation,
to change the economics of vulnerability reporting.
To see why, let me go over some background first.
&lt;/p&gt;

&lt;p&gt;
A big part of the insecure software problem today is that
relatively few of today&amp;#8217;s software developers know how to
develop software that resists attack (e.g., via the Internet).
Many schools don&amp;#8217;t teach it at all.
I think that&amp;#8217;s ridiculous;
you&amp;#8217;d think people would have heard about the Internet by now.
I do have some hope that this will get better.
I teach a graduate course on how to develop secure software at
George Mason University (GMU), and attendance has increased over time.
But today, most software developers do not know how to create secure software.
&lt;/p&gt;

&lt;p&gt;
In contrast,
there is an increasing bidding war for vulnerability information
by organizations who intend to exploit those vulnerabilities.
This incentivizes people to search for vulnerabilities, but
&lt;i&gt;not&lt;/i&gt; report them to the suppliers (who could fix them) and
&lt;i&gt;not&lt;/i&gt; alert the public.
As
&lt;a href=&quot;http://www.schneier.com/blog/archives/2012/06/the_vulnerabili.html&quot;&gt;Bruce Schneier reports in
&amp;#8220;The Vulnerabilities Market and the Future of Security&amp;#8221;
(June 1, 2012)&lt;/a&gt;,
&amp;#8220;This new market perturbs the economics
of finding security vulnerabilities.
And it does so to the detriment of us all.&amp;#8221;
Forbes ran an article about this in 2012,
&lt;a href=&quot;http://www.forbes.com/sites/andygreenberg/2012/03/21/meet-the-hackers-who-sell-spies-the-tools-to-crack-your-pc-and-get-paid-six-figure-fees/&quot;&gt;
Meet The Hackers Who Sell Spies The Tools To Crack Your PC (And Get Paid Six-Figure Fees)&lt;/a&gt;.
The Forbes article describes what happened when
French security firm Vupen broke the security of the Chrome web browser.
Vupen would not tell Google how they broke in, because the
$60,000 award Google from Google was &lt;i&gt;not enough&lt;/i&gt;.
Chaouki Bekrar, Vupen&amp;#8217;s chief executive, said that they
&amp;#8220;wouldn&amp;#8217;t share this [information]
with Google for even $1 million&amp;#8230;
We want to keep this for our customers.&amp;#8221;
These customers do not plan to fix security bugs;
they purchase exploits or techniques with the
&amp;#8220;explicit intention of invading or disrupting&amp;#8221;.
Vupen even
&amp;#8220;hawks each trick to multiple government agencies,
a business model that often plays its customers against one another
as they try to keep up in an espionage arms race.&amp;#8221;
Just
&lt;a href=&quot;http://www.networkworld.com/news/2012/060812-price-tag-for-microsoft-piece-260001.html?source=NWWNLE_nlt_daily_pm_2012-06-08&quot;&gt;one part of the
Flame espionage software (exploiting Microsoft Update) has been estimated
as being worth $1 million when it was not known&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
This imbalance in economic incentives creates a
dangerous and growing mercenary subculture.
You now have a growing number of people looking for vulnerabilities,
keeping them
secret, and selling them to the highest bidder&amp;#8230; which will encourage
&lt;i&gt;more&lt;/i&gt; to look for, and keep secret, these vulnerabilities.
After all, they are incentivized to do it.
In contrast, the original developer typically does not know 
how to develop secure software,
and there are fewer economic incentives to develop secure software anyway.
This is a volatile combination.
&lt;/p&gt;

&lt;p&gt;
Some think the solution is for suppliers to pay people when
they report security vulnerabilities to suppliers
(&amp;#8220;bug bounties&amp;#8221;).
I do not think bug bounty systems (by themselves) will be enough, though
suppliers are trying.
&lt;/p&gt;

&lt;p&gt;
There has been a lot of discussion about Yahoo and bug bounties.
On September 30, 2013, the article
&lt;a href=&quot;https://www.htbridge.com/news/what_s_your_email_security_worth_12_dollars_and_50_cents_according_to_yahoo.html&quot;&gt;What&amp;#8217;s your email security worth? 12 dollars and 50 cents according to Yahoo&lt;/a&gt;
reported that Yahoo paid for each vulnerability
only $12.50 USD.
Even worse, this was not actual money, it was
&amp;#8220;a discount code that can only be used in the Yahoo Company Store,
which sell Yahoo&amp;#8217;s corporate t-shirts,
cups, pens and other accessories&amp;#8221;.
Ilia Kolochenko, High-Tech Bridge CEO, says:
&amp;#8220;Paying several dollars per vulnerability is a bad joke and won&amp;#8217;t
motivate people to report security vulnerabilities to them, especially
when such vulnerabilities can be easily sold on the black market for
a much higher price. Nevertheless, money is not the only motivation
of security researchers. This is why companies like Google efficiently
play the ego card in parallel with [much higher] financial rewards and
maintain a &amp;#8216;Hall of Fame&amp;#8217; where all security researchers who have
ever reported security vulnerabilities are publicly listed. If Yahoo
cannot afford to spend money on its corporate security, it should at
least try to attract security researchers by other means. Otherwise,
none of Yahoo&amp;#8217;s customers can ever feel safe.&amp;#8221;
Brian Martin, President of Open Security Foundation, said:
&amp;#8220;Vendor bug bounties are not a new thing. Recently, more vendors have
begun to adopt and appreciate the value it brings their organization,
and more importantly their customers. Even Microsoft, who was the most
notorious hold-out on bug bounty programs realized the value and jumped
ahead of the rest, offering up to $100,000 for exploits that bypass their
security mechanisms. Other companies should follow their example and
realize that a simple &amp;#8220;hall of fame&amp;#8221;,
credit to buy the vendor&amp;#8217;s products,
or a pittance in cash is not conducive to researcher cooperation.
Some of these companies pay their janitors more money to clean their offices,
than they do security researchers finding vulnerabilities that may put
thousands of their customers at risk.&amp;#8221;
&lt;a href=&quot;http://www.itnews.com.au/News/359206,yahoo-plots-bug-bounties-up-to-15000.aspx&quot;&gt;Yahoo has since decided to establish a bug bounty system with larger rewards&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
More recently, the
&lt;a href=&quot;https://hackerone.com/internet&quot;&gt;Internet Bug Bounty Panel&lt;/a&gt;
(&lt;a href=&quot;http://thenextweb.com/insider/2013/11/06/microsoft-facebook-sponsor-internet-bug-bounty-program-offer-cash-hacking-internet-stack/&quot;&gt;founded by Microsoft and Facebook&lt;/a&gt;)
will award public research into vulnerabilities with the potential for severe security implications to the public.
It has a minimum bounty of $5,000.
However, it certainly does not cover everything; they only
intend to pay out
widespread vulnerabilities (wide range of products or end users),
and
plan to limit bounties to only severe vulnerabilities that are novel
(new or unusual in an interesting way).
I think this could help, but it is no panacea.
&lt;/p&gt;

&lt;p&gt;
Bug bounty systems are typically drastically outbid by attackers,
and I see no reason to believe this will change.
&lt;/p&gt;

&lt;p&gt;
Indeed, I do not think we should mandate, or even expect,
that suppliers will pay people when
people report security vulnerabilities to suppliers (aka bug bounties).
Such a mandate or expectation
could kill small businesses and open source software development,
and it would almost certainly chill software development in general.
Such payments would not also deal with what I see as a key problem:
the people who sell vulnerabilities to the highest bidder.
Mandating payment by suppliers would get most people to send them
problem reports&amp;#8230; if the bug bounty payments were required to
be larger than payments to those who would exploit the vulnerability.
&lt;i&gt;That&lt;/i&gt; would be absurd, because
given current prices, such a requirement
would almost certainly prevent a lot of software development.
&lt;/p&gt;

&lt;p&gt;
I think people who find a vulnerability in software
should normally
be free to tell the software&amp;#8217;s supplier, so that the supplier can
rapidly repair the software (and thus fix it before it is exploited).
Some people call this &amp;#8220;responsible disclosure&amp;#8221;, though
some suppliers misuse this term.
Some suppliers say they want &amp;#8220;responsible disclosure&amp;#8221;,
but they instead appear to irresponsibly abuse the term
to stifle warning those at risk (including customers and the public),
as well as irresponsibly delay the repair of critical vulnerabilities
(if they repair the vulnerabilities at all).
After all, if a supplier convinces the researcher to &lt;i&gt;not&lt;/i&gt;
alert users, potential users,
and the public about serious security defects in their product,
then these irresponsible suppliers may
believe they don&amp;#8217;t need to fix it quickly.
People who are suspicious about &amp;#8220;responsible disclosure&amp;#8221;
have, unfortunately, excellent reasons to be suspicious.
Many suppliers have shown themselves untrustworthy, and
even trustworthy suppliers need to have a reason to stay that way.
For that and other reasons,
I also think people should be free to alert the public in detail,
at no charge, about a software vulnerability
(so-called &amp;#8220;full disclosure&amp;#8221;).
Although it&amp;#8217;s not ideal for users, full disclosure is sometimes
necessary; it can be especially justifiable
when a supplier has demonstrated (through past or current actions)
that he will not rapidly fix the problem that he created.
In fact, I think it&amp;#8217;d be an inappropriate constraint
of free speech to prevent people from revealing serious
problems in software products to the public.
&lt;/p&gt;

&lt;p&gt;
But if we don&amp;#8217;t want to mandate bug bounties,
or so-called &amp;#8220;responsible disclosure&amp;#8221;,
then where does that leave us?
We need to find some way to change the rules so that
economics works more closely
&lt;i&gt;with&lt;/i&gt; and not &lt;i&gt;against&lt;/i&gt; computer security.
&lt;/p&gt;

&lt;p&gt;
Well, here is an idea&amp;#8230; at least one to start with.
Perhaps we should criminalize &lt;i&gt;selling&lt;/i&gt; vulnerability information
to anyone other than the supplier or the reporter&amp;#8217;s government.
Basically, treat vulnerability information like organ donation:
intentionally eliminate economic incentives in a specific area
for a greater social good.
&lt;/p&gt;

&lt;p&gt;
That would mean that suppliers can set up bug bounty programs,
and researchers can publish information about vulnerabilities to the public,
but this would sharply limit who else can legally
buy the vulnerability information.
In particular, it would be illegal to sell the information to
organized crime, terrorist groups, and so on.
Yes, governments can do bad things with the information;
this particular proposal does nothing directly to address it.
But I think it&amp;#8217;s impossible to prevent a citizen from
telling his country&amp;#8217;s government about a software vulnerability;
a citizen could easily see it as his duty.
I also think no government would forbid buying such information for itself.
However, by limiting sales to that particular
citizen&amp;#8217;s government, it becomes
harder to create bidding wars between
governments and other groups for vulnerability information.
Without the bidding wars, there&amp;#8217;s less incentive for others to
find the information and sell it to them.
Without the incentives, there would be fewer people working to
find vulnerabilities that they would intentionally hide from 
suppliers and the public.
&lt;/p&gt;

&lt;p&gt;
I believe this would not impinge on freedom of speech.
You can tell no one, everyone, or anyone you want about
the vulnerability.
What you cannot do is receive &lt;i&gt;financial benefit&lt;/i&gt; from
selling vulnerability information to anyone other than
the supplier (who can then fix it) or your own government
(and that at least reduces bidding wars).
&lt;/p&gt;

&lt;p&gt;
Of course, you always have to worry about
unexpected consequences or easy workarounds for any new proposed law.
An organization could set itself up specifically to find vulnerabilities
and then exploit them itself&amp;#8230; but that&amp;#8217;s already illegal,
so I don&amp;#8217;t see a problem there.
A trickier problem is that
a malicious organization (say, the mob) could create a
&amp;#8220;supplier&amp;#8221; (e.g., a reseller of proprietary software, or a
downstream open source software package) that vulnerability
researchers could sell their information to, working around the law.
This could probably be handled by requiring, in law,
that suppliers report (in a timely manner) any
vulnerability information they receive to their relevant suppliers.
&lt;/p&gt;

&lt;p&gt;
Obviously there are some people will do illegal things,
but some people will avoid doing illegal things in principle, and
others will avoid illegal activities because they fear getting caught.
You don&amp;#8217;t need to stop all possible cases, just enough to
change the economics.
&lt;/p&gt;

&lt;p&gt;
I fear that the current &amp;#8220;vulnerability bidding wars&amp;#8221; -
left unchecked -
will create an overwhelming tsunami of zero-days
available to a wide variety of malicious actors.
The current situation might impede the peer review of
open source software (OSS), since currently people can make more money
selling an exploit than in helping the OSS project fix the problem.
Thankfully, OSS projects are still widely viewed as public goods,
so there are still many people who are willing to take the pay cut
and help OSS projects find and fix vulnerabilities.
I think proprietary and custom software are actually in much
more danger than OSS;
in those cases it&amp;#8217;s a lot easier for people to think
&amp;#8220;well, they wrote this code for their financial gain,
so I may as well sell my vulnerability information for my financial gain&amp;#8221;.
The problem for society is that this attitude completely ignores the users and
those impacted by the software, who can get hurt by the later
exploitation of the vulnerability.
&lt;/p&gt;

&lt;p&gt;
Maybe there&amp;#8217;s a better way.
If so, great&amp;#8230; please propose it!
My concern is that
economics currently makes it hard - not easy - to have computer security.
We need to figure out ways to get
Adam Smith&amp;#8217;s invisible hand to work &lt;i&gt;for&lt;/i&gt; us,
not &lt;i&gt;against&lt;/i&gt; us.
&lt;/p&gt;

&lt;p&gt;
Standard disclaimer:
As always, these are
&lt;a href=&quot;http://www.dwheeler.com/aboutsite.html&quot;&gt;my personal opinions&lt;/a&gt;,
not those of employer, government, or
&lt;a href=&quot;http://www.dwheeler.com/wiggles.html&quot;&gt;(deceased) guinea pig&lt;/a&gt;.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Readable Lisp version 1.0.0 released!</title>
    <link>http://www.dwheeler.com/blog/2013/10/14#readable-one-zero-zero</link>
    <pubDate>Mon, 14 Oct 2013 23:34 GMT</pubDate>
    <!-- date: 2013-10-14 -->
    <description>
&lt;p&gt;
Lisp-based languages have been around a long time.
They have some interesting properties, especially when you
want to write programs that analyze or manipulate programs.
The problem with Lisp is that the traditional Lisp notation -
&lt;i&gt;s-expressions&lt;/i&gt; - is notoriously hard to read.
&lt;/p&gt;

&lt;p&gt;
I think I have a solution to the problem.
I looked at past (failed) solutions and found that they generally
failed to be &lt;i&gt;general&lt;/i&gt; or &lt;i&gt;homoiconic&lt;/i&gt;.
I then worked to find notations with these key properties.
My solution is a set of notation tiers that
make Lisp-based languages much more pleasant to work with.
I&amp;#8217;ve been working with many others to turn this idea of readable
notations into a reality.
If you&amp;#8217;re interested, you can
&lt;a href=&quot;http://readable.sourceforge.net/&quot;&gt;watch a short video&lt;/a&gt; or
&lt;a href=&quot;http://sourceforge.net/p/readable/wiki/Solution/&quot;&gt;read
our proposed solution&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
The big news is that we have
&lt;a href=&quot;https://sourceforge.net/projects/readable/files/&quot;&gt;reached
version 1.0.0 in the readable project&lt;/a&gt;.
We now have an open source software (MIT license) implementation for
both (guile) Scheme and Common Lisp, as well as a variety of
support tools.
The Scheme portion implements the
&lt;a href=&quot;http://srfi.schemers.org/srfi-105/&quot;&gt;SRFI-105&lt;/a&gt; and
&lt;a href=&quot;http://srfi.schemers.org/srfi-110/&quot;&gt;SRFI-110&lt;/a&gt; specs,
which we wrote.
One of the tools, unsweeten, makes it possible to process files in
other Lisps as well.
&lt;/p&gt;

&lt;p&gt;
So what do these tools do?
Fundamentally, they implement the 3 notation tiers we&amp;#8217;ve created:
curly-infix-expressions, neoteric-expressions, and sweet-expressions.
Sweet-expressions have the full set of capabilities.
&lt;/p&gt;

&lt;p&gt;
Here&amp;#8217;s an example of (awkward) traditional s-expression format:
&lt;pre&gt;
(define (factorial n)
  (if (&amp;lt;= n 1)
    1
    (* n (factorial (- n 1)))))
&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;
Here&amp;#8217;s the same thing, expressed using sweet-expressions:
&lt;pre&gt;
define factorial(n)
  if {n &amp;lt;= 1}
    1
    {n * factorial{n - 1}}
&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;
I even briefly mentioned sweet-expressions in my
&lt;a href=&quot;http://www.dwheeler.com/trusting-trust/&quot;&gt;PhD dissertation
&amp;#8220;Fully Countering Trusting Trust through Diverse Double-Compiling&amp;#8221;&lt;/a&gt;
(see section A.3).
&lt;/p&gt;

&lt;p&gt;
So if you are interested in how to make Lisp-based languages
easier to read,
&lt;a href=&quot;http://readable.sourceforge.net/&quot;&gt;watch our short video about the readable notations&lt;/a&gt;
or 
&lt;a href=&quot;https://sourceforge.net/projects/readable/files/&quot;&gt;download
the current version of the readable project&lt;/a&gt;.
We hope you enjoy them.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Welcome, those interested in Diverse Double-Compiling (DDC)!</title>
    <link>http://www.dwheeler.com/blog/2013/09/26#ddc-interest</link>
    <pubDate>Thu, 26 Sep 2013 19:01 GMT</pubDate>
    <!-- date: 2013-09-26 -->
    <description>
&lt;p&gt;
A number of people have recently been discussing or referring to
my PhD work,
&lt;a href=&quot;http://www.dwheeler.com/trusting-trust/&quot;&gt;&amp;#8220;Fully Countering Trusting Trust through Diverse Double-Compiling (DDC)&amp;#8221;&lt;/a&gt;,
which
&lt;a href=&quot;http://www.dwheeler.com/trusting-trust/&quot;&gt;counters Trojan Horse attacks on compilers&lt;/a&gt;.
&lt;a href=&quot;http://www.reddit.com/r/programming/comments/1m4mwn/a_simple_way_of_defeating_the_compiler_backdoor/&quot;&gt;Last week&amp;#8217;s discussion on reddit&lt;/a&gt;
based on a short
&lt;a href=&quot;http://imgur.com/a/BWbnU#0&quot;&gt;short slide show&lt;/a&gt;
discussed it directly, for example.
There have also been related discussions such as
&lt;a href=&quot;https://blog.torproject.org/blog/deterministic-builds-part-one-cyberwar-and-global-compromise&quot;&gt;Tor&amp;#8217;s work on creating deterministic builds&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
For everyone who&amp;#8217;s interested in DDC&amp;#8230; welcome!
I intentionally posted my dissertation, and a video about it,
directly on the Internet with no paywall.
That way, anyone who wants the information can immediately get it.
&lt;a href=&quot;http://www.dwheeler.com/trusting-trust/&quot;&gt;Enjoy!&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
I even include enough background material
so other people
can independently repeat my experiments and verify my claims.
I believe that
if you cannot reproduce the results, it is not science&amp;#8230;
and a lot of computational research has stopped being a science.
This is not a new observation;
&lt;a href=&quot;http://academiccommons.columbia.edu/catalog/ac:140124&quot;&gt;&amp;#8220;Reproducible Research: Addressing the Need for Data and Code Sharing in Computational Science&amp;#8221; by Victoria C. Stodden (Computing in Science &amp;amp; Engineering, 2010)&lt;/a&gt; summarizes a roundtable on
this very problem.
The roadtable found that
&amp;#8220;Progress in computational science
is often hampered by researchers&amp;#8217;
inability to independently
reproduce or verify published results&amp;#8221;
and, along with a number of specific steps,
&amp;#8220;reproducibility must be embraced
at the cultural level within the
computational science community.&amp;#8221;
&lt;a href=&quot;http://www.isgtw.org/feature/does-computation-threaten-scientific-method&quot;&gt;&amp;#8220;Does computation threaten the scientific method
(by Leslie Hatton and Adrian Giordani)&lt;/a&gt;
and
&lt;a href=&quot;http://www.nature.com/nature/journal/v482/n7386/full/nature10836.html&quot;&gt;
&amp;#8220;The case for open computer programs&amp;#8221; in &lt;i&gt;Nature&lt;/i&gt;
(by Darrel C. Ince, Leslie Hatton, and John Graham-Cumming)&lt;/a&gt;
make similar points.
For one of many examples, the paper
&lt;a href=&quot;http://fmv.jku.at/papers/Biere-ETH-TR-444-2004.pdf&quot;&gt;&amp;#8220;The Evolution from LIMMAT to NANOSAT&amp;#8221; by Armin Biere (Technical Report #444, 15 April 2004)&lt;/a&gt;
reported that they could not reproduce results because
&amp;#8220;From the publications
alone, without access to the source code,
various details were still unclear.&amp;#8221;
In the end they realized that
&amp;#8220;making source code&amp;#8230; available is as important
to the advancement of the field as publications&amp;#8221;.
I think we should not pay researchers, or their institutions,
if they fail to provide the materials necessary to reproduce the work.
&lt;/p&gt;
&lt;p&gt;
I do have a request, though.
There is no patent on DDC,
nor is there a legal requirement to report using it.
Still, if you apply my approach, please
&lt;a href=&quot;http://www.dwheeler.com/contactme.html&quot;&gt;let me know&lt;/a&gt;;
I&amp;#8217;d like to hear about it.
Alternatively, if you are &lt;i&gt;seriously&lt;/i&gt; trying to use DDC
but are having some problems,
&lt;a href=&quot;http://www.dwheeler.com/contactme.html&quot;&gt;let me know&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Again -
&lt;a href=&quot;http://www.dwheeler.com/trusting-trust/&quot;&gt;enjoy!&lt;/a&gt;
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Open security</title>
    <link>http://www.dwheeler.com/blog/2013/08/21#open-security</link>
    <pubDate>Wed, 21 Aug 2013 15:32 GMT</pubDate>
    <!-- date: 2013-08-21 -->
    <description>
&lt;p&gt;
Modern society depends on computer systems.
Yet computer security problems let attackers subvert the very systems
that society depends on.
This is a serious problem.
&lt;/p&gt;
&lt;p&gt;
I think one approach that could help is
&lt;a href=&quot;http://www.dwheeler.com/essays/open-security-definition.html&quot;&gt;
&amp;#8220;open security&amp;#8221;&lt;/a&gt; -
applying open source software (OSS)
approaches to help solve computer security problems.
To see why, let&amp;#8217;s look at some background.
&lt;/p&gt;
&lt;p&gt;
Back in the 1970s people collaboratively developed software
that today we would call open source software or free-libre software.
At the time many assumed these approaches could not scale up
to big systems&amp;#8230; but they were wrong.
&lt;a href=&quot;http://www.dwheeler.com/sloc&quot;&gt;Software systems
that would cost over a billion U.S. dollars to redevelop&lt;/a&gt;
have been developed as open source software, and
Wikipedia has used similar approaches to collaboratively develop
the world&amp;#8217;s largest encyclopedia.
&lt;/p&gt;
&lt;p&gt;
So&amp;#8230; if we can collaboratively develop multi-billion software systems,
and large encyclopedias, can we use the same kinds of collaborative
approaches to improve computer security?
I believe we can&amp;#8230; but if we are going to do this, we need to
define a term for this (so that we can agree on what we are doing!).
&lt;/p&gt;

&lt;p&gt;
I propose that
&lt;i&gt;open security is the application of open source software (OSS)
approaches to help solve cyber security problems&lt;/i&gt;.
OSS approaches
collaboratively develop and maintain intellectual works (including
software and documentation) by enabling users to use them for any
purpose, as well as study, create, change, and redistribute them (in
whole or in part).
Cyber security problems are a lack of security
(confidentiality, integrity, and/or availability), or potential lack of
security (a vulnerability), in computer systems and/or the networks they
are a part of.
In short, open security improves &lt;i&gt;security&lt;/i&gt; through &lt;i&gt;collaboration.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
You can see more details in my paper
&lt;a href=&quot;http://www.dwheeler.com/essays/open-security-definition.html&quot;&gt;What is open security?&lt;/a&gt;
&lt;a href=&quot;http://www.dwheeler.com/essays/open-security-definition.pdf&quot;&gt;[PDF]&lt;/a&gt;
&lt;a href=&quot;http://www.dwheeler.com/essays/open-security-definition.doc&quot;&gt;[DOC]&lt;/a&gt;.
I intentionally built on previous work such as the
&lt;a href=&quot;http://www.gnu.org/philosophy/free-sw.html&quot;&gt;&lt;i&gt;Free Software Definition&lt;/i&gt; by the Free Software Foundation (FSF)&lt;/a&gt;,
the &lt;a href=&quot;http://opensource.org/osd-annotated&quot;&gt;&lt;i&gt;Open Source Definition (Annotated)&lt;/i&gt; by the Open Source Initiative (OSI)&lt;/a&gt;,
the &lt;a href=&quot;http://creativecommons.org/licenses/&quot;&gt;Creative Commons license work&lt;/a&gt;, and the
&lt;a href=&quot;http://freedomdefined.org/Definition&quot;&gt;&lt;i&gt;Definition of Free Cultural Works&lt;/i&gt; by Freedom Defined&lt;/a&gt;
(the last one is, for example, the basis of the
&lt;a href=&quot;http://wikimediafoundation.org/wiki/Resolution:Licensing_policy&quot;&gt;Wikimedia/Wikipedia licensing policy&lt;/a&gt;).
&lt;/p&gt;

&lt;p&gt;
The &lt;a href=&quot;http://open-sec.org/&quot;&gt;Open security site&lt;/a&gt;
has been recently set up so that you and others can join and get involved.
So please - get involved!
We are only just starting, and the direction we go depends
on the feedback we get.
&lt;/p&gt;

&lt;p&gt;
Further reading:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://open-sec.org/&quot;&gt;Open security site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.dwheeler.com/essays/open-security-definition.html&quot;&gt;What is open security?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
   </item>
  <item>
    <title>Don&amp;#8217;t anthropomorphize computers, they hate that</title>
    <link>http://www.dwheeler.com/blog/2013/08/06#anthropomorphism</link>
    <pubDate>Tue, 06 Aug 2013 22:38 GMT</pubDate>
    <!-- date: 2013-08-06 -->
    <description>
&lt;p&gt;
A lot of people who program computers or live in the computing world &amp;dash;
including me &amp;dash;
talk about computer hardware and software as if they are people.
Why is that?
This is not as obvious as you&amp;#8217;d think.
&lt;/p&gt;

&lt;p&gt;
After all, if you read the literature about learning how to program,
you&amp;#8217;d think that programmers
would &lt;i&gt;never&lt;/i&gt; use anthropomorphic language.
&lt;a href=&quot;http://www.codinghorror.com/blog/2006/07/separating-programming-sheep-from-non-programming-goats.html&quot;&gt;
&amp;#8220;Separating Programming Sheep from Non-Programming Goats&amp;#8221;
by Jeff Atwood&lt;/a&gt;
discusses teaching programming and points to the
intriguing paper
&lt;a href=&quot;http://www.eis.mdx.ac.uk/research/PhDArea/saeed/paper1.pdf&quot;&gt;
&amp;#8220;The camel has two humps&amp;#8221; by
Saeed Dehnadi and Richard Bornat&lt;/a&gt;.
This paper reported experimental evidence on why
some people can learn to program, while others struggle.
Basically, to learn to program you must fully understand
that computers mindlessly follow rules, and that
computers just don&amp;#8217;t act like humans.
As their paper said,
&amp;#8220;Programs&amp;#8230; are utterly meaningless.
To write a computer program you have to come to terms with this,
to accept that whatever you might want the program to mean,
the machine will blindly follow its meaningless rules and come to
some meaningless conclusion&amp;#8230;
the consistent group [of people] showed a pre-acceptance of this fact:
they are capable of seeing mathematical calculation problems
in terms of rules, and can follow those rules wheresoever they may lead.
The inconsistent group, on the other hand, looks for meaning
where it is not.
The blank group knows that it is looking at meaninglessness,
and refuses to deal with it.
[The experimental results suggest] that it is extremely difficult
to teach programming to the inconsistent and blank groups.&amp;#8221;
&lt;a href=&quot;http://www.eis.mdx.ac.uk/research/PhDArea/saeed/&quot;&gt;
Later work by Saeed Dehnadi and sometimes others&lt;/a&gt;
expands on this earlier work.
&lt;!-- &quot;Testing Programming Aptitude&quot; --&gt;
The intermediate paper
&amp;#8220;Mental models, Consistency and Programming Aptitude&amp;#8221; (2008)
seemed to have refuted the idea that consistency
(and ignoring meaning) was critical to programming, but the later
&lt;a href=&quot;http://www.eis.mdx.ac.uk/research/PhDArea/saeed/SD_PPIG_2009.pdf&quot;&gt;
&amp;#8220;Meta-analysis of the effect of consistency on success
in early learning of programming&amp;#8221; (2009)&lt;/a&gt;
added additional refinements and then re-confirmed this hypothesis.
The reconfirmation involved a meta-analysis of
six replications of an improved version of Dehnadi&amp;#8217;s
original experiment, and again showed that understanding that computers were
mindlessly consistent was key in successfully learning to program.
&lt;/p&gt;

&lt;p&gt;
So the good programmers know darn well that computers mindlessly
follow rules.
But many use anthropomorphic language anyway.
Huh?
Why is that?
&lt;/p&gt;

&lt;p&gt;
Some do object to anthropomorphism, of course.
&lt;a href=&quot;http://lambda-the-ultimate.org/node/264&quot;&gt;Edjar Dijkstra
certainly railed against anthropomorphizing computers&lt;/a&gt;.
For example,
in &lt;a href=&quot;http://www.cs.utexas.edu/users/EWD/ewd08xx/EWD854.PDF&quot;&gt;EWD854&lt;/a&gt;
(1983) he said,
&amp;#8220;I think anthropomorphism is the worst of all [analogies].
I have now seen programs &amp;#8216;trying to do things&amp;#8217;, &amp;#8216;wanting to do things&amp;#8217;,
&amp;#8216;believing things to be true&amp;#8217;, &amp;#8216;knowing things&amp;#8217; etc.
Don&amp;#8217;t be so naive as to believe that this use of language is harmless.&amp;#8221;
He believed that analogies (like these) led to a host of misunderstandings,
and that those misunderstandings led to repeated
multi-million-dollar failures.
It is certainly true that misunderstandings can lead to catastrophe.
But I think one reason Dijkstra railed particularly against anthropomorphism
was (in part) because it is a widespread practice, even among those
who &lt;i&gt;do&lt;/i&gt; understand things &amp;dash;
and I see no evidence that anthropomorphism is going away.
&lt;/p&gt;

&lt;p&gt;
The
&lt;a href=&quot;http://www.catb.org/jargon/html/anthropomorphization.html&quot;&gt;
Jargon file specifically discusses anthropomorphization&lt;/a&gt;:
&amp;#8220;one rich source of jargon constructions is the hackish tendency
to anthropomorphize hardware and software. English purists and
academic computer scientists frequently look down on others for
anthropomorphizing hardware and software, considering this sort of
behavior to be characteristic of naive misunderstanding.
But most hackers anthropomorphize freely,
frequently describing program behavior in terms of wants and desires.
Thus it is common to hear hardware or software talked about as though
it has homunculi talking to each other inside it, with intentions and
desires&amp;#8230;
As hackers are among the people
who know best how these phenomena work, it seems odd that they would
use language that seems to ascribe consciousness to them. The mind-set
behind this tendency thus demands examination.
The key to understanding this kind of usage is that it isn&amp;#8217;t done in
a naive way; hackers don&amp;#8217;t personalize their stuff in the sense of
feeling empathy with it, nor do they mystically believe that the things
they work on every day are &amp;#8216;alive&amp;#8217;.&amp;#8221;
&lt;/p&gt;

&lt;p&gt;
Okay, so others have noticed this too.
The
&lt;a href=&quot;http://www.catb.org/jargon/html/anthropomorphization.html&quot;&gt;
Jargon file even proposes some possible reasons for anthropomorphizing
computer hardware and software&lt;/a&gt;:
&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It reflects a &amp;#8220;mechanistic view of human behavior.&amp;#8221;
&amp;#8220;In this view, people are biological
machines - consciousness is an interesting and valuable epiphenomenon,
but mind is implemented in machinery which is not fundamentally different
in information-processing capacity from computers&amp;#8230;
Because hackers accept that a human machine can have intentions, it
is therefore easy for them to ascribe consciousness and intention to
other complex patterned systems such as computers.&amp;#8221;
But while the materialistic view of humans has respectible company,
this &amp;#8220;explanation&amp;#8221; fails to explain
why humans would use anthropomorphic
terms about computer hardware and software,
since they are manifestly not human.
Indeed, as the Jargon file acknowledges,
even hackers who have contrary religious views will use
anthropological terminology.
&lt;/li&gt;
&lt;li&gt;
It reflects
&amp;#8220;a blurring of the boundary between the programmer and
his artifacts - the human qualities belong to the programmer and the
code merely expresses these qualities as his/her proxy. On this view,
a hacker saying a piece of code &amp;#8216;got confused&amp;#8217; is really saying that
he (or she) was confused about exactly what he wanted the computer to do,
the code naturally incorporated this confusion, and the code expressed the
programmer&amp;#8217;s confusion when executed by crashing or otherwise misbehaving.
Note that by displacing from &amp;#8220;I got confused&amp;#8221; to
&amp;#8220;It got confused&amp;#8221;, the programmer is not avoiding responsibility,
but rather getting some analytical distance in order
to be able to consider the bug dispassionately.&amp;#8221;
&lt;/li&gt;
&lt;li&gt;
&amp;#8220;It has also been suggested that anthropomorphizing complex systems is
actually an expression of humility, a way of acknowleging that simple
rules we do understand (or that we invented) can lead to emergent
behavioral complexities that we don&amp;#8217;t completely understand.&amp;#8221;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
The Jargon file claims that
&amp;#8220;All three explanations accurately model hacker psychology, and should
be considered complementary rather than competing.&amp;#8221;
I think the first &amp;#8220;explanation&amp;#8221; is completely unjustified.
The second and third explanations do have some merit.
However, I think there&amp;#8217;s a simpler and more important reason: Language.
&lt;/p&gt;

&lt;p&gt;
When we communicate with a human, we must use some language that will be
more-or-less understood by the other human.
Over the years people have developed a variety of human languages
that do this pretty well (again, more-or-less).
Human languages were not particularly designed to deal with computers,
but languages &lt;i&gt;have&lt;/i&gt; been honed over long periods of time
to discuss human behaviors and their mental states
(thoughts, beliefs, goals, and so on).
The sentence
&amp;#8220;Sally says that Linda likes Tom,
but Tom won&amp;#8217;t talk to Linda&amp;#8221;
would be understood by any normal seven-year-old girl
(well, assuming she speaks English).
&lt;/p&gt;

&lt;p&gt;
I think a primary reason people anthropomorphic terminology
is because it&amp;#8217;s much easier to communicate that way
when discussing computer hardware and software using existing languages.
Compare &amp;#8220;the program got confused&amp;#8221; with
the overly long
&amp;#8220;the program executed a different path than the one expected by the
program&amp;#8217;s programmer&amp;#8221;.
Human languages have been honed to discuss human behaviors and
mental states, so it is much easier to use languages this way.
As long as both the sender and receiver of the message understand the
message, the fact that the terminology is anthropomorphic is
not a problem.
&lt;/p&gt;

&lt;p&gt;
It&amp;#8217;s true that anthropomorphic language can confuse some people.
But the primary reason it confuses some people is that they
still have trouble understanding that computers are mindless &amp;dash;
that computers simply do whatever their instructions tell them.
Perhaps this is an innate weakness in some people,
but I think that addressing this weakness head-on
can help counter it.
This is probably a good reason for ensuring that people learn
a little programming as kids &amp;dash; not because they will
necessarily do it later, but because computers are so central
to the modern world that people should have a basic understanding of them.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Industry-wide Misunderstandings of HTTPS (SSL/TLS)</title>
    <link>http://www.dwheeler.com/blog/2013/06/20#misunderstanding-https-caching</link>
    <pubDate>Thu, 20 Jun 2013 18:14 GMT</pubDate>
    <!-- date: 2013-06-20 -->
    <description>
&lt;p&gt;
&lt;a href=&quot;http://securityevaluators.com/content/case-studies/caching/&quot;&gt;
Industry-wide Misunderstandings of HTTPS&lt;/a&gt;
describes a nasty security problem involving HTTP (SSL/TLS)
and caching.
The basic problem is that developers of web applications
do not know or understand web standards.
The result: 70% of sites tested expose private data on users&amp;#8217; machines
by recording data that is supposed to be destroyed.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#8217;s the abstract:
&amp;#8220;Most web browsers, historically, were cautious about caching content
delivered over an HTTPS connection to disk -
to a greater degree than required by the HTTP standard.
In recent years, in response to the
increased use of HTTPS for non-sensitive data, and the proliferation
of bandwidth-hungry AJAX and Web 2.0 sites, some browsers have been
changed to strictly follow the standard, and cache HTTPS content far more
aggressively than before.
HTTPS web servers must explicitly include a
response header to block standards-compliant browsers from caching the
response to disk -
and not all web developers have caught up to the new browser behavior.
ISE identified 21 (70% of sites tested) financial,
healthcare, insurance and utility account sites that failed to forbid
browsers from storing cached content on disk, and as a result, after
visiting these sites, unencrypted sensitive content is left behind on
end-users&amp;#8217; machines.&amp;#8221;
&lt;/p&gt;
&lt;p&gt;
This vulnerability isn&amp;#8217;t as easy to exploit as some other problems;
it just means that data that &lt;i&gt;should&lt;/i&gt; have been destroyed is
hanging around.
But it does set up serious problems, because that information
&lt;i&gt;should&lt;/i&gt; have been destroyed.
&lt;/p&gt;
&lt;p&gt;
This is really just yet another example of the security problems
that can happen when people assume, &amp;#8220;the only web browser is
Internet Explorer 6&amp;#8221;.
That was &lt;i&gt;never&lt;/i&gt; true, and by ignoring standards,
they set themselves up for disaster.
This isn&amp;#8217;t even a new standard; HTTP version 1.1 was released in 1999,
so there&amp;#8217;s been plenty of time to fix things.
Today, many modern systems use AJAX, and SSL/TLS encryption is
far more widely used as well, and given these changing conditions,
web browsers are changing in standards-compliant ways.
Web application developers who followed the standard are doing
just fine.
The web application developers who ignored the standards are,
once again, putting their users at risk.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>OSS License Clinic</title>
    <link>http://www.dwheeler.com/blog/2013/04/30#oss-license-clinic-2013</link>
    <pubDate>Tue, 30 Apr 2013 10:38 GMT</pubDate>
    <!-- date: 2013-04-30 -->
    <description>
&lt;p&gt;
If you&amp;#8217;re interested in understanding the
legal, contract, or government
acquisition issues in applying free / libre / open source software (FLOSS),
come to the
&lt;a href=&quot;http://opensourcecommunitysummit.org&quot;&gt;
&amp;#8220;Open Source License Clinic&amp;#8221; on May 9, 2013, 9am-noon (EDT), in
Washington, DC&lt;/a&gt;.
This clinic will be hosted by the non-profit
Open Source Initiative (OSI), and is
&amp;#8220;designed as a cross-industry, cross-community workshop
for legal, contract, acquisition and program professionals who wish to
deepen their understanding of open source software licenses, and raise
their proficiency to better serve their organizations objectives as well
as identify problems which may be unique to government. Discussion of
licenses and issues in straight-forward terms make the clinic of value
to anyone involved in the lifecycle of a technology decision/acquisition
or strategy for internal software development.&amp;#8221;
&lt;/p&gt;
&lt;p&gt;
I&amp;#8217;m one of the speakers, along with:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ms. Vicki Allums, General Counsel, Defense Information Systems Agency, Department of Defense&lt;/li&gt;
&lt;li&gt;Mr. Jim Jagielski, OSI board director and President, Apache Foundation&lt;/li&gt;
&lt;li&gt;Mr. Mike Milinkovich, OSI board director and Executive Director, Eclipse Foundation&lt;/li&gt;
&lt;li&gt;Mr. Luis Villa, OSI board director and Deputy General Counsel, WIkimedia Foundation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
The location for the license clinic will be:
&lt;/p&gt;
&lt;pre&gt;
101 Independence Ave SE
Madison Building, 6th Floor, Dining Room A
Washington, DC 20540
&lt;/pre&gt;

&lt;p&gt;
You might also be interested in the
&lt;a href=&quot;http://www.opensourcecommunitysummit.org/&quot;&gt;Open Source Community Summit on May 10 (the following day)&lt;/a&gt;
in Washington, DC.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>French government OSS policy</title>
    <link>http://www.dwheeler.com/blog/2013/03/21#french-government-oss</link>
    <pubDate>Thu, 21 Mar 2013 12:37 GMT</pubDate>
    <!-- date: 2013-03-21 -->
    <description>
&lt;p&gt;
Free/libre/open source software (FLOSS) continues to grow around the
world, and governments around the world are trying to establish
policies about it.
Yet in the U.S. we often don&amp;#8217;t hear about them.
I just posted about a UK policy;
&lt;a href=&quot;http://www.april.org/en/french-prime-minister-instructions-usage-free-software-french-administration&quot;&gt;here&amp;#8217;s a recent French policy, translated
into English&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
The French administration, in September 2012, established a set of
guidelines and recommendations on the proper use of Free Software
(aka open source software) in the French government.
This is called the
&amp;#8220;Ayrault Memorandum&amp;#8221; (circulaire Ayrault, in French) and was
signed in September 2012 by the French Prime Minister.
The document was mainly produced by the DISIC (the
Department of Interministerial Systems Information and Communication)
and the CIOs of some departments.
The DISIC is in charge of coordinating the administration actions
on information systems.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>UK Government prefers OSS</title>
    <link>http://www.dwheeler.com/blog/2013/03/18#uk-government-prefers-oss</link>
    <pubDate>Mon, 18 Mar 2013 10:56 GMT</pubDate>
    <!-- date: 2013-03-18 -->
    <description>
&lt;p&gt;
The
&lt;a href=&quot;http://www.computerweekly.com/news/2240179643/Government-mandates-preference-for-open-source&quot;&gt;UK government is mandating a
&amp;#8220;preference&amp;#8221; for open source software&lt;/a&gt; in its
&lt;a href=&quot;https://www.gov.uk/service-manual&quot;&gt;Government Service
Design Manual&lt;/a&gt;
&lt;a href=&quot;https://www.gov.uk/service-manual/making-software/open-source.html&quot;&gt;Open Source section&lt;/a&gt;,
to be effective April 2013.
The draft manual says,
&amp;#8220;Use open source software in preference to proprietary or closed source
alternatives, in particular for operating systems, networking software,
web servers, databases and programming languages.&amp;#8221;
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Readable Lisp: Sweet-expressions</title>
    <link>http://www.dwheeler.com/blog/2013/03/10#sweet-expressions-srfi-start</link>
    <pubDate>Sun, 10 Mar 2013 22:15 GMT</pubDate>
    <!-- date: 2013-03-10 -->
    <description>
&lt;p&gt;
I&amp;#8217;ve used Lisp-based programming languages
for decades, but while they have some nice properties,
their traditional s-expression notation is not very readable.
Even the original creator of Lisp
did not particularly like its notation!
However, this problem turns out to be surprisingly hard to solve.
&lt;/p&gt;
&lt;p&gt;
After reviewing the many past failed efforts,
I think I have figured out why they failed.
Past solutions typically did not work because they failed to be
general (the notation is independent from any underlying semantic)
or homoiconic (the underlying data structure is clear from the syntax).
Once I realized that, I devised (with a lot of help from others!)
a new notation, called sweet-expressions (t-expressions),
that &lt;i&gt;is&lt;/i&gt; general and homoiconic.
I think this creates a real solution for an old problem.
&lt;/p&gt;
&lt;p&gt;
You can download and try out
sweet-expressions as released by the
&lt;a href=&quot;http://readable.sourceforge.net/&quot;&gt;Readable Lisp S-expressions Project&lt;/a&gt;
by downloading our new
&lt;a href=&quot;https://sourceforge.net/projects/readable/files/?source=navbar&quot;&gt;version 0.7.0 release&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
If you&amp;#8217;re interested, please participate!
In particular, please participate in the
&lt;a href=&quot;http://srfi.schemers.org/srfi-110/&quot;&gt;SRFI-110 sweet-expressions (t-expressions)&lt;/a&gt; mailing list.
SRFIs let people write specifications for extensions to the Scheme
programming language (a Lisp), and this SRFI lets
people in the Scheme community discuss it.
&lt;/p&gt;
&lt;p&gt;
The following table shows what an example of traditional (ugly)
Lisp s-expressions, the same thing in sweet-expressions,
and a short explanation.
&lt;/p&gt;

&lt;table border=&quot;1&quot; cellpadding=&quot;4&quot;&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;s-expressions&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Sweet-expressions (t-expressions)&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Explanation&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;
&lt;pre&gt;
(define (fibfast n)
  (if (&amp;lt; n 2)
    n
    (fibup n 2 1 0)))
&lt;/pre&gt;
&lt;/td&gt;
&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;
&lt;pre&gt;
define fibfast(n)
  if {n &amp;lt; 2}
    n
    fibup n 2 1 0
&lt;/pre&gt;
&lt;/td&gt;
&lt;td align=&quot;left&quot; valign=&quot;top&quot;&gt;
&lt;pre&gt;
Typical function notation
Indentation, infix {...}
Single expr = no new list
Simple function calls
&lt;/pre&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
</description>
   </item>
  <item>
    <title>Speaking at ACM DC Chapter</title>
    <link>http://www.dwheeler.com/blog/2013/01/22#acm-presentation</link>
    <pubDate>Tue, 22 Jan 2013 10:25 GMT</pubDate>
    <!-- date: 2013-01-22 -->
    <description>

&lt;p&gt;
FYI, on 2013-03-04 I plan to speak about
&lt;a href=&quot;http://meetup.dcacm.org/events/100444092/?eventId=100444092&amp;action=detail&quot;&gt;&amp;#8220;Open Source Software, Government, and Cyber Security&amp;#8221;&lt;/a&gt;
at the Association for Computing Machinery (ACM), Washington, DC Chapter.
It will be at 1203 19th St, 3rd Floor, Washington, DC.
See the link for more information.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Ozone Widget Framework (OWF) released as OSS!</title>
    <link>http://www.dwheeler.com/blog/2013/01/22#owf-released</link>
    <pubDate>Tue, 22 Jan 2013 10:23 GMT</pubDate>
    <!-- date: 2013-01-22 -->
    <description>
&lt;p&gt;
The
&lt;a href=&quot;http://owfgoss.org/&quot;&gt;Ozone Widget Framework (OWF)&lt;/a&gt;
has recently been released as open source software (OSS)
by the U.S. government.
OWF is useful but a little tricky to explain; as their website explains,
OWF is a web application that &amp;#8220;allows users to easily access
all their online tools from one location&amp;#8230; [users can]
access websites and applications with widgets [and]
group them and configure &amp;#8230; applications to interact
with each other via widget intents&amp;#8221;.
Go see their website to learn more about it; here, I&amp;#8217;ll
talk about the wider implications of OWF.
&lt;/p&gt;
&lt;p&gt;
To me, OWF is interesting on several fronts.
&lt;/p&gt;
&lt;p&gt;
From potential user&amp;#8217;s point of view, this is great news.
If you want something like this, well, now you can easily get it.
If you&amp;#8217;re outside the U.S. government, you&amp;#8217;ve never had this
program at all before.
But even for those inside the U.S. government, this release
makes OWF far easier to get, use, and improve if necessary.
&lt;/p&gt;
&lt;p&gt;
But from the point-of-view of collaborative software development,
this is a much bigger deal.
The government all too often pays money to develop software on
one project, and then re-pays to develop that software again on any
other project that needs it.
In the rare cases where reuse happens at all, the government makes it
hard for others in the government to improve it as needed.
The government often talks about &amp;#8220;public/private partnerships&amp;#8221;,
and such partnerships are a good idea&amp;#8230; but all too often
this doesn&amp;#8217;t happen in software development.
&lt;/p&gt;
&lt;p&gt;
Here we have an awesome change.
Per their original plans and a Congressional mandate,
OWF is now released to the public.
This means that instead of the government having to re-develop the
code for every use, and for the public to have to re-develop it as well,
&amp;#8220;we the people&amp;#8221; who paid to develop the software
can actually get it.
&lt;/p&gt;
&lt;p&gt;
What&amp;#8217;s more, OWF has avoided some of the terrible mistakes
that have hurt some past efforts:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Sometimes software developed via government funding gets
&amp;#8220;captured&amp;#8221; by one vendor, so that even though
the government paid to have it developed,
essentially no one else has the right or ability to maintain it.
Once it&amp;#8217;s captured, the cost of maintaining the software skyrockets.
By releasing the software as OSS, the OWF project has avoided that problem.
Instead, the OWF project can get wide use and improvements from
around the world.
&lt;/li&gt;
&lt;li&gt;OWF has wisely released the software under an industry-standard
OSS license (in this case, Apache 2.0), instead of writing some
government-unique non-standard license.
Nearly all OSS is licensed under a few licenses (GPL, LGPL, BSD-new, MIT,
Apache 2.0); using nonstandard or incompatible licenses greatly
impedes any possibility of collaboration.
&lt;/li&gt;
&lt;li&gt;Second, OWF has wisely chosen to use a widely-used repository and
development infrastructure (in this case, GitHub), instead of
unnecessarily developing and maintaining its own.
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
The U.S. federal government was formed by &amp;#8220;we the people&amp;#8221;.
It&amp;#8217;s great to see the government releasing software back to the people;
in the end, we&amp;#8217;re the ones who paid to develop it.
I wish the OWF project the best of success, and I hope that there
will be many similar OSS projects to come.
&lt;/p&gt;
</description>
   </item>
  </channel>
</rss>