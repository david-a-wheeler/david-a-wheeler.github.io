<?xml version="1.0"?>
<!-- name="generator" content="blosxom/2.0" -->

<rss version="2.0">
  <channel>
    <title>David A. Wheeler's Blog   </title>
    <link>http://www.dwheeler.com/blog</link>
    <description>David A. Wheeler's weblog.</description>
    <language>en</language>

  <item>
    <title>Industry-wide Misunderstandings of HTTPS (SSL/TLS)</title>
    <link>http://www.dwheeler.com/blog/2013/06/20#misunderstanding-https-caching</link>
    <pubDate>Thu, 20 Jun 2013 18:14 GMT</pubDate>
    <!-- date: 2013-06-20 -->
    <description>
&lt;p&gt;
&lt;a href=&quot;http://securityevaluators.com/content/case-studies/caching/&quot;&gt;
Industry-wide Misunderstandings of HTTPS&lt;/a&gt;
describes a nasty security problem involving HTTP (SSL/TLS)
and caching.
The basic problem is that developers of web applications
do not know or understand web standards.
The result: 70% of sites tested expose private data on users&amp;#8217; machines
by recording data that is supposed to be destroyed.
&lt;/p&gt;
&lt;p&gt;
Here&amp;#8217;s the abstract:
&amp;#8220;Most web browsers, historically, were cautious about caching content
delivered over an HTTPS connection to disk -
to a greater degree than required by the HTTP standard.
In recent years, in response to the
increased use of HTTPS for non-sensitive data, and the proliferation
of bandwidth-hungry AJAX and Web 2.0 sites, some browsers have been
changed to strictly follow the standard, and cache HTTPS content far more
aggressively than before.
HTTPS web servers must explicitly include a
response header to block standards-compliant browsers from caching the
response to disk -
and not all web developers have caught up to the new browser behavior.
ISE identified 21 (70% of sites tested) financial,
healthcare, insurance and utility account sites that failed to forbid
browsers from storing cached content on disk, and as a result, after
visiting these sites, unencrypted sensitive content is left behind on
end-users&amp;#8217; machines.&amp;#8221;
&lt;/p&gt;
&lt;p&gt;
This vulnerability isn&amp;#8217;t as easy to exploit as some other problems;
it just means that data that &lt;i&gt;should&lt;/i&gt; have been destroyed is
hanging around.
But it does set up serious problems, because that information
&lt;i&gt;should&lt;/i&gt; have been destroyed.
&lt;/p&gt;
&lt;p&gt;
This is really just yet another example of the security problems
that can happen when people assume, &amp;#8220;the only web browser is
Internet Explorer 6&amp;#8221;.
That was &lt;i&gt;never&lt;/i&gt; true, and by ignoring standards,
they set themselves up for disaster.
This isn&amp;#8217;t even a new standard; HTTP version 1.1 was released in 1999,
so there&amp;#8217;s been plenty of time to fix things.
Today, many modern systems use AJAX, and SSL/TLS encryption is
far more widely used as well, and given these changing conditions,
web browsers are changing in standards-compliant ways.
Web application developers who followed the standard are doing
just fine.
The web application developers who ignored the standards are,
once again, putting their users at risk.
&lt;/p&gt;
</description>
   </item>
  </channel>
</rss>