<?xml version="1.0" encoding="UTF-8"?>
<!-- name="generator" content="blosxom/2.0" -->

<rss version="2.0">
  <channel>
    <title>David A. Wheeler's Blog   </title>
    <link>http://www.dwheeler.com/blog</link>
    <description>David A. Wheeler's weblog.</description>
    <language>en</language>

  <item>
    <title>Readable Lisp version 1.0.0 released!</title>
    <link>http://www.dwheeler.com/blog/2013/10/14#readable-one-zero-zero</link>
    <pubDate>Mon, 14 Oct 2013 23:34 GMT</pubDate>
    <!-- date: 2013-10-14 -->
    <description>
&lt;p&gt;
Lisp-based languages have been around a long time.
They have some interesting properties, especially when you
want to write programs that analyze or manipulate programs.
The problem with Lisp is that the traditional Lisp notation -
&lt;i&gt;s-expressions&lt;/i&gt; - is notoriously hard to read.
&lt;/p&gt;

&lt;p&gt;
I think I have a solution to the problem.
I looked at past (failed) solutions and found that they generally
failed to be &lt;i&gt;general&lt;/i&gt; or &lt;i&gt;homoiconic&lt;/i&gt;.
I then worked to find notations with these key properties.
My solution is a set of notation tiers that
make Lisp-based languages much more pleasant to work with.
I&amp;#8217;ve been working with many others to turn this idea of readable
notations into a reality.
If you&amp;#8217;re interested, you can
&lt;a href=&quot;http://readable.sourceforge.net/&quot;&gt;watch a short video&lt;/a&gt; or
&lt;a href=&quot;http://sourceforge.net/p/readable/wiki/Solution/&quot;&gt;read
our proposed solution&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
The big news is that we have
&lt;a href=&quot;https://sourceforge.net/projects/readable/files/&quot;&gt;reached
version 1.0.0 in the readable project&lt;/a&gt;.
We now have an open source software (MIT license) implementation for
both (guile) Scheme and Common Lisp, as well as a variety of
support tools.
The Scheme portion implements the
&lt;a href=&quot;http://srfi.schemers.org/srfi-105/&quot;&gt;SRFI-105&lt;/a&gt; and
&lt;a href=&quot;http://srfi.schemers.org/srfi-110/&quot;&gt;SRFI-110&lt;/a&gt; specs,
which we wrote.
One of the tools, unsweeten, makes it possible to process files in
other Lisps as well.
&lt;/p&gt;

&lt;p&gt;
So what do these tools do?
Fundamentally, they implement the 3 notation tiers we&amp;#8217;ve created:
curly-infix-expressions, neoteric-expressions, and sweet-expressions.
Sweet-expressions have the full set of capabilities.
&lt;/p&gt;

&lt;p&gt;
Here&amp;#8217;s an example of (awkward) traditional s-expression format:
&lt;pre&gt;
(define (factorial n)
  (if (&amp;lt;= n 1)
    1
    (* n (factorial (- n 1)))))
&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;
Here&amp;#8217;s the same thing, expressed using sweet-expressions:
&lt;pre&gt;
define factorial(n)
  if {n &amp;lt;= 1}
    1
    {n * factorial{n - 1}}
&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;
I even briefly mentioned sweet-expressions in my
&lt;a href=&quot;http://www.dwheeler.com/trusting-trust/&quot;&gt;PhD dissertation
&amp;#8220;Fully Countering Trusting Trust through Diverse Double-Compiling&amp;#8221;&lt;/a&gt;
(see section A.3).
&lt;/p&gt;

&lt;p&gt;
So if you are interested in how to make Lisp-based languages
easier to read,
&lt;a href=&quot;http://readable.sourceforge.net/&quot;&gt;watch our short video about the readable notations&lt;/a&gt;
or 
&lt;a href=&quot;https://sourceforge.net/projects/readable/files/&quot;&gt;download
the current version of the readable project&lt;/a&gt;.
We hope you enjoy them.
&lt;/p&gt;
</description>
   </item>
  </channel>
</rss>