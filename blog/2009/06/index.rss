<?xml version="1.0"?>
<!-- name="generator" content="blosxom/2.0" -->

<rss version="2.0">
  <channel>
    <title>David A. Wheeler's Blog   </title>
    <link>http://www.dwheeler.com/blog</link>
    <description>David A. Wheeler's weblog.</description>
    <language>en</language>

  <item>
    <title>SPARK released as FLOSS (Free/ Libre / Open Source Software)!</title>
    <link>http://www.dwheeler.com/blog/2009/06/05#spark-open-source</link>
    <pubDate>Fri, 05 Jun 2009 17:41 GMT</pubDate>
    <!-- date: 2009-06-05 -->
    <description>
&lt;p&gt;
The &lt;a href=&quot;http://libre.adacore.com/libre/tools/spark-gpl-edition/&quot;&gt;
SPARK toolsuite has just been released as 
FLOSS (Free/ Libre / Open Source Software)&lt;/a&gt; by Praxis (its creator).
This is great news for those who want to make
software safer, more reliable, and more secure.
In particular, this means that
&lt;b&gt;&lt;a href=&quot;http://www.openproofs.org/wiki/Tokeneer&quot;&gt;Tokeneer&lt;/a&gt; is now an
&lt;a href=&quot;http://www.openproofs.org/&quot;&gt;open proof&lt;/a&gt;&lt;/b&gt;.
If you haven&amp;#8217;t been following this, here&amp;#8217;s some background.
&lt;/p&gt;

&lt;p&gt;
Software is now a part of really critical systems
(ones that need &amp;#8220;high assurance&amp;#8221;),
yet often that software is not as safe, reliable, or secure as it needs to be.
I believe that in the long term,
&lt;a href=&quot;http://www.dwheeler.com/essays/high-assurance-floss.html&quot;&gt;
we will need to start
&lt;i&gt;proving&lt;/i&gt; that our very important programs are correct&lt;/a&gt;.
Testing by itself isn&amp;#8217;t enough; completely testing the trivial
&amp;#8220;add three 64-bit integers&amp;#8221; program would take
far longer than the age of the universe
(it would take about 2x10^39 years).
&lt;!--
2^(3*64) tests / 1 billion (per second) / 100 test machines
/ (365.25*24*60*60)
=  1.9890935100852669e+39 years
--&gt;
The basic idea of using mathematics to &lt;i&gt;prove&lt;/i&gt; that programs
are correct &amp;mdash; aka &amp;#8220;formal methods&amp;#8221; &amp;mdash;
has been around for decades.
There are a number of cases where formal methods have been applied
successfully, and I&amp;#8217;m glad about that.
And yet, applying formal methods is still relatively rare.
There are many reasons for this, such as inadequate maturation and
capabilities of many formal methods tools, and the fact that
relatively few people know how to
apply formal methods when developing real programs.
But what, in turn, is causing those problems?
It&amp;#8217;s true that applying formal methods is
a hard problem that hasn&amp;#8217;t received the level of
funding it needs, but still, it&amp;#8217;s been decades!
&lt;/p&gt;

&lt;p&gt;
I believe one problem hindering the maturation and spread of
formal methods is a &amp;#8220;culture of secrecy&amp;#8221;.
Details of formal method use are often unpublished (e.g., because
the implementations are proprietary or classified).
Similarly, details about formal methods tools
are often unshared and lost (or have to constantly re-invented).
&lt;a href=&quot;http://fmv.jku.at/papers/Biere-ETH-TR-444-2004.pdf&quot;&gt;
Biere&amp;#8217;s &amp;#8220;The Evolution from LIMMAT to NANOSAT&amp;#8221; (Apr
2004)&lt;/a&gt;
gives an example:
&amp;#8220;From the publications alone, without access to the source code,
various details were still unclear&amp;#8230; Only [when CHAFF&amp;#8217;s source code
became available did] our unfortunate design decision became
clear&amp;#8230; The lesson learned is, that important details are often omitted
in publications and can only be extracted from source code. It can be
argued, that making source code of SAT solvers available is as important
to the advancement of the field as publications&amp;#8221;
&lt;/p&gt;

&lt;p&gt;
This &amp;#8220;culture of secrecy&amp;#8221;
means that researchers/toolmakers often don&amp;#8217;t receive adequate feedback,
researchers/toolmakers waste time and money rebuilding tools,
educators have difficulty explaining formal methods
(they have no examples to show!),
developers don&amp;#8217;t understand how to apply it
(and it has an uncertain value to them), and
evaluators/end-users don&amp;#8217;t know what to look for.
&lt;/p&gt;

&lt;p&gt;
I believe that a way to break through this
&amp;#8220;culture of secrecy&amp;#8221; is to develop
&amp;#8220;open proofs&amp;#8221;.
But what are they?
An
&lt;a href=&quot;http://www.openproofs.org/&quot;&gt;&amp;#8220;open proof&amp;#8221;&lt;/a&gt;
is software or a system where &lt;i&gt;all&lt;/i&gt; of the following are
free-libre / open source software (FLOSS):
&lt;ul&gt;
&lt;li&gt;the entire implementation&lt;/li&gt;
&lt;li&gt;automatically-verifiable proof(s) of at least one key property, and&lt;/li&gt;
&lt;li&gt;required tools (for use and modification)&lt;/li&gt;
&lt;/ul&gt;
Something is FLOSS if it gives anyone the freedom to use, study, modify, and redistribute modified and unmodified versions of it, meeting the
&lt;a href=&quot;http://www.gnu.org/philosophy/free-sw.html&quot;&gt;Free software definition&lt;/a&gt; and the
&lt;a href=&quot;http://www.opensource.org/docs/definition.php&quot;&gt;open source definition&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Imagine if we had a number of open proofs available.
There could be small open proofs that could be used for learning
(e.g., as examples and use in class exercises).
There could be proofs of various useful functions and small applications,
so developers could see how to scale up these techniques, directly reuse them
as components, or use them as starting points but add additional
(proven) capabilities to them.
When problems come up (and they will!), toolmakers and developers could
work together to find ways to mature the tools and technology
so that they&amp;#8217;d be easier to use (e.g., so more could be automated).
In short, imagine there was a working ecosystem where
researchers/toolmakers/educators, developers of implementations to be proved,
and evaluators/end-users could work together by sharing information.
I believe that would greatly speed up the maturing of
formal methods, resulting in more reliable and secure software.
&lt;/p&gt;

&lt;p&gt;
In this context, Praxis has just released the
&lt;a href=&quot;http://libre.adacore.com/libre/tools/spark-gpl-edition/&quot;&gt;
SPARK GPL Edition&lt;/a&gt;.
This is their SPARK toolsuite (a formal methods tool)
released under the GNU General Public License aka GPL
(the most common FLOSS license).
So, what&amp;#8217;s that?
&lt;/p&gt;

&lt;p&gt;
SPARK is a variant of the Ada programming language, designed to
enable proofs about programs (by adding and removing some features of Ada).
The additions are in special comments, so SPARK programs can be compiled
by a normal Ada compiler like GNAT (which is part of gcc).
The
&lt;a href=&quot;http://www.openproofs.org/wiki/SPARK&quot;&gt;Open Proofs page on SPARK&lt;/a&gt;
has some information on SPARK.
The page
&lt;a href=&quot;http://www.adacore.com/home/products/sparkpro/tokeneer/discovery/lesson_contracts/&quot;&gt;What is Special About SPARK Contracts?&lt;/a&gt;
gives a nice quick introduction to SPARK, which I will quote here.
It points out that the Ada line:
&lt;pre&gt;
        procedure Inc (X : in out Integer);
&lt;/pre&gt;
just says there is some procedure &amp;#8220;Inc&amp;#8221; that may read a value X, and
may write it out, but that&amp;#8217;s it.
In SPARK, you can add much more precise information, and the SPARK tools
can then check to see if they are true.
For example, if you say this using SPARK:
&lt;pre&gt;
        procedure Inc (X : in out Integer);
        --# global in out CallCount;
        --# pre  X &amp;lt; Integer'Last and
        --#      CallCount &amp;lt; Integer'Last;
        --# post X = X~ + 1 and 
        --#      CallCount = CallCount~ + 1;
&lt;/pre&gt;
then the SPARK tools will ensure at compile-time (not run-time) that:
&lt;ul&gt;
&lt;li&gt;X and global variable CallCount must be read by at least
one path and must be updated by at least one path through the procedure
&lt;/li&gt;
&lt;li&gt;
Inc can only called when both X and CallCount are less than Integer&amp;#8217;Last.
The &amp;#8220;pre&amp;#8221; means &amp;#8220;precondition&amp;#8221;.
&lt;/li&gt;
&lt;li&gt;
After Inc runs, both X and CallCount will always be incremented by one
(X~ refers to the initial value of X).
The &amp;#8220;post&amp;#8221; means &amp;#8220;postcondition&amp;#8221;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;p&gt;
You can learn more about SPARK from the book
&lt;a href=&quot;http://www.praxis-his.com/sparkada/sparkbook.asp&quot;&gt;
High Integrity Software: The SPARK Approach to Safety and Security&amp;#8221; by John
Barnes&lt;/a&gt;.
&lt;a href=&quot;http://www.praxis-his.com/sparkada/pdfs/sampler_final.pdf&quot;&gt;
Sample text of Barnes&amp;#8217; book is available online.&lt;/a&gt;
The &lt;a href=&quot;http://www.openproofs.org/wiki/SPARK&quot;&gt;open proofs page
on SPARK&lt;/a&gt;
has more information.
&lt;/p&gt;

&lt;p&gt;
This means that the
&lt;a href=&quot;http://www.openproofs.org/wiki/Tokeneer&quot;&gt;&amp;#8220;Tokeneer&amp;#8221;&lt;/a&gt;
program is now an open proof.
Remember, to be an open proof, a program&amp;#8217;s implementation, proofs,
and required tools have to be open source software.
Tokeneer was a sample program written to show how to apply these
kinds of techniques to actual systems
(instead of trivial 5-line programs).
The Tokeneer program itself, and its proofs, have already been
released as open source software.
Many of the tools it required are already FLOSS
(e.g., fuzz and LaTeX for its formal
specifications, and an Ada compiler to compile it).
Now that SPARK has been released as FLOSS, people can examine
this entire stack of software to make improvements in all the
technologies, as well as learn from them and create improved
implementations.
No, this doesn&amp;#8217;t suddenly make it trivial to
make proofs about complex programs, but it&amp;#8217;s a step forward.
&lt;/p&gt;

&lt;p&gt;
If you are interested in making future software better,
&lt;a href=&quot;http://www.openproofs.org/wiki/What_can_I_do_to_help&quot;&gt;
please help the open proofs project&lt;/a&gt;.
You don&amp;#8217;t need to be a math whiz.
For example, if you know how to do shell scripting,
&lt;a href=&quot;http://www.openproofs.org/wiki/Packaging_status&quot;&gt;
please help us package some promising formal methods tools
(like SPARK) so they are easy to install&lt;/a&gt;.
It&amp;#8217;s hard to get people to try out these tools (and give feedback) if
they&amp;#8217;re too hard to install.
If you know of formal methods software that is rotting in some warehouse,
try to get it released as FLOSS.
&lt;a href=&quot;http://www.dwheeler.com/blog/2009/05/22/#default-release-oss&quot;&gt;
I think all government-funded unclassified research software
should be released as FLOSS by default, since &amp;#8220;we the people&amp;#8221;
paid for it&lt;/a&gt;!
If you&amp;#8217;re interested in the latest software technology,
try out a few of these formal methods tools, and release as FLOSS
any small programs and proofs you develop with them.
Send the toolmakers feedback, or write down their strengths and weaknesses
to help others understand them.
SPARK is a tool that &lt;i&gt;can&lt;/i&gt; be used, right now, in certain circumstances.
I have no illusions that today&amp;#8217;s formal methods tools are
ready for arbitrary 20 million line programs.
But if we want future software to be better than today, we need to
figure out how to mature formal methods technology and make it
better-understood so that it &lt;i&gt;can&lt;/i&gt; mature and scale.
I think making top-to-bottom worked examples and starting points
can help us get there.
&lt;/p&gt;
</description>
   </item>
  </channel>
</rss>