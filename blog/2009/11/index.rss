<?xml version="1.0"?>
<!-- name="generator" content="blosxom/2.0" -->

<rss version="2.0">
  <channel>
    <title>David A. Wheeler's Blog   </title>
    <link>http://www.dwheeler.com/blog</link>
    <description>David A. Wheeler's weblog.</description>
    <language>en</language>

  <item>
    <title>Success on Fully Countering Trusting Trust through Diverse Double-Compiling</title>
    <link>http://www.dwheeler.com/blog/2009/11/29#trusting-trust-success</link>
    <pubDate>Sun, 29 Nov 2009 19:30 GMT</pubDate>
    <!-- date: 2009-11-29 -->
    <description>
&lt;p&gt;
My November 23 public defense of
&lt;b&gt;&lt;a href=&quot;http://www.dwheeler.com/trusting-trust/&quot;&gt;Fully Countering Trusting Trust through Diverse Double-Compiling&lt;/a&gt;&lt;/b&gt;
went well.
This was my 2009 PhD dissertation that expands on how to counter the
&amp;#8220;trusting trust&amp;#8221; attack by
using the &amp;#8220;Diverse Double-Compiling&amp;#8221; (DDC) technique.
&lt;/p&gt;

&lt;p&gt;
Most importantly (to me), my PhD committee agreed that I successfully
defended my dissertation.
Whew!
As a result, I&amp;#8217;m essentially done with my PhD.
&lt;/p&gt;

&lt;p&gt;
I learned a lot about creating formal proofs using computers by
doing this dissertation.
I wanted to give the strongest possible evidence that DDC counters
the trusting trust attack, and formal proofs are the strongest
form of proof that I know of&amp;#8230; which is why I created them.
Frankly, creating proofs was kind of fun once I knew what I was doing, but
getting there was more painful than it needed to be.
Many books are on the underlying mathematics (e.g., giving you extreme
detail about various logic systems)&amp;#8230; which is great if you&amp;#8217;re a
mathematician, but not so helpful if you are simply trying to
&lt;i&gt;use&lt;/i&gt; the mathematics.
Some books explain how to do things by hand, but that is an
unnecessary amount of pain; one of my proofs is 30 steps long, and I
sure wouldn&amp;#8217;t have wanted to create that by hand.
Some books seemed to assume that you &lt;i&gt;already&lt;/i&gt; knew everything
the book covered, which is an odd assumption to me :-).
&lt;/p&gt;

&lt;p&gt;
Here&amp;#8217;s a trivial example: Most logic systems can prove &lt;i&gt;anything&lt;/i&gt;
if you give them inconsistent assumptions.
That&amp;#8217;s bad!
You can get rid of that problem by sending the assumptions to a
model-builder like mace4&amp;#8230; if
it can create a model, then the assumptions are consistent.
So, make sure you send your assumptions
through a model-builder to see if your assumptions are consistent.
&lt;/p&gt;

&lt;p&gt;
I&amp;#8217;ve posted
&lt;a href=&quot;http://www.dwheeler.com/trusting-trust/dissertation/&quot;&gt;
detailed data from my dissertation&lt;/a&gt;
so that people can reproduce my results.
I think it&amp;#8217;s really important
that results be reduceable, otherwise, it&amp;#8217;s not science.
As part of that data, I&amp;#8217;ve included a few files
that may help potential proof tool users get started.
In particular, I&amp;#8217;ve posted
&lt;a href=&quot;http://www.dwheeler.com/trusting-trust/dissertation/mortal.in&quot;&gt;prover9 input to prove that Socrates is mortal&lt;/a&gt;, a
&lt;a href=&quot;http://www.dwheeler.com/trusting-trust/dissertation/sqrt2.in&quot;&gt;prover9 input to prove that the
square root of 2 is irrational&lt;/a&gt;,
and
&lt;a href=&quot;http://www.dwheeler.com/trusting-trust/dissertation/distinct.in&quot;&gt;prover9 input showing
how to easily declare that terms in a list are distinct&lt;/a&gt;.
&lt;/p&gt;


&lt;p&gt;
The &amp;#8220;trusting trust&amp;#8221; attack
has historically been considered the &amp;#8220;uncounterable&amp;#8221; attack.
Now the attack can be effectively detected &amp;mdash; and thus countered.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Fully Countering Trusting Trust through Diverse Double-Compiling</title>
    <link>http://www.dwheeler.com/blog/2009/11/20#trusting-trust-lastcall</link>
    <pubDate>Fri, 20 Nov 2009 11:06 GMT</pubDate>
    <!-- date: 2009-11-20 -->
    <description>
&lt;p&gt;
A last-minute reminder &amp;mdash; my public defense of
&lt;b&gt;&lt;a href=&quot;http://www.dwheeler.com/trusting-trust/&quot;&gt;Fully Countering Trusting Trust through Diverse Double-Compiling&lt;/a&gt;&lt;/b&gt;
is coming up on November 23, 1-3pm.
This is my 2009 PhD dissertation that expands on how to counter the
&amp;#8220;trusting trust&amp;#8221; attack by using the &amp;#8220;Diverse Double-Compiling&amp;#8221; (DDC)
technique.
&lt;/p&gt;

&lt;p&gt;
It will be at
&lt;a href=&quot;http://www.gmu.edu&quot;&gt;George Mason University&lt;/a&gt;,
Fairfax, Virginia,
&lt;a href=&quot;http://itu.gmu.edu/innovationhall/aboutih.html&quot;&gt;Innovation Hall&lt;/a&gt;,
room 105.
[&lt;a href=&quot;http://itu.gmu.edu/innovationhall/images/academiciv.gif&quot;&gt;campus
location&lt;/a&gt;] [&lt;a
href=&quot;http://maps.google.com/maps?f=q&amp;amp;source=s_q&amp;amp;hl=en&amp;amp;geocode=&amp;amp;q=38.828240,+-77.307578&amp;amp;sll=38.828258,-77.307615&amp;amp;sspn=0.011417,0.01929&amp;amp;ie=UTF8&amp;amp;ll=38.827539,-77.307336&amp;amp;spn=0.011417,0.01929&amp;amp;z=16&quot;&gt;Google
map&lt;/a&gt;]
Anyone is welcome!
&lt;/p&gt;

&lt;p&gt;
I&amp;#8217;ve made a few small tweaks over the last few weeks.
I modified proof #2 to reduce its requirements even further
(making it even easier to do); I had mentioned in text that this was possible,
but now the formal proof shows it.
I also used mace4 to show that the assumptions of each proof are
consistent.
Formal proofs aren&amp;#8217;t easy to create, or trivial to read, but the reason
I went to that trouble is to show that it&amp;#8217;s not just my opinion
that I&amp;#8217;ve countered the trusting trust attack&amp;#8230; I want to show,
conclusively, that the trusting trust attack has been countered.
I know of no stronger method to show that than a formal proof.
&lt;/p&gt;

&lt;p&gt;
The &amp;#8220;trusting trust&amp;#8221; attack
has historically been considered the &amp;#8220;uncounterable&amp;#8221; attack.
Nuts to that.
Now the attack can be effectively detected &amp;mdash; and thus countered.
&lt;/p&gt;
</description>
   </item>
  <item>
    <title>Trusting Trust, DDC, and Free-Libre/Open Source Software (FLOSS)</title>
    <link>http://www.dwheeler.com/blog/2009/11/13#trusting-trust-ddc-oss</link>
    <pubDate>Fri, 13 Nov 2009 14:02 GMT</pubDate>
    <!-- date: 2009-11-13 -->
    <description>
&lt;p&gt;
&lt;a href=&quot;http://www.dwheeler.com/blog/2009/11/02/#trusting-trust-dissertation&quot;&gt;
As I noted in my blog&lt;/a&gt;,
I&amp;#8217;ve just released my dissertation
&lt;a href=&quot;http://www.dwheeler.com/trusting-trust&quot;&gt;
&amp;#8220;Fully Countering Trusting Trust through Diverse Double-Compiling&lt;/a&gt; (DDC).
But what does that mean for Free-Libre/Open Source Software (FLOSS)?
In short, it&amp;#8217;s &lt;i&gt;fantastic&lt;/i&gt; news for FLOSS, but to explain why that&amp;#8217;s so,
I need to backtrack first.
&lt;/p&gt;
&lt;p&gt;
The &amp;#8220;trusting trust&amp;#8221; attack is a nasty computer attack that involves
creating a subverted compiler in such a way that it even subverts compilers.
It was originally reported in a 1974 security evaluation of Multics,
but most people heard about it from
Ken Thompson&amp;#8217;s 1984 Turing Award presentation
(Ken Thompson is a creator of Unix).
This attack is incredibly nasty, and what&amp;#8217;s worse,
until now there&amp;#8217;s been no effective countermeasure to it.
Indeed, some have claimed that it could not ever be countered, making
the whole idea of &amp;#8220;computer security&amp;#8221; a non-starter.
&lt;/p&gt;
&lt;p&gt;
The &amp;#8220;trusting trust&amp;#8221; attack &lt;i&gt;appears&lt;/i&gt; to be especially
devastating to FLOSS.
The problem is that with the trusting trust attack, the source code that
people review does &lt;i&gt;not&lt;/i&gt; correspond to the executable that&amp;#8217;s
actually running, and that seems to
completely torpedo the &amp;#8220;many eyes&amp;#8221; review that FLOSS makes possible.
The whole world could carefully review a program&amp;#8217;s source code,
but it wouldn&amp;#8217;t matter if the compiler turns it undetectably
into something malicious.
&lt;/p&gt;
&lt;p&gt;
Thankfully, there &lt;i&gt;is&lt;/i&gt; an effective countermeasure,
which I&amp;#8217;ve named
&lt;a href=&quot;http://www.dwheeler.com/trusting-trust&quot;&gt;Diverse
Double-Compiling (DDC)&lt;/a&gt;.
You can see my dissertation which explains what it is, proves that
it works, and even demonstrates it with several compilers
including GCC.
(I will be giving a
&lt;a href=&quot;http://www.dwheeler.com/trusting-trust&quot;&gt;
public defense of it on November 23, 2009&lt;/a&gt;, if
you&amp;#8217;d like to come.)
This means that source code review, such as mass review of FLOSS code,
can now actually work.
&lt;/p&gt;
&lt;p&gt;
But there&amp;#8217;s more, because there&amp;#8217;s an interesting catch with DDC.
DDC counters the trusting trust attack, but it&amp;#8217;s only useful for
people who have access to the compiler source code.
Fundamentally, DDC is a technique for determining if a
compiler executable corresponds with its source code,
but only people who &lt;i&gt;have&lt;/i&gt; the source code can apply DDC to
see if that&amp;#8217;s true.
What&amp;#8217;s more, only people who have access to the source code
will find the statement &amp;#8220;the source and executable correspond&amp;#8221;
particularly useful.
(You could use trusted intermediaries, but this requires total trust in
those intermediaries, making such claims
far weaker than claims that &lt;i&gt;anyone&lt;/i&gt; can check.)
What&amp;#8217;s more,
DDC is actually useful beyond what we &lt;i&gt;normally&lt;/i&gt; think of
as compilers, because you can redefine
&amp;#8220;compiler&amp;#8221; as including other parts (such as the operating system).
In that case, you can even show that the system&amp;#8217;s executables
all correspond to their source code.
But you can &lt;i&gt;only&lt;/i&gt; use DDC to counter the trusting trust attack
if you have access to the source code.
&lt;/p&gt;
&lt;p&gt;
So we now have a radical change.
Now that DDC has been shown to work,
we can see that
software with available source code (including FLOSS)
has a &lt;i&gt;fundamental security advantage&lt;/i&gt; over other software.
That doesn&amp;#8217;t mean that &lt;i&gt;all&lt;/i&gt; FLOSS is more secure than
&lt;i&gt;all&lt;/i&gt; proprietary software, of course.
But
&lt;a href=&quot;http://www.dwheeler.com/essays/securing-oss.pdf&quot;&gt;FLOSS
already had a general security advantage&lt;/a&gt; because it better
meets Saltzer &amp;amp; Schroeder&amp;#8217;s &amp;#8220;Open design principle&amp;#8221;
(as explained in their 1974-1975 papers).
Now we have an attack &amp;mdash; the trusting trust attack &amp;mdash;
for which &lt;i&gt;FLOSS has a fundamental security advantage&lt;/i&gt;.
The time of ignoring FLOSS options, because of misplaced notions
that FLOSS cannot be as secure as proprietary software,
needs to come to an end.
&lt;/p&gt;
&lt;!-- Reviewed by Clyde Roby on 2009-11-13 --&gt;
</description>
   </item>
  <item>
    <title>New PhD Dissertation: Fully Countering Trusting Trust through Diverse Double-Compiling</title>
    <link>http://www.dwheeler.com/blog/2009/11/02#trusting-trust-dissertation</link>
    <pubDate>Mon, 02 Nov 2009 12:19 GMT</pubDate>
    <!-- date: 2009-11-02 -->
    <description>
&lt;p&gt;
An Air Force evaluation of Multics, and Ken Thompson&amp;#8217;s Turing award
lecture (&amp;#8220;Reflections on Trusting Trust&amp;#8221;), showed that compilers can
be subverted to insert malicious Trojan horses into critical software,
&lt;i&gt;including themselves&lt;/i&gt;.  If this &amp;#8220;trusting trust&amp;#8221; attack goes undetected,
even complete analysis of a system&amp;#8217;s source code will not find the
malicious code that is running.  Previously-known countermeasures have
been grossly inadequate.  If this attack cannot be countered, attackers
can quietly subvert entire classes of computer systems, gaining complete
control over financial, infrastructure, military, and/or business
system infrastructures worldwide.
&lt;/p&gt;
&lt;p&gt;
Thankfully, there &lt;i&gt;is&lt;/i&gt; a countermeasure to the
&amp;#8220;trusting trust&amp;#8221; attack.
In 2005
&lt;a href=&quot;http://www.dwheeler.com/trusting-trust&quot;&gt;I wrote a paper on Diverse Double-Compiling (DDC), published by ACSAC&lt;/a&gt;, where I explained DDC and
why it is an effective countermeasure.
But some people still raised concerns.
Would DDC &lt;i&gt;really&lt;/i&gt; counter the attack?
Would DDC scale up to real-world compilers?
Also, the ACSAC paper required &amp;#8220;self-parenting&amp;#8221; compilers &amp;mdash;
can DDC handle compilers that are &lt;i&gt;not&lt;/i&gt; self-parenting?
&lt;/p&gt;
&lt;p&gt;
I&amp;#8217;m now releasing
&lt;b&gt;&lt;a href=&quot;http://www.dwheeler.com/trusting-trust/&quot;&gt;Fully Countering Trusting Trust through Diverse Double-Compiling&lt;/a&gt;&lt;/b&gt;,
my 2009 PhD dissertation that expands on how to counter the
&amp;#8220;trusting trust&amp;#8221; attack by using the &amp;#8220;Diverse Double-Compiling&amp;#8221; (DDC)
technique.
This dissertation was accepted by my PhD committee on October 26, 2009.
&lt;/p&gt;
&lt;p&gt;
On &lt;b&gt;November 23, 2009, 1-3pm&lt;/b&gt;, I will be giving a
&lt;b&gt;public defense&lt;/b&gt; of this dissertation.
&lt;b&gt;If you&amp;#8217;re interested, please come!&lt;/b&gt;
It will be at
&lt;a href=&quot;http://www.gmu.edu&quot;&gt;George Mason University&lt;/a&gt;,
Fairfax, Virginia,
&lt;a href=&quot;http://itu.gmu.edu/innovationhall/aboutih.html&quot;&gt;Innovation Hall&lt;/a&gt;,
room 105.
[&lt;a href=&quot;http://itu.gmu.edu/innovationhall/images/academiciv.gif&quot;&gt;campus
location&lt;/a&gt;] [&lt;a
href=&quot;http://maps.google.com/maps?f=q&amp;amp;source=s_q&amp;amp;hl=en&amp;amp;geocode=&amp;amp;q=38.828240,+-77.307578&amp;amp;sll=38.828258,-77.307615&amp;amp;sspn=0.011417,0.01929&amp;amp;ie=UTF8&amp;amp;ll=38.827539,-77.307336&amp;amp;spn=0.011417,0.01929&amp;amp;z=16&quot;&gt;Google
map&lt;/a&gt;]
&lt;/p&gt;
&lt;p&gt;
This dissertation&amp;#8217;s thesis is that
the trusting trust attack can be detected and effectively countered
using the &amp;#8220;Diverse Double-Compiling&amp;#8221; (DDC) technique, as demonstrated by
(1) a formal proof that DDC can determine if source code and generated
executable code correspond, (2) a demonstration of DDC with four compilers
(a small C compiler, a small Lisp compiler, a small maliciously corrupted
Lisp compiler, and a large industrial-strength C compiler, GCC), and
(3) a description of approaches for applying DDC in various real-world
scenarios.  In the DDC technique, source code is compiled twice: once
with a second (trusted) compiler (using the source code of the compiler&amp;#8217;s
parent), and then the compiler source code is compiled using the result
of the first compilation.  If the result is bit-for-bit identical with
the untrusted executable, then the source code accurately represents
the executable.
&lt;/p&gt;
&lt;p&gt;
Many people commented on my previous 2005 ACSAC paper on the topic.
&lt;a href=&quot;http://www.schneier.com/blog/archives/2006/01/countering_trus.html&quot;&gt;
Bruce Schneier wrote an article on &amp;#8216;Countering &amp;#8220;Trusting Trust&amp;#8221;&amp;#8217;&lt;/a&gt;,
which I think is one of the best independent articles describing my work
on DDC.
&lt;/p&gt;
&lt;p&gt;
This 2009 dissertation significantly extends my previous 2005 ACSAC paper.
For example, I now have a formal proof that DDC is effective
(the ACSAC paper only had an informal justification).
I also have additional demonstrations, including one with GCC
(to show that it scales up) and one with a maliciously corrupted compiler
(to show that it really does detect them in the real world).
The dissertation is also more general; the ACSAC paper only considered
the special case of a &amp;#8220;self-parenting&amp;#8221; compiler,
while the dissertation eliminates that assumption.
&lt;/p&gt;
&lt;p&gt;
So if you&amp;#8217;re interested in countering the &amp;#8220;trusting trust&amp;#8221; attack,
please take a look at my
&lt;a href=&quot;http://www.dwheeler.com/trusting-trust/&quot;&gt;work on countering trusting trust through diverse double-compiling (DDC)&lt;/a&gt;.
&lt;/p&gt;
</description>
   </item>
  </channel>
</rss>