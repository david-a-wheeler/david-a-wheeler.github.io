<?xml version="1.0"?>
<!-- name="generator" content="blosxom/2.0" -->

<rss version="2.0">
  <channel>
    <title>David A. Wheeler's Blog   </title>
    <link>http://www.dwheeler.com/blog</link>
    <description>David A. Wheeler's weblog.</description>
    <language>en</language>

  <item>
    <title>Readable s-expressions for Lisp-based languages: Lots of progress!</title>
    <link>http://www.dwheeler.com/blog/2012/08/12#readable-sweet-lisp4</link>
    <pubDate>Sun, 12 Aug 2012 12:42 GMT</pubDate>
    <!-- date: 2012-08-12 -->
    <description>
&lt;p&gt;
Lots has been happening recently in my effort to make
Lisp-based languages more readable.
A lot of programming languages are Lisp-based, including Scheme,
Common Lisp, emacs Lisp, Arc, Clojure, and so on.
But many software developers reject these languages, at least in
part because their basic notation (s-expressions) is very awkward.
&lt;/p&gt;

&lt;p&gt;
The &lt;a href=&quot;http://readable.sourceforge.net&quot;&gt;Readable Lisp
s-expressions&lt;/a&gt; project has a set of potential solutions.
We now have much more robust code (you can easily download, install, and
use it, due to autoconfiscation), and we have a video that explains our solutions.
The &lt;a href=&quot;http://www.youtube.com/watch?v=l9sFTOKa-cg&amp;feature=plcp&quot;&gt;video
on readable Lisp s-expressions is also available on Youtube&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
We&amp;#8217;re now at version 0.4.  This version is very compatible with
existing Lisp code; they are simply a set of additional abbreviations.
There are three tiers:
curly-infix expressions (which add infix),
neoteric-expressions (which add a more conventional call format), and
sweet-expressions (which deduce parentheses from indentation, reducing
the number of required parentheses).

&lt;p&gt;
Here&amp;#8217;s an example of (awkward) traditional s-expression format:
&lt;pre&gt;
(define (factorial n)
  (if (&amp;lt;= n 1)
    1
    (* n (factorial (- n 1)))))
&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;
Here&amp;#8217;s the same thing, expressed using sweet-expressions:
&lt;pre&gt;
define factorial(n)
  if {n &amp;lt;= 1}
    1
    {n * factorial{n - 1}}
&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;
A sweet-expression reader could accept either format, actually,
since these tiers are simply additional abbreviations and adjustments
that you can make to an existing Lisp reader.
If you&amp;#8217;re interested, please go to the
&lt;a href=&quot;http://readable.sourceforge.net&quot;&gt;Readable Lisp
s-expressions project web page&lt;/a&gt; for more information and an
implementation - and please &lt;a href=&quot;https://sourceforge.net/p/readable/wiki/Join/&quot;&gt;join us&lt;/a&gt;!
&lt;/p&gt;
</description>
   </item>
  </channel>
</rss>