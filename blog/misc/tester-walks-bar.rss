<?xml version="1.0" encoding="UTF-8"?>
<!-- name="generator" content="blosxom/2.0" -->

<rss version="2.0">
  <channel>
    <title>David A. Wheeler's Blog   </title>
    <link>http://www.dwheeler.com/blog</link>
    <description>David A. Wheeler's weblog.</description>
    <language>en</language>

  <item>
    <title>A tester walks into a bar</title>
    <link>http://www.dwheeler.com/blog/2014/10/09#tester-walks-bar</link>
    <pubDate>Thu, 09 Oct 2014 18:15 GMT</pubDate>
    <!-- date: 2014-10-09 -->
    <description>
&lt;p&gt;
&lt;blockquote&gt;
&lt;i&gt;A tester walks into a bar and orders a beer.
Then he orders 999,999 beers.
Orders 0 beers.  Orders -1 beers.
Orders a coyote.  Orders a qpoijzcpx.
Then he insults the bartender.&lt;/i&gt;
&lt;/blockquote&gt;
&lt;!-- That last bit is an addition from a co-worker. I reordered
them to put the numbers first, I think that's easier to follow. --&gt;
&lt;/p&gt;
&lt;p&gt;
This joke (with variations)
is making the rounds, but it also has a serious point.
It&amp;#8217;s a nice example of how testing should work,
including software testing.
&lt;/p&gt;
&lt;p&gt;
Too many of today&amp;#8217;s so-called software &amp;#8220;tests&amp;#8221;
only check for correct data.
This has led to numerous vulnerabilities including
&lt;a href=&quot;http://www.dwheeler.com/essays/heartbleed.html&quot;&gt;Heartbleed&lt;/a&gt;
and
&lt;a href=&quot;http://www.zdnet.com/apples-goto-fail-tells-us-nothing-good-about-cupertinos-software-delivery-process-7000027449/&quot;&gt;Apple&amp;#8217;s &amp;#8220;goto fail; goto fail;&amp;#8221; vulnerability&lt;/a&gt;.
The paper
&lt;a href=&quot;https://crypto.stanford.edu/~dabo/pubs/abstracts/ssl-client-bugs.html&quot;&gt;&amp;#8220;The Most Dangerous Code in the World:
Validating SSL Certificates in Non-Browser Software&amp;#8221;&lt;/a&gt;
found that a disturbingly large number of programss&amp;#8217;
security depends on SSL certificate validation, and they
are insecure because no one actually
tested them with invalid certificates.
They note that
&amp;#8220;most of the vulnerabilities we found should
have been discovered during development with proper unit testing&amp;#8221;.
&lt;/p&gt;
&lt;p&gt;
Good software testing must include
&lt;a href=&quot;http://www.dwheeler.com/essays/heartbleed.html#negative-testing&quot;&gt;negative testing&lt;/a&gt;
(tests with data that should be rejected)
to ensure that the software protects itself against bad data.
This must be part of an automated regression test suite
(re-run constantly) to prevent problems from creeping in later.
For example,
if your programs accept numbers, don&amp;#8217;t just test for
&amp;#8220;correct&amp;#8221; input; test for wrong cases like
too big, zero, negative or too small, and non-numbers.
Testing &amp;#8220;just around&amp;#8221; too big and too small numbers
is often helpful, too, as is testing that tries to bypass the interface.
Your users won&amp;#8217;t know how you did it, but they&amp;#8217;ll know your
program &amp;#8220;just works&amp;#8221; reliably.
&lt;/p&gt;
</description>
   </item>
  </channel>
</rss>