/* fencode - encode filenames or similar data.
 * This generates a newline-terminated list of values in
 * printf(1) "%b" (pfb) format.  The pfb format uses "\" as the escape
 * character; \n = newline, \t = tab, \r = return, \0ddd = octal value
 * (where ddd is a 1-3 digit value; digits is unambiguous).
 * This converts all characters except ".", "/", "_", and ASCII alphanumerics
 * into escaped pfb format; this produces "safe" filenames that are
 * easily processed, since control characters (inc. newline and tab),
 * space, dash, and many other troublesome characters are encoded.
 * Escaping uses octal codes except for newline, tab, and return.
 * We encode "\" using the octal escape, and *not* as \\, so that
 * the sequence \<newline> never occurs.
 * WARNING: There are many OTHER formats that use \ as the escape character,
 * and most are subtly incompatible with each other.  Note that
 * \0001 is control-A, and NOT \0 1.  Note that '\ ' and '\"' are
 * not necessarily supported by pfb.
 *
 * If called with 1 or more arguments, the first argument MUST be "--";
 * all arguments after that are printed in pfb format; each encoded
 * argument is terminated by newline.
 * This means you can do this in shell:
 *    for ef in `find . -exec fencode -- {} \+` ; do
 *      filename="$(printf "%bX" "$ef")" ; filename="${filename%X}" ...
 * If it is called with 0 arguments, it operates as a filter that
 * converts null-byte-terminated lists to pfb format. In this case,
 * an embedded newline is output as \0.  This means you can do this:
 *    for ef in `find . -print0 | fencode` ; do
 *      filename="$(printf "%bX" "$ef")" ; filename="${filename%X}" ...
 * This can be useful with filenames; see
 *    http://www.dwheeler.com/essays/filenames-in-shell.html
 *
 * Possible future extensions:
 *  - support %xx escaping instead (-p for "percent"?)
 *  - support C-string-style escaping instead. (-c?), e.g., \5 and \".
 *  - permit 128..255 to go through unescaped (-h for "high bit"?)
 *  - Don't escape characters in 33..126 range (-r for "reduced encoding?")
 *    It still has to encode the escape character.
 *  - Could say "don't encode high-bit-chars if legal UTF-8", but that
 *    would require changing how the code works because multiple bytes
 *    must be analyzed to determine that.
 * I expect to always *REQUIRE* a "--" before non-option arguments, because
 * the primary use is for filenames.  Since filenames can begin with "-",
 * and such filenames might be set by an attacker, requiring "--" makes
 * this program much safer to use.
 *
 * Released under the "MIT/X11" license.
 * Copyright (c) 2010 David A. Wheeler
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <ctype.h>

/* Since we never use setlocale(), we will use the raw data of locale "C".
 * That's just what we want, since the locale settings need not match
 * the data we're processing.  */

/* This code should be correct even if char is signed.
 * It should work fine on any system, even those using EBCDIC. */

/* Send to stdout the pfb encoding of character c which is followed
 * by nextc.  If "nullnewline" is true, output char 0 as newline. */
void outchar(int c, int nextc)
{
  switch (c) {
    case   0 : putchar('\n'); break;
    case '\n': fputs("\\n", stdout); break; /* In EBCDIC, this is >32 */
    case '\t': fputs("\\t", stdout); break;
    case '\r': fputs("\\r", stdout); break;
    default:
      if (isalnum(c) || (c == '/') || (c == '.') || (c == '_')) {
        putchar(c);
      } else {
        /* Escape whitespace, control chars, globbing chars, etc.
         * We'll even escape "-", since leading "-" can cause trouble.
         * We'll escape ":" so that it's not misunderstood as a URI. */
        if (isdigit(nextc)) {
          /* A digit follows, so use the unambiguous 3-digit format. */
          printf("\\0%.3o", ((unsigned int) c));
        } else {
          /* We can use the "short form", so we'll do so: */
          printf("\\0%o", ((unsigned int) c));
        }
      }
      break;
  }
}

int main(int argc, const char* argv[])
{
  int i, c, nextc;
  char *p;

  if (argc > 1) {
    if (strcmp(argv[1], "--")) {
      fprintf(stderr, "First argument must be '--' if there are arguments.\n");
      exit(1);
    }
    /* Process remaining argument list as a set of unescaped filenames */
    for (i = 2; i < argc; i++) {
      for (p = (char *) argv[i]; *p != 0; p++)
        outchar(*p, *(p+1));
      putchar('\n');
    }
  } else {
    /* Process stdin as a set of null-byte-terminated values.  Null byte
     * termination is a common for handling "bad" filenames, and this lets
     * people transition from null byte termination to another encoding.
     * For efficiency, read in each byte and then print the PREVIOUS byte */
    c = getchar();
    if (c != EOF) {
      while (true) {  /* Use loop-and-a-half construct to read every byte */
        nextc = getchar();
        if (nextc == EOF) break;
        outchar(c, nextc);
        c = nextc;
      }
      outchar(c, -1); /* Output the last byte. */
    }
  }
  return 0;
}

