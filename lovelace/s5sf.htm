<HTML><HEAD>
<TITLE>Ada95 Lovelace Tutorial Section 5.4 - Loop Iteration Schemes</TITLE>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<LINK REV="made" HREF="mailto:dwheeler&#64;dwheeler.com">
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<H1><FONT COLOR="#996600">Section 5.4 - Loop Iteration Schemes</FONT></H1>
There are two other common styles of loops that are directly
supported in Ada: <EM>while</EM> loops and <EM>for</EM> loops.
While and for loops are called `iteration schemes'; they are
loops with information prepended to them on the kind of looping
scheme desired.
<P>
The <EM>while</EM> loop is particularly easy.
Write a normal loop block, as you saw in the previous section,
and put in front of the block
the keyword ``while'' and a condition.
A while loop repeatedly executes the statements in the loop as long
as the while condition is true.
Here is an example of a loop that, while N is less than 20,
it prints N and then adds one to it:
<!-- Note that HTML requires the less-than sign to be handled specially -->
<PRE>
 while N &lt; 20
 loop
  Put(N);
  N := N + 1;
 end loop;
</PRE>
<P>
The <EM>for</EM> loop is similar, starting with the keyword ``for''.
A <EM>for</EM> loop assigns a local loop parameter a lower value.
It then repeatedly checks if the loop parameter is less than or equal to the
higher value, and if so it executes a sequence of statements and then
adds one to the loop parameter.
Here's an example of a loop that prints "Hello" 20 times:
<PRE>
 for Count in 1 .. 20
 loop
   Put_Line("Hello");
 end loop;
</PRE>
<P>
There are some key points about
<EM>for</EM> loops that need mentioning:
<OL>
<LI>
The variable named in the `for' loop is a local variable visible
only in the statements inside it, and it <EM>cannot</EM> be modified
by the statements inside (you <EM>can</EM> exit a for loop, using the
exit statement we've already seen).
<LI>
Normally a loop always adds one.
The reverse order can be requested by
using the keyword `reverse' after the keyword `in'.
In this case the loop value starts with the upper bound (given second)
and decrements until it is less than the lower bound (given first).
If you need to increment or decrement by more than one, use another
kind of loop instead.
</OL>
<P>
Both ``while'' and ``for'' loops check their conditions before
executing each loop.
That means that the loop can conceivably execute "zero" times if the
loop condition starts as false.
This does create a trap for beginning Ada programmers, though.
The construct:
<PRE>
  for J in 10 .. 1 loop
</PRE>
<BR>
repeats zero times (i.e. it never executes the loop contents)
because 10 is always greater than 1.
<P>
The construct
<PRE>
  for J in reverse 10 .. 1 loop
</PRE>
repeats zero times as well; Ada considers 10 .. 1 an empty list, and
doing nothing in reverse order still does nothing.
What you probably want instead is:
<PRE>
  for J in reverse 1 .. 10 loop
</PRE>

<HR><P>
<IMG SRC="q.gif" ALT="" HEIGHT="34" WIDTH="23">
<A NAME="quiz"><FONT SIZE="+3" COLOR="#339900">Quiz:</FONT></A>
<P>
If you wanted to repeat something exactly ten times, which
iteration construct would be the most straightforward?
<OL>
<LI><A HREF="s5sfr1.htm">While loop.</A>
<LI><A HREF="s5sfr2.htm">For loop.</A>
<LI><A HREF="s5sfr3.htm">A loop without an iteration scheme.</A>
</OL>
<HR>
You may also:
<P>
<TABLE BORDER="0"><TR>
<TH><A HREF="s5s3.htm">
<IMG SRC="barrowl.gif" ALT="PREVIOUS " HEIGHT="31" WIDTH="31">
Go back to the previous section</A>
<P></TH>

<TH><A HREF="s6s1.htm">
<IMG SRC="barrowr.gif" ALT="NEXT     " HEIGHT="31" WIDTH="31">
Skip to the next section</A>
<P></TH>

<TH><A HREF="lesson5.htm">
<IMG SRC="barrowu.gif" ALT="OUTLINE  " HEIGHT="31" WIDTH="31">
Go up to lesson 5 outline</A>
<P></TH>
</TR></TABLE>
<P>

<P>
<FONT SIZE="2">
<ADDRESS><A HREF="dwheeler.htm">David A. Wheeler (dwheeler&#64;dwheeler.com)</A></ADDRESS>
<P>
The master copy of this file is at
"<A HREF="http://www.adahome.com/Tutorials/Lovelace/s5sf.htm">http://www.adahome.com/Tutorials/Lovelace/s5sf.htm</A>".
</FONT>
<!-- This text is part of the Ada95 Lovelace tutorial program. -->
<!-- For the contents of lesson 18, the following applies: -->
<!--  Copyright (C) 1996 Ada Resource Association -->
<!--  Copyright granted to the ARA under the condition that this text -->
<!--  will be redistributed to the public domain, without restriction; -->
<!--  you may use this information in any way you with, commercially or not, -->
<!--  without restriction. -->
<!-- = -->
<!-- For all other files in Ada95 Lovelace tutorial, the following applies: -->
<!--  Copyright (C) 2005 David A. Wheeler -->
<!--  This program is free software; you can redistribute it and/or modify -->
<!--  it under the terms of the GNU General Public License as published by -->
<!--  the Free Software Foundation; either version 2 of the License, or -->
<!--  (at your option) any later version. -->
<!--  This freedom only applies to the electronic version; the author -->
<!--  and/or publisher retain all rights to non-electronic versions. -->
<!-- = -->
<!-- This program is distributed in the hope that it will be useful, -->
<!-- but WITHOUT ANY WARRANTY; without even the implied warranty of -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the -->
<!-- GNU General Public License for more details. -->
<!-- = -->
<!-- You should have received a copy of the GNU General Public License -->
<!-- along with this program; if not, write to the Free Software -->
<!-- Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA. -->
</BODY>
</HTML>
