<HTML><HEAD>
<TITLE>Ada95 Lovelace Tutorial Section 10.1 - Exception Basics</TITLE>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<LINK REV="made" HREF="mailto:dwheeler&#64;dwheeler.com">
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<H1><FONT COLOR="#996600">Section 10.1 - Exception Basics</FONT></H1>
Errors and other exceptional situations must be handled by programs
that work in the real world.
Ada provides facilities to deal with these real problems which make
handling them much easier.
In Ada, an <EM>exception</EM> represents a kind of exceptional situation,
usually a serious error.
At run-time an exception can be <EM>raised</EM>, which calls attention
to the fact that an exceptional situation has occurred.
<P>
The default action when an exception is raised is to halt the program.
Usually the program will print out the name of the exception and where
the problem took place, though this depends on your compiler.
The next few sections will show how to override this default.
<P>
If you don't want to halt the program, you'll need to tell Ada what to do
instead by defining an <EM>exception handler</EM>.
An exception handler states what exceptions to handle and what
to do when a given exception is raised.
<P>
Exceptions generally represent something unusual and not normally expected -
reserve their use for things like serious error conditions.
They shouldn't be used for ``expected'' situations, because
they can be slower and if incorrectly handled can stop a program.
The place where an exception is raised may be far away from where it is
handled, and that makes programs with a voluminous number of different
exceptions harder to understand.
Instead, exceptions should be used when a subprogram cannot perform its job
for some significant reason.
<P>
Ada has a number of <EM>predefined</EM> exceptions that are raised when
certain language-defined checks fail.
The predefined check you're most likely to see is
<EM>Constraint_Error</EM>;
this exception is raised when a value goes out-of-bounds for its type.
Examples of this include trying to store a value
that's too large or too small into that type,
dividing by zero, or using an invalid array index.
<P>
Naturally, there is some run-time overhead in performing all these checks,
though less than you might think.
It is possible to suppress these language-defined checks;
this should only be done after the program is thoroughly debugged, and
many people think that it shouldn't be done even then.
<P>
Some packages define their own exceptions, for example, Text_IO
defines the exception <EM>End_Error</EM> that is raised when you attempt to
``Get'' something after you've reached the end of the file, and
<EM>Name_Error</EM> is raised if try to open a file that doesn't exist.
<P>
In the next few sections we'll learn how to define exceptions,
how to raise exceptions, and how to handle exceptions.

<HR><P>
<IMG SRC="q.gif" ALT="" HEIGHT="34" WIDTH="23">
<A NAME="quiz"><FONT SIZE="+3" COLOR="#339900">Quiz:</FONT></A>
<P>
If you're defining a package that displays the view from an airplane
cockpit, should you
raise an exception whenever the view changes from daytime to nighttime?
<OL>
<LI><A HREF="s10s1r1.htm">You should probably raise an exception.</A>
<LI><A HREF="s10s1r2.htm">You should probably <EM>not</EM> raise an exception.</A>
</OL>
<HR>
You may also:
<P>
<TABLE BORDER="0"><TR>
<TH><A HREF="s9sf.htm">
<IMG SRC="barrowl.gif" ALT="PREVIOUS " HEIGHT="31" WIDTH="31">
Go back to the previous section</A>
<P></TH>

<TH><A HREF="s10s2.htm">
<IMG SRC="barrowr.gif" ALT="NEXT     " HEIGHT="31" WIDTH="31">
Skip to the next section</A>
<P></TH>

<TH><A HREF="lesson10.htm">
<IMG SRC="barrowu.gif" ALT="OUTLINE  " HEIGHT="31" WIDTH="31">
Go up to lesson 10 outline</A>
<P></TH>
</TR></TABLE>
<P>

<P>
<FONT SIZE="2">
<ADDRESS><A HREF="dwheeler.htm">David A. Wheeler (dwheeler&#64;dwheeler.com)</A></ADDRESS>
<P>
The master copy of this file is at
"<A HREF="http://www.adahome.com/Tutorials/Lovelace/s10s1.htm">http://www.adahome.com/Tutorials/Lovelace/s10s1.htm</A>".
</FONT>
<!-- This text is part of the Ada95 Lovelace tutorial program. -->
<!-- For the contents of lesson 18, the following applies: -->
<!--  Copyright (C) 1996 Ada Resource Association -->
<!--  Copyright granted to the ARA under the condition that this text -->
<!--  will be redistributed to the public domain, without restriction; -->
<!--  you may use this information in any way you with, commercially or not, -->
<!--  without restriction. -->
<!-- = -->
<!-- For all other files in Ada95 Lovelace tutorial, the following applies: -->
<!--  Copyright (C) 2002 David A. Wheeler -->
<!--  This program is free software; you can redistribute it and/or modify -->
<!--  it under the terms of the GNU General Public License as published by -->
<!--  the Free Software Foundation; either version 2 of the License, or -->
<!--  (at your option) any later version. -->
<!--  This freedom only applies to the electronic version; the author -->
<!--  and/or publisher retain all rights to non-electronic versions. -->
<!-- = -->
<!-- This program is distributed in the hope that it will be useful, -->
<!-- but WITHOUT ANY WARRANTY; without even the implied warranty of -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the -->
<!-- GNU General Public License for more details. -->
<!-- = -->
<!-- You should have received a copy of the GNU General Public License -->
<!-- along with this program; if not, write to the Free Software -->
<!-- Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA. -->
</BODY>
</HTML>
