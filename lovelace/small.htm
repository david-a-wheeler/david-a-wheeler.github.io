<HTML>
<HEAD>
<TITLE>Program Small Home Page</TITLE>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<LINK REV="made" HREF="mailto:dwheeler&#64;dwheeler.com">
</HEAD>

<BODY BGCOLOR="#FFFFFF">
<!-- $Id$ -->
<B>Welcome to the Program Small Home Page!</B>
<P>

Welcome to program "Small", a demonstration of the Ada 95 programming language.
Program "Small" implements a small text adventure game.
This version of Small supports these commands:
<UL>
<LI>Basic commands "look" and "quit";
<LI>Object manipulation commands "get X" and "drop X", as well as an
"inventory" command that lists what you're carrying;
<LI>Simple movement commands ("north", "south",
"east", "west", "up", "down", and their one-letter abbreviations; these may
optionally be preceded with "go").
</UL>
<P>

You can see
<A HREF="smaldemo.htm">a sample run of program "Small"</A>.
<P>

<!-- On HBAP the master and local links lead to identical files: -->
<P>
Program Small is a part of the
<A HREF="lovelace.htm">Lovelace Ada tutorial</A>.
You can access the
<A HREF="http://www.adahome.com/Tutorials/Lovelace/lovelace.htm">master
copy of Lovelace through the Web</A>.
You can read a more detailed description of how program Small was developed,
including design rationale and a description of the general process used
to develop it, as <A HREF="s18s1.htm">lesson 18 in Lovelace</A>.
You can access the
<A HREF="http://www.adahome.com/Tutorials/Lovelace/s18-1.htm">master
copy of lesson 18 through the Web</A>.
<P>
Below is a brief description of program small, with hypertext links to
the various compilation units in program Small.
The compilation units have a large number of hypertext links
between each other, making it easier to follow the program
(these links were generated by my program
<A HREF="http://www.adahome.com/Resources/Tools/ada2html/ada2html.htm">ada2html</A>).
<P>

<HR>
<P>
<H2>The Design of Small</H2>

<IMG ALIGN=right SRC="small.gif" ALT="[Object Hierarchy] WIDTH=151 HEIGHT=87">
Program Small has a number of different packages that implement different
types.  At the heart of program Small is a set of types that implements
the interesting "things" in the simulated world. To the right is a
graphic showing the object-oriented hierarchy of the various types.
All things in the simulated world are a "Thing"; a Thing can be a Room
or an Occupant, an Occupant can be an Item or a Creature, and a Creature
can be a Player or a Monster.
Each of these types is contained in an Ada package with the plural name
(type Thing is defined in package Things, etc.).
<P>

Program Small is implemented as the following program units:
<UL>
<LI>procedure Small <A HREF="smallb.htm">(body)</A> - main driver.
    Loops for input until "quit" is entered, and then passes that input
    on to the Parser.
<LI>package Parser  <A HREF="parsers.htm">(spec)</A>
                    <A HREF="parserb.htm">(body)</A>
    - parses a string and then calls the appropriate routines in World,
      Things, and Occupants.
<LI>package World
    <A HREF="worlds.htm">(spec)</A>
    <A HREF="worldb.htm">(body)</A>
     - sets up the "World" and keeps track of the current player.
<LI>package Things
    <A HREF="thingss.htm">(spec)</A>
    <A HREF="thingsb.htm">(body)</A>
     - defines type "Thing"; everything in the world is a Thing;
     Things can have a Name, a Description, and can contain other Things.
<UL>
<LI>package Rooms
    <A HREF="roomss.htm">(spec)</A>
    <A HREF="roomsb.htm">(body)</A>
     - defines type "Room"; you may be able to go north/south/etc from a Room.
<LI>package Occupants
    <A HREF="occupans.htm">(spec)</A>
    <A HREF="occupanb.htm">(body)</A>
     - an Occupant is a Thing that may be inside a Room.
<UL>
<LI>package Items
    <A HREF="itemss.htm">(spec)</A>
    <!-- A HREF="itemsb.htm" (body) -->
     - an Item is an inactive Occupant (like a box, knife, chair, etc.).
<LI>package Creatures
    <A HREF="creaturs.htm">(spec)</A>
    <!-- A HREF="creaturb.htm" (body) -->
     - a Creature is an active Occupant.
<UL>
<LI>package Players
    <A HREF="playerss.htm">(spec)</A>
    <!-- A HREF="playersb.htm" (body) -->
     - a Player is a user.
<LI>package Monsters
    <A HREF="monsters.htm">(spec)</A>
    <!-- A HREF="monsterb.htm" (body) -->
     - a Monster is a Creature that's not a Player
    (like a dragon, bartender, etc.).
</UL>
</UL>
</UL>
<LI>package Direction
    <A HREF="directis.htm">(spec)</A>
    <A HREF="directib.htm">(body)</A>
     - this defines the type "Direction" which can have the values
       North, South, East, West, Up, and Down.
<LI>package Ustrings
    <A HREF="ustrings.htm">(spec)</A>
    <A HREF="ustringb.htm">(body)</A>
    - utility routines for Unbounded_String.
</UL>
<P>
All of the compilation units above can be selected; useful starting
points include:
<UL>
<LI><A HREF="smallb.htm">procedure Small's body</A> (the main driver)
<LI><A HREF="parserb.htm">package Parser's body</A>
<LI><A HREF="occupans.htm">package Occupants' spec</A>
<LI><A HREF="thingss.htm">package Things' spec</A>
</UL>
<P>
A shorter, simple
<A HREF="pkglist.htm">list of these compilation units</A> is also available.
<P>


<H2>How to Start Experimenting with Small</H2>
You can versions of program "Small" for your experimentation in many ways:
<UL>
<LI>You can see all of
<A HREF="small.txt">program Small's source code in one text file</A>.
<LI>You can get the
<A HREF="small.zip">zip file containing just the Small source code</A>.
In this zip file,
each compilation unit is in a different file and the filenames
follow the GNAT Ada compiler "krunched" filename conventions.
If you plan to take program Small and modify it, this is probably the
easiest way to get started.
<LI>You can get
<A HREF="smallall.zip">everything in program Small in one zip file</A>;
this contains the the Small source code,
the hypertext versions of that source code, the hypertext Small
home page, and the
<A HREF="s18s1.htm">Lovelace lesson describing program Small</A>.
</UL>
<P>

<H2>How to Compile Small</H2>
<P>
If you're using GNAT, it's easiest to compile using "gnatmake",
which will automatically figure out what needs compiling and in what order,
then compile the files for you.
You have two choices in this case: using short filenames or long filenames:
<OL>
<LI>The "zip" files the filenames are all "krunched" down to
8 character filenames per MS-DOS and ISO CD-ROM requirements.
Here's the GNAT incantation to tell your system to use 8-character limits:
<PRE>
      gnatmake small -cargs -gnatk8 -largs -gnatk8
</PRE>
<P>
<LI>If you're using GNAT but want to use long filenames (and your
operating system supports them!), use the file "small.txt" (which puts all
the source code in one file) and expand that file with the command:
<PRE>
      gnatchop small.txt
</PRE>
Now you'll have a bunch of files with long names.
You can then compile the files with:
<PRE>
      gnatmake small
</PRE>
</OL>
<P>

<H2>Version and Legal Information</H2>
<P>
This is version 1.5 of "Small", which notes the change in location
of "HBAP" to its new URL,
"<A HREF="http://www.adahome.com/">http://www.adahome.com/</A>".
Version 1.4 of "Small" fixed
a small bug in the Parser (in file
<A HREF="parser.adb">parser.adb</A> line 28)
and deleted a misleading comment in the specification for Occupant
(in file <A HREF="occupant.ads">occupant.ads</A> line 36).
Version 1.3 of "Small" added some documentation on
how to compile Small.
Version 1.2 of "Small" added the copyright statements for
the ARA and made two small corrections in the
<A HREF="roomsb.htm">body of package Rooms</A>.
Version 1.1 changed
<A HREF="http://www.adahome.com/Resources/Tools/ada2html/ada2html.htm">ada2html</A>'s
location, so all Small hypertext pages were regenerated.
<P>

You are free to copy and modify program Small as you see fit, and
you can use Small in any way you want, commercial or not.
However, please give me credit for writing the original if you do anything
with Small; I think you'll agree that's a reasonable request.
Small was the first winner of the
<A HREF="http://www.adahome.com/Contest/announce.html">Ada Resource
Association (ARA)'s Ada Lovelace programming contest</A>.
Small was submitted to the ARA as a December 15, 1995 entry.
On request of the ARA, the following text was placed in each file:
<PRE>
--
-- Copyright (C) 1996 Ada Resource Association (ARA), Columbus, Ohio.
-- Author: David A. Wheeler
--

--
-- Permission to use, copy, modify, and distribute this software and its
-- documentation for any purpose and without fee is hereby granted,
-- provided that the above copyright and authorship notice appear in all
-- copies and that both that copyright notice and this permission notice
-- appear in supporting documentation.
-- 
-- The ARA makes no representations about the suitability of this software
-- for any purpose.  It is provided "as is" without express
-- or implied warranty.
-- 
</PRE>

<!-- Program Small has slightly different copyright rules than -->
<!-- the Lovelace tutorial; the Lovelace tutorial is also freely distributable, -->
<!-- but Lovelace is covered by the FSF's General Public License. -->

<!-- Program Small is a part of Lovelace. Lovelace is NOT a part of Small. -->

<!-- This page (C) David A. Wheeler 1995 -->
<!-- The copyright has been granted to the ARA so it can be considered -->
<!-- as an entry for the "Ada programming contest" -->

<P>
<ADDRESS><A HREF="dwheeler.htm">David A. Wheeler (dwheeler&#64;dwheeler.com)</A></ADDRESS>
</BODY>
</HTML>


