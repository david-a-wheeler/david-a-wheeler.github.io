%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 7 FMDOCUMENT
0 0 /Times-Bold FMFONTDEFINE
1 0 /Times-Roman FMFONTDEFINE
2 0 /Times-Italic FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 745.99 522 756 R
7 X
0 0 0 1 0 0 0 K
V
90 62.64 522 71.64 R
V
90 36 522 45 R
V
90 90 522 721.01 R
V
0 14 Q
0 X
(Lovelace: An Ada 95 T) 217.59 711.67 T
(utorial) 353.96 711.67 T
(David A. Wheeler) 252.53 691.67 T
1 12 Q
(Institute for Defense Analyses) 230.78 673.01 T
1 9.6 Q
(1) 376.42 677.81 T
1 12 Q
(1801 N. Beauregard St.) 249.51 659.01 T
(Alexandria, V) 238.18 645.01 T
(A 2231) 304.61 645.01 T
(1-1772) 339.83 645.01 T
(\050703\051 845-6662) 268.51 631.01 T
(wheeler@ida.or) 264.76 617.01 T
(g) 341.24 617.01 T
0.15 (Lovelace is a free interactive tutorial for Ada 95 [RM 95] and is available through) 126 589.01 P
0.04 (the W) 90 571.01 P
0.04 (orld W) 118.07 571.01 P
0.04 (ide W) 151.3 571.01 P
0.04 (eb \050WWW\051. This paper describes Lovelace, including basic facts about) 179.37 571.01 P
-0.52 (it, its or) 90 553.01 P
-0.52 (ganization, implementation, user comments, and lessons learned. This paper should) 125.75 553.01 P
-0.43 (be of use to educators considering the use of Lovelace in courses using Ada, users of Love-) 90 535.01 P
0.56 (lace, and educators considering the development of computer) 90 517.01 P
0.56 (-aided instruction programs) 388.24 517.01 P
(for the W) 90 499.01 T
(orld W) 135.02 499.01 T
(ide W) 168.2 499.01 T
(eb \050WWW\051.) 196.24 499.01 T
0 14 Q
(1.  Basic Facts About Lovelace) 90 473.67 T
0 12 Q
(1.1) 90 452.01 T
(Lovelace\325) 126 452.01 T
(s Purpose and Expected Users) 174.88 452.01 T
1 F
0.26 (The purpose of Lovelace is to teach the Ada 95 computer programming language,) 126 431.01 P
-0.18 (with suf) 90 413.01 P
-0.18 (\336cient coverage so the user can become a beginning Ada programmer) 128.6 413.01 P
-0.18 (. Lovelace is) 461.38 413.01 P
1.01 (intended for software developers who know another algorithmic programming language) 90 395.01 P
(\050such as C, C++, Fortran, or Pascal\051 but who do not know Ada.) 90 377.01 T
0 F
(1.2) 90 353.01 T
(Curr) 126 353.01 T
(ent Status) 151.78 353.01 T
1 F
0.43 (The current version of Lovelace as of this writing is version 4.3. This version has) 126 332.01 P
1.27 (68 sections grouped into 17 lessons. Its text includes more than 54,000 words and it is) 90 314.01 P
(stored in 273 HTML \336les. Lovelace would occupy more than 300 pages if printed.) 90 296.01 T
0 F
(1.3) 90 272.01 T
(How to Use Lovelace) 126 272.01 T
1 F
-0.25 (Internet access is not required to use Lovelace, but a program called a \322web brows-) 126 251.01 P
0.59 (er\323 is required. T) 90 233.01 P
0.59 (wo popular web browsers are Mosaic and Netscape, but others \050such as) 172.91 233.01 P
(lynx\051 work as well.) 90 215.01 T
(Once you have a web browser) 126 191.01 T
(, there are two ways to use Lovelace:) 270.47 191.01 T
(a.) 126 167.01 T
-0.31 (An Internet connection. T) 144 167.01 P
-0.31 (o do this, \322open\323 \050using a web browser\051 the following) 266.19 167.01 P
(URL: \322http://lglwww) 144 149.01 T
(.ep\337.ch/Ada/Lovelace/lovelace.html\323.) 246.23 149.01 T
90 128 522 142.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 128 522 142.98 R
7 X
0 0 0 1 0 0 0 K
V
90 140.96 243 140.96 2 L
V
0.5 H
2 Z
0 X
N
0 0 612 792 C
1 8 Q
0 X
0 0 0 1 0 0 0 K
(1) 90 125.33 T
1 10 Q
-0.37 (The publication of this paper does not indicate endorsement by the U.S. Department of Defense \050DoD\051 nor) 100.8 121.33 P
0.69 (the Institute for Defense Analyses \050IDA\051, nor should the contents be construed as re\337ecting the of) 100.8 109.33 P
0.69 (\336cial) 502 109.33 P
(positions of those or) 100.8 97.33 T
(ganizations.) 182.01 97.33 T
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 745.99 522 756 R
7 X
0 0 0 1 0 0 0 K
V
90 62.64 522 71.64 R
V
90 36 522 45 R
V
90 90 522 721.01 R
V
1 12 Q
0 X
(b.) 126 713.01 T
1.83 (A local connection. T) 144 713.01 P
1.83 (o use Lovelace locally) 252.64 713.01 P
1.83 (, you must somehow download) 365 713.01 P
-0.35 (Lovelace to a place where your computer can read it. One simple approach is to) 144 695.01 P
-0.05 (buy it on a CD-ROM [W) 144 677.01 P
-0.05 (alnut 95]. Another approach is to download Lovelace;) 263.09 677.01 P
0.58 (instructions on how to download Lovelace are available at the main Lovelace) 144 659.01 P
(site, or you can download Lovelace from the Public Ada Library \050P) 144 641.01 T
(AL\051 at) 466.84 641.01 T
(\322ftp://wuarchive.wustl.edu/languages/ada/\323.) 144 623.01 T
0 14 Q
(2.  Lovelace Organization) 90 597.67 T
0 12 Q
(2.1) 90 576.01 T
(Overall Organization) 126 576.01 T
1 F
-0.35 (Lovelace consists of a home page, the main tutorial text, and supporting pages. The) 126 555.01 P
0.12 (main tutorial text is or) 90 537.01 P
0.12 (ganized so that the material is divided into small, easily-understood) 196.94 537.01 P
0.14 (units of information. The material is broken into a set of lessons \050currently numbered 1 to) 90 519.01 P
-0.02 (17\051, which are further broken into sections \050numbered 1.1, 1.2, and so on\051. Each section is) 90 501.01 P
-0.17 (short \050about one to one-and-a-half pages of text\051, and each section explains only a few key) 90 483.01 P
1.22 (concepts. The supporting pages provide related material, for example, the bibliography) 90 465.01 P
1.22 (.) 519 465.01 P
0.72 (Figure 1 illustrates this or) 90 447.01 P
0.72 (ganization \050the arcs indicate some primary hypertext links, but) 215.98 447.01 P
(not all hypertext links are shown\051.) 90 429.01 T
-0.59 (Most sections end with a single-question quiz. The purpose of each quiz is to ensure) 126 405.01 P
0.2 (that the user has grasped at least some of the principles in that section. The user may skip) 90 387.01 P
-0.63 (the quizzes, but the quizzes are recommended because the process of taking each quiz helps) 90 369.01 P
-0.25 (the user remember the key points. The quizzes often turned out to be the most dif) 90 351.01 P
-0.25 (\336cult part) 475.92 351.01 P
-0.37 (of a section to create: they need to ask the user some key point while being neither too easy) 90 333.01 P
(nor too dif) 90 315.01 T
(\336cult.) 140.45 315.01 T
-0.64 (Most current WWW tutorials don\325) 126 291.01 P
-0.64 (t include quizzes and are merely static, non-inter-) 289.2 291.01 P
0.08 (active books. Lovelace, by contrast, is much more interactive and uses the quizzes to help) 90 273.01 P
2.37 (the user remember the material through reinforcement. There\325) 90 255.01 P
2.37 (s no penalty for wrong) 403.86 255.01 P
0.4 (answers, so there\325) 90 237.01 P
0.4 (s no disincentive for quiz use. Some users may not want to take a quiz,) 176.44 237.01 P
(so users can skip quizzes and move on to the next section.) 90 219.01 T
0.74 (Since the intended user already knows some other algorithmic programming lan-) 126 195.01 P
-0.07 (guage, many subjects are glossed over or assumed \050e.g. variables, the semantics of assign-) 90 177.01 P
-0.09 (ment, the meaning of expressions\051. Examples of similar capabilities in Pascal, C, and C++) 90 159.01 P
0.75 (are included because many of the users will already be familiar with those languages. A) 90 141.01 P
0.4 (dif) 90 123.01 P
0.4 (ferent kind of tutorial would be needed for those without such knowledge \050e.g. see the) 103.12 123.01 P
(LA) 90 105.01 T
(W tutorial in the \322Related T) 105.04 105.01 T
(utorials\323 section\051.) 238.93 105.01 T
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 745.99 522 756 R
7 X
0 0 0 1 0 0 0 K
V
90 62.64 522 71.64 R
V
90 36 522 45 R
V
90 90 522 720 R
V
1 12 Q
0 X
1.67 (Lovelace is designed to have \322zero start-up cost\323. By intent, users only need a) 126 352 P
-0.55 (WWW browser \050such as Mosaic or Netscape\051\321there\325) 90 334 P
-0.55 (s no requirement to install a compiler) 345.97 334 P
-0.2 (or any other tool. Thus, people who are just \322Internet sur\336ng\323 could simply start using this) 90 316 P
0.91 (tutorial immediately) 90 298 P
0.91 (. Naturally) 187.8 298 P
0.91 (, people will learn best if they actually develop their own) 239.26 298 P
(programs, but that\325) 90 280 T
(s not required by Lovelace.) 181 280 T
0 F
(2.2) 90 256 T
(Organization of the Main T) 126 256 T
(utorial T) 266.23 256 T
(ext) 310.8 256 T
1 F
1.72 (Lesson or) 126 235 P
1.72 (ganization is always a tricky issue for a tutorial. Lovelace starts \322top) 174.49 235 P
0.35 (down\323 for a short time so that users can quickly get the highlights, but then switches to a) 90 217 P
-0.22 (\322bottom up\323 approach. The reason for switching to a \322bottom up\323 approach is because it is) 90 199 P
0.34 (very dif) 90 181 P
0.34 (\336cult to explain higher) 127.78 181 P
0.34 (-level or) 237.54 181 P
0.34 (ganization issues without \336rst explaining the basic) 277.98 181 P
-0.17 (terms. Lovelace was designed to attempt to take advantage of both a \322top down\323 and \322bot-) 90 163 P
(tom up\323 or) 90 145 T
(ganizational approach. T) 141.78 145 T
(able 1 lists the current lessons in Lovelace.) 259.91 145 T
90 360 522 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
219.5 675 419.5 711 R
7 X
0 0 0 1 0 0 0 K
V
1 H
2 Z
0 X
N
1 12 Q
(Lovelace Home Page) 268.18 689.21 T
243 630 396 657 R
7 X
V
0 X
N
(Master Lesson Outline) 264.84 639.5 T
183 576 261 612 R
7 X
V
0 X
N
(Outline of) 197.5 597.21 T
143 522 207 558 R
7 X
V
0 X
N
(Section 1.1) 148 543.76 T
(T) 148 530.67 T
(ext) 154.49 530.67 T
117 468 180 504 R
7 X
V
0 X
N
(Lesson 1) 200.5 585.21 T
(Incorrect) 125.5 489.21 T
(Response) 125.5 477.21 T
189 468 252 504 R
7 X
V
0 X
N
(Incorrect) 197.5 489.21 T
(Response) 197.5 477.21 T
261 468 324 504 R
7 X
V
0 X
N
(Correct) 269.5 489.21 T
(Response) 269.5 477.21 T
323 522 387 558 R
7 X
V
0 X
N
(Section 1.2) 328 543.76 T
(T) 328 530.67 T
(ext) 334.49 530.67 T
399 576 477 612 R
7 X
V
0 X
N
(Outline of) 413.5 597.21 T
(Lesson 2) 416.5 585.21 T
(...) 495 594 T
(...) 432 540.82 T
(...) 342 488.6 T
322.81 668.54 319.5 657 316.19 668.54 319.5 668.54 4 Y
V
319.5 675 319.5 668.54 2 L
N
295.03 630.85 307 630 296.4 624.38 295.71 627.61 4 Y
V
233.97 611.16 222 612 232.6 617.63 233.28 614.39 4 Y
V
295.71 627.61 233.29 614.39 2 L
0 Z
N
317.98 625.15 307 630 318.88 631.71 318.43 628.43 4 Y
V
427.02 616.85 438 612 426.12 610.29 426.57 613.57 4 Y
V
318.43 628.43 426.57 613.57 2 L
N
487.67 621.95 498.99 617.99 487.29 615.35 487.48 618.65 4 Y
V
320 628.21 487.48 618.65 2 L
2 Z
N
200.18 573.93 212 576 203.07 567.98 201.62 570.96 4 Y
V
186.82 560.08 175 558 183.92 566.02 185.37 563.05 4 Y
V
201.63 570.95 185.37 563.05 2 L
0 Z
N
223.03 571.28 212 576 223.86 577.84 223.45 574.56 4 Y
V
343.97 562.72 355 558 343.14 556.16 343.55 559.44 4 Y
V
223.45 574.56 343.55 559.44 2 L
N
159.9 507.75 148.5 504.01 156.18 513.22 158.04 510.49 4 Y
V
175 522 158.04 510.48 2 L
2 Z
N
210.99 511.32 220.5 504 208.55 505.17 209.77 508.25 4 Y
V
175 522 209.77 508.24 2 L
N
281.6 509.02 292.5 504 280.6 502.48 281.1 505.75 4 Y
V
175 522 281.1 505.75 2 L
N
313.02 533.34 323 540 318.07 529.06 315.54 531.2 4 Y
V
292.5 504 315.54 531.2 2 L
N
176.06 571.29 172 558.01 168.41 571.43 172.24 571.36 4 Y
V
207.14 691.41 219.5 692 209.33 684.95 208.24 688.18 4 Y
V
0 Z
103.72 174.28 47.5 134 219.5 558 A
(Main T) 0 -270 110 518.99 TF
(utorial T) 0 -270 110 554.24 TF
(ext) 0 -270 110 595.06 TF
(Supporting) 0 -270 107.46 383.11 TF
(Pages) 0 -270 119.46 383.11 TF
149.08 512.99 157 522.01 155.06 510.16 152.07 511.58 4 Y
V
148.5 504 152.07 511.57 2 L
2 Z
N
179.47 510.86 175 522 184.69 514.93 182.08 512.9 4 Y
V
189 504 182.08 512.9 2 L
N
(Bibliography) 246.83 405.41 T
(Or) 157.78 408.21 T
(ganization) 170.23 408.21 T
(Notes) 157.78 396.21 T
(Explanation) 331 408.21 T
(of BNF) 331 396.21 T
243 396 314 423 R
0 Z
N
153 387 225 423 R
N
324 387 396 423 R
N
(...) 423 405 T
218.54 536.69 207 540 218.54 543.31 218.54 540 4 Y
V
312.46 543.31 324 540 312.46 536.69 312.46 540 4 Y
V
218.54 540 312.46 540 2 L
N
0 F
(Figur) 234 369 T
(e 1. Lovelace\325) 262.45 369 T
(s Overall Organization) 331.66 369 T
0 0 612 792 C
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 745.99 522 756 R
7 X
0 0 0 1 0 0 0 K
V
90 62.64 522 71.64 R
V
90 36 522 45 R
V
90 90 522 721.01 R
V
1 12 Q
0 X
0.06 (Lesson 1 gives an overall description of Ada and how Ada was developed. Lesson) 126 273.01 P
-0.12 (2 describes how Ada programs are structured \050using packages\051 and gives a top-down view) 90 255.01 P
-0.44 (of the language. However) 90 237.01 P
-0.44 (, a top-down description becomes dif) 212.18 237.01 P
-0.44 (\336cult to continue because so) 387.76 237.01 P
-0.04 (many simple terms and concepts have not been discussed. Lessons 3 through 6 thus take a) 90 219.01 P
-0.39 (bottom-up approach, describing basic programming capabilities of Ada 95. Lesson 7 intro-) 90 201.01 P
1.98 (duces object-oriented \050OO\051 features; the OO features are discussed before strings and) 90 183.01 P
0.31 (input-output because many people are interested in learning speci\336cally about them. Les-) 90 165.01 P
1.49 (sons 8 and 9 then describe strings and input-output. By the end of lesson 9, beginners) 90 147.01 P
(should know enough to write simple interactive text programs.) 90 129.01 T
0 F
(Table 1.  Lovelace Lessons) 238.16 713.01 T
1 F
(Lesson) 145 689.01 T
(Number) 142.34 675.01 T
(Lesson T) 312.38 682.01 T
(itle) 356.29 682.01 T
( 1) 132 653.01 T
(Brief Introduction to Ada.) 204 653.01 T
( 2) 132 631.01 T
(Basic Ada Structure \050Packages\051.) 204 631.01 T
( 3) 132 609.01 T
(Ada Lexical Elements.) 204 609.01 T
( 4) 132 587.01 T
(Procedures and Type Integer.) 204 587.01 T
( 5) 132 565.01 T
(Statements \050if, loop\051.) 204 565.01 T
( 6) 132 543.01 T
(Basic Types \050Float, Boolean, subtypes, record\051.) 204 543.01 T
( 7) 132 521.01 T
(Object-Oriented Programming.) 204 521.01 T
( 8) 132 499.01 T
(Introduction to String Types.) 204 499.01 T
( 9) 132 477.01 T
(Basic Input/Output.) 204 477.01 T
( 10) 132 455.01 T
(Exceptions.) 204 455.01 T
( 11) 132 433.01 T
(Generics.) 204 433.01 T
( 12) 132 411.01 T
(Access Types.) 204 411.01 T
( 13) 132 389.01 T
(Tasks and Protected Types.) 204 389.01 T
( 14) 132 367.01 T
(Ada-related Information.) 204 367.01 T
( 15) 132 345.01 T
(Ada Program Structure.) 204 345.01 T
( 16) 132 323.01 T
(Interfacing to Other Languages.) 204 323.01 T
( 17) 132 301.01 T
(Miscellaneous Ada Subjects.) 204 301.01 T
126 702.76 126 293.26 2 L
V
0.5 H
0 Z
N
198 703.26 198 292.76 2 L
V
N
486 702.76 486 293.26 2 L
V
N
125.75 703.01 486.25 703.01 2 L
V
N
126.25 668.26 485.75 668.26 2 L
V
N
126.25 665.76 485.75 665.76 2 L
V
N
125.75 645.01 486.25 645.01 2 L
V
N
125.75 623.01 486.25 623.01 2 L
V
N
125.75 601.01 486.25 601.01 2 L
V
N
125.75 579.01 486.25 579.01 2 L
V
N
125.75 557.01 486.25 557.01 2 L
V
N
125.75 535.01 486.25 535.01 2 L
V
N
125.75 513.01 486.25 513.01 2 L
V
N
125.75 491.01 486.25 491.01 2 L
V
N
125.75 469.01 486.25 469.01 2 L
V
N
125.75 447.01 486.25 447.01 2 L
V
N
125.75 425.01 486.25 425.01 2 L
V
N
125.75 403.01 486.25 403.01 2 L
V
N
125.75 381.01 486.25 381.01 2 L
V
N
125.75 359.01 486.25 359.01 2 L
V
N
125.75 337.01 486.25 337.01 2 L
V
N
125.75 315.01 486.25 315.01 2 L
V
N
125.75 293.01 486.25 293.01 2 L
V
N
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 745.99 522 756 R
7 X
0 0 0 1 0 0 0 K
V
90 62.64 522 71.64 R
V
90 36 522 45 R
V
90 90 522 720 R
V
1 12 Q
0 X
0.24 (Lessons 10 through 13 then introduce some of the more advanced features of Ada) 126 712 P
-0.42 (\050exceptions, generics, access types, and tasking\051. The end of lesson 13 marks the end of the) 90 694 P
-0.14 (\322bottom up\323 view of Ada, and the lessons after lesson 13 discuss various important topics.) 90 676 P
-0.51 (Lesson 14 describes related available information \050especially on-line sources\051. Les-) 126 652 P
0.72 (son 15 completes the \322top-down\323 view of Ada \050that was started earlier in lesson 2\051. The) 90 634 P
-0.02 (\322top-down\323 view could now be completed because the user has learned the information in) 90 616 P
(the \322bottom up\323 sections.) 90 598 T
-0.43 (Lesson 16 and 17 then cover special topics that are likely to be useful to most users.) 126 574 P
0.24 (Lesson 16 covers interfacing to other languages, and since C is a likely \322other language\323,) 90 556 P
0.11 (lesson 16 concentrates on interfacing Ada programs with C programs. Lesson 17 covers a) 90 538 P
-0.36 (range of miscellaneous subjects: language-de\336ned attributes, ef) 90 520 P
-0.36 (\336ciency) 391.9 520 P
-0.36 (, and software safe-) 429.12 520 P
-0.23 (ty) 90 502 P
-0.23 (. Software safety is not a topic speci\336c to Ada, but since many safety-critical systems are) 98.56 502 P
0.93 (built using Ada, it seemed appropriate to speci\336cally address safety and point to related) 90 484 P
(information \050as well as brie\337y introducing Ada-speci\336c approaches\051.) 90 466 T
0 F
(2.3) 90 442 T
(Supporting Page Organization) 126 442 T
1 F
-0.49 (The supporting pages were created as needed to provide additional material that did) 126 421 P
-0.09 (not belong in the main body of the tutorial. Hypertext links make it easy for users to get to) 90 403 P
-0.52 (this material, and many of the supporting pages are referenced from the tutorial home page.) 90 385 P
(Some examples of this kind of material are:) 90 367 T
(\245) 126 343 T
0.8 (Bibliography: Lovelace references several documents, particularly in the sec-) 144 343 P
-0.02 (tions on ef) 144 325 P
-0.02 (\336ciency and safety) 194.41 325 P
-0.02 (. Selecting a reference moves the user to the loca-) 283.57 325 P
(tion in the bibliography with more information about that reference.) 144 307 T
(\245) 126 283 T
-0.23 (Or) 144 283 P
-0.23 (ganization Notes: Notes on the or) 156.44 283 P
-0.23 (ganization of the tutorial itself are included) 316.07 283 P
(here.) 144 265 T
(\245) 126 241 T
0.14 (Explanation of BNF: Many sections include a de\336nition in Backus-Naur Form) 144 241 P
0.07 (\050BNF\051; this page explains how to read BNF for users who do not know how to) 144 223 P
(read BNF descriptions.) 144 205 T
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 745.99 522 756 R
7 X
0 0 0 1 0 0 0 K
V
90 62.64 522 71.64 R
V
90 36 522 45 R
V
90 90 522 721.01 R
V
0 14 Q
0 X
(3.  Lovelace Implementation) 90 711.67 T
1 12 Q
0.6 (The standard document format for the W) 126 693.01 P
0.6 (orld W) 325.24 693.01 P
0.6 (ide W) 359.01 693.01 P
0.6 (eb is the Hypertext Markup) 387.64 693.01 P
-0.25 (Language \050HTML\051. Unfortunately) 90 675.01 P
-0.25 (, HTML is a little dif) 254.35 675.01 P
-0.25 (\336cult to use directly when develop-) 353.58 675.01 P
0.27 (ing a tutorial. T) 90 657.01 P
0.27 (utorials typically include a lar) 165.05 657.01 P
0.27 (ge number of links that repeat the same pat-) 309.23 657.01 P
0.88 (tern, and inserting these links \322by hand\323 is very time-consuming. For example, for each) 90 639.01 P
-0.17 (section there should be a link to the previous section, a link to the next section, an optional) 90 621.01 P
-0.28 (quiz \050with separate pages for each possible answer\051, and a link \322up\323 to an outline. For each) 90 603.01 P
0.75 (quiz response, there should be a link back to the question and a link forward to the next) 90 585.01 P
-0.31 (section. Every lesson outline should have a link to the next lesson, the previous lesson, and) 90 567.01 P
0.97 (up to the outline of all lessons. Therefore, to make tutorial generation easier) 90 549.01 P
0.97 (, a program) 465.08 549.01 P
-0.32 (called \322mklesson\323 was developed that accepted a special input format \050called the \322les\323 for-) 90 531.01 P
(mat\051 and generated the lesson \336les in HTML format.) 90 513.01 T
-0.26 (Figure 2 shows how \322mklesson\323 works. It takes as input a \336le representing one les-) 126 489.01 P
-0.35 (son \050in les format\051 and a \322template\323 \336le which guides what mklesson will generate. Mkles-) 90 471.01 P
0.27 (son then generates each section and a \336le for each possible quiz answer) 90 453.01 P
0.27 (, as well as all the) 435.33 453.01 P
(links between them and an outline of that lesson.) 90 435.01 T
90 90 522 721.01 C
90 106 522 431.01 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 12 Q
0 X
0 0 0 1 0 0 0 K
(mklesson) 278.83 345.92 T
J
1 H
2 Z
90 450 40.5 18 301.5 350.01 A
228 251.01 306 287.01 R
7 X
V
0 X
N
(Outline of) 242.5 272.22 T
188 197.01 252 233.01 R
7 X
V
0 X
N
(Section X.1) 193 218.76 T
(T) 193 205.67 T
(ext) 199.49 205.67 T
162 143.01 225 179.01 R
7 X
V
0 X
N
(Lesson X) 244.17 260.22 T
(Incorrect) 170.5 164.22 T
(Response) 170.5 152.22 T
234 143.01 297 179.01 R
7 X
V
0 X
N
(Incorrect) 242.5 164.22 T
(Response) 242.5 152.22 T
306 143.01 369 179.01 R
7 X
V
0 X
N
(Correct) 314.5 164.22 T
(Response) 314.5 152.22 T
368 197.01 432 233.01 R
7 X
V
0 X
N
(Section X.2) 373 218.76 T
(T) 373 205.67 T
(ext) 379.49 205.67 T
(...) 387 163.61 T
245.18 248.94 257 251.01 248.07 242.99 246.62 245.97 4 Y
V
231.82 235.08 220 233.01 228.92 241.03 230.37 238.06 4 Y
V
246.63 245.96 230.37 238.05 2 L
0 Z
N
268.03 246.29 257 251.01 268.86 252.85 268.45 249.57 4 Y
V
388.97 237.73 400 233.01 388.14 231.17 388.55 234.45 4 Y
V
268.45 249.57 388.55 234.45 2 L
N
204.9 182.76 193.5 179.01 201.18 188.23 203.04 185.49 4 Y
V
220 197.01 203.04 185.49 2 L
2 Z
N
255.99 186.33 265.5 179.01 253.55 180.18 254.77 183.26 4 Y
V
220 197.01 254.77 183.25 2 L
N
326.6 184.03 337.5 179.01 325.59 177.49 326.1 180.76 4 Y
V
220 197.01 326.1 180.76 2 L
N
358.02 208.35 368 215.01 363.06 204.07 360.54 206.21 4 Y
V
337.5 179.01 360.54 206.21 2 L
N
194.08 188 202 197.01 200.06 185.17 197.07 186.58 4 Y
V
193.5 179.01 197.07 186.58 2 L
N
224.47 185.87 220 197.01 229.69 189.93 227.08 187.9 4 Y
V
234 179.01 227.08 187.9 2 L
N
263.54 211.7 252 215.01 263.54 218.32 263.54 215.01 4 Y
V
357.46 218.32 369 215.01 357.46 211.7 357.46 215.01 4 Y
V
263.54 215.01 357.46 215.01 2 L
0 Z
N
(...) 441 215.82 T
J
144 314.01 459 314.01 459 134.01 144 134.01 4 Y
J
144 310.51 144 314.01 147.5 314.01 3 L
2 Z
N
[6.844 6.844] 6.844 I
147.5 314.01 455.5 314.01 2 L
N
J
455.5 314.01 459 314.01 459 310.51 3 L
N
[6.92 6.92] 6.92 I
459 310.51 459 137.51 2 L
N
J
459 137.51 459 134.01 455.5 134.01 3 L
N
[6.844 6.844] 6.844 I
455.5 134.01 147.5 134.01 2 L
N
J
147.5 134.01 144 134.01 144 137.51 3 L
N
[6.92 6.92] 6.92 I
144 137.51 144 310.51 2 L
N
J
(Lesson X input) 260.33 407.22 T
(\050\322les\323 format\051) 260.33 395.22 T
(template) 393.34 350.42 T
J
243 386.01 351 422.01 R
N
378 341.01 450 368.01 R
N
301.91 380 301.5 368.01 295.49 378.4 298.7 379.2 4 Y
V
297 386.01 298.7 379.2 2 L
N
353.86 348.16 342 350.01 353.04 354.72 353.45 351.44 4 Y
V
378 354.51 353.45 351.44 2 L
N
304.81 325.54 301.5 314.01 298.19 325.54 301.5 325.54 4 Y
V
301.5 332.01 301.5 325.54 2 L
N
0 F
(Figur) 243.97 116.82 T
(e 2. How mklesson W) 272.42 116.82 T
(orks) 381.43 116.82 T
90 90 522 721.01 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 745.99 522 756 R
7 X
0 0 0 1 0 0 0 K
V
90 62.64 522 71.64 R
V
90 36 522 45 R
V
90 90 522 720 R
V
1 12 Q
0 X
1.14 (This approach to implementing Lovelace not only simpli\336es lesson creation and) 126 712 P
-0.59 (content modi\336cation, but it also makes it easier to change formatting later) 90 694 P
-0.59 (. For example, the) 436.79 694 P
-0.12 (\336rst version of Lovelace had no graphical icons. Graphical icons \050indicating the next item,) 90 676 P
0.46 (previous item, and so on\051 were easily added by simply modifying the \322template\323 \336le and) 90 658 P
(rerunning mklesson.) 90 640 T
-0.44 (Mklesson was designed to support other capabilities that have not been used: distri-) 126 616 P
0.95 (bution of a single tutorial across multiple sites \050and maintained by multiple people\051 and) 90 598 P
0.88 (support of dif) 90 580 P
0.88 (ferent \050human\051 languages. Perhaps, when these capabilities are used, more) 156.87 580 P
(can be said about them.) 90 562 T
0 14 Q
(4.  User Comments) 90 536.67 T
1 12 Q
0.34 (I have depended on voluntary user comments as the primary mechanism for feed-) 126 518 P
0.34 (back about Lovelace. User impressions have generally been very positive. Here are some) 90 500 P
(examples:) 90 482 T
2 F
(\245) 108 458 T
0.55 (I have just taken the Lovelace Ada tutorial. I thought it was very informative and) 126 458 P
-0.39 (easy to understand. Thank you for pr) 126 440 P
-0.39 (oviding it thr) 300.89 440 P
-0.39 (ough the WWW) 362.35 440 P
-0.39 (. \050Adina Ragenov-) 435.13 440 P
(ich, aragen@cs.montana.edu\051) 126 422 T
(\245) 108 398 T
-0.19 (I \336nished Lovelace about a week ago. It has left a good impr) 126 398 P
-0.19 (ession on me. I think it) 414.28 398 P
-0.27 (does an outstanding job of nurturing the inter) 126 380 P
-0.27 (est of someone who is truly inter) 343.38 380 P
-0.27 (ested) 497.34 380 P
0.51 (in Ada 95. I noticed that you described it as a whirlwind tour) 126 362 P
0.51 (. I think that is true,) 424.45 362 P
0.82 (but it was a whirlwind tour with many opportunities for brief r) 126 344 P
0.82 (e\337ection and with) 435.02 344 P
-0.47 (dir) 126 326 P
-0.47 (ections for detailed inquiries. Speci\336cally) 139.56 326 P
-0.47 (, I think that the quizzes with comments) 336.66 326 P
-0.23 (for both the right and the wr) 126 308 P
-0.23 (ong answers r) 260.83 308 P
-0.23 (eally helps a novice, like me, to get some) 327.92 308 P
0.57 (sense of pr) 126 290 P
0.57 (ogr) 178.7 290 P
0.57 (ess. Of course, mor) 194.92 290 P
0.57 (e can be learned by working thr) 289.19 290 P
0.57 (ough full blown) 445.5 290 P
-0.27 (exer) 126 272 P
-0.27 (cises but I think it might br) 146.21 272 P
-0.27 (eak the momentum of someone who is curious about) 273.49 272 P
-0.56 (Ada 95 in a self-motivated way) 126 254 P
-0.56 (. I also thought it was a good idea to include pointers) 271.52 254 P
-0.24 (to other sour) 126 236 P
-0.24 (ces of information about Ada. \050T) 187.08 236 P
-0.24 (ed Mansueto, mansueto@iastate.edu\051) 341.46 236 P
(\245) 108 212 T
-0.13 (What I appr) 126 212 P
-0.13 (eciated most was the small, uncomplicated sample pr) 183.29 212 P
-0.13 (ograms you used.) 437.93 212 P
-0.57 (So many books use examples that ar) 126 194 P
-0.57 (e thr) 296.12 194 P
-0.57 (ee pages long and try to incorporated thr) 317.44 194 P
-0.57 (ee) 511.34 194 P
(or four new ideas. \050Lisa Mae Br) 126 176 T
(onkema, LisaMae5@aol.com\051) 279.89 176 T
(\245) 108 152 T
0.43 (I just completed your Lovelace Ada T) 126 152 P
0.43 (utorial. I thought it was very well done. The) 307.89 152 P
0.65 (lessons ar) 126 134 P
0.65 (e br) 174.55 134 P
0.65 (oken up and or) 193.75 134 P
0.65 (der) 267.6 134 P
0.65 (ed very well. I could do a couple of lessons each) 283.15 134 P
0.14 (morning befor) 126 116 P
0.14 (e getting on to my other work. The sections of each lesson ar) 194.69 116 P
0.14 (e small) 487.53 116 P
0.61 (enough that even if I got interrupted in the middle of a lesson it was only a short) 126 98 P
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 745.99 522 756 R
7 X
0 0 0 1 0 0 0 K
V
90 62.64 522 71.64 R
V
90 36 522 45 R
V
90 90 522 721.01 R
V
2 12 Q
0 X
(distance back to r) 126 713.01 T
(ecover at a logical br) 211.21 713.01 T
(eak.) 314.09 713.01 T
0.01 (I especially liked the end-of-section quizzes. They tended to ensur) 126 677.01 P
0.01 (e that I absorbed) 440.3 677.01 P
1.32 (what I\325d r) 126 659.01 P
1.32 (ead and hadn\325) 176.19 659.01 P
1.32 (t just scanned it without engaging my brain \050something) 246.81 659.01 P
0.64 (that\325) 126 641.01 P
0.64 (s easy to do when r) 147.12 641.01 P
0.64 (eading long technical documents\051. Even the sections with) 242.21 641.01 P
-0 (simple questions kept me awake, so her) 126 623.01 P
-0 (e\325) 314.5 623.01 P
-0 (s an ar) 322.28 623.01 P
-0 (ea for impr) 355.16 623.01 P
-0 (ovement: Add a Quiz to) 408.7 623.01 P
0.41 (the sections that don\325) 126 605.01 P
0.41 (t have them, even if it\325) 228.91 605.01 P
0.41 (s just a r) 336.08 605.01 P
0.41 (egur) 378.55 605.01 P
0.41 (gitation of what was pr) 400.1 605.01 P
0.41 (e-) 512.67 605.01 P
(sented a couple of paragraphs above.) 126 587.01 T
0.25 (The hypertext links ar) 126 551.01 P
0.25 (e also a good inclusion, I only followed a few but may come) 231.3 551.01 P
(back for some mor) 126 533.01 T
(e in the futur) 215.21 533.01 T
(e. \050Chip Patton, crpatton@ingr) 276.43 533.01 T
(.com\051) 426.48 533.01 T
0 14 Q
(5.  Related T) 90 507.67 T
(utorials) 164.93 507.67 T
1 12 Q
(There are other Ada tutorials; the key on-line tutorials are:) 126 489.01 T
(a.) 126 465.01 T
-0.06 (Learn Ada on the W) 144 465.01 P
-0.06 (eb \050LA) 240.78 465.01 P
-0.06 (W\051 by Dr) 274.08 465.01 P
-0.06 (. Fintan Culwin. This tutorial concentrates) 319.29 465.01 P
0.06 (on those who know little about software development, rather than helping pro-) 144 447.01 P
0.19 (grammers who already know other programming languages. LA) 144 429.01 P
0.19 (W is available) 452.97 429.01 P
(at \322http://www) 144 411.01 T
(.scism.sbu.ac.uk/law/lawhp.html\323.) 214.88 411.01 T
(b.) 126 387.01 T
0.62 (Hot Ada is a hypertext self-directed Ada tutorial for PCs or Apple Macintosh) 144 387.01 P
-0.02 (from Stage Harbor Software available for a nominal fee. Hot Ada spends more) 144 369.01 P
0.31 (time describing object-orientation in general \050as well as Ada speci\336cally\051, and) 144 351.01 P
(uses a special graphical notation [Crawford 95].) 144 333.01 T
(c.) 126 309.01 T
0.68 (AdaT) 144 309.01 P
0.68 (utr is a self-directed shareware Ada tutorial available on the Public Ada) 170.9 309.01 P
-0.24 (Library \050P) 144 291.01 P
-0.24 (AL\051. There is a new version for Ada 95, and an older one for Ada 83.) 192.32 291.01 P
0.47 (AdaT) 144 273.01 P
0.47 (utr includes a series of programming exercises, which are good for rein-) 170.9 273.01 P
-0.35 (forcement but also require more time to get through the material. These courses) 144 255.01 P
4.19 (are available at the P) 144 237.01 P
4.19 (AL at \322http://wuarchive.wustl.edu:80/languages/ada/) 259.64 237.01 P
(crsware/\323.) 144 219.01 T
3.89 (The) 126 195.01 P
2 F
3.89 (Catalog of Resour) 151.55 195.01 P
3.89 (ces for Education in Ada and Softwar) 246.89 195.01 P
3.89 (e Engineering) 450.45 195.01 P
1 F
0.6 (\050CREASE\051 lists institutions and or) 90 177.01 P
0.6 (ganizations that provide Ada training, as well as other) 258.22 177.01 P
-0.08 (material relevant to learning Ada. This is available through the Ada Information Clearing-) 90 159.01 P
6.86 (house at \322ftp://sw-eng.falls-church.va.us/public/AdaIC/ed-train/crease95\323. Note that) 90 141.01 P
-0.35 (Lovelace is not listed in the CREASE, since Lovelace became available after the CREASE) 90 123.01 P
(survey was performed.) 90 105.01 T
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 745.99 522 756 R
7 X
0 0 0 1 0 0 0 K
V
90 62.64 522 71.64 R
V
90 36 522 45 R
V
90 90 522 720 R
V
0 14 Q
0 X
(6.  Lessons Learned) 90 710.67 T
1 12 Q
(The following lessons were learned in developing this tutorial:) 126 692 T
(a.) 126 668 T
0.07 (Use document generators to develop a WWW tutorial. The HTML language is) 144 668 P
0.22 (simply too low-level to develop a tutorial; using a program \050mklesson\051 proved) 144 650 P
(to be very helpful.) 144 632 T
(b.) 126 608 T
-0.2 (\322Marketing\323 takes a long time. It took more than ten hours to identify locations) 144 608 P
-0.14 (where there would be an interest in Lovelace and to send information in a form) 144 590 P
4.31 (useful to them. Lovelace is referenced in the general WWW directory) 144 572 P
1.75 (Y) 144 554 P
1.75 (AHOO) 151.33 554 P
1 9.6 Q
1.4 (2) 185.99 558.8 P
1 12 Q
1.75 (, the GNA) 190.79 554 P
1.75 (T Ada compiler notes, and the AdaIC bulletin board. It) 242.61 554 P
2.87 (resides in the \322Home of the Brave Ada Programmers\323) 144 536 P
1 9.6 Q
2.3 (3) 426.26 540.8 P
1 12 Q
2.87 ( and \322Public Ada) 431.06 536 P
1.12 (Library\323. It was announced in the newsgroups comp.lang.ada and comp.edu,) 144 518 P
-0.72 (NCSA) 144 500 P
-0.72 (\325) 174.67 500 P
-0.72 (s \322What\325) 178.01 500 P
-0.72 (s New\323, and the Ada Newsbites \050put together by the AdaIC\051, but) 219.62 500 P
0.5 (these announcements are missed by many) 144 482 P
0.5 (. Lovelace is referenced or has been) 346.71 482 P
(announced in many other places as well.) 144 464 T
(c.) 126 440 T
0.03 (Use programs to detect errors. The Ada language philosophy is to use comput-) 144 440 P
-0.28 (ers to catch errors, and that philosophy should also be used to develop tutorials.) 144 422 P
1.78 (I originally did not use many programs to catch errors and many problems) 144 404 P
0.31 (slipped through. Now) 144 386 P
0.31 (, before distribution, Lovelace goes through checking by) 248.18 386 P
1.82 (weblint \050to detect HTML formatting problems\051, hspell \050a spelling checker\051,) 144 368 P
0.66 (GNA) 144 350 P
0.66 (T \050an Ada compiler) 168.66 350 P
0.66 (, to detect Ada syntax errors\051, and the mklesson pro-) 264.46 350 P
(gram itself checks for some errors.) 144 332 T
(d.) 126 308 T
0.89 (Programmed instruction works well. Many users appreciated the questions at) 144 308 P
0.18 (the end of each section, and believed \050as I did\051 that the quizzes helped them to) 144 290 P
(understand the material.) 144 272 T
(e.) 126 248 T
-0.38 (Few volunteers will actually produce a product. A number of people, with good) 144 248 P
0.07 (intentions, volunteered to write a lesson or translate Lovelace into another lan-) 144 230 P
-0.64 (guage. Few) 144 212 P
-0.64 (, if any) 197.9 212 P
-0.64 (, actually produced anything. It was important to set deadlines) 229.49 212 P
(on volunteers, and move on if they did not produce anything.) 144 194 T
(f.) 126 170 T
0.42 (W) 144 170 P
0.42 (eb browsers have portability problems. W) 154.37 170 P
0.42 (eb browsers vary in how they dis-) 356.82 170 P
(play information, so test documents using many dif) 144 152 T
(ferent web browsers.) 390.44 152 T
90 118 522 132.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 118 522 132.98 R
7 X
0 0 0 1 0 0 0 K
V
90 130.96 243 130.96 2 L
V
0.5 H
2 Z
0 X
N
0 0 612 792 C
1 8 Q
0 X
0 0 0 1 0 0 0 K
(2) 90 115.33 T
1 10 Q
(Y) 100.8 111.33 T
(AHOO is at URL \322http://www) 106.91 111.33 T
(.yahoo.com\323.) 229.03 111.33 T
1 8 Q
(3) 90 101.33 T
1 10 Q
(The Home of the Brave Ada Programmers is at URL \322http://lglwww) 100.8 97.33 T
(.ep\337.ch/Ada/\323.) 374.56 97.33 T
FMENDPAGE
%%EndPage: "9" 9
%%Page: "10" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 745.99 522 756 R
7 X
0 0 0 1 0 0 0 K
V
90 62.64 522 71.64 R
V
90 36 522 45 R
V
90 90 522 721.01 R
V
0 14 Q
0 X
(7.  Conclusions) 90 711.67 T
1 12 Q
0.13 (Lovelace appears to be a success; users are using it and they say that it helps them) 126 693.01 P
-0.19 (understand the subject matter \050the Ada 95 programming language\051. Many users have com-) 90 675.01 P
-0.48 (mented that the interactive format \050presenting a short amount of material and then reinforc-) 90 657.01 P
-0.44 (ing this with a quiz\051 was particularly helpful, and it is hoped that other WWW tutorials will) 90 639.01 P
(emulate this approach.) 90 621.01 T
0 14 Q
(8.  Refer) 90 595.67 T
(ences) 140.67 595.67 T
1 12 Q
0.06 ([Crawford 95] Crawford, Bard S. \322Proposed Icons for Ada 95\323.) 126 577.01 P
2 F
0.06 (ACM Ada Letters) 434.88 577.01 P
1 F
0.06 (.) 519 577.01 P
(Jul/Aug 1995. V) 90 559.01 T
(olume XV) 168.12 559.01 T
(, Number 4. pp 36-45.) 216.9 559.01 T
0.28 ([RM 95] Ada 95 Reference Manual \050RM\051. V) 126 535.01 P
0.28 (ersion 6.0, Intermetrics, Inc., January) 341.92 535.01 P
-0.41 (1995. Revised international standard ISO/IEC 8652:1995. For an electronic copy) 90 517.01 P
-0.41 (, see URL) 474.49 517.01 P
(\322http://lglwww) 90 499.01 T
(.ep\337.ch/Ada/LRM/9X/rm9x/rm9x-toc.html\323.) 161.89 499.01 T
2.4 ([W) 126 475.01 P
2.4 (alnut 95] W) 140.36 475.01 P
2.4 (alnut Creek CD-ROM. \322W) 201.52 475.01 P
2.4 (alnut Creek Ada CD-ROM\323. W) 337.07 475.01 P
2.4 (alnut) 498 475.01 P
(Creek, CA. Contact \050800\051 786-9907, \050510\051 674-0783, or \322info@cdrom.com\323.) 90 457.01 T
FMENDPAGE
%%EndPage: "10" 10
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 10
%%DocumentFonts: Times-Bold
%%+ Times-Roman
%%+ Times-Italic
%%EOF
