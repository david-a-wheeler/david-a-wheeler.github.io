<HTML><HEAD>
<TITLE>Ada95 Lovelace Tutorial Section 15.1 - Ada Program Structure</TITLE>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<LINK REV="made" HREF="mailto:dwheeler&#64;dwheeler.com">
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<H1><FONT COLOR="#996600">Section 15.1 - Ada Program Structure</FONT></H1>
Because this is a tutorial I've used very short programs and program
fragments to demonstrate specific points.
Real Ada programs are developed instead as a set of (many) Ada packages.
Each package has a declaration that publicly declares the facilities
it makes available, and each package has a body to implement that public
declaration.
<P>
Packages are the principle structuring facility in Ada.
Packages are intended to be used to directly support abstraction,
information hiding, and modularization.
For example, packages are useful for encapsulating machine dependencies.
<P>
It isn't easy to describe program structuring issues, because that's
really a program design question, not just a language question.
Some recommendations are given in
<EM>Ada Quality and Style: Guidelines for Professional Programmers</EM>,
particularly in
<A HREF="http://sw-eng.falls-church.va.us/AdaIC/docs/style-guide/95style/html/sec_4.html">Chapter 4 ("Program Structure")</A>.
Here are some of those guidelines:
<P>
<UL>
<LI>
Packages should serve a single purpose.
You should avoid creating packages that are
simply collections of unrelated objects and subprograms.
<LI>
You should use a package to group together closely related types.
For example, you might have a
"vector" type (a one-dimensional list of numbers)
and "matrix" type (a two-dimensional list of numbers).
In this case, you could have a single package
called <EM>Matrix_Manipulation</EM> with both types defined in it.
<LI>
Put only what is needed for the use of a package into its
specification; hide the implementation details from the users.
<LI>
In general,
avoid defining a variable in a package specification, since that
creates a global variable visible to anyone who <EM>with</EM>s the package.
<LI>
Minimize the number of declarations in a package specification.
<LI>
Only use <EM>with</EM> clauses where they are needed.
In particular, if you can move a <EM>with</EM> clause so that it's used by
the package body instead of the package specification,
you should do so.
<LI>
Don't use "use" clauses too liberally.
</UL>
<P>

Note that Ada is different from some other languages.
Ada separates the concept of <EM>type</EM> from
the concept of <EM>module</EM> (package); some other languages
merge the two concepts (particularly Eiffel, and to a lessor degree C++).
Each approach has its advantages and disadvantages, which we
won't delve into here.
<P>

<HR><P>
<IMG SRC="q.gif" ALT="" HEIGHT="34" WIDTH="23">
<A NAME="quiz"><FONT SIZE="+3" COLOR="#339900">Quiz:</FONT></A>
<P>
Which of the following statements is <EM>false</EM>?
<OL>
<LI>Hide the implementation details from the users -
Put only what is needed for the use of a package into its specification.
<LI> You should avoid creating packages that are
simply collections of unrelated objects and subprograms.
<LI>Packages are rarely used in real Ada programs.
</OL>
<OL>
<LI><A HREF="s15s1r1.htm">Statement 1.</A>
<LI><A HREF="s15s1r2.htm">Statement 2.</A>
<LI><A HREF="s15s1r3.htm">Statement 3.</A>
</OL>
<HR>
You may also:
<P>
<TABLE BORDER="0"><TR>
<TH><A HREF="s14sf.htm">
<IMG SRC="barrowl.gif" ALT="PREVIOUS " HEIGHT="31" WIDTH="31">
Go back to the previous section</A>
<P></TH>

<TH><A HREF="s15sf.htm">
<IMG SRC="barrowr.gif" ALT="NEXT     " HEIGHT="31" WIDTH="31">
Skip to the next section</A>
<P></TH>

<TH><A HREF="lesson15.htm">
<IMG SRC="barrowu.gif" ALT="OUTLINE  " HEIGHT="31" WIDTH="31">
Go up to lesson 15 outline</A>
<P></TH>
</TR></TABLE>
<P>


<P>
<FONT SIZE="2">
<ADDRESS><A HREF="dwheeler.htm">David A. Wheeler (dwheeler&#64;dwheeler.com)</A></ADDRESS>
<P>
The master copy of this file is at
"<A HREF="http://www.adahome.com/Tutorials/Lovelace/s15s1.htm">http://www.adahome.com/Tutorials/Lovelace/s15s1.htm</A>".
</FONT>
<!-- This text is part of the Ada95 Lovelace tutorial program. -->
<!-- For the contents of lesson 18, the following applies: -->
<!--  Copyright (C) 1996 Ada Resource Association -->
<!--  Copyright granted to the ARA under the condition that this text -->
<!--  will be redistributed to the public domain, without restriction; -->
<!--  you may use this information in any way you with, commercially or not, -->
<!--  without restriction. -->
<!-- = -->
<!-- For all other files in Ada95 Lovelace tutorial, the following applies: -->
<!--  Copyright (C) 2002 David A. Wheeler -->
<!--  This program is free software; you can redistribute it and/or modify -->
<!--  it under the terms of the GNU General Public License as published by -->
<!--  the Free Software Foundation; either version 2 of the License, or -->
<!--  (at your option) any later version. -->
<!--  This freedom only applies to the electronic version; the author -->
<!--  and/or publisher retain all rights to non-electronic versions. -->
<!-- = -->
<!-- This program is distributed in the hope that it will be useful, -->
<!-- but WITHOUT ANY WARRANTY; without even the implied warranty of -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the -->
<!-- GNU General Public License for more details. -->
<!-- = -->
<!-- You should have received a copy of the GNU General Public License -->
<!-- along with this program; if not, write to the Free Software -->
<!-- Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA. -->
</BODY>
</HTML>
