<HTML><HEAD>
<TITLE>Ada95 Lovelace Tutorial Section 16.8 - Ada language vs. Java language</TITLE>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<LINK REV="made" HREF="mailto:dwheeler&#64;dwheeler.com">
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<H1><FONT COLOR="#996600">Section 16.8 - Ada language vs. Java language</FONT></H1>
<P>It makes sense to close a discussion of Ada and Java by comparing the two
languages.</P>
<P>Ada and Java have more similarities than differences. Both the Ada language
and the Java language were designed with safety in mind
(both support strong typing, omit pointers, and perform many compile-time
and run-time checks).
Both support an object-oriented approach based on a single
inheritance hierarchy.
When generating class files,
both Ada and Java support garbage collection, multitasking,
and platform-independent
graphical user interfaces (GUIs).
<P>There are differences, of course. Here are some technical advantages of
the Ada language over the Java language
(<A HREF="http://www.acm.org/sigada/wg/web_ada/rewebada.html">SigAda
has a similar list</A>):</P>
<OL>
<LI>Ada supports enumerated types. 
<LI>Ada supports operator overloading for infix operators (for example,
you can define an infix + operation for complex numbers).
<LI>Ada supports generics. There is no Java equivalent, though
Java's "Interface" and its root Object class can
sometimes be used to do similar things.
<LI>Ada supports "in", "out", and "in out" to document the use of parameters,
and these modifiers work on both tagged types and scalars. 
<LI>Ada is easier to read in some cases (compare "and" with "&amp;&amp;";
compare "for I in 1..10" with "for (i=1; i &lt;= 10; i++)";
compare "a=b" with "a==b").
<LI>Ada permits array boundaries to start with any scalar. The Java language
requires array boundaries to start at 0, a common source of "one-off" errors. 
<LI>Ada supports numeric range checks more specific than the built-in types.
This can be used to detect errors that Java doesn't.
<LI>Ada supports method calls using named and unordered parameters,
and supports default parameter values. 
<LI>Ada supports subprogram access types and nested subprograms. 
</OL>
<P>Java has some technical advantages over Ada, too:</P>
<OL>
<LI>Java supports "interface" types.
There is no standard Ada equivalent, though
Ada generics and the nesting of objects
can sometimes be used to do similar things.
Ada programs that generate Java code can use and define Java interfaces,
using a special pragma to do so.
<LI>Java permits specifications to be circular (A depends on B which depends
on A), while Ada does not. There is some argument that this is a disadvantage,
since circular references can indicate poorly structured systems, but in
terms of ease-of-use this is an advantage.
<LI>Java class definitions tend to be shorter than Ada.
Here are some of the reasons for this:
<OL>
<LI>
Ada enforces a distinction between objects and access values
to objects.
This causes definitions to be longer (for example, in Ada you have to define
X_Obj and X_Ptr types everywhere, while all of that is not used
in the Java language).
<LI>
Ada requires an explicit list of all classes used ("with" statements) in a
class being defined.
Java does not require a list of classes used; the closest Java has is
its "import" statement, which is like the "use" clause in Ada.
<LI>
Java has an implicit "this" parameter for non-static methods; Ada requires
all parameters to be explicitly listed.
<LI>
Java interfaces have to be handled using a somewhat clumsy Ada syntax.
</OL>
<LI>Java supports hierarchies of exception definitions. Java also includes
definitions
of exceptions that might be thrown (raised) by each method as part of the
method definition.
</OL>
<P>Naturally, more than technical issues make a decision. Here are some other
issues regarding the use of the Java language and Ada language for creating
Java applets and applications:
<OL>
<LI>There are a number of tooling issues.
At the time of this writing
there are more Ada compilers than Java compilers, but by the time you read
this there should be many compilers for both languages.
Most Ada compilers
generate native (high-speed) code that can take advantage of the underlying
hardware, while Java compilers are just beginning to appear.
However, currently
only one Ada compiler can generate class files and applets, so the quantity
of compilers tilts towards Java
if you're solely interested in generating applets and/or class files.
You'll also need to compare the tool capabilities themselves: which have
better interactive development environments (IDEs)?
Which have additional functionality (like user interface generators) that
you'd like?
Since just-in-time Java compilers that take class files can compile both Java
and Ada class files, the choice of language is irrelevant
for just-in-time compilers.
<LI>There are large reusable component libraries for both languages, each with
different focuses.
Compare the relevant reusable components
in the different languages for your application.
<LI>There is an ISO (international) standard for Ada, while a standard for Java
is probably many years away (at the time of this writing).
<LI>There is a large standard test suite for Ada compilers; none yet exists
for Java.
<LI>There are sometimes vendor restrictions prohibiting use of the
Java language
for safety-critical systems; Ada is commonly used in such areas, and compilers
can be bought without such prohibitions.
<LI>The use of
<A HREF="ftp://ftp.cs.iastate.edu/pub/kelvin/rtjava.ps">Java
in real-time applications</A> is somewhat currently a research area,
while Ada is already used in such areas and has been for many years.
<LI>Most Java materials and tools assume that users are using
the Java language.
Thus, if you're developing a Java application in Ada you'll need to
learn the translation conventions (as discussed in previous sections) and
be able to make such translations mentally.
No such translations are needed if you're using the Java language.
</OL>

<HR><P>
<IMG SRC="q.gif" ALT="" HEIGHT="34" WIDTH="23">
<A NAME="quiz"><FONT SIZE="+3" COLOR="#339900">Quiz:</FONT></A>
<P>
Which of the following statements is true?
<OL>
<LI>The Java language lets you write your own infix operators, while
the Ada standard supports interface types and hierarchical exceptions.
<LI>A web browser that includes a just-in-time compiler for class files
can't compile programs written in Ada.
<LI>When generating Java class files, both Ada and Java support
garbage collection and a standard graphical user interface.
</OL>
<OL>
<LI><A HREF="s16sfr1.htm">Statement 1.</A>
<LI><A HREF="s16sfr2.htm">Statement 2.</A>
<LI><A HREF="s16sfr3.htm">Statement 3.</A>
</OL>
<HR>
You may also:
<P>
<TABLE BORDER="0"><TR>
<TH><A HREF="s16s7.htm">
<IMG SRC="barrowl.gif" ALT="PREVIOUS " HEIGHT="31" WIDTH="31">
Go back to the previous section</A>
<P></TH>

<TH><A HREF="s17s1.htm">
<IMG SRC="barrowr.gif" ALT="NEXT     " HEIGHT="31" WIDTH="31">
Skip to the next section</A>
<P></TH>

<TH><A HREF="lesson16.htm">
<IMG SRC="barrowu.gif" ALT="OUTLINE  " HEIGHT="31" WIDTH="31">
Go up to lesson 16 outline</A>
<P></TH>
</TR></TABLE>
<P>

<P>
<FONT SIZE="2">
<ADDRESS><A HREF="dwheeler.htm">David A. Wheeler (dwheeler&#64;dwheeler.com)</A></ADDRESS>
<P>
The master copy of this file is at
"<A HREF="http://www.adahome.com/Tutorials/Lovelace/s16sf.htm">http://www.adahome.com/Tutorials/Lovelace/s16sf.htm</A>".
</FONT>
<!-- This text is part of the Ada95 Lovelace tutorial program. -->
<!-- For the contents of lesson 18, the following applies: -->
<!--  Copyright (C) 1996 Ada Resource Association -->
<!--  Copyright granted to the ARA under the condition that this text -->
<!--  will be redistributed to the public domain, without restriction; -->
<!--  you may use this information in any way you with, commercially or not, -->
<!--  without restriction. -->
<!-- = -->
<!-- For all other files in Ada95 Lovelace tutorial, the following applies: -->
<!--  Copyright (C) 2002 David A. Wheeler -->
<!--  This program is free software; you can redistribute it and/or modify -->
<!--  it under the terms of the GNU General Public License as published by -->
<!--  the Free Software Foundation; either version 2 of the License, or -->
<!--  (at your option) any later version. -->
<!--  This freedom only applies to the electronic version; the author -->
<!--  and/or publisher retain all rights to non-electronic versions. -->
<!-- = -->
<!-- This program is distributed in the hope that it will be useful, -->
<!-- but WITHOUT ANY WARRANTY; without even the implied warranty of -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the -->
<!-- GNU General Public License for more details. -->
<!-- = -->
<!-- You should have received a copy of the GNU General Public License -->
<!-- along with this program; if not, write to the Free Software -->
<!-- Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA. -->
</BODY>
</HTML>
