<HTML><HEAD>
<TITLE>Ada95 Lovelace Tutorial Section 4.1 - Type Integer</TITLE>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<LINK REV="made" HREF="mailto:dwheeler&#64;dwheeler.com">
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<H1><FONT COLOR="#996600">Section 4.1 - Type Integer</FONT></H1>
The next few sections will describe how to create subprograms, but we really
can't talk about creating subprograms until we know a little about
the Ada type <EM>Integer</EM>.
<P>
The Ada type Integer is used to store integer values if you don't care
what its minimum and maximum range is -- Ada will then select whatever range is
``most natural'' for your machine.
Ada guarantees that an Integer can store numbers between
-32767 and 32767 (inclusive); an Integer is likely to have a wider range.
In other words, an Integer type must use at least 16 bits, but the actual
number of bits used will depend on the compiler and machine.
<P>
If you <EM>do</EM> care what the range of a value is, Integer isn't the
right type to use.
In fact, as we'll discover later, Ada has a rich collection of types and typing
mechanisms to specify what you <EM>do</EM> want.
Many real Ada programs don't use Integer very much - but what they
<EM>do</EM> use will have to wait for a later lesson.
<P>
Normal Integer operations are available: + means add, - means subtract,
* means multiply, / means (integer) division, and ** means exponentiate.
The normal mathematical rules of evaluation are used, so exponentiation is
done first, then multiplications and division, then addition and subtraction.
Parentheses can be used to change the order or to make it clearer.
Thus ``2+3*5'' is 17, and ``(2+3)*5'' is 25.
<P>
A <EM>key</EM> difference between Ada and some other languages (such as
C and C++) is what happens when an evaluation cannot be completed.
If a division by zero is attempted, or an expression result is too large,
Ada will normally <EM>raise</EM> an <EM>exception</EM>.
Exceptions can be handled, but if they aren't, the
program will halt (with some debugging output
to help identify the kind and location of the problem).
This means that instead of silently giving wrong answers, Ada programs
normally will halt when a computation cannot be completed.
This simplifies debugging.
<P>
Normal Integer comparisons (which return true or false) are also available:
= means ``is equal to'', &gt; means ``greater than'',
&gt;= means ``greater than or equal to'', and so on.
The ``not equal to'' operation is written as ``/='' (which looks
like the mathematical symbol for `not equal').
Comparisons are considered after arithmetic operations,
so ``3 + 4 &gt; 6'' is evaluated as ``7 &gt; 6'' (which is True).
<P>
Unlike C or C++, but like Pascal and many other languages, Integers are
<EM>not</EM> considered the same as True or False.
A zero and False aren't the same thing (in Ada terms they are different types).
If you want to determine if a number is zero, compare it (using =) to zero.
This helps to catch errors early.

<HR><P>
<IMG SRC="q.gif" ALT="" HEIGHT="34" WIDTH="23">
<A NAME="quiz"><FONT SIZE="+3" COLOR="#339900">Quiz:</FONT></A>
<P>
Which of the following expressions is true?
<OL>
<LI><A HREF="s4s1r1.htm">(2+3)*4 = 2+(3*4)</A>
<LI><A HREF="s4s1r2.htm">6/3 &gt; 12-2</A>
<LI><A HREF="s4s1r3.htm">2+8 /= 28</A>
</OL>
<HR>
You may also:
<P>
<TABLE BORDER="0"><TR>
<TH><A HREF="s3sf.htm">
<IMG SRC="barrowl.gif" ALT="PREVIOUS " HEIGHT="31" WIDTH="31">
Go back to the previous section</A>
<P></TH>

<TH><A HREF="s4s2.htm">
<IMG SRC="barrowr.gif" ALT="NEXT     " HEIGHT="31" WIDTH="31">
Skip to the next section</A>
<P></TH>

<TH><A HREF="lesson4.htm">
<IMG SRC="barrowu.gif" ALT="OUTLINE  " HEIGHT="31" WIDTH="31">
Go up to lesson 4 outline</A>
<P></TH>
</TR></TABLE>
<P>


<P>
<FONT SIZE="2">
<ADDRESS><A HREF="dwheeler.htm">David A. Wheeler (dwheeler&#64;dwheeler.com)</A></ADDRESS>
<P>
The master copy of this file is at
"<A HREF="http://www.adahome.com/Tutorials/Lovelace/s4s1.htm">http://www.adahome.com/Tutorials/Lovelace/s4s1.htm</A>".
</FONT>
<!-- This text is part of the Ada95 Lovelace tutorial program. -->
<!-- For the contents of lesson 18, the following applies: -->
<!--  Copyright (C) 1996 Ada Resource Association -->
<!--  Copyright granted to the ARA under the condition that this text -->
<!--  will be redistributed to the public domain, without restriction; -->
<!--  you may use this information in any way you with, commercially or not, -->
<!--  without restriction. -->
<!-- = -->
<!-- For all other files in Ada95 Lovelace tutorial, the following applies: -->
<!--  Copyright (C) 2002 David A. Wheeler -->
<!--  This program is free software; you can redistribute it and/or modify -->
<!--  it under the terms of the GNU General Public License as published by -->
<!--  the Free Software Foundation; either version 2 of the License, or -->
<!--  (at your option) any later version. -->
<!--  This freedom only applies to the electronic version; the author -->
<!--  and/or publisher retain all rights to non-electronic versions. -->
<!-- = -->
<!-- This program is distributed in the hope that it will be useful, -->
<!-- but WITHOUT ANY WARRANTY; without even the implied warranty of -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the -->
<!-- GNU General Public License for more details. -->
<!-- = -->
<!-- You should have received a copy of the GNU General Public License -->
<!-- along with this program; if not, write to the Free Software -->
<!-- Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA. -->
</BODY>
</HTML>
