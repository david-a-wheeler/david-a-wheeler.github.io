<HTML><HEAD>
<TITLE>Ada95 Lovelace Tutorial Section 7.6 - Abstract Types and Subprograms</TITLE>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<LINK REV="made" HREF="mailto:dwheeler&#64;dwheeler.com">
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<H1><FONT COLOR="#996600">Section 7.6 - Abstract Types and Subprograms</FONT></H1>
It's often useful to declare a tagged type that won't be used directly
to create objects,
but instead will be extended by different types in different ways.
Such types are called ``abstract'' types.
<P>
Abstract types <EM>must</EM> be tagged types, since only tagged types
can be extended.
To define an abstract type, simply put the keyword <EM>abstract</EM>
in front of the keyword <EM>tagged</EM> in its definition.
<P>
Subprograms can also be declared as <EM>abstract</EM>;
a call to such subprograms would have to dispatch to an overridden
version of the subprogram.
To declare a subprogram as <EM>abstract</EM>,
place the phrase "is abstract" before the last semicolon in its definition.
If you have an abstract subprogram for a given type, the type must also
be abstract.
<P>
When you later create another type that descends from an abstract type,
you <EM>must</EM> define all of its abstract subprograms.
<P>
Here's an example of an abstract type representing a set of natural numbers,
taken directly from the
<A HREF="http://www.adahome.com/rm95/rm9x-03-09-03.html">Ada
RM section 3.9.3</A>:
<P>
<!-- Form to permit compilation using WebAda removed. -->
<P>
<PRE>
  package Sets is
    subtype Element_Type is Natural;
    type Set is abstract tagged null record;
    function Empty return Set is abstract;
    function Union(Left, Right : Set) return Set is abstract;
    function Intersection(Left, Right : Set) return Set is abstract;
    function Unit_Set(Element : Element_Type) return Set is abstract;
    procedure Take(Element : out Element_Type; From : in out Set) is abstract;
  end Sets;
</PRE>
<P>
<P>
Given the above abstract type, you could then derive various
(nonabstract) extensions of the type, representing alternative
implementations of a set. You might use a bit vector,
but impose an upper bound on the largest element representable,
while another might use a hash table, trading off space for flexibility. 
<P>
Abstract subprograms are equivalent to
ending a C++ function declaration with ``= 0''.

<!-- No quiz question -->
<P>
<HR>
<P>
There is no quiz question for this section.
<P>
<IMG SRC="pright.gif" ALT="" HEIGHT="14" WIDTH="33">
<A HREF="s7sf.htm">
<FONT SIZE="+1"><STRONG>You may go to the next section.</STRONG></FONT></A>
<P>
<HR>
You may also:
<P>

<TABLE BORDER="0"><TR>
<TH><A HREF="s7s5.htm">
<IMG SRC="barrowl.gif" ALT="PREVIOUS " HEIGHT="31" WIDTH="31">
Go back to the previous section</A>
<P></TH>

<TH><A HREF="lesson7.htm">
<IMG SRC="barrowr.gif" ALT="OUTLINE  " HEIGHT="31" WIDTH="31">
Go up to the outline of lesson 7</A>
<P></TH>
</TR></TABLE>
<P>

<P>
<FONT SIZE="2">
<ADDRESS><A HREF="dwheeler.htm">David A. Wheeler (dwheeler&#64;dwheeler.com)</A></ADDRESS>
<P>
The master copy of this file is at
"<A HREF="http://www.adahome.com/Tutorials/Lovelace/s7s6.htm">http://www.adahome.com/Tutorials/Lovelace/s7s6.htm</A>".
</FONT>
<!-- This text is part of the Ada95 Lovelace tutorial program. -->
<!-- For the contents of lesson 18, the following applies: -->
<!--  Copyright (C) 1996 Ada Resource Association -->
<!--  Copyright granted to the ARA under the condition that this text -->
<!--  will be redistributed to the public domain, without restriction; -->
<!--  you may use this information in any way you with, commercially or not, -->
<!--  without restriction. -->
<!-- = -->
<!-- For all other files in Ada95 Lovelace tutorial, the following applies: -->
<!--  Copyright (C) 2002 David A. Wheeler -->
<!--  This program is free software; you can redistribute it and/or modify -->
<!--  it under the terms of the GNU General Public License as published by -->
<!--  the Free Software Foundation; either version 2 of the License, or -->
<!--  (at your option) any later version. -->
<!--  This freedom only applies to the electronic version; the author -->
<!--  and/or publisher retain all rights to non-electronic versions. -->
<!-- = -->
<!-- This program is distributed in the hope that it will be useful, -->
<!-- but WITHOUT ANY WARRANTY; without even the implied warranty of -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the -->
<!-- GNU General Public License for more details. -->
<!-- = -->
<!-- You should have received a copy of the GNU General Public License -->
<!-- along with this program; if not, write to the Free Software -->
<!-- Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA. -->
</BODY>
</HTML>
