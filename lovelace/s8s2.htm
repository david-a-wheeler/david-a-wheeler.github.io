<HTML><HEAD>
<TITLE>Ada95 Lovelace Tutorial Section 8.2 - Types of Strings</TITLE>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<LINK REV="made" HREF="mailto:dwheeler&#64;dwheeler.com">
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<H1><FONT COLOR="#996600">Section 8.2 - Types of Strings</FONT></H1>
Actually, single characters aren't all that useful.
Characters are usually found in sequences, and these sequences
are called ``strings''.
<P>
Ada 83 provided a built-in type for strings, called String.
String is still a useful type, but many clamored for types which provided
string-like capability but had different trade-offs between ease-of-use
and performance for different tasks.
Thus, Ada 95 provides a number of different ``string'' types, each
best for a certain purpose.  All can be converted to and from the
original type String, so you can easily use the different ``string''
types together in a single program.
Here's the list of ``string'' types provided by Ada:
<P>
<DL>
<DT>String
<DD>
This is the basic Ada String type, and is also
called a ``fixed length string''.
This type (String) is simply an array of Characters.
A String value must be given its length when it's created
and its length will stay fixed.
This isn't as bad as it sounds, since there are simple techniques to
handle changing the length of values stored using Strings.
For example, you can use an approach similar to the C programming language -
use access values (pointers) to Strings, which would allow you to
"free" a String and then create a new String with a potentially different
length.
However, if you change a string's length often, other ``string'' types
(Bounded_String or Unbounded_String) are probably a better choice.
<DT>
Bounded_String
<DD>
Values of this type can vary in length up to a maximum length
(which you supply).
This is useful if you know at compile time what the maximum length
of a string will be.
<DT>
Unbounded_String
<DD>
Values of this type can vary in length up to the largest value of
type `Natural' (usually that's over 2 billion characters).
If you have string variables whose length you want to vary, this is
probably the best type to use.
<DT>
Other Language Strings: C.Strings.chars_ptr, COBOL.Alphanumeric,
and Fortran_Character.
<DD>
Ada 95 includes some types that represent strings from other languages,
namely C, COBOL, and Fortran.
If you're interfacing to components written in these other languages,
these types may be very useful to you.
</DL>
<P>
Whenever you enclose characters inside double quotes, "like this", you
are creating a constant of type String.
Remember that a constant of type Character is inside single quotes,
for example, 'L'.
There's a simple rule of thumb to help remember the difference between
constants of types Character and String:
if you want a constant for a single character, use single quotes.
The same symbols are used the same way in C and C++.

<HR><P>
<IMG SRC="q.gif" ALT="" HEIGHT="34" WIDTH="23">
<A NAME="quiz"><FONT SIZE="+3" COLOR="#339900">Quiz:</FONT></A>
<P>
Let's say you want to declare a ``string'' variable whose length will vary,
and you don't really know exactly what its maximum length will be.
What type would you probably use?
<OL>
<LI><A HREF="s8s2r1.htm">String</A>
<LI><A HREF="s8s2r2.htm">Bounded_String</A>
<LI><A HREF="s8s2r3.htm">Unbounded_String</A>
<LI><A HREF="s8s2r4.htm">C.Strings.chars_ptr</A>
</OL>
<HR>
You may also:
<P>
<TABLE BORDER="0"><TR>
<TH><A HREF="s8s1.htm">
<IMG SRC="barrowl.gif" ALT="PREVIOUS " HEIGHT="31" WIDTH="31">
Go back to the previous section</A>
<P></TH>

<TH><A HREF="s8s3.htm">
<IMG SRC="barrowr.gif" ALT="NEXT     " HEIGHT="31" WIDTH="31">
Skip to the next section</A>
<P></TH>

<TH><A HREF="lesson8.htm">
<IMG SRC="barrowu.gif" ALT="OUTLINE  " HEIGHT="31" WIDTH="31">
Go up to lesson 8 outline</A>
<P></TH>
</TR></TABLE>
<P>

<P>
<FONT SIZE="2">
<ADDRESS><A HREF="dwheeler.htm">David A. Wheeler (dwheeler&#64;dwheeler.com)</A></ADDRESS>
<P>
The master copy of this file is at
"<A HREF="http://www.adahome.com/Tutorials/Lovelace/s8s2.htm">http://www.adahome.com/Tutorials/Lovelace/s8s2.htm</A>".
</FONT>
<!-- This text is part of the Ada95 Lovelace tutorial program. -->
<!-- For the contents of lesson 18, the following applies: -->
<!--  Copyright (C) 1996 Ada Resource Association -->
<!--  Copyright granted to the ARA under the condition that this text -->
<!--  will be redistributed to the public domain, without restriction; -->
<!--  you may use this information in any way you with, commercially or not, -->
<!--  without restriction. -->
<!-- = -->
<!-- For all other files in Ada95 Lovelace tutorial, the following applies: -->
<!--  Copyright (C) 2002 David A. Wheeler -->
<!--  This program is free software; you can redistribute it and/or modify -->
<!--  it under the terms of the GNU General Public License as published by -->
<!--  the Free Software Foundation; either version 2 of the License, or -->
<!--  (at your option) any later version. -->
<!--  This freedom only applies to the electronic version; the author -->
<!--  and/or publisher retain all rights to non-electronic versions. -->
<!-- = -->
<!-- This program is distributed in the hope that it will be useful, -->
<!-- but WITHOUT ANY WARRANTY; without even the implied warranty of -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the -->
<!-- GNU General Public License for more details. -->
<!-- = -->
<!-- You should have received a copy of the GNU General Public License -->
<!-- along with this program; if not, write to the Free Software -->
<!-- Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA. -->
</BODY>
</HTML>
