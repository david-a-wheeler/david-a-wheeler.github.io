
http://www.opinionjournal.com/editorial/feature.html?id=95000750


Wall Street Journal's "Opinion Journal":
"Court Ruling Was No Victory For Microsoft: King Pyrrhus, meet Bill Gates."
BY ROBERT H. BORK AND KENNETH W. STARR 
Thursday, July 5, 2001 12:01 a.m. EDT 

The government won on the central issue in the case: Microsoft was held
to have monopolized the operating-system market in
violation of the Sherman Act.

...

Microsoft will continue to argue that any serious remedy
would damage innovation.
But Microsoft suppressed the innovation of Netscape, Sun and Intel.
In any case, Microsoft is hardly a leading innovator. It bought the technologies for its major products. Its genius has been in business and predation, not innovation.

 Messrs. Bork and Starr are former U.S. solicitors general and federal appeals court judges. They are counsel to ProComp, an industry association that
                           includes Microsoft competitors and supported the government case against Microsoft. 





 	Mon, 8 Oct 2012 13:01:17 -0700
 	Bruce Smith <oresmus@gmail.com> [Add to Address Book] 	  [Whitelist sender] [Block sender] [Block domain] 	 
  	To: 	dwheeler@dwheeler.com  	 
  	Subject: 	I think you forgot some ham in your list of software innovations   	 
  	Attachments: 	msg-30427-4.html (5k)
  	 
  	Format: 	Show HTML-version  	 
  	Hi,

I like your paper (and fyi, I agree with your conclusions):

http://www.dwheeler.com/innovation/innovation.html

But I think you forgot a few basic software innovations (some of these are
features of programming languages, as opposed to things programs can do or
ways to write them):

1. "pointer". That is, a pointer to a mutable data object as a primitive
data type, whose dereferenced form in source code (e.g. "*p" in C) is
semantically like a named variable.

Evidence it's nonobvious:

- no general form of pointer to data exists in Fortran, but it does exist
in C, and that's a huge difference. Apparently, most users of FORTRAN
weren't demanding this be added, since it was never added.

- early books on C spend a lot of time talking about different forms of
pointers, how to use them, what they're good for.

- I programmed for a few years in BASIC (as a kid) and never thought of
them. I learned about them from Knuth's books (and later from learning C).
By now I'm an expert programmer and know many languages, so not thinking of
them was not from stupidity.

I don't know which language introduced the "pointer". Of course it has a
lot of variants (pointer to array element, pointer to allocated memory,
pointer to field within a struct), and I would guess they were invented at
different times and were each a nonobvious innovation at the time, then
collected together in C (perhaps for the first time, but I don't know).
Based on how C was talked about, I also guess that at least some aspects of
its use of pointers were invented specifically as part of C.

Of course, you can use a pointer in assembly language or machine language.
It was just called an address or a computed address then. Maybe that's why
you left it out? (For that matter you can store an array index as a number
in FORTRAN.)

But what I'm talking about is a feature of a higher-level programming
language, not a programming technique, and as a language feature I'm
claiming it was a significant innovation.

2. "pointer to function": a different thing, and I think also a nonobvious
innovation (within high-level programming languages). Implicitly part of
LISP; whether that's it's first use, I don't know.

3. "array". It was present in FORTRAN so maybe you are lumping it in as
part of your entry on FORTRAN. That's reasonable (presuming it was
introduced first then -- I don't know). But it might benefit that entry to
list a few specific innovations that were part of FORTRAN, but important
enough that you would have listed them separately if they were not; e.g.
array, named variable.

4. "named variable". Same comment as (3).

5. "Array" as a data structure / programming technique -- certainly older
than FORTRAN, but it might be considered a separate innovation from
"machine language" anyway. It would have been an early use of a "computed
address" or an "index register", and it seems to me that those ideas were
talked about separately from more basic forms of machine-language
programming, as if they were newer and more exotic ideas, though that was
all invented before my time so I am not sure.

6. "data structure" as a general concept. Of course any program stored its
data somehow, but it seems to me that there was a big change between the
early implicit ad-hoc data structures of small machine-language programs
(where you might just have a paper list assigning addresses to specific
variables, whose names only existed on paper), though assembly language
(with named addresses), and up to the concept of some scheme for an
expandable set of data objects obeying some logical structure, and probably
containing pointers to one another as part of their structure.

(And I would guess that quite a few specific data structures were also
significant innovations, both before and after the general concept of "data
structure" had been talked about.)

(Listing "data structure" as a general concept is justified in the same way
that listing "design pattern" is.)

7. "finite state machine". (A main component of a Turing machine, though I
don't know whether it had been talked about separately before.)

The above are in the order I noticed their absence. Maybe there are more,
of a similar level of fundamentalness. They are almost all older and more
basic than what you do list, except for a few really basic things like
"software", so I'm guessing the main source of the difference in what we
notice or would list here is that the whole field was much younger when I
learned it.

