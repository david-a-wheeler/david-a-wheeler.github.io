
See this discussion from 2018:
https://news.ycombinator.com/item?id=18691399

This has a lot of events, some of which may apply:
http://quartsoft.com/blog/201410/iphone-technology-history-infographic
http://quartsoft.com/sites/default/files/iphone-tech-history-infographic.jpg

Time: 	Tue, 28 Jun 2011 18:17:30 +0200   	 
  	From: 	rp@win.tue.nl (Reinier Post) [Add to Address Book] 	  [Whitelist sender] [Block sender] [Block domain] 	 
  	To: 	"David A. Wheeler" <dwheeler@dwheeler.com>  	 
  	Subject: 	http://www.dwheeler.com/innovation/innovation.html   	 
  	Dear David,

Your RSS feed is in my list so your mentioning an update on your
Software Innovations list prompted me to have a closer look at it.
You're inviting comments, so here are some:

1) The start of the list is pretty arbitrary (which is of course
inevitable). To me, Boole's work is still logic, not computing.
If you include Boole and Babbage, Leibniz should be in there as well:

http://en.wikipedia.org/wiki/Gottfried_Leibniz#Symbolic_thought
http://en.wikipedia.org/wiki/Gottfried_Leibniz#Computation

2) "(...) Turing Machines. This mathematical construct showed the
strengths - and fundamental limitations - of computer software. For
example, it showed that there were some kinds of problems that could not
be solved (in polynomial time)."

Whoops. Remove the part between brackets.
These problems cannot be solved *at all*.
(No program exists to compute solutions to all problem instances).
You're mixing up complexity and computability.

3) I'm not sure hypertext can really be called an invention. It's a
very gradual development. American storytellers tend to overemphasize
the role in history of 'visionaries' (I really like how you mention
Linus Torvalds's reservations against this) and there is a canonical
hypertext storyline that keeps getting repeated everywhere, but I don't
think 'hypertext', if it's a well-defined term in the first place, can
be described to any one person. E.g. Vannevar Bush's work was heavily
influenced by library-related work such as Otlet's:

http://en.wikipedia.org/wiki/Paul_Otlet

4) Another thing I discovered recently is that the flowchart
is older than the computer. It was used for process improvement.

http://en.wikipedia.org/wiki/Flow_process_chart
http://en.wikipedia.org/wiki/Frank_Bunker_Gilbreth,_Sr.
http://en.wikipedia.org/wiki/Scientific_management

This whole approach to work, processes and systems is the
underlying foundation for automation, computers, and software.
So I believe it deserves mention somewhere.

5) If you mention 'the stack principle' (why not just 'the stack')
perhaps you should also mention Chomsky's context-free grammars
(not BNF, which is just a notation), the foundational framework for
Backus's work on the FORTRAN syntax and for much of the theory behind
compilers that was developed later. CFGs are how computer science
students are taught about the stack principle in syntax. BTW you link
is dead, but Google gives me

http://www-sst.informatik.tu-cottbus.de/~db/doc/People/Broy/Software-Pioneers/Bauer_new.pdf

I am not sure who influenced who here.

6) On the GUI: another candidate on your list:

http://en.wikipedia.org/wiki/Sketchpad

7) On the SGML entry: you're really describing GML, not SGML.
GML has very different syntax and I don't think it has grammars.

8) Is the Lamport clock really that important? It's new to me
and I'm a master in CS.

9) Is MVC really a consistent idea? I'm not sure what it means.
M and V are fairly clear, but C?

A) If you have USENET, you should certainly have the BBS

http://en.wikipedia.org/wiki/Bulletin_board_system

B) Isn't DNS too obvious to be listed here?

C) On CVS: perhaps you should mention that it is based on RCS.

D) About the WWW: there were similar projects, e.g. Andrew

http://en.wikipedia.org/wiki/Andrew_Project

The WWW's key design decision and success factor was
platform independence; I think the entry should mention that.
This was because of the project's origins in which participants
had a wide range of different computers and OSes.

E) Isn't refactoring too obvious an idea?

F) The same for MapReduce.

In other words, for many items on the list it's arguable
whether they count as inventions - and those are supposed to be
the biggest ideas and pieces of engineering in software.

Which only strengthens your rant against software patents
and Linus's remark about overemphasizing big ideas.

At the end of the article there's a <a href> not being closed.

Reinier Post
http://www.win.tue.nl/~rp/



>Time: 	Tue, 28 Jun 2011 18:17:30 +0200   	 
>  	From: 	rp@win.tue.nl (Reinier Post)
>  	To: 	"David A. Wheeler" <dwheeler@dwheeler.com>  	 
>  	Subject: 	http://www.dwheeler.com/innovation/innovation.html   	 
>  	Dear David,
>
>Your RSS feed is in my list so your mentioning an update on your
>Software Innovations list prompted me to have a closer look at it.
>You're inviting comments, so here are some:
>
>1) The start of the list is pretty arbitrary (which is of course
>inevitable). To me, Boole's work is still logic, not computing.
>If you include Boole and Babbage, Leibniz should be in there as well:
>
>http://en.wikipedia.org/wiki/Gottfried_Leibniz#Symbolic_thought
>http://en.wikipedia.org/wiki/Gottfried_Leibniz#Computation

Hm, I'll add that to the "maybe" list for now.
Leibniz is a towering figure in math, but as far as computing goes,
I think his work is more inspirational than technical.


>2) "(...) Turing Machines. This mathematical construct showed the
>strengths - and fundamental limitations - of computer software. For
>example, it showed that there were some kinds of problems that could not
>be solved (in polynomial time)."
>
>Whoops. Remove the part between brackets.
>These problems cannot be solved *at all*.
>(No program exists to compute solutions to all problem instances).
>You're mixing up complexity and computability.

Done, thanks.

>3) I'm not sure hypertext can really be called an invention. It's a
>very gradual development. American storytellers tend to overemphasize
>the role in history of 'visionaries' (I really like how you mention
>Linus Torvalds's reservations against this) and there is a canonical
>hypertext storyline that keeps getting repeated everywhere, but I don't
>think 'hypertext', if it's a well-defined term in the first place, can
>be described to any one person. E.g. Vannevar Bush's work was heavily
>influenced by library-related work such as Otlet's:
>
>http://en.wikipedia.org/wiki/Paul_Otlet

Well, a lot of people (including me) to perceive it as a new idea.
You're right that it's gradual. Indeed, that's a lot of the problem in
focusing on "innovations", as I note later.

I think I'll just note this heavy previous influence.

>4) Another thing I discovered recently is that the flowchart
>is older than the computer. It was used for process improvement.
>
>http://en.wikipedia.org/wiki/Flow_process_chart
>http://en.wikipedia.org/wiki/Frank_Bunker_Gilbreth,_Sr.
>http://en.wikipedia.org/wiki/Scientific_management
>
>This whole approach to work, processes and systems is the
>underlying foundation for automation, computers, and software.
>So I believe it deserves mention somewhere.

Flowcharts are essentially unused today, though, unless you count
XKCD cartoons.  I think the other material already cited is more
foundational.  Gilbreth is an interesting character,
I've read "Cheaper by the Dozen" (and its sequel).

>5) If you mention 'the stack principle' (why not just 'the stack')
>perhaps you should also mention Chomsky's context-free grammars
>(not BNF, which is just a notation), the foundational framework for
>Backus's work on the FORTRAN syntax and for much of the theory behind
>compilers that was developed later. CFGs are how computer science
>students are taught about the stack principle in syntax. BTW you link
>is dead, but Google gives me
>
>http://www-sst.informatik.tu-cottbus.de/~db/doc/People/Broy/Software-Pioneers/Bauer_new.pdf
>
>I am not sure who influenced who here.

I'll add Chomsky to the "maybe" list, and maybe really add him later.
Thanks for the fixed link.

>6) On the GUI: another candidate on your list:
>
>http://en.wikipedia.org/wiki/Sketchpad

Okay, I'll add it to the list of candidates.

>7) On the SGML entry: you're really describing GML, not SGML.
>GML has very different syntax and I don't think it has grammars.

True.  Okay, I've changed the entry.

>8) Is the Lamport clock really that important? It's new to me
>and I'm a master in CS.

Well, I think so :-).

>9) Is MVC really a consistent idea? I'm not sure what it means.
>M and V are fairly clear, but C?

It's a consistent idea; the real problem is that people often don't read the
original papers, but instead read a summary of a summary of a summary.

>A) If you have USENET, you should certainly have the BBS
>
>http://en.wikipedia.org/wiki/Bulletin_board_system

Hmm. I'll add that to the maybes.

>B) Isn't DNS too obvious to be listed here?

I don't think so.
DNS's ability to implement a large-scale
distributed database is the first of its kind.

>C) On CVS: perhaps you should mention that it is based on RCS.

That seems like an implementation detail.

>D) About the WWW: there were similar projects, e.g. Andrew
>
>http://en.wikipedia.org/wiki/Andrew_Project
>
>The WWW's key design decision and success factor was
>platform independence; I think the entry should mention that.
>This was because of the project's origins in which participants
>had a wide range of different computers and OSes.

Good point. Done.

>E) Isn't refactoring too obvious an idea?

Refactoring the *concept* is obvious, but they made a specific list and
turned it into a topic that could be studied.
I tried to say thar earlier, I'll rewrite that to hopefully make that
clearer.

>F) The same for MapReduce.

Yeah, that one is arguable.  I'll let it stand, but I'll discuss that
issue in the item.

>In other words, for many items on the list it's arguable
>whether they count as inventions - and those are supposed to be
>the biggest ideas and pieces of engineering in software.
>
>Which only strengthens your rant against software patents
>and Linus's remark about overemphasizing big ideas.

True.  I'll mention that in the rant :-).

>At the end of the article there's a <a href> not being closed.

Whups!  Thanks, I'll get the W3C validator to check it.

>Reinier Post
>http://www.win.tue.nl/~rp/
>



 	Wed, 11 May 2016 13:57:44 -0500  

  	From: 	"Peter Schaeffer" <peter_schaeffer@yahoo.com> [Add to Contacts] 	  [Whitelist sender] [Blacklist sender] [Blacklist domain] 	 
  	To:  	<dwheeler@dwheeler.com>  	 
  	Tags: 	
  	Attachments:  	msg-16737-491.html (8k)
  	 
	 
  	Format: 	Show HTML-version  	 
  	Mr. Wheeler,



I enjoyed you "The Most Important Software Innovations" web page. Lots of
good information. A few suggestions for "important innovations" which
hopefully will be (somewhat) new ideas for you.



1. Unicode / UTF-8 / UTF-16 - At this point UTF-8 is (arguably) the code
page of the world

2. Threads / Processes / Address Spaces - At this point all operating
systems implement these constructs (save for a few microcontroller systems).
They are amazingly common, pervasive, and widely used.

3. Lamdas / Closures - Both appear to be widely used (and relatively new)
constructs in software

4. MPOGs (Massively Parallel Online Games) - World of Warcraft is the
obvious case in point

5. Social Networking - No comments needed.

6. Virtual Storage - Clearly virtual storage requires a combination of
hardware and software. And has a large influence on subsequent software
design.

7. Web Browsers - You mention browsers in several places. In my opinion, the
emergence of the web browser as a universal client is significant.

8. 4 GLs - You mention 4 GLs. I rank them somewhat higher. In my opinion,
Python, Perl, Ruby, and PHP have had a huge impact. Add in JavaScript and
the impact is even larger.

9. Operating Systems - You mention operating systems in several places. In
my opinion, operating systems deserve an item of their own.

10. Red-Black Trees - Some sources suggest that red-black trees were the
first AVL trees.

11. Multiplan / Mathematica / R - These tools have had a large impact in
some fields

12. Graphic Cards - Of course, graphic cards are hardware. However, they are
used with very sophisticated graphics software making possible solutions
that were impossible in the past. These days, a $100 flight simulator is
(vastly) better than a multi-million dollar flight simulator from a few
decades ago.

13. Artificial Intelligence - Could AI warrant an entry of its own? AI means
many things. However, over a period of decades there has been some real
progress.

14. IDEs - No one outside of software development has ever even heard of
them. However, they have had a large impact on the field.



I won't attempt to comment on software patents in general, other than to
agree that many (most? all?) don't pass the "prior art" and "obviousness"
tests. However, I do have an opinion on patents in general. Several fields
simply would not exist (in their current form) without patents. The most
obvious is pharmaceuticals. The cost of developing a new drug is large
enough that without patents, drug development would not occur (in the
private sector).



This is not to say that patents are not abused in the pharmaceutical sector.
They are abused, badly abused in some cases. In my opinion, Nexium (but not
Prilosec) should never have been granted a patent.



Historically, patents have been (in my opinion) a significant spur to
innovation. Watt and Bolton pursued the steam engine because they believed
(rightfully) that they would enjoy patent protection. It is argued (and may
be true) that the Watt/Bolton patents impeded subsequent progress in steam
engines. However, the Watt engine was the product of patents and would not
have been created otherwise (in my opinion).



For a long and interesting discussion of patents and their role in both
promoting and constraining innovation, see "Sewing Machine Wars" in Google.
You will discover that Elias Howe may well have been a real model of Yankee
ingenuity. Isaac Singer was clearly a scoundrel.



Thank you



Peter Schaeffer

