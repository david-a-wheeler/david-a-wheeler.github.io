	.INCLUDE	"interp6502.s"
;    1: CONST FALSE     = 0
					; FALSE = 0
;    2: CONST TRUE      = NOT FALSE
					; TRUE = -1
;    3: CONST SHOWLORES = $C056
					; SHOWLORES = 49238
;    4: CONST KEYBOARD  = $C000
					; KEYBOARD = 49152
;    5: CONST KEYSTROBE = $C010
					; KEYSTROBE = 49168
;    6: CONST SPEAKER   = $C030
					; SPEAKER = 49200
;    7: BYTE  EXITMSG   = "PRESS ANY KEY TO EXIT."
D0000:					; EXITMSG
	DB	$16
	DB	$50,$52,$45,$53,$53,$20,$41,$4E
	DB	$59,$20,$4B,$45,$59,$20,$54,$4F
	DB	$20,$45,$58,$49,$54,$2E
;    8: BYTE  GOODBYE   = "THAT'S ALL FOLKS!"
D0023:					; GOODBYE
	DB	$11
	DB	$54,$48,$41,$54,$27,$53,$20,$41
	DB	$4C,$4C,$20,$46,$4F,$4C,$4B,$53
	DB	$21
;    9: BYTE  LEVEL     = "1=HARD 2=MED 3=EASY ?"
D0041:					; LEVEL
	DB	$15
	DB	$31,$3D,$48,$41,$52,$44,$20,$32
	DB	$3D,$4D,$45,$44,$20,$33,$3D,$45
	DB	$41,$53,$59,$20,$3F
;   10: BYTE  AUTO      = "AUTOPLAY (Y/N)?"
D0063:					; AUTO
	DB	$0F
	DB	$41,$55,$54,$4F,$50,$4C,$41,$59
	DB	$20,$28,$59,$2F,$4E,$29,$3F
;   11: BYTE  YOURSCORE = "YOUR SCORE WAS "
D0079:					; YOURSCORE
	DB	$0F
	DB	$59,$4F,$55,$52,$20,$53,$43,$4F
	DB	$52,$45,$20,$57,$41,$53,$20
;   12: BYTE  AUTOPLAY  = TRUE
D0095:					; AUTOPLAY
	DB	$FF
;   13: BYTE  PDLPOS, PDLSIZE, PDLMID, MISS
D0096:	DS	1			; PDLPOS
D0097:	DS	1			; PDLSIZE
D0098:	DS	1			; PDLMID
D0099:	DS	1			; MISS
;   14: BYTE  XSCRN, YSCRN
D0100:	DS	1			; XSCRN
D0101:	DS	1			; YSCRN
;   15: BYTE  SCORE[3]
D0102:	DS	3			; SCORE
;   16: WORD  XBALL, YBALL, XSPEED, YSPEED
D0105:	DS	2			; XBALL
D0107:	DS	2			; YBALL
D0109:	DS	2			; XSPEED
D0111:	DS	2			; YSPEED
;   17: FUNC  INCSCORE
;   18: 
;   19: DEF BEEP(TONE, DURATION)
C0009:					; BEEP()
					; TONE = 2
					; DURATION = 4
;   20:   BYTE I, J
					; I = 6
					; J = 7
;   21: 
;   22:   FOR J = DURATION DOWNTO 0
	JSR	INTERP
	DB	$58,$08,$02		; ENTER	8,2
	DB	$66,$04			; LLW	4
C0012:
	DB	$6C,$07			; DLB	7
	DB	$00			; ZERO
	DB	$38,<C0011,>C0011	; BRLT	C0011
	DB	$0E			; DECR
;   23:     FOR I = TONE DOWNTO 0
	DB	$66,$02			; LLW	2
C0014:
	DB	$6C,$06			; DLB	6
	DB	$00			; ZERO
	DB	$38,<C0013,>C0013	; BRLT	C0013
	DB	$0E			; DECR
;   24:     NEXT
	DB	$50,<C0014,>C0014	; JUMP	C0014
C0013:
	DB	$30			; DROP
;   25:     ^SPEAKER
	DB	$2C,$30,$C0		; CW	49200
	DB	$60			; LB
	DB	$30			; DROP
;   26:   NEXT
	DB	$50,<C0012,>C0012	; JUMP	C0012
C0011:
	DB	$30			; DROP
;   27: END
	DB	$00			; ZERO
	DB	$5A			; LEAVE
;   28: 
;   29: DEF KEYPRESSED
C0015:					; KEYPRESSED()
;   30:   RETURN ^KEYBOARD > 127
	JSR	INTERP
	DB	$2C,$00,$C0		; CW	49152
	DB	$60			; LB
	DB	$2A,$7F			; CB	127
	DB	$44			; ISGT
	DB	$5C			; RET
;   31: END
;   32: 
;   33: DEF GETKEY
C0017:					; GETKEY()
;   34:   BYTE KEY
					; KEY = 2
;   35: 
;   36:   REPEAT
	JSR	INTERP
	DB	$58,$03,$00		; ENTER	3,0
C0020:
;   37:     KEY = ^KEYBOARD
	DB	$2C,$00,$C0		; CW	49152
	DB	$60			; LB
	DB	$74,$02			; SLB	2
;   38:   UNTIL KEY > 127
	DB	$64,$02			; LLB	2
	DB	$2A,$7F			; CB	127
	DB	$44			; ISGT
	DB	$4C,<C0020,>C0020	; BRFLS	C0020
C0019:
;   39:   ^KEYSTROBE
	DB	$2C,$10,$C0		; CW	49168
	DB	$60			; LB
	DB	$30			; DROP
;   40:   RETURN KEY
	DB	$64,$02			; LLB	2
	DB	$5A			; LEAVE
;   41: END
;   42: 
;   43: DEF TEXTMODE
C0021:					; TEXTMODE()
;   44:   RETURN ROMCALL(0, 0, 0, 0, $FB39)
	JSR	INTERP
	DB	$00			; ZERO
	DB	$00			; ZERO
	DB	$00			; ZERO
	DB	$00			; ZERO
	DB	$2C,$39,$FB		; CW	64313
	DB	$54,<C0000,>C0000	; CALL	C0000
	DB	$5C			; RET
;   45: END
;   46: 
;   47: DEF HOME
C0023:					; HOME()
;   48:   RETURN ROMCALL(0, 0, 0, 0, $FC58)
	JSR	INTERP
	DB	$00			; ZERO
	DB	$00			; ZERO
	DB	$00			; ZERO
	DB	$00			; ZERO
	DB	$2C,$58,$FC		; CW	64600
	DB	$54,<C0000,>C0000	; CALL	C0000
	DB	$5C			; RET
;   49: END
;   50: 
;   51: DEF GOTOXY(X, Y)
C0025:					; GOTOXY()
					; X = 2
					; Y = 4
;   52:   ^($24) = X
	JSR	INTERP
	DB	$58,$06,$02		; ENTER	6,2
	DB	$2A,$24			; CB	36
	DB	$66,$02			; LLW	2
	DB	$70			; SB
;   53:   RETURN ROMCALL(Y, 0, 0, 0, $FB5B)
	DB	$66,$04			; LLW	4
	DB	$00			; ZERO
	DB	$00			; ZERO
	DB	$00			; ZERO
	DB	$2C,$5B,$FB		; CW	64347
	DB	$54,<C0000,>C0000	; CALL	C0000
	DB	$5A			; LEAVE
;   54: END
;   55: 
;   56: DEF PRSTRXY(X, Y, STRPTR)
C0027:					; PRSTRXY()
					; X = 2
					; Y = 4
					; STRPTR = 6
;   57:   GOTOXY(X, Y)
	JSR	INTERP
	DB	$58,$08,$03		; ENTER	8,3
	DB	$66,$02			; LLW	2
	DB	$66,$04			; LLW	4
	DB	$54,<C0025,>C0025	; CALL	C0025
	DB	$30			; DROP
;   58:   RETURN PRSTR(STRPTR)
	DB	$66,$06			; LLW	6
	DB	$54,<C0006,>C0006	; CALL	C0006
	DB	$5A			; LEAVE
;   59: END
;   60: 
;   61: DEF GRMODE
C0029:					; GRMODE()
;   62:   ROMCALL(0, 0, 0, 0, $FB40)
	JSR	INTERP
	DB	$00			; ZERO
	DB	$00			; ZERO
	DB	$00			; ZERO
	DB	$00			; ZERO
	DB	$2C,$40,$FB		; CW	64320
	DB	$54,<C0000,>C0000	; CALL	C0000
	DB	$30			; DROP
;   63:   RETURN ^SHOWLORES
	DB	$2C,$56,$C0		; CW	49238
	DB	$60			; LB
	DB	$5C			; RET
;   64: END
;   65: 
;   66: DEF COLOR(CLR)
C0031:					; COLOR()
					; CLR = 2
;   67:   RETURN ROMCALL(CLR, 0, 0, 0, $F864)
	JSR	INTERP
	DB	$58,$04,$01		; ENTER	4,1
	DB	$66,$02			; LLW	2
	DB	$00			; ZERO
	DB	$00			; ZERO
	DB	$00			; ZERO
	DB	$2C,$64,$F8		; CW	63588
	DB	$54,<C0000,>C0000	; CALL	C0000
	DB	$5A			; LEAVE
;   68: END
;   69: 
;   70: DEF PLOT(X, Y)
C0033:					; PLOT()
					; X = 2
					; Y = 4
;   71:   RETURN ROMCALL(Y, 0, X, 0, $F800)
	JSR	INTERP
	DB	$58,$06,$02		; ENTER	6,2
	DB	$66,$04			; LLW	4
	DB	$00			; ZERO
	DB	$66,$02			; LLW	2
	DB	$00			; ZERO
	DB	$2C,$00,$F8		; CW	63488
	DB	$54,<C0000,>C0000	; CALL	C0000
	DB	$5A			; LEAVE
;   72: END
;   73: 
;   74: DEF HLIN(LEFT, RIGHT, VERT)
C0035:					; HLIN()
					; LEFT = 2
					; RIGHT = 4
					; VERT = 6
;   75:   ^($2C) = RIGHT
	JSR	INTERP
	DB	$58,$08,$03		; ENTER	8,3
	DB	$2A,$2C			; CB	44
	DB	$66,$04			; LLW	4
	DB	$70			; SB
;   76:   RETURN ROMCALL(VERT, 0, LEFT, 0, $F819)
	DB	$66,$06			; LLW	6
	DB	$00			; ZERO
	DB	$66,$02			; LLW	2
	DB	$00			; ZERO
	DB	$2C,$19,$F8		; CW	63513
	DB	$54,<C0000,>C0000	; CALL	C0000
	DB	$5A			; LEAVE
;   77: END
;   78: 
;   79: DEF VLIN(TOP, BOTTOM, HORZ)
C0037:					; VLIN()
					; TOP = 2
					; BOTTOM = 4
					; HORZ = 6
;   80:   ^($2D) = BOTTOM
	JSR	INTERP
	DB	$58,$08,$03		; ENTER	8,3
	DB	$2A,$2D			; CB	45
	DB	$66,$04			; LLW	4
	DB	$70			; SB
;   81:   RETURN ROMCALL(TOP, 0, HORZ, 0, $F828)
	DB	$66,$02			; LLW	2
	DB	$00			; ZERO
	DB	$66,$06			; LLW	6
	DB	$00			; ZERO
	DB	$2C,$28,$F8		; CW	63528
	DB	$54,<C0000,>C0000	; CALL	C0000
	DB	$5A			; LEAVE
;   82: END
;   83: 
;   84: DEF PADDLE(NUM)
C0039:					; PADDLE()
					; NUM = 2
;   85:   RETURN ROMCALL(0, NUM, 0, 0, $FB1E).2
	JSR	INTERP
	DB	$58,$04,$01		; ENTER	4,1
	DB	$00			; ZERO
	DB	$66,$02			; LLW	2
	DB	$00			; ZERO
	DB	$00			; ZERO
	DB	$2C,$1E,$FB		; CW	64286
	DB	$54,<C0000,>C0000	; CALL	C0000
	DB	$2A,$02			; CB	2
	DB	$02			; ADD
	DB	$60			; LB
	DB	$5A			; LEAVE
;   86: END
;   87: 
;   88: DEF BUTTON(NUM)
C0041:					; BUTTON()
					; NUM = 2
;   89:   RETURN ^($C060 + NUM) > 127
	JSR	INTERP
	DB	$58,$04,$01		; ENTER	4,1
	DB	$2C,$60,$C0		; CW	49248
	DB	$66,$02			; LLW	2
	DB	$02			; ADD
	DB	$60			; LB
	DB	$2A,$7F			; CB	127
	DB	$44			; ISGT
	DB	$5A			; LEAVE
;   90: END
;   91: 
;   92: DEF UPDTPDL
C0043:					; UPDTPDL()
;   93:   IF AUTOPLAY
	JSR	INTERP
	DB	$68,<D0095,>D0095	; LAB	D0095
	DB	$4C,<C0045,>C0045	; BRFLS	C0045
;   94:     IF PDLPOS + PDLMID > XSCRN
	DB	$68,<D0096,>D0096	; LAB	D0096
	DB	$68,<D0098,>D0098	; LAB	D0098
	DB	$02			; ADD
	DB	$68,<D0100,>D0100	; LAB	D0100
	DB	$44			; ISGT
	DB	$4C,<C0047,>C0047	; BRFLS	C0047
;   95:       IF PDLPOS > 0
	DB	$68,<D0096,>D0096	; LAB	D0096
	DB	$00			; ZERO
	DB	$44			; ISGT
	DB	$4C,<C0049,>C0049	; BRFLS	C0049
;   96:         PDLPOS = PDLPOS - 1
	DB	$68,<D0096,>D0096	; LAB	D0096
	DB	$2A,$01			; CB	1
	DB	$04			; SUB
	DB	$78,<D0096,>D0096	; SAB	D0096
;   97:       FIN
C0049:
C0050:
;   98:     ELSIF PDLPOS + PDLMID + 1 < XSCRN
	DB	$50,<C0048,>C0048	; JUMP	C0048
C0047:
	DB	$68,<D0096,>D0096	; LAB	D0096
	DB	$68,<D0098,>D0098	; LAB	D0098
	DB	$02			; ADD
	DB	$2A,$01			; CB	1
	DB	$02			; ADD
	DB	$68,<D0100,>D0100	; LAB	D0100
	DB	$46			; ISLT
	DB	$4C,<C0051,>C0051	; BRFLS	C0051
;   99:       IF PDLPOS + PDLSIZE < 39
	DB	$68,<D0096,>D0096	; LAB	D0096
	DB	$68,<D0097,>D0097	; LAB	D0097
	DB	$02			; ADD
	DB	$2A,$27			; CB	39
	DB	$46			; ISLT
	DB	$4C,<C0052,>C0052	; BRFLS	C0052
;  100:         PDLPOS = PDLPOS + 1
	DB	$68,<D0096,>D0096	; LAB	D0096
	DB	$2A,$01			; CB	1
	DB	$02			; ADD
	DB	$78,<D0096,>D0096	; SAB	D0096
;  101:       FIN
C0052:
C0053:
;  102:     FIN
C0051:
C0048:
;  103:   ELSE
	DB	$50,<C0046,>C0046	; JUMP	C0046
C0045:
;  104:     PDLPOS = PADDLE(0) / 5
	DB	$00			; ZERO
	DB	$54,<C0039,>C0039	; CALL	C0039
	DB	$2A,$05			; CB	5
	DB	$08			; DIV
	DB	$78,<D0096,>D0096	; SAB	D0096
;  105:   FIN
C0046:
;  106:   IF PDLPOS + PDLSIZE > 39
	DB	$68,<D0096,>D0096	; LAB	D0096
	DB	$68,<D0097,>D0097	; LAB	D0097
	DB	$02			; ADD
	DB	$2A,$27			; CB	39
	DB	$44			; ISGT
	DB	$4C,<C0054,>C0054	; BRFLS	C0054
;  107:     PDLPOS = 39 - PDLSIZE
	DB	$2A,$27			; CB	39
	DB	$68,<D0097,>D0097	; LAB	D0097
	DB	$04			; SUB
	DB	$78,<D0096,>D0096	; SAB	D0096
;  108:   FIN
C0054:
C0055:
;  109:   IF PDLPOS
	DB	$68,<D0096,>D0096	; LAB	D0096
	DB	$4C,<C0056,>C0056	; BRFLS	C0056
;  110:     COLOR(0)
	DB	$00			; ZERO
	DB	$54,<C0031,>C0031	; CALL	C0031
	DB	$30			; DROP
;  111:     HLIN(0, PDLPOS - 1, 39)
	DB	$00			; ZERO
	DB	$68,<D0096,>D0096	; LAB	D0096
	DB	$2A,$01			; CB	1
	DB	$04			; SUB
	DB	$2A,$27			; CB	39
	DB	$54,<C0035,>C0035	; CALL	C0035
	DB	$30			; DROP
;  112:   FIN
C0056:
C0057:
;  113:   COLOR(1)
	DB	$2A,$01			; CB	1
	DB	$54,<C0031,>C0031	; CALL	C0031
	DB	$30			; DROP
;  114:   HLIN(PDLPOS, PDLPOS + PDLSIZE, 39)
	DB	$68,<D0096,>D0096	; LAB	D0096
	DB	$68,<D0096,>D0096	; LAB	D0096
	DB	$68,<D0097,>D0097	; LAB	D0097
	DB	$02			; ADD
	DB	$2A,$27			; CB	39
	DB	$54,<C0035,>C0035	; CALL	C0035
	DB	$30			; DROP
;  115:   IF PDLPOS + PDLSIZE < 38
	DB	$68,<D0096,>D0096	; LAB	D0096
	DB	$68,<D0097,>D0097	; LAB	D0097
	DB	$02			; ADD
	DB	$2A,$26			; CB	38
	DB	$46			; ISLT
	DB	$4C,<C0058,>C0058	; BRFLS	C0058
;  116:     COLOR(0)
	DB	$00			; ZERO
	DB	$54,<C0031,>C0031	; CALL	C0031
	DB	$30			; DROP
;  117:     HLIN(PDLPOS + PDLSIZE + 1, 39, 39)
	DB	$68,<D0096,>D0096	; LAB	D0096
	DB	$68,<D0097,>D0097	; LAB	D0097
	DB	$02			; ADD
	DB	$2A,$01			; CB	1
	DB	$02			; ADD
	DB	$2A,$27			; CB	39
	DB	$2A,$27			; CB	39
	DB	$54,<C0035,>C0035	; CALL	C0035
	DB	$30			; DROP
;  118:   FIN
C0058:
C0059:
;  119: END
	DB	$00			; ZERO
	DB	$5C			; RET
;  120: 
;  121: DEF UPDTBALL
C0060:					; UPDTBALL()
;  122:   BYTE XNEW, YNEW
					; XNEW = 2
					; YNEW = 3
;  123: 
;  124:   ;
;  125:   ; UPDATE HORIZONTAL POSITION
;  126:   ;
;  127:   XBALL = XBALL + XSPEED
	JSR	INTERP
	DB	$58,$04,$00		; ENTER	4,0
	DB	$6A,<D0105,>D0105	; LAW	D0105
	DB	$6A,<D0109,>D0109	; LAW	D0109
	DB	$02			; ADD
	DB	$7A,<D0105,>D0105	; SAW	D0105
;  128:   IF XBALL > 623
	DB	$6A,<D0105,>D0105	; LAW	D0105
	DB	$2C,$6F,$02		; CW	623
	DB	$44			; ISGT
	DB	$4C,<C0062,>C0062	; BRFLS	C0062
;  129:     XBALL  = 623
	DB	$2C,$6F,$02		; CW	623
	DB	$7A,<D0105,>D0105	; SAW	D0105
;  130:     XSPEED = -XSPEED
	DB	$6A,<D0109,>D0109	; LAW	D0109
	DB	$10			; NEG
	DB	$7A,<D0109,>D0109	; SAW	D0109
;  131:     BEEP(4, 10)
	DB	$2A,$04			; CB	4
	DB	$2A,$0A			; CB	10
	DB	$54,<C0009,>C0009	; CALL	C0009
	DB	$30			; DROP
;  132:   ELSIF XBALL < 16
	DB	$50,<C0063,>C0063	; JUMP	C0063
C0062:
	DB	$6A,<D0105,>D0105	; LAW	D0105
	DB	$2A,$10			; CB	16
	DB	$46			; ISLT
	DB	$4C,<C0064,>C0064	; BRFLS	C0064
;  133:     XBALL  = 16
	DB	$2A,$10			; CB	16
	DB	$7A,<D0105,>D0105	; SAW	D0105
;  134:     XSPEED = -XSPEED
	DB	$6A,<D0109,>D0109	; LAW	D0109
	DB	$10			; NEG
	DB	$7A,<D0109,>D0109	; SAW	D0109
;  135:     BEEP(4, 10)
	DB	$2A,$04			; CB	4
	DB	$2A,$0A			; CB	10
	DB	$54,<C0009,>C0009	; CALL	C0009
	DB	$30			; DROP
;  136:   FIN
C0064:
C0063:
;  137:   XNEW  = XBALL >> 4
	DB	$6A,<D0105,>D0105	; LAW	D0105
	DB	$2A,$04			; CB	4
	DB	$1C			; SHR
	DB	$74,$02			; SLB	2
;  138:   ;
;  139:   ; UPDATE VERTICAL POSITION
;  140:   ;
;  141:   YBALL = YBALL + YSPEED
	DB	$6A,<D0107,>D0107	; LAW	D0107
	DB	$6A,<D0111,>D0111	; LAW	D0111
	DB	$02			; ADD
	DB	$7A,<D0107,>D0107	; SAW	D0107
;  142:   IF YBALL > 623
	DB	$6A,<D0107,>D0107	; LAW	D0107
	DB	$2C,$6F,$02		; CW	623
	DB	$44			; ISGT
	DB	$4C,<C0065,>C0065	; BRFLS	C0065
;  143:     ;
;  144:     ; CHECK FOR PADDLE HIT
;  145:     ;
;  146:     IF XNEW >= PDLPOS AND XNEW <= PDLPOS + PDLSIZE
	DB	$64,$02			; LLB	2
	DB	$68,<D0096,>D0096	; LAB	D0096
	DB	$48			; ISGE
	DB	$64,$02			; LLB	2
	DB	$68,<D0096,>D0096	; LAB	D0096
	DB	$68,<D0097,>D0097	; LAB	D0097
	DB	$02			; ADD
	DB	$4A			; ISLE
	DB	$24			; LAND
	DB	$4C,<C0067,>C0067	; BRFLS	C0067
;  147:       YBALL  = 623
	DB	$2C,$6F,$02		; CW	623
	DB	$7A,<D0107,>D0107	; SAW	D0107
;  148:       YSPEED = -YSPEED - 2
	DB	$6A,<D0111,>D0111	; LAW	D0111
	DB	$10			; NEG
	DB	$2A,$02			; CB	2
	DB	$04			; SUB
	DB	$7A,<D0111,>D0111	; SAW	D0111
;  149:       XSPEED = XSPEED + (XNEW - (PDLPOS + PDLMID - 1))
	DB	$6A,<D0109,>D0109	; LAW	D0109
	DB	$64,$02			; LLB	2
	DB	$68,<D0096,>D0096	; LAB	D0096
	DB	$68,<D0098,>D0098	; LAB	D0098
	DB	$02			; ADD
	DB	$2A,$01			; CB	1
	DB	$04			; SUB
	DB	$04			; SUB
	DB	$02			; ADD
	DB	$7A,<D0109,>D0109	; SAW	D0109
;  150:       IF XSPEED == 0
	DB	$6A,<D0109,>D0109	; LAW	D0109
	DB	$00			; ZERO
	DB	$40			; ISEQ
	DB	$4C,<C0069,>C0069	; BRFLS	C0069
;  151:         IF PDLPOS + PDLMID > 19
	DB	$68,<D0096,>D0096	; LAB	D0096
	DB	$68,<D0098,>D0098	; LAB	D0098
	DB	$02			; ADD
	DB	$2A,$13			; CB	19
	DB	$44			; ISGT
	DB	$4C,<C0071,>C0071	; BRFLS	C0071
;  152:           XSPEED = 1
	DB	$2A,$01			; CB	1
	DB	$7A,<D0109,>D0109	; SAW	D0109
;  153:         ELSE
	DB	$50,<C0072,>C0072	; JUMP	C0072
C0071:
;  154:           XSPEED = -1
	DB	$2C,$FF,$FF		; CW	-1
	DB	$7A,<D0109,>D0109	; SAW	D0109
;  155:         FIN
C0072:
;  156:       FIN
C0069:
C0070:
;  157:       INCSCORE
	DB	$54,<C0008,>C0008	; CALL	C0008
	DB	$30			; DROP
;  158:       BEEP(4, 10)
	DB	$2A,$04			; CB	4
	DB	$2A,$0A			; CB	10
	DB	$54,<C0009,>C0009	; CALL	C0009
	DB	$30			; DROP
;  159:     ELSE
	DB	$50,<C0068,>C0068	; JUMP	C0068
C0067:
;  160:       MISS = 1
	DB	$2A,$01			; CB	1
	DB	$78,<D0099,>D0099	; SAB	D0099
;  161:       BEEP(14, 40)
	DB	$2A,$0E			; CB	14
	DB	$2A,$28			; CB	40
	DB	$54,<C0009,>C0009	; CALL	C0009
	DB	$30			; DROP
;  162:     FIN
C0068:
;  163:   ELSIF YBALL < 16
	DB	$50,<C0066,>C0066	; JUMP	C0066
C0065:
	DB	$6A,<D0107,>D0107	; LAW	D0107
	DB	$2A,$10			; CB	16
	DB	$46			; ISLT
	DB	$4C,<C0073,>C0073	; BRFLS	C0073
;  164:     YBALL  = 16
	DB	$2A,$10			; CB	16
	DB	$7A,<D0107,>D0107	; SAW	D0107
;  165:     YSPEED = -YSPEED
	DB	$6A,<D0111,>D0111	; LAW	D0111
	DB	$10			; NEG
	DB	$7A,<D0111,>D0111	; SAW	D0111
;  166:     BEEP(4, 10)
	DB	$2A,$04			; CB	4
	DB	$2A,$0A			; CB	10
	DB	$54,<C0009,>C0009	; CALL	C0009
	DB	$30			; DROP
;  167:   FIN
C0073:
C0066:
;  168:   YNEW = YBALL >> 4
	DB	$6A,<D0107,>D0107	; LAW	D0107
	DB	$2A,$04			; CB	4
	DB	$1C			; SHR
	DB	$74,$03			; SLB	3
;  169:   ;
;  170:   ; UPDATE ON-SCREEN BALL
;  171:   ;
;  172:   IF XNEW <> XSCRN OR YNEW <> YSCRN
	DB	$64,$02			; LLB	2
	DB	$68,<D0100,>D0100	; LAB	D0100
	DB	$42			; ISNE
	DB	$64,$03			; LLB	3
	DB	$68,<D0101,>D0101	; LAB	D0101
	DB	$42			; ISNE
	DB	$22			; LOR
	DB	$4C,<C0074,>C0074	; BRFLS	C0074
;  173:     COLOR(8)
	DB	$2A,$08			; CB	8
	DB	$54,<C0031,>C0031	; CALL	C0031
	DB	$30			; DROP
;  174:     PLOT(XNEW, YNEW)
	DB	$64,$02			; LLB	2
	DB	$64,$03			; LLB	3
	DB	$54,<C0033,>C0033	; CALL	C0033
	DB	$30			; DROP
;  175:     COLOR(0)
	DB	$00			; ZERO
	DB	$54,<C0031,>C0031	; CALL	C0031
	DB	$30			; DROP
;  176:     PLOT(XSCRN, YSCRN)
	DB	$68,<D0100,>D0100	; LAB	D0100
	DB	$68,<D0101,>D0101	; LAB	D0101
	DB	$54,<C0033,>C0033	; CALL	C0033
	DB	$30			; DROP
;  177:     XSCRN = XNEW
	DB	$64,$02			; LLB	2
	DB	$78,<D0100,>D0100	; SAB	D0100
;  178:     YSCRN = YNEW
	DB	$64,$03			; LLB	3
	DB	$78,<D0101,>D0101	; SAB	D0101
;  179:   FIN
C0074:
C0075:
;  180: END
	DB	$00			; ZERO
	DB	$5A			; LEAVE
;  181: 
;  182: DEF PRSCORE
C0076:					; PRSCORE()
;  183:   COUT(SCORE[2])
	JSR	INTERP
	DB	$26,<D0102,>D0102	; LAA	D0102
	DB	$2A,$02			; CB	2
	DB	$2E			; IDXB
	DB	$60			; LB
	DB	$54,<C0004,>C0004	; CALL	C0004
	DB	$30			; DROP
;  184:   COUT(SCORE[1])
	DB	$26,<D0102,>D0102	; LAA	D0102
	DB	$2A,$01			; CB	1
	DB	$2E			; IDXB
	DB	$60			; LB
	DB	$54,<C0004,>C0004	; CALL	C0004
	DB	$30			; DROP
;  185:   COUT(SCORE[0])
	DB	$26,<D0102,>D0102	; LAA	D0102
	DB	$00			; ZERO
	DB	$2E			; IDXB
	DB	$60			; LB
	DB	$54,<C0004,>C0004	; CALL	C0004
	DB	$30			; DROP
;  186: END
	DB	$00			; ZERO
	DB	$5C			; RET
;  187: 
;  188: DEF INCSCORE
C0008:					; INCSCORE()
;  189:   SCORE[0] = SCORE[0] + 1
	JSR	INTERP
	DB	$26,<D0102,>D0102	; LAA	D0102
	DB	$00			; ZERO
	DB	$2E			; IDXB
	DB	$26,<D0102,>D0102	; LAA	D0102
	DB	$00			; ZERO
	DB	$2E			; IDXB
	DB	$60			; LB
	DB	$2A,$01			; CB	1
	DB	$02			; ADD
	DB	$70			; SB
;  190:   IF SCORE[0] > '9'
	DB	$26,<D0102,>D0102	; LAA	D0102
	DB	$00			; ZERO
	DB	$2E			; IDXB
	DB	$60			; LB
	DB	$2A,$39			; CB	57
	DB	$44			; ISGT
	DB	$4C,<C0079,>C0079	; BRFLS	C0079
;  191:     SCORE[0] = '0'
	DB	$26,<D0102,>D0102	; LAA	D0102
	DB	$00			; ZERO
	DB	$2E			; IDXB
	DB	$2A,$30			; CB	48
	DB	$70			; SB
;  192:     SCORE[1] = SCORE[1] + 1
	DB	$26,<D0102,>D0102	; LAA	D0102
	DB	$2A,$01			; CB	1
	DB	$2E			; IDXB
	DB	$26,<D0102,>D0102	; LAA	D0102
	DB	$2A,$01			; CB	1
	DB	$2E			; IDXB
	DB	$60			; LB
	DB	$2A,$01			; CB	1
	DB	$02			; ADD
	DB	$70			; SB
;  193:     IF SCORE[1] > '9'
	DB	$26,<D0102,>D0102	; LAA	D0102
	DB	$2A,$01			; CB	1
	DB	$2E			; IDXB
	DB	$60			; LB
	DB	$2A,$39			; CB	57
	DB	$44			; ISGT
	DB	$4C,<C0081,>C0081	; BRFLS	C0081
;  194:       SCORE[1] = '0'
	DB	$26,<D0102,>D0102	; LAA	D0102
	DB	$2A,$01			; CB	1
	DB	$2E			; IDXB
	DB	$2A,$30			; CB	48
	DB	$70			; SB
;  195:       SCORE[2] = SCORE[2] + 1
	DB	$26,<D0102,>D0102	; LAA	D0102
	DB	$2A,$02			; CB	2
	DB	$2E			; IDXB
	DB	$26,<D0102,>D0102	; LAA	D0102
	DB	$2A,$02			; CB	2
	DB	$2E			; IDXB
	DB	$60			; LB
	DB	$2A,$01			; CB	1
	DB	$02			; ADD
	DB	$70			; SB
;  196:     FIN
C0081:
C0082:
;  197:   FIN
C0079:
C0080:
;  198:   GOTOXY(17, 22)
	DB	$2A,$11			; CB	17
	DB	$2A,$16			; CB	22
	DB	$54,<C0025,>C0025	; CALL	C0025
	DB	$30			; DROP
;  199:   PRSCORE
	DB	$54,<C0076,>C0076	; CALL	C0076
	DB	$30			; DROP
;  200: END
	DB	$00			; ZERO
	DB	$5C			; RET
;  201: 
;  202: DEF INITSCORE
C0083:					; INITSCORE()
;  203:   SCORE[0] = '0'
	JSR	INTERP
	DB	$26,<D0102,>D0102	; LAA	D0102
	DB	$00			; ZERO
	DB	$2E			; IDXB
	DB	$2A,$30			; CB	48
	DB	$70			; SB
;  204:   SCORE[1] = '0'
	DB	$26,<D0102,>D0102	; LAA	D0102
	DB	$2A,$01			; CB	1
	DB	$2E			; IDXB
	DB	$2A,$30			; CB	48
	DB	$70			; SB
;  205:   SCORE[2] = '0'
	DB	$26,<D0102,>D0102	; LAA	D0102
	DB	$2A,$02			; CB	2
	DB	$2E			; IDXB
	DB	$2A,$30			; CB	48
	DB	$70			; SB
;  206:   GOTOXY(17, 22)
	DB	$2A,$11			; CB	17
	DB	$2A,$16			; CB	22
	DB	$54,<C0025,>C0025	; CALL	C0025
	DB	$30			; DROP
;  207:   PRSCORE
	DB	$54,<C0076,>C0076	; CALL	C0076
	DB	$30			; DROP
;  208: END
	DB	$00			; ZERO
	DB	$5C			; RET
;  209: 
;  210: PRSTR(@LEVEL)
START:	JSR	INTERP
	DB	$26,<D0041,>D0041	; LAA	D0041
	DB	$54,<C0006,>C0006	; CALL	C0006
	DB	$30			; DROP
;  211: PDLSIZE = (GETKEY - $B0) * 3
	DB	$54,<C0017,>C0017	; CALL	C0017
	DB	$2A,$B0			; CB	176
	DB	$04			; SUB
	DB	$2A,$03			; CB	3
	DB	$06			; MUL
	DB	$78,<D0097,>D0097	; SAB	D0097
;  212: PDLMID  = PDLSIZE >> 1
	DB	$68,<D0097,>D0097	; LAB	D0097
	DB	$2A,$01			; CB	1
	DB	$1C			; SHR
	DB	$78,<D0098,>D0098	; SAB	D0098
;  213: COUT($8D)
	DB	$2A,$8D			; CB	141
	DB	$54,<C0004,>C0004	; CALL	C0004
	DB	$30			; DROP
;  214: PRSTR(@AUTO)
	DB	$26,<D0063,>D0063	; LAA	D0063
	DB	$54,<C0006,>C0006	; CALL	C0006
	DB	$30			; DROP
;  215: AUTOPLAY = GETKEY == $D9 ; Y
	DB	$54,<C0017,>C0017	; CALL	C0017
	DB	$2A,$D9			; CB	217
	DB	$40			; ISEQ
	DB	$78,<D0095,>D0095	; SAB	D0095
;  216: GRMODE
	DB	$54,<C0029,>C0029	; CALL	C0029
	DB	$30			; DROP
;  217: COLOR(15)
	DB	$2A,$0F			; CB	15
	DB	$54,<C0031,>C0031	; CALL	C0031
	DB	$30			; DROP
;  218: HLIN(0, 39, 0)
	DB	$00			; ZERO
	DB	$2A,$27			; CB	39
	DB	$00			; ZERO
	DB	$54,<C0035,>C0035	; CALL	C0035
	DB	$30			; DROP
;  219: VLIN(1, 38, 0)
	DB	$2A,$01			; CB	1
	DB	$2A,$26			; CB	38
	DB	$00			; ZERO
	DB	$54,<C0037,>C0037	; CALL	C0037
	DB	$30			; DROP
;  220: VLIN(1, 38, 39)
	DB	$2A,$01			; CB	1
	DB	$2A,$26			; CB	38
	DB	$2A,$27			; CB	39
	DB	$54,<C0037,>C0037	; CALL	C0037
	DB	$30			; DROP
;  221: XBALL  = PADDLE(0) + 16
	DB	$00			; ZERO
	DB	$54,<C0039,>C0039	; CALL	C0039
	DB	$2A,$10			; CB	16
	DB	$02			; ADD
	DB	$7A,<D0105,>D0105	; SAW	D0105
;  222: YBALL  = PADDLE(1) + 16
	DB	$2A,$01			; CB	1
	DB	$54,<C0039,>C0039	; CALL	C0039
	DB	$2A,$10			; CB	16
	DB	$02			; ADD
	DB	$7A,<D0107,>D0107	; SAW	D0107
;  223: XSCRN  = XBALL >> 4
	DB	$6A,<D0105,>D0105	; LAW	D0105
	DB	$2A,$04			; CB	4
	DB	$1C			; SHR
	DB	$78,<D0100,>D0100	; SAB	D0100
;  224: YSCRN  = YBALL >> 4
	DB	$6A,<D0107,>D0107	; LAW	D0107
	DB	$2A,$04			; CB	4
	DB	$1C			; SHR
	DB	$78,<D0101,>D0101	; SAB	D0101
;  225: XSPEED = 1
	DB	$2A,$01			; CB	1
	DB	$7A,<D0109,>D0109	; SAW	D0109
;  226: YSPEED = 1
	DB	$2A,$01			; CB	1
	DB	$7A,<D0111,>D0111	; SAW	D0111
;  227: MISS   = 0
	DB	$00			; ZERO
	DB	$78,<D0099,>D0099	; SAB	D0099
;  228: INITSCORE
	DB	$54,<C0083,>C0083	; CALL	C0083
	DB	$30			; DROP
;  229: REPEAT
C0086:
;  230:   UPDTPDL
	DB	$54,<C0043,>C0043	; CALL	C0043
	DB	$30			; DROP
;  231:   UPDTBALL
	DB	$54,<C0060,>C0060	; CALL	C0060
	DB	$30			; DROP
;  232: UNTIL KEYPRESSED OR MISS
	DB	$54,<C0015,>C0015	; CALL	C0015
	DB	$68,<D0099,>D0099	; LAB	D0099
	DB	$22			; LOR
	DB	$4C,<C0086,>C0086	; BRFLS	C0086
C0085:
;  233: TEXTMODE
	DB	$54,<C0021,>C0021	; CALL	C0021
	DB	$30			; DROP
;  234: HOME
	DB	$54,<C0023,>C0023	; CALL	C0023
	DB	$30			; DROP
;  235: PRSTR(@YOURSCORE)
	DB	$26,<D0079,>D0079	; LAA	D0079
	DB	$54,<C0006,>C0006	; CALL	C0006
	DB	$30			; DROP
;  236: PRSCORE
	DB	$54,<C0076,>C0076	; CALL	C0076
	DB	$30			; DROP
;  237: COUT($0D)
	DB	$2A,$0D			; CB	13
	DB	$54,<C0004,>C0004	; CALL	C0004
	DB	$30			; DROP
;  238: PRSTR(@GOODBYE)
	DB	$26,<D0023,>D0023	; LAA	D0023
	DB	$54,<C0006,>C0006	; CALL	C0006
	DB	$30			; DROP
;  239: DONE
	DB	$00			; ZERO
	DB	$5E			; EXIT
